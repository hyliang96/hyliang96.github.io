<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>检索指标</title>
    <url>/posts/3a096ee1/</url>
    <content><![CDATA[<p><a href="https://yifdu.github.io/2018/12/06/%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AF%84%E4%BB%B7%E6%A0%87%E7%AD%BEMAP/">参见</a></p>
]]></content>
      <categories>
        <category>术</category>
      </categories>
  </entry>
  <entry>
    <title>c++入门笔记</title>
    <url>/posts/dcbe2c52/</url>
    <content><![CDATA[<h2 id="批注教程"><a class="header-anchor" href="#批注教程"></a>批注<a href="http://c.biancheng.net/cpp/biancheng/cpp/rumen/">教程</a></h2>
<h3 id="1-4-C-命名空间（名字空间）"><a class="header-anchor" href="#1-4-C-命名空间（名字空间）"></a>1.4 C++ 命名空间（名字空间）</h3>
<ul>
<li>
<p>在<code>namespace XX&#123;xxxx&#125;</code>外定义的命名，遵循C语言的命名规范。</p>
<p>重名时优先级别：内部变量&gt;外部变量&gt;用using设置默认的变量&gt;XX::xxx</p>
</li>
<li>
<p>一个cpp文件中<code>using</code>只能写一次；可以写在函数内部，也可以写在函数外部；不可再函数外写了一次，又在函数内再写。</p>
</li>
</ul>
<h3 id="1-5-C-标准库和std-命名空间"><a class="header-anchor" href="#1-5-C-标准库和std-命名空间"></a>1.5 C++ 标准库和std 命名空间</h3>
<p>所有d的库<code>库名.h</code>在C++中写作<code>c库名</code>，前者不在std中，后者在。二库略异。</p>
<p>必须在std下用的：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cin cout
string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="1-7-C-新增数据类型"><a class="header-anchor" href="#1-7-C-新增数据类型"></a>1.7 C++ 新增数据类型</h3>
<p>bool型变量只能取0或1，</p>
<ul>
<li>它参与运算时与int性质相同</li>
<li>对它赋值时,非0值全部转换为1,0转换为0</li>
<li>非bool值不会自动转换成bool值，需要用强制转换标记，转化原则同b.</li>
</ul>
<p>如</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span>“<span class="token operator">%</span>d”<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出的是2</span>
b<span class="token operator">=</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//a+1算出来是2，b赋值为1</span>
a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//可以给bool值赋值0、1、false、true</span>
<span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>
a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span>c<span class="token punctuation">;</span><span class="token comment">//a被赋值成1</span>
<span class="token function">printf</span><span class="token punctuation">(</span>“<span class="token operator">%</span>d”<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出的是1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="1-8-C-new-和delete操作符"><a class="header-anchor" href="#1-8-C-new-和delete操作符"></a>1.8 C++ <code>new</code> 和<code>delete</code>操作符</h3>
<h4 id="new-型"><a class="header-anchor" href="#new-型"></a><code>new 型;</code></h4>
<h5 id="创建"><a class="header-anchor" href="#创建"></a>创建</h5>
<p>以下各行所有写法等效</p>
<p><code>【...】</code>可以不写，表示初始化</p>
<ul>
<li>C++:</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">型 <span class="token operator">*</span>针<span class="token operator">=</span><span class="token keyword">new</span> 型【<span class="token punctuation">(</span>值<span class="token punctuation">)</span>】<span class="token punctuation">;</span>  <span class="token comment">//new的返回地址会自动转换成(型*)</span>
<span class="token comment">// &lt;=></span>
型 <span class="token operator">&amp;</span>名<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">new</span> 型<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>针<span class="token operator">=</span><span class="token operator">&amp;</span>名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>C:</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">型 <span class="token operator">*</span>针<span class="token operator">=</span><span class="token punctuation">(</span>型<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>型<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>【<span class="token operator">*</span>名<span class="token operator">=</span>值；】 <span class="token comment">//new的返回地址是void*，不会自动转换成(型*)</span>
<span class="token comment">// &lt;=></span>
型 <span class="token operator">&amp;</span>名<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span>型<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>型<span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span>针<span class="token operator">=</span><span class="token operator">&amp;</span>名<span class="token punctuation">;</span>
<span class="token comment">// &lt;=></span>
型 名【<span class="token operator">=</span>值】<span class="token punctuation">;</span> 型 <span class="token operator">*</span>针<span class="token punctuation">;</span> 针<span class="token operator">=</span><span class="token operator">&amp;</span>名<span class="token punctuation">;</span>
<span class="token comment">// &lt;=></span>
型 名【<span class="token operator">=</span>值】<span class="token punctuation">;</span> 型 <span class="token operator">*</span>针<span class="token operator">=</span><span class="token operator">&amp;</span>名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="释放"><a class="header-anchor" href="#释放"></a>释放</h5>
<p>以下各行所有写法等效</p>
<ul>
<li>
<h5 id="C"><a class="header-anchor" href="#C"></a>C++</h5>
</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">delete</span> 针<span class="token punctuation">;</span>
<span class="token comment">// &lt;=></span>
<span class="token keyword">delete</span> <span class="token operator">&amp;</span>名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>C</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// &lt;=></span>
<span class="token function">free</span><span class="token punctuation">(</span>针<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &lt;=></span>
<span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>针<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="new-型-n"><a class="header-anchor" href="#new-型-n"></a><code>new 型[n];</code></h4>
<h5 id="创建-_2"><a class="header-anchor" href="#创建-_2"></a>创建</h5>
<p>以下各行所有写法等效</p>
<ul>
<li>C++</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">型 <span class="token operator">*</span>针<span class="token operator">=</span><span class="token keyword">new</span> 型<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// &lt;=></span>
型 <span class="token operator">&amp;</span>名<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">new</span> 型<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>针<span class="token operator">=</span><span class="token operator">&amp;</span>名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>C:</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// &lt;=></span>
型 针<span class="token operator">=</span><span class="token punctuation">(</span>型<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>型<span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &lt;=></span>
型 <span class="token operator">&amp;</span>名<span class="token operator">=</span><span class="token punctuation">(</span>型<span class="token punctuation">)</span> <span class="token function">malloc</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>型<span class="token punctuation">)</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>针<span class="token operator">=</span><span class="token operator">&amp;</span>名<span class="token punctuation">;</span>
<span class="token comment">// &lt;=></span>
型 名<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> 型 <span class="token operator">*</span>针<span class="token punctuation">;</span> 针<span class="token operator">=</span><span class="token operator">&amp;</span>名<span class="token punctuation">;</span>
<span class="token comment">// &lt;=></span>
型 名<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> 型 <span class="token operator">*</span>针<span class="token operator">=</span><span class="token operator">&amp;</span>名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="释放-_2"><a class="header-anchor" href="#释放-_2"></a>释放</h5>
<p>以下各行所有写法等效</p>
<ul>
<li>C++：</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> 针<span class="token punctuation">;</span>
<span class="token comment">// &lt;=></span>
<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>名<span class="token punctuation">;</span>
<span class="token comment">// `delete 针;` 只释放了(针)，没释放(针+1)，(针+2)…,(针+n-1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>C：</li>
</ul>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// &lt;=></span>
<span class="token function">free</span><span class="token punctuation">(</span>针<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &lt;=></span>
<span class="token function">free</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>针<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//皆释放了 针,(针+1),(针+2),…, (针+n-1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>释放内存，即<code>free</code>、<code>delete</code>、<code>delete[]</code>，只能告诉操作系统哪些指针所指的存储空间已经闲置，可做别用；但不能废除这个针，针的存储值没变，*针还是可以访问原来所指的位置，因此为了避免后面出bug，在释放内存后，宜</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">针<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//或</span>
针<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="与realloc比较"><a class="header-anchor" href="#与realloc比较"></a>与<code>realloc</code>比较</h4>
<p><code>new/delete</code>系列里没有与<code>realloc</code>同功能的函数</p>
<h3 id="1-9-C-函数的默认参数"><a class="header-anchor" href="#1-9-C-函数的默认参数"></a>1.9 C++ 函数的默认参数</h3>
<ul>
<li>
<p>不可以用”,”表示参数默认，如</p>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">*</span>b<span class="token operator">*</span>c<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//或f(1,default,1);				//这样是错的</span>
    retun <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>仅当所用参数的签名不同时，才不能重载，如：</p>
<p><code>int f(int a,int b=1)</code>与<code>void f(int a,int b)</code>不可重载</p>
</li>
<li>
<p>当非默认参数的签名（型的序列）不同，全部参数签名不同时，可以重载，但不可缺省默认参数调用，如：</p>
<p><code>int f(int a,int b=1)</code>与<code>int f(int a,double b=1)</code>可重载，但不可用<code>f(1)</code>调用；</p>
<p><code>int f(int a,int b=1)</code>与<code>int f(int a)</code> 重载，不可用<code>f(1)</code>调用；</p>
<p><code>int f(int a,int b=1)与int f(int a,double b) </code>重载，可用<code>f(1)</code>调用；</p>
<p><code>int f(int a,int b=1)与int f(double a,int b=1)</code> 重载，不可用<code>f(1)</code>调用;</p>
</li>
<li>
<p>若要让函数声明后，函数定义前，能够调用默认参数，则应在声明处设置默认默认参数，而定义处不得再次声明。一般为避免混淆，宜一律在函数声明（如头文件中）设置默认参数，函数定义时不设置默认参数。</p>
</li>
</ul>
<h3 id="2-6-C-构造函数"><a class="header-anchor" href="#2-6-C-构造函数"></a>2.6 C++ 构造函数</h3>
<ul>
<li>
<p>构造函数与析构函数如</p>
<p>是public             ：在任何处 可以定义或销毁该类的对象</p>
<p>是protected       ：在子类内 可以定义或销毁该类的对象</p>
<p>是private           ：在该类内 可以定义或销毁该类的对象</p>
<p><a href="http://www.cnblogs.com/this-543273659/archive/2011/08/02/2125487.html">详见</a></p>
</li>
<li>
<p>复制构造函数</p>
<ul>
<li>
<p>自己不写<code>类(const 类 &amp;that)</code>形式的构造函数&lt;=&gt;编译器会默认重载一个起到位拷贝（即浅拷贝）的构造函数，即</p>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">类<span class="token double-colon punctuation">::</span>类<span class="token punctuation">(</span><span class="token keyword">const</span> 类 <span class="token operator">&amp;</span>that<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>变量<span class="token number">1</span><span class="token operator">=</span>that<span class="token punctuation">.</span>变量<span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>变量<span class="token number">2</span><span class="token operator">=</span>that<span class="token punctuation">.</span>变量<span class="token number">2</span><span class="token punctuation">;</span>
    …
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>故若有变量是指针，拷贝完后，新对象与旧对象的该变量指向同一个地址，因此两个对象相互不独立。如果要深拷贝，则需自己写深拷贝的拷贝函数：</p>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">类<span class="token double-colon punctuation">::</span>类<span class="token punctuation">(</span><span class="token keyword">const</span> 类 <span class="token operator">&amp;</span>that<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>变量<span class="token number">1</span><span class="token operator">=</span>that<span class="token punctuation">.</span>变量<span class="token number">1</span><span class="token punctuation">;</span>			<span class="token comment">//变量1不是指针</span>
    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>变量<span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>变量<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//变量2是指针</span>
    …
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>空构造函数：自己不写构造函数(可以有任何变量签名，包括自己写的复制构造函数)ó编译器会生成一个空构造函数</p>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">类<span class="token double-colon punctuation">::</span>类<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="2-10-C-this-指针详解"><a class="header-anchor" href="#2-10-C-this-指针详解"></a>2.10 C++ <code>this</code> 指针详解</h3>
<p>在调用一个对象的成员函数时，开辟<code>this</code>指向该对象，成员函数结束后，销毁<code>this</code>。故：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> 类
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        cout<span class="token operator">&lt;&lt;</span><span class="token keyword">this</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
类 对象<span class="token number">1</span><span class="token punctuation">;</span>
类 对象<span class="token number">2</span><span class="token punctuation">;</span>		<span class="token comment">//此时未调用对象2的函数，故没有this</span>
对象<span class="token number">1.f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//输出的是对象1,而非2的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-11-C-static静态成员变量和静态成员函数"><a class="header-anchor" href="#2-11-C-static静态成员变量和静态成员函数"></a>2.11 C++ <code>static</code>静态成员变量和静态成员函数</h3>
<p>网站教材勘误：</p>
<h4 id="初始化"><a class="header-anchor" href="#初始化"></a>初始化</h4>
<ul>
<li>
<p><code>static </code>变量只能在函数外,以如下格式申明后，后面的行才能使用：</p>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">)</span> 型 类<span class="token double-colon punctuation">::</span>变量（<span class="token operator">=</span>初值）<span class="token punctuation">;</span><span class="token comment">//不写初值则默认初值为0，即static的通性</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>故建议在类定义完后，紧接着写申明。</p>
</li>
<li>
<p>在函数外，只能初始化，不能访问（因为C/C++中，在函数外，不能执行命令，赋值是命令，定义变量、申明、初始化不是）），即不可以在函数外：</p>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">)</span> 型 类<span class="token double-colon punctuation">::</span>变量<span class="token punctuation">;</span><span class="token comment">//初值为0</span>
型 类<span class="token double-colon punctuation">::</span>变量<span class="token operator">=</span>值<span class="token punctuation">;</span><span class="token comment">//这里出错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>static 成员变量的内存空间既不是在声明类时分配，也不是在创建对象时分配，而是在初始化时分配。static  成员变量与对象无关，不占用对象的内存，而是在所有对象之外开辟内存，即使不创建对象也可以在可访处访问。</p>
</li>
</ul>
<h4 id="访问"><a class="header-anchor" href="#访问"></a>访问</h4>
<p>static变量是public可以任处在里访问，private只能在类里访问，protected只能在子类里访问。</p>
<p>初始化后才能访问（包括写入或读取，如赋值、输出、拷贝），包括以下两种格式：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">类<span class="token double-colon punctuation">::</span>变量
对象<span class="token double-colon punctuation">::</span>变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="2-12-C-类-和new-、delete-操作符"><a class="header-anchor" href="#2-12-C-类-和new-、delete-操作符"></a>2.12 C++ 类 和<code>new</code> 、<code>delete </code>操作符</h3>
<p>能调用构造函数：<code>new</code>，<code>类 对象;</code></p>
<p>能调用析构函数：<code>delete</code>，<code>delete[]</code></p>
<p>不能调用构造函数：<code>malloc</code>、<code>类 *针;</code></p>
<p>不能调用析构函数：<code>free</code></p>
<h3 id="2-13-C-友元函数和友元类"><a class="header-anchor" href="#2-13-C-友元函数和友元类"></a>2.13 C++ 友元函数和友元类</h3>
<ul>
<li>
<p>友元函数的申明可以写在类体力的任意位置，<code>public</code>、<code>protected</code>、<code>private</code>下均可，一般写在类体的开头</p>
</li>
<li>
<p>友元函数的申明friend不可省略，不然会被认为是成员函数</p>
</li>
<li>
<p>友元函数的自变量建议用引用，以节省复制对象的时间。即：</p>
<ul>
<li>
<p>需要更改对象成员变量时用<code>类 &amp;</code></p>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">friend</span> 型 函数<span class="token punctuation">(</span>类 <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//申明</span>
型 函数<span class="token punctuation">(</span>类 <span class="token operator">&amp;</span>引用名<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>…<span class="token punctuation">&#125;</span>	<span class="token comment">//定义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>不需要更改对象成员变量时用“const 类 &amp;”，以保护被引用对象不被破坏</p>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">friend</span> 型 函数<span class="token punctuation">(</span><span class="token keyword">const</span> 类 <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//申明</span>
型 函数<span class="token punctuation">(</span><span class="token keyword">const</span> 类 <span class="token operator">&amp;</span>引用名<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>…<span class="token punctuation">&#125;</span>	<span class="token comment">//定义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="2-15-类class-和结构体struct-的区别"><a class="header-anchor" href="#2-15-类class-和结构体struct-的区别"></a>2.15 类class 和结构体struct 的区别</h3>
<p>sturct</p>
<ul>
<li>C:     没有private/protected/public, 没有成员函数, 友元，析构/构造</li>
<li>C++: 与class完全相同，仅一个区别：struct默认是public, class默认是private</li>
</ul>
<h3 id="3-2-C-继承权限和继承方式"><a class="header-anchor" href="#3-2-C-继承权限和继承方式"></a>3.2 C++ 继承权限和继承方式</h3>
<p>改变成员函数的访问属性，格式为:</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">using</span> 基类<span class="token double-colon punctuation">::</span>成员函数名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="3-5-派生类的构造函数"><a class="header-anchor" href="#3-5-派生类的构造函数"></a>3.5 派生类的构造函数</h3>
<p>如在派生类的构造函数中，未调用基类的构造函数，则会自动调用基类中不带参数的构造函数，即</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">基类<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>…<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>若又在基类中没有自己写的构造函数，则会调用自动补全的空构造函数，即</li>
</ul>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">基类<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>若又在基类中有自己写的构造函数，则不会自动补齐的空构造函数。若还又基类中自己没有写不带参数的构造函数，则派生类无法调用基类构造函数，故无法构造派生类对象，因此编译不通过。</li>
</ul>
<h3 id="3-10-C-基类和派生类的赋值"><a class="header-anchor" href="#3-10-C-基类和派生类的赋值"></a>3.10 C++ 基类和派生类的赋值</h3>
<p>对象赋值和指针赋值，派生类可以赋给基类，反之不可。</p>
<h3 id="4-1-C-多态的概念及前提条件"><a class="header-anchor" href="#4-1-C-多态的概念及前提条件"></a>4.1 C++多态的概念及前提条件</h3>
<ul>
<li>
<p>指针调用哪个类的函数，与指针访问哪个类的数据，这两个类不必相同，辨别方法如下：</p>
<ul>
<li>
<p>函数之类(除了虚函数，它与数据之类相同)：</p>
<p>定义指针：<code>函数之类 *针;</code></p>
<p>强制转换：<code>(函数之类 *)针-&gt;函数之类的成员函数;</code>  针定义时的类型可以是void *、函数之类、函数之类的父类或子类；不必与数据的类匹配，如果函数之类要访问数据之类没有的成员数据（如数据之类是函数之类的祖先类，而函数要访问函数之类新加的数据），仍然不会报错，而是会按照函数之类的数据存储方式去读取数据，这很不安全。</p>
</li>
<li>
<p>数据之类：</p>
<p>初始化：<code>函数之类 *针=new 数据的类;</code></p>
<p>赋值：<code>针=对象;</code> 对象的类是定义针的类及其子孙类；数据之类变为对象的类</p>
</li>
</ul>
</li>
<li>
<p>虚函数的<code>virtual</code>只可在类体内（的声明或者定义）写，不可写在类体外的（如函数定义）前</p>
</li>
<li>
<p>只需在基类(父类)中的被覆盖的函数前写“virtual”，在子孙类(派生类、派生类的派生类……)的覆盖函数前可不写，可以实现:</p>
<p>成员函数为父类或子孙类，成员数据为函数之类的子孙类，用调用虚函数，调用的是数据之类的，如：</p>
<p>定义：</p>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"A"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"B"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">C</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span></span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span><span class="token string">"C"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后：</p>
<ul>
<li>
<p>​</p>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">A <span class="token operator">*</span>p<span class="token operator">=</span><span class="token keyword">new</span> A<span class="token punctuation">;</span>
p<span class="token operator">=</span><span class="token keyword">new</span> B<span class="token punctuation">;</span>
p<span class="token operator">-></span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//输出‘B’</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li></li>
</ul>
<pre><code>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">B <span class="token operator">*</span>p<span class="token operator">=</span><span class="token keyword">new</span> B<span class="token punctuation">;</span>
P<span class="token operator">=</span><span class="token keyword">new</span> C<span class="token punctuation">;</span>
p<span class="token operator">-></span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//输出‘C’</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</code></pre>
</li>
</ul>
<h3 id="C-C-中的字符串"><a class="header-anchor" href="#C-C-中的字符串"></a>C/C++ 中的字符串</h3>
<ul>
<li>
<p>现在的C/C++可以</p>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>string<span class="token operator">=</span><span class="token string">"哈哈哈哈"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>string<span class="token punctuation">;</span>
string<span class="token operator">=</span><span class="token string">"哈哈哈"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>string<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">;</span>
string<span class="token operator">=</span><span class="token string">"哈哈哈"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>string<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">(</span>‘s’<span class="token punctuation">)</span><span class="token punctuation">;</span>
string<span class="token operator">=</span><span class="token string">"哈哈哈"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>string<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
string<span class="token operator">=</span><span class="token string">"哈哈哈"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>以上五者对应的计算机的操作相同：在<code>const char *string</code>，时开辟内存存储指针<code>string</code>，在赋值<code>*string=&quot;哈哈哈&quot;</code>时，另开辟内存存储该字符串，并让<code>string</code>指向该字符串的首字符。在赋值代码中<code>&quot;哈哈哈&quot;是</code>const char *`</p>
<p>以上三者的<code>const</code>均不能省去，古老的C语言编译器才能如此，现在的编译器会报错：<code>“warning: conversion from string literal to 'char *' is deprecated”。</code></p>
<p><code>const</code>表示一旦赋值后，不得更改<code>string</code>所指的字符串的字符，可以更改<code>string</code>指向新的字符串。</p>
</li>
<li>
<p>可以在定义字符串数组时赋值</p>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"哈哈哈"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> string<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token string">"哈哈哈"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>不可以</p>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//因为机器不知道开辟多大的连续内存给数组string</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> string<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//开辟一连片10个char长度的内存，但未经初始化；指针string指向这片内存的首字符。</span>
string<span class="token operator">=</span><span class="token string">"哈哈哈"</span><span class="token punctuation">;</span><span class="token comment">//这句出错，因为：[数组名] 是一种特殊的指针，在定义它时的指向所定义的数组，之后[不能更改其所指]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>在</p>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>后，可以使用<code>string</code>型的变量，它是<code>char *</code>型的变量，可以如下操作：</p>
<ul>
<li>
<p>定义：</p>
<ul>
<li>可</li>
</ul>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string 串<span class="token punctuation">;</span>
<span class="token comment">//定义时开辟一个空间给串，串未初始化，此时输出string的结果是没有字符</span>
串<span class="token operator">=</span><span class="token string">"哈哈哈"</span><span class="token punctuation">;</span>
<span class="token comment">//若串后方的可用空间够，则从串+1开始储   存字符串，string首存地址&amp;串[0]；若串后方的可用空间不够，则另寻找够的地方存字符串，string首存&amp;串[0]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>可</li>
</ul>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string 串<span class="token operator">=</span><span class="token string">"哈哈哈"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>可以用<code>串[n]</code>表示串的第n个字符，可修改，故串不是<code>const char *</code>，如：</li>
</ul>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">串<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>输出:</p>
<p>输出字符串成员:</p>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>串<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span>串<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>输出整个字符串：直接输出整个字符串，见’\0’结束:</p>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cout<span class="token operator">&lt;&lt;</span>串<span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span><span class="token operator">&amp;</span>串<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>串<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>从中间开始输出字符串：</p>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">%</span>s"<span class="token punctuation">,</span><span class="token operator">&amp;</span>串<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout<span class="token operator">&lt;&lt;</span><span class="token operator">&amp;</span>串<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>输出地址：</p>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p"</span><span class="token punctuation">,</span>串<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p"</span><span class="token punctuation">,</span>串<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>输入</p>
<ul>
<li>法一</li>
</ul>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cin<span class="token operator">>></span>串<span class="token punctuation">;</span>
<span class="token comment">//或</span>
fstream 文件<span class="token punctuation">;</span><span class="token comment">//ifstream亦可，均要#include&lt;fstream></span>
…<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>文件&lt;&lt;串;//从第一个非空格开始接受，见空格结束，残余的键入字符在键盘缓冲中</p>
<ul>
<li>法二</li>
</ul>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>串<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//或</span>
fstream 文件<span class="token punctuation">;</span> <span class="token comment">//ifstream亦可，均要#include&lt;fstream></span>
…
<span class="token function">getline</span><span class="token punctuation">(</span>文件<span class="token punctuation">,</span>串<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从键盘缓冲第一个字符开始接受，到’\n’</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li>
<p><code>string</code>、<code>const char* </code>变量可以整体拷贝，仅有一下方法拷贝：</p>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string a<span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token string">"asda"</span><span class="token punctuation">;</span>b<span class="token operator">=</span>a<span class="token punctuation">;</span>
string a<span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token string">"asda"</span><span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token operator">*</span>b<span class="token operator">=</span><span class="token string">"asda"</span><span class="token punctuation">;</span>b<span class="token operator">=</span>a<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>string b<span class="token operator">=</span><span class="token string">"asda"</span><span class="token punctuation">;</span>b<span class="token operator">=</span>a<span class="token punctuation">;</span>
string a<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>b<span class="token operator">=</span><span class="token string">"asda"</span><span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>拷贝的原理：从字符串b的第一个字到第一个‘\0’(含)赋值，然后存到a存储区，故a，b的字符串是分开储存的。</p>
</li>
<li>
<p>在用“XXXX”进行初始化和赋值时，可以写成</p>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">串<span class="token operator">=</span>
<span class="token string">"aaa"</span>
<span class="token string">"bbbb"</span>
<span class="token string">"cccc"</span><span class="token punctuation">;</span>
<span class="token comment">// &lt;=></span>
串<span class="token operator">=</span>
<span class="token string">"aaabbbbcccc"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="5-宏定义"><a class="header-anchor" href="#5-宏定义"></a>5 宏定义</h3>
<p>用公式进行宏定义，一下位置要加<code>()</code>:</p>
<ul>
<li>
<p>需要表达式最外围用<code>()</code></p>
<p>不然调用时，直接文本替换就没有括号，如</p>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">A</span> <span class="token expression"><span class="token number">100</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">B</span> <span class="token expression">A<span class="token operator">+</span><span class="token number">2</span></span><span class="token comment">//没括号</span></span>
…
<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token operator">*</span>B<span class="token punctuation">;</span><span class="token comment">//替换为5*A+2，而不是5*(A+2)</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">A</span> <span class="token expression"><span class="token number">100</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">B</span> <span class="token expression"><span class="token punctuation">(</span>A<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span></span><span class="token comment">//加括号</span></span>
…
<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token operator">*</span>B<span class="token punctuation">;</span><span class="token comment">//替换为5*(A+2)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>所有做乘除法的宏量要加<code>()</code>。</p>
<p>正确写法例如：</p>
  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">A</span> <span class="token expression"><span class="token number">10000</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">B</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">12</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">C</span> <span class="token expression"><span class="token punctuation">(</span>A<span class="token operator">+</span>B<span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="6-const-的结合性质"><a class="header-anchor" href="#6-const-的结合性质"></a>6 const 的结合性质</h3>
<p>仅当const在开头时可以右结合，在其余位置皆是左结合</p>
<ul>
<li>
<p>常型：<code>const char</code> &lt;=&gt; <code>char const</code></p>
</li>
<li>
<p>常型之针：<code>const char* </code>&lt;=&gt; <code> (const char)*</code>&lt;=&gt; <code>(char const)*</code>&lt;=&gt;<code>char const *</code></p>
</li>
<li>
<p>型之常针：<code>char * const </code>（不可对<code>*</code>加<code>()</code>，故没有<code>char (*const )</code> ）</p>
</li>
<li>
<p>常型之常针：常型之针后加<code>const</code></p>
</li>
<li>
<p>常函数：<code>型 f(型 变量)const</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>器</category>
        <category>c与cpp</category>
      </categories>
  </entry>
  <entry>
    <title>make编译</title>
    <url>/posts/97bf5f45/</url>
    <content><![CDATA[<h2 id="编译器介绍"><a class="header-anchor" href="#编译器介绍"></a>编译器介绍</h2>
<p>编译器介绍：</p>
<ul>
<li>
<p>cc: Unix系统的C Compiler，老式C编译器；linux下cc即gcc</p>
</li>
<li>
<p>gcc：只编译不链接</p>
</li>
<li>
<p>gcc -lstdc++：编译也链接</p>
</li>
<li>
<p>g++: 编译调用gcc，链接用g++</p>
</li>
</ul>
<p>综上：</p>
<ul>
<li>单文件用g++，gcc -lstdc++，gcc，cc</li>
<li>多文件用g++，gcc -lstdc++</li>
</ul>
<h2 id="编译流程"><a class="header-anchor" href="#编译流程"></a>编译流程</h2>
<pre class="line-numbers language-none"><code class="language-none">|----  -c   编译  ----|--------------  -o  链接  --------------|
.cpp   ----- 自动命名.o .so --  手动命名.o .so -- 可执行文件（如.exe）
.h     --&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>注：</p>
<ul>
<li>
<p>上文<code>.cpp</code>皆也可是<code>.c</code></p>
</li>
<li>
<p>自动命名规则：<code>xxx.cpp</code>生成<code>xxx.o</code></p>
</li>
</ul>
<h2 id="make-命令行"><a class="header-anchor" href="#make-命令行"></a>make 命令行</h2>
<h3 id="凡例"><a class="header-anchor" href="#凡例"></a>凡例</h3>
<ul>
<li>下文<code>g++</code>可换为<code>gcc -lstdc++</code></li>
<li>格式可以是，二者等效（下只写前者）:
<ul>
<li><code>g++ 父文件 -参数 生成文件</code>	//理解成用g++从父文件经过-o/-c生成生成文件</li>
<li><code>g++ -参数 生成文件 父文件</code></li>
</ul>
</li>
</ul>
<h3 id="法一-直接生成可执行文件，不残留中间文件"><a class="header-anchor" href="#法一-直接生成可执行文件，不残留中间文件"></a>法一. 直接生成可执行文件，不残留中间文件</h3>
<pre class="line-numbers language-none"><code class="language-none">g++ 所有.cpp ([-c执行参数]) -o 可执行文件 ([-c与-o共同的执行参数])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>[-c执行参数] 如：<br>
<code>-std=c++11</code></li>
<li>[-c与-o共同的执行参数] 如：<br>
<code>-std=c++11 </code> (建议：如果用c<ins>11，则设置<code>-c</code>与<code>-o</code>共同的执行参数-std=c</ins>11)</li>
</ul>
<h3 id="法二-分步，残留中间文件"><a class="header-anchor" href="#法二-分步，残留中间文件"></a>法二. 分步，残留中间文件</h3>
<ul>
<li>
<p>编译：从源代码生成之间文件</p>
<p>自动命名</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ 单个或多个.cpp -c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>手动命名</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ 一个.cpp -c -o 命名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>链接：从中间文件得到可执行文件</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ 所有.o -o 可执行文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<h2 id="makefile"><a class="header-anchor" href="#makefile"></a>makefile</h2>
<h3 id="凡例-_2"><a class="header-anchor" href="#凡例-_2"></a>凡例</h3>
<ul>
<li>
<p>在工程文件夹根目录创建<code>makefile</code>文件，其内容写法见下文</p>
</li>
<li>
<p>在<code>makefile</code>所在目录执行<code>make</code>，即编译</p>
</li>
<li>
<p>文件名必需命名为<code>makefile</code>，不可命名为<code>Makefile</code></p>
</li>
<li>
<p><code>makefile</code>文件内缩进必需用tab，不可用若干个空格，不然无法进行编译</p>
</li>
</ul>
<h3 id="法一-直接生成可执行文件，不残留中间文件-_2"><a class="header-anchor" href="#法一-直接生成可执行文件，不残留中间文件-_2"></a>法一. 直接生成可执行文件，不残留中间文件</h3>
<p><code>makefile</code>内容</p>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">CPP<span class="token operator">=</span>[所有.cpp文件]
H<span class="token operator">=</span>[所有.h文件]
EXE<span class="token operator">=</span>[可执行文件名]

<span class="token symbol"><span class="token variable">$</span>(EXE)</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>CPP<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>H<span class="token punctuation">)</span>
    g++ -o <span class="token variable">$</span><span class="token punctuation">(</span>EXE<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CPP<span class="token punctuation">)</span> [其他参数]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>其他参数</code>包括：</p>
<table>
<thead>
<tr>
<th>头文件</th>
<th>编译参数</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;pthread.h&gt;</code></td>
<td><code>-lpthread</code></td>
</tr>
<tr>
<td>调opencv2的包，如<code>&lt;opencv2/core/core.hpp&gt;</code> <code>&lt;opencv2/highgui/highgui.hpp&gt;</code> <code>&lt;opencv2/imgproc/imgproc.hpp&gt;</code></td>
<td><code>pkg-config --cflags --libs opencv</code></td>
</tr>
<tr>
<td>任何c++11的特性，如<code>&lt;thread.h&gt;</code></td>
<td><code>-std=c++11</code></td>
</tr>
<tr>
<td>任何c11的特性</td>
<td><code>-std=c11</code></td>
</tr>
</tbody>
</table>
<p>在<code>makefile</code>所在目录执行<code>make</code>，即直接生成可执行文件，不残留中间文件</p>
<h3 id="法二-分步，残留中间文件-_2"><a class="header-anchor" href="#法二-分步，残留中间文件-_2"></a>法二. 分步，残留中间文件</h3>
<pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">O<span class="token operator">=</span>[所有.o文件]
EXE<span class="token operator">=</span>[可执行文件名]
<span class="token symbol">main</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>OBJ<span class="token punctuation">)</span>
    g++ -o <span class="token variable">$</span><span class="token punctuation">(</span>EXE<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>O<span class="token punctuation">)</span>

<span class="token symbol">main.o</span><span class="token punctuation">:</span>[所有它<span class="token keyword">include</span>的.h文件]
<span class="token symbol">Loop.o</span><span class="token punctuation">:</span>[所有它<span class="token keyword">include</span>的.h文件]
<span class="token symbol">toint.o</span><span class="token punctuation">:</span>[所有它<span class="token keyword">include</span>的.h文件]

<span class="token builtin">.PHONY</span><span class="token punctuation">:</span>clean
<span class="token symbol">clean</span><span class="token punctuation">:</span>
    -rm <span class="token variable">$</span><span class="token punctuation">(</span>O<span class="token punctuation">)</span>

<span class="token builtin">.PHONY</span><span class="token punctuation">:</span>cleanexe
<span class="token symbol">cleanexe</span><span class="token punctuation">:</span>
    -rm <span class="token variable">$</span><span class="token punctuation">(</span>EXE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>.PHONY</code>: 意思表示clean是一个“伪目标”</li>
<li><code>-rm</code>: -表示若某些文件问题，仍继续执行后面的指令</li>
</ul>
<p>在命令行中，进入到<code>makefile</code>所在目录，输入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span>			<span class="token comment"># 编译</span>
<span class="token function">make</span> clean		<span class="token comment"># 删除中间文件</span>
<span class="token function">make</span> cleanexe	<span class="token comment"># 删除可执行文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>器</category>
        <category>c与cpp</category>
      </categories>
  </entry>
  <entry>
    <title>github多帐号</title>
    <url>/posts/aa44836f/</url>
    <content><![CDATA[<h1 id="多github帐号的ssh-key切换"><a class="header-anchor" href="#多github帐号的ssh-key切换"></a>多github帐号的ssh key切换</h1>
<p>我有两个github帐号，一个是个人所用，一个是为公司项目所用。如果是单用户，很方便，默认拿id_rsa与你的github服务器的公钥对比；如果是多用户如user1,user2, 那么就不能用在user2的身上了，这个时候就要配置一下了</p>
<h2 id="配置多个ssh-key"><a class="header-anchor" href="#配置多个ssh-key"></a>配置多个ssh key</h2>
<p>来源：<a href="https://www.cnblogs.com/BeginMan/p/3548139.html">多github帐号的SSH key切换</a></p>
<h3 id="新建user2的SSH-Key"><a class="header-anchor" href="#新建user2的SSH-Key"></a>新建user2的SSH Key</h3>
<p>如何生成ssh密钥，可以参考 <a href="https://help.github.com/articles/generating-ssh-keys">generating-ssh-keys</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 新建SSH key：</span>
ssh-keygen -t rsa -P <span class="token string">""</span> -f ~/.ssh/<span class="token operator">&lt;</span>new_id_rsa<span class="token operator">></span> -q
<span class="token comment"># -P "": 密码为空</span>
<span class="token comment"># -f ~/.ssh/&lt;密钥名字>: 生成的私钥路径，相应的共钥为 私钥路径.pub</span>
<span class="token comment"># -q:  Silence ssh-keygen</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>于是<code>~/.ssh/</code>下会生产私钥<code>&lt;密钥名字&gt;</code>和公钥<code>&lt;密钥名字&gt;.pub</code>, 请勿泄露私钥内容</p>
<h2 id="配置ssh-config"><a class="header-anchor" href="#配置ssh-config"></a>配置ssh config</h2>
<p><code>~/.ssh/config</code>文件修改如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 默认github账号（github.com:user1）, &lt;github-user1别名>是服务器的alias</span>
Host github.com <span class="token operator">&lt;</span>github-user1别名<span class="token operator">></span>
    HostName github.com
    User <span class="token function">git</span>
    IdentityFile ~/.ssh/<span class="token operator">&lt;</span>user1密钥名字<span class="token operator">></span>

<span class="token comment"># github账号2（github.com:user2），&lt;github-user2别名>是服务器的alias</span>
Host <span class="token operator">&lt;</span>github-user2别名<span class="token operator">></span>
    HostName github.com
    User <span class="token function">git</span>
    IdentityFile ~/.ssh/<span class="token operator">&lt;</span>user2密钥名字<span class="token operator">></span>

<span class="token comment"># gitlab</span>
Host gitlab
    <span class="token function">hostname</span> gitlab.widget-inc.com
    User <span class="token operator">&lt;</span>gitlab用户名<span class="token operator">></span>
    Port <span class="token number">65422</span>
    IdentityFile  ~/.ssh/<span class="token operator">&lt;</span>gitlab密钥名字<span class="token operator">></span>

<span class="token comment"># oschina</span>
Host oschina
    <span class="token function">hostname</span> git.oschina.net
    User <span class="token operator">&lt;</span>oschina用户名<span class="token operator">></span>
    IdentityFile  ~/.ssh/<span class="token operator">&lt;</span>oschina密钥名字<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>IdentityFile填私钥的路径，而非公钥的</li>
</ul>
<h3 id="添加公钥"><a class="header-anchor" href="#添加公钥"></a>添加公钥</h3>
<p>打开新生成的``/.ssh/&lt;user2密钥名字&gt;.pub`文件，将里面的内容添加到GitHub网站上，user2的设置里</p>
<h3 id="测试连接"><a class="header-anchor" href="#测试连接"></a>测试连接</h3>
<p>若如下返回，则测试成功，两个密钥均可用</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -T <span class="token operator">&lt;</span>github-user1别名<span class="token operator">></span>
<span class="token comment"># 或</span>
<span class="token function">ssh</span> -T git@github.com
<span class="token comment"># Hi &lt;user1密钥名字>! You've successfully authenticated, but GitHub does not provide shell access.</span>

<span class="token function">ssh</span> -T <span class="token operator">&lt;</span>github-user2别名<span class="token operator">></span>
<span class="token comment"># Hi &lt;user2密钥名字>! You've successfully authenticated, but GitHub does not provide shell access.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="多ssh-key的git免密pull-push"><a class="header-anchor" href="#多ssh-key的git免密pull-push"></a>多ssh key的git免密pull/push</h2>
<p><code>git push/pull</code>要想免输入github的用户名和密码，本地仓库关联的远程仓库 之url不能是https的，需必需是<code>git@github.com</code>的，这样才能走ssh协议，调用~/.ssh/config下的密钥进行免密登录。</p>
<h3 id="多个本地git帐号配置用户名与邮箱"><a class="header-anchor" href="#多个本地git帐号配置用户名与邮箱"></a>多个本地git帐号配置用户名与邮箱</h3>
<p>参考</p>
<ul>
<li>
<p><a href="https://gist.github.com/yeungeek/596984fd9e53d6c36c0d">https://gist.github.com/yeungeek/596984fd9e53d6c36c0d</a></p>
</li>
<li>
<p><a href="https://stackoverflow.com/questions/3860112/multiple-github-accounts-on-the-same-computer">https://stackoverflow.com/questions/3860112/multiple-github-accounts-on-the-same-computer</a></p>
</li>
</ul>
<ul>
<li>提交代码的时候，需要修改<code>git config</code> <a href="http://xn--user-k84fui7hq9bp7lz8gjtzn75eqhya199a.xn--emailuser-uw9o.name">可以之设置一个全局的user.email和user.name</a>，然后需要不同的配置的仓库，单独设置</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置global的用户名，设置为github的默认用户</span>
<span class="token comment"># "&lt;user1>"是github用户名，"&lt;user1-email>"是github注册邮箱</span>
<span class="token function">git</span> config --global user.name <span class="token string">"&lt;user1>"</span>
<span class="token function">git</span> config --global user.email <span class="token string">"&lt;user1-email>"</span>

<span class="token comment"># 或修改~/.gitconfig</span>
<span class="token punctuation">[</span>user<span class="token punctuation">]</span>
    name <span class="token operator">=</span> <span class="token operator">&lt;</span>user<span class="token operator"><span class="token file-descriptor important">1</span>></span>
    email <span class="token operator">=</span> <span class="token operator">&lt;</span>user1-email<span class="token operator">></span>

<span class="token comment"># -----</span>
<span class="token comment"># 设置仓库的user.email和user.name, 设置为github的非默认用户或修改</span>
<span class="token comment"># "&lt;user2>"是github用户名，"&lt;user2-email>"是github注册邮箱</span>
<span class="token function">git</span> config user.name <span class="token string">"&lt;user2>"</span>
<span class="token function">git</span> config user.email <span class="token string">"&lt;user2-email>"</span>

<span class="token comment"># 或修改./.git/config</span>
<span class="token punctuation">[</span>user<span class="token punctuation">]</span>
    name <span class="token operator">=</span> <span class="token operator">&lt;</span>user<span class="token operator"><span class="token file-descriptor important">1</span>></span>
    email <span class="token operator">=</span> <span class="token operator">&lt;</span>user2-email<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>github 仅通过 <code>user.email</code> 来识别提交的commit是哪个github用户交的。</p>
<p>因此，对于非默认用户用户设置需要注意：</p>
<ul>
<li><code>&quot;&lt;user1&gt;&quot;</code>, <code>&quot;&lt;user2&gt;&quot;</code> 不强制填github用户名，这不会影响github识别用户，但依然建议填成github用户名，以便本地 <code>git log --format=&quot;%ae&quot;</code> （<code>%ae</code>表示显示<code>user.email</code>）显示与github用户名一致。</li>
<li><code>&quot;&lt;user1-email&gt;&quot;</code>, <code>&quot;&lt;user2-email&gt;&quot; </code><strong>必需填github上的注册邮箱。</strong></li>
<li><strong>如果不配<code>&quot;&lt;user2-email&gt;&quot;</code>, github虽然能接收push，但会在github页面上显示是全局用户<code>&lt;user1&gt;</code>交的。</strong></li>
<li>如果<code>&quot;&lt;user2&gt;&quot;</code> 填github用户名，而<code>&quot;&lt;user2-email&gt;&quot; </code>填假邮箱，则可实现匿名，代价是github无法识别出是<code>&lt;user2&gt;</code>提交的commit。</li>
</ul>
<h3 id="git免密pull-push设置方法"><a class="header-anchor" href="#git免密pull-push设置方法"></a>git免密pull/push设置方法</h3>
<p>git clone创建</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 对于默认github账号 user1</span>
<span class="token function">git</span> clone git@github.com:<span class="token operator">&lt;</span>github用户名<span class="token operator">></span>/<span class="token operator">&lt;</span>github的repo名<span class="token operator">></span>.git
<span class="token comment"># 对于其他github账号 user2</span>
<span class="token function">git</span> clone <span class="token operator">&lt;</span>github服务器别名<span class="token operator">></span>:<span class="token operator">&lt;</span>github用户名<span class="token operator">></span>/<span class="token operator">&lt;</span>github的repo名<span class="token operator">></span>.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>本地repo设置远程仓库</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 对于默认github账号 user1</span>
<span class="token function">git</span> remote <span class="token function">add</span> git@github.com:<span class="token operator">&lt;</span>github用户名<span class="token operator">></span>/<span class="token operator">&lt;</span>github的repo名<span class="token operator">></span>.git
<span class="token comment"># 对于其他github账号 user2</span>
<span class="token function">git</span> remote <span class="token function">add</span> <span class="token operator">&lt;</span>github服务器别名<span class="token operator">></span>:<span class="token operator">&lt;</span>github用户名<span class="token operator">></span>/<span class="token operator">&lt;</span>github的repo名<span class="token operator">></span>.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="无法免密pull-push设置方法怎么办"><a class="header-anchor" href="#无法免密pull-push设置方法怎么办"></a>无法免密pull/push设置方法怎么办</h3>
<p>需将本地repo文件夹下 <code>.git/config</code>中的远程仓库的url，从https的改为<code>git@github.com</code>的</p>
<ul>
<li>见https的url：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[remote &quot;origin&quot;]
    url &#x3D; https:&#x2F;&#x2F;github.com&#x2F;&lt;github用户名&gt;&#x2F;&lt;github的repo名&gt;.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>它是从github上这里复制的</p>
<p><img data-src="/posts/aa44836f/2.png" alt></p>
<ul>
<li>修改为<code>git@github.com</code>的：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[remote &quot;origin&quot;]
    url &#x3D; git@github.com:&lt;github用户名&gt;&#x2F;&lt;github的repo名&gt;.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>它从github上这样复制</p>
<p><img data-src="/posts/aa44836f/1.png" alt></p>
<h3 id="多github账号的免密git-pull-push"><a class="header-anchor" href="#多github账号的免密git-pull-push"></a>多github账号的免密git pull/push</h3>
<p>上述url还可以写成</p>
<pre class="line-numbers language-none"><code class="language-none">[remote &quot;origin&quot;]
    url &#x3D; &lt;github服务器别名&gt;:&lt;github用户名&gt;&#x2F;&lt;github的repo名&gt;.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><code>&lt;github服务器别名&gt;</code>例如”github2”，这样就能实现多github账号的免密push/pull</p>
<h2 id="git用户名"><a class="header-anchor" href="#git用户名"></a>git用户名</h2>
<h3 id="查看用户名"><a class="header-anchor" href="#查看用户名"></a>查看用户名</h3>
<pre class="line-numbers language-none"><code class="language-none">git config user.name
git config user.email<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="设置用户名"><a class="header-anchor" href="#设置用户名"></a>设置用户名</h3>
<pre class="line-numbers language-none"><code class="language-none">git config user.name &quot;你的用户名&quot;
git config user.email &quot;你的邮箱&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>器</category>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>git学习笔记</title>
    <url>/posts/21db94ec/</url>
    <content><![CDATA[<h1 id="GIT学习笔记"><a class="header-anchor" href="#GIT学习笔记"></a>GIT学习笔记</h1>
<h2 id="教程"><a class="header-anchor" href="#教程"></a>教程</h2>
<p><a href="https://backlog.com/git-tutorial/cn/">猴子都能看懂的GIT入门</a></p>
<h2 id="配置"><a class="header-anchor" href="#配置"></a>配置</h2>
<h3 id="忽略"><a class="header-anchor" href="#忽略"></a>忽略</h3>
<h4 id="一个repo"><a class="header-anchor" href="#一个repo"></a>一个repo</h4>
<p>vim repo的根目录 <strong>或 其下任意一个文件夹中</strong>，创建<code>.gitignore</code>，则适用于<code>.gitignore</code>所在的文件夹</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 注释</span>
<span class="token comment"># 以下文件会被忽略</span>

<span class="token comment"># 相对本.gitignore文件所在文件夹的 路径</span>
/path/relative/to/here
<span class="token comment"># 相对本.gitignore文件所在文件夹下 任意这样结尾的路径</span>
tail/of/path

<span class="token comment"># 文件或文件夹</span>
xx/x/xxx
/xx/x/xxx
<span class="token comment"># 文件夹</span>
xx/x/xxx/
/xx/x/xxx/

<span class="token comment"># 通配符</span>
xx/xx*xx/xx
xx/xx*
*xx/xx


<span class="token comment"># 不可写成 `ignore-this-dir`, 这样整个ignore-this-dir文件夹被忽略了, 下面的例外无法生效</span>
ignore-this-dir/*
<span class="token comment"># 例外，即不忽略</span>
<span class="token operator">!</span>ignore-this-dir/exception<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="全局（整个电脑）"><a class="header-anchor" href="#全局（整个电脑）"></a>全局（整个电脑）</h4>
<p>vim ~/.gitignore_global</p>
<ul>
<li>代码行尾勿加注释，会无法执行那一行</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none"># attention: 代码行尾勿加注释，会无法执行那一行

# Windows
Thumbs.db
 # Thumbnail cache files
desktop.ini
# Folder view configuration files

# OS X
.DS_Store
# Folder view configuration files
.Spotlight-V100
# Files that might appear on external disks
.Trashes
# Files that might appear on external disks
._*
# Thumbnail cache files

# Compiled Python files
*.pyc

# Compiled C++ files
*.out

# Application specific files
venv
node_modules
.sass-cache

# Temp File
*.swp
*.swa
*.swo

# github merge file
*.orig

# vscode
.vscode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>vim ~/.gitconfig, 添加如下</p>
<pre class="line-numbers language-none"><code class="language-none">[core]
        excludesfile &#x3D; .gitignore_global
        # 其他core配置...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>适用于电脑上所有repo</p>
<h4 id="作用"><a class="header-anchor" href="#作用"></a>作用</h4>
<p>Mac系统</p>
<ul>
<li>._*: Mac系统打开windows或linux系统的文件，会把的文件xxx.xx的附属信息，写入&quot;._xxx.xx&quot;二进制文件</li>
<li>.DS_Store: 记录该文件夹下各文件在访达下的布局</li>
<li>在Mac用Macfusion访问linux服务器上的git项目，需ignore上述文件</li>
</ul>
<h2 id="文件的状态"><a class="header-anchor" href="#文件的状态"></a>文件的状态</h2>
<p>其中 ignore是忽略的文件, HEAD是当前所在节点的那次提交版本, index是暂存( <code>git add</code> 即 <code>git stage</code>)所生成的文件索引, wkdir是工作目录</p>
<p>ignore/HEAD/index/wkdir[file] = None if 其中无此file else 其中此file的内容</p>
<p>文件的状态分如下几种, git的判断机制是</p>
<ul>
<li>不存在的文件: ignore[file] == HEAD[file] == index[file] == wkdir[file] == None</li>
<li>存在的文件: ! ( ignore[file] == HEAD[file] == index[file] == wkdir[file] == None)
<ul>
<li>忽略的文件:  None != ignore[file]</li>
<li>未被忽略的文件:  None == ignore[file]  and ! (HEAD[file] == index[file] == wkdir[file] == None)</li>
</ul>
</li>
</ul>
<p>其中未被忽略的文件进一步判断:</p>
<ul>
<li>
<p>提交文件 <code>commited</code>: None != HEAD[file] == index[file] == wkdir[file]</p>
</li>
<li>
<p>未提交/不干净的文件 <code>uncommited</code>: index[file] != wkdir[file]  or  HEAD[file] != index[file]</p>
<ul>
<li>
<p>未跟踪: <code>untracked</code>: None == index[file]  != wkdir[file]</p>
</li>
<li>
<p>未暂存: None != index[file]  != wkdir[file]</p>
<p><code>unstaged modified</code>: None != index[file] != wkdir[file] != None</p>
<p><code>unstaged deleted</code>: None != index[file] !=  wkdir[file] == None</p>
</li>
<li>
<p>暂存: HEAD[file] != index[file]</p>
<p><code>staged new file</code>: None == HEAD[file]  != index[file]</p>
<p><code>staged modified</code>: None !=  HEAD[file] != index[file] != None</p>
<p><code>staged deleted</code>: None !=  HEAD[file] != index[file] == None     and    HEAD[file] != index[f] for any f in index</p>
<p><code>staged renamed: file1-&gt; file2</code>:  None != HEAD[file1] != index[file1] == None    and  HEAD[file1] == index[file2]</p>
</li>
</ul>
</li>
</ul>
<h2 id="checkout的逻辑"><a class="header-anchor" href="#checkout的逻辑"></a>checkout的逻辑</h2>
<h3 id="改动可否带走"><a class="header-anchor" href="#改动可否带走"></a>改动可否带走</h3>
<p>执行上述两命令成功的充要条件为: 一切当前不干净的文件(未跟踪/跟踪未暂存/暂存未提交), 在<code>git checkout</code>去往节点和<code>HEAD</code>节点中完全一样(是否被跟踪一样, 文件内容一样)</p>
<p>执行后, 原来不干净的文件, 其内容/是否被跟踪/是否被暂存 均完全未变</p>
<h3 id="从历史节点开分支"><a class="header-anchor" href="#从历史节点开分支"></a>从历史节点开分支</h3>
<h4 id="去历史节点试着修改"><a class="header-anchor" href="#去历史节点试着修改"></a>去历史节点试着修改</h4>
<p>checkout到历史的节点，可以试着做改动，然后提交(<code>git commit</code>)，会变成一个临时分支，而不改动历史。</p>
<p>这个临时分支，只有一个节点hash码、没有分支名。例如下图，checkout到历史节点<code>cf8e102</code>，修改完一些文件再提交，产生临时分支节点<code>883ed24</code></p>
<p>![屏幕快照 2019-08-19 20.12.00](assets/屏幕快照 2019-08-19 20.12.00.png)</p>
<h4 id="将修改存成分支"><a class="header-anchor" href="#将修改存成分支"></a>将修改存成分支</h4>
<p>处在临时分支节点，可以执行<code>git branch 分支 &amp;&amp; git checkout 分支</code> （等价于 <code>git checkout -b 分支</code>），从而使得临时分支变成一个有名字的分支。</p>
<p>若checkout到别的节点，再<code>git log</code>就不显示这个临时节点了，但是仍然可以<code>git checkout [临时节点的hash码]</code>到这个临时节点。</p>
<h2 id="stash"><a class="header-anchor" href="#stash"></a>stash</h2>
<blockquote>
<p>我们有时会遇到这样的情况，正在dev分支开发新功能，做到一半时有人过来反馈一个bug，让马上解决，但是新功能做到了一半你又不想提交，这时就可以使用git stash命令先把当前进度保存起来，然后切换到另一个分支去修改bug，修改完提交后，再切回dev分支，使用git stash pop来恢复之前的进度继续开发新功能。下面来看一下git stash命令的常见用法.</p>
</blockquote>
<h3 id="参考"><a class="header-anchor" href="#参考"></a>参考</h3>
<p><a href="https://www.yiibai.com/git/git_stash.html">https://www.yiibai.com/git/git_stash.html</a></p>
<p><a href="https://blog.csdn.net/qq_32452623/article/details/76100140">https://blog.csdn.net/qq_32452623/article/details/76100140</a></p>
<p><a href="https://blog.csdn.net/daguanjia11/article/details/73810577">https://blog.csdn.net/daguanjia11/article/details/73810577</a></p>
<p><a href="http://www.softwhy.com/article-8630-1.html">git stash save与git stash push区别</a>:</p>
<p>save是阉割版的push, 当前推荐使用git stash push命令,  save不能指定只存哪个目录, save 写mesage的格式和push不同</p>
<h3 id="储藏"><a class="header-anchor" href="#储藏"></a>储藏</h3>
<pre class="line-numbers language-none"><code class="language-none">git stash [push [--patch] [-k|--[no-]keep-index] [-q|--quiet]
               [-u|--include-untracked] [-a|--all] [-m &lt;message&gt;]
               [-- &lt;pathspec&gt;...]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>无 <code>-u</code>无<code>-a</code>:  不存未跟踪的文件; 只存跟踪且修改了的文件(不论是否add)</li>
</ul>
<p><img data-src="/posts/21db94ec/ScreenShot%202020-01-11%2002.19.49.png" alt="ScreenShot 2020-01-11 02.19.49"></p>
<ul>
<li>加<code>-u</code>无<code>-a</code>: 还存未跟踪的文件, 但不存忽略的文件</li>
<li>有<code>-a</code>: 还存未跟踪的文件, 也不存忽略的文件, 故<code>-a</code> 包含了<code>-u</code></li>
</ul>
<p><img data-src="/posts/21db94ec/ScreenShot%202020-01-11%2002.59.11.png" alt="ScreenShot 2020-01-11 02.59.11"></p>
<ul>
<li>被存的文件都回到HEAD时的样子(包括文件的有无,文件的内容); 未跟踪的文件不变</li>
</ul>
<h3 id="查看储藏"><a class="header-anchor" href="#查看储藏"></a>查看储藏</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>会显示整个分支图中(不仅仅是HEAD的)的所有储藏</li>
</ul>
<p><img data-src="/posts/21db94ec/ScreenShot%202020-01-11%2003.03.33.png" alt="ScreenShot 2020-01-11 03.03.33"></p>
<p>其中 <code>stash@&#123;0&#125;</code>等, 是stash编号; 在glg中显示的节点hash ( 位于 三角 的最顶上的那个点) 也可以做stash编号</p>
<ul>
<li>
<p><code>glg</code> 只显示  <code>stash@&#123;0&#125;</code> , 此即当前的stash, 整个分支图中仅此一个. 此stash即<code>git stash</code>各个命令里可缺省的stash编号</p>
<p><img data-src="/posts/21db94ec/ScreenShot%202020-01-11%2003.05.22.png" alt="ScreenShot 2020-01-11 03.05.22"></p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash show <span class="token punctuation">[</span><span class="token operator">&lt;</span>stash编号<span class="token operator">></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>
<p>会显示跟踪的文件的增删改</p>
<p><img data-src="/posts/21db94ec/ScreenShot%202020-01-11%2003.01.04.png" alt="ScreenShot 2020-01-11 03.01.04"></p>
</li>
</ul>
<h3 id="取出储藏"><a class="header-anchor" href="#取出储藏"></a>取出储藏</h3>
<p>当当前目录有储藏的文件改动了, 则无法取出储藏</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash pop <span class="token punctuation">[</span>stash编号<span class="token punctuation">]</span> <span class="token punctuation">[</span>--index<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>等价于 <code>git stash apply [stash编号] [--index]; git stash drop [stash编号] </code></p>
<ul>
<li>不加—index: 原来跟踪且修改的文件还原, 现在都没git add</li>
<li>加 index: 原来跟踪且修改的文件还原, 分别还原到add和没add的状态</li>
<li><code>glg</code> 和 <code>git stash list</code>中看不到这个储藏了</li>
</ul>
<p><img data-src="/posts/21db94ec/ScreenShot%202020-01-11%2002.28.46.png" alt="ScreenShot 2020-01-11 02.28.46"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash apply <span class="token punctuation">[</span>stash编号<span class="token punctuation">]</span> <span class="token punctuation">[</span>--index<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>不加—index: 原来跟踪且修改的文件还原, 现在都没git add</li>
<li>加 index: 原来跟踪且修改的文件还原, 分别还原到add和没add的状态</li>
<li>glg 和 <code>git stash list</code>中还能到这个储藏了</li>
</ul>
<p><img data-src="/posts/21db94ec/ScreenShot%202020-01-11%2002.25.59.png" alt="ScreenShot 2020-01-11 02.25.59"></p>
<pre class="line-numbers language-none"><code class="language-none">git stash drop [stash编号]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>当前文件的状态不变</li>
<li>glg 和 <code>git stash list</code>中不能到这个储藏了</li>
</ul>
<p><img data-src="/posts/21db94ec/ScreenShot%25202020-01-11%252002.28.46.png" alt="ScreenShot 2020-01-11 02.28.46"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash <span class="token function">clear</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>等价于 <code>git stash drop [stash编号] </code> 对于所有 <code>[stash编号] </code></li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash branch <span class="token operator">&lt;</span>branchname<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>stash编号<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--index<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>等价于 <code>git stash pop [&lt;stash编号&gt;] [--index]; gb &lt;branchname&gt; </code></p>
<h3 id="取消apply储藏"><a class="header-anchor" href="#取消apply储藏"></a>取消apply储藏</h3>
<p>在某些情况下，可能想应用储藏的修改，在进行了一些其他的修改后，又要取消之前所应用储藏的修改。Git没有提供类似于 <code>stash unapply</code>的命令，但是可以通过取消该储藏的补丁达到同样的效果：</p>
<h3 id="法一"><a class="header-anchor" href="#法一"></a>法一</h3>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> stash show -p <span class="token punctuation">[</span>stash编号<span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token function">git</span> apply -R<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可能会想要新建一个別名，在你的 Git 里增加一个 <code>stash-unapply</code>命令，这样更有效率。例如：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> config --global alias.stash-unapply <span class="token string">'!git stash show -p | git apply -R'</span>
<span class="token function">git</span> stash apply <span class="token comment"># 不能有 --index</span>
<span class="token comment"># (... work work work # 不能改储藏的文件)</span>
<span class="token function">git</span> stash-unapply <span class="token comment"># 不会还原 git stash push -u 所储存的未跟踪文件</span>
<span class="token comment"># 回到干净的目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="法二"><a class="header-anchor" href="#法二"></a>法二</h3>
<p>如果在应用储藏前, 目录是干净的, 则可直接</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">`</span><span class="token function">git</span> rev-parse --show-toplevel<span class="token variable">`</span></span>"</span>  <span class="token comment"># 来到当前repo的根目录</span>
<span class="token function">git</span> reset HEAD  <span class="token comment"># 取消暂存(git add)的所有文件</span>
<span class="token function">git</span> checkout  <span class="token builtin class-name">.</span> <span class="token comment"># 取消被跟踪文件的所有修改</span>
<span class="token function">git</span> clean -df  <span class="token comment"># 删除未跟踪也未被忽略的文件夹(-d)和文件(-f)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="rebase"><a class="header-anchor" href="#rebase"></a>rebase</h2>
<p>带上sub-branch一起rebase</p>
<p><a href="https://stackoverflow.com/questions/32652293/automatically-rebase-git-sub-branches">https://stackoverflow.com/questions/32652293/automatically-rebase-git-sub-branches</a></p>
<p><a href="http://voidcanvas.com/how-to-rebase-a-branch-when-the-parent-is-rebased-with-another/">http://voidcanvas.com/how-to-rebase-a-branch-when-the-parent-is-rebased-with-another/</a></p>
<p><a href="https://stackoverflow.com/questions/43711961/rebase-a-branch-that-has-child-branches">https://stackoverflow.com/questions/43711961/rebase-a-branch-that-has-child-branches</a></p>
<p>rebase 一棵树 <a href="https://stackoverflow.com/questions/14504029/git-rebase-subtree/45861361#45861361">https://stackoverflow.com/questions/14504029/git-rebase-subtree/45861361#45861361</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout dev
<span class="token function">git</span> rebase --preserve-merges master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img data-src="/posts/21db94ec/ScreenShot%202020-01-13%2016.21.31.png" alt="ScreenShot 2020-01-13 16.21.31"></p>
<p><a href="https://stackoverflow.com/questions/15915430/what-exactly-does-gits-rebase-preserve-merges-do-and-why">What exactly does git’s “rebase --preserve-merges” do (and why?)</a></p>
<p>Rebase a tree: <a href="https://stackoverflow.com/questions/17315285/rebasing-a-tree-a-commit-branch-and-all-its-children">https://stackoverflow.com/questions/17315285/rebasing-a-tree-a-commit-branch-and-all-its-children</a></p>
<p><a href="https://stackoverflow.com/questions/17106840/git-rebase-with-branches-whole-tree">https://stackoverflow.com/questions/17106840/git-rebase-with-branches-whole-tree</a></p>
<h3 id="对比rebase-merge的化解冲突"><a class="header-anchor" href="#对比rebase-merge的化解冲突"></a>对比rebase/merge的化解冲突</h3>
<p><a href="https://bitmingw.com/2017/02/16/git-merge-rebase-ours-and-theirs/">参考</a></p>
<h4 id="merge"><a class="header-anchor" href="#merge"></a>merge</h4>
<p>初始状态: 当前分支是A</p>
<pre class="line-numbers language-none"><code class="language-none">o-A(ours,HEAD)

 o-o-B(theirs)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>执行  <code>git merge B</code>, 得到最终状态:</p>
<pre class="line-numbers language-none"><code class="language-none">o-o(ours:原A)-A(HEAD)
             &#x2F;
 o-o-B(theirs)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>若中间发生冲突, 文件中显示</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
A的内容
&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
B的内容
&gt;&gt;&gt;&gt;&gt;&gt;&gt; B分支名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>解决冲突的方法</strong></p>
<ul>
<li>
<p>手动修改冲突的文件</p>
</li>
<li>
<p>只保留A, 或只保留B</p>
</li>
</ul>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout --ours 冲突的文件<span class="token punctuation">(</span>夹<span class="token punctuation">)</span>名       <span class="token comment"># => 保留A的内容</span>
<span class="token function">git</span> checkout --theirs 冲突的文件<span class="token punctuation">(</span>夹<span class="token punctuation">)</span>名     <span class="token comment"># => 保留B的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>若要对repo内所有文件采样上述策略, 则 <code>冲突的文件(夹)名</code> 写作 <code>&quot;$(git rev-parse --show-toplevel 2&gt; /dev/null)”</code></p>
<ul>
<li><s>整个repo都保留B的内容, 也可执行 <code>git merge —skip</code></s>, 这个命令不存在, 只能</li>
</ul>
<p>解决完冲突, 执行 <code>git add -A &quot;$(git rev-parse --show-toplevel 2&gt; /dev/null)&quot;</code>, 然后 <code>git commit</code> , 则来到最终状态. 注: <code>git merge --continue</code>命令在老版本的git没有, 如git2.7.4没有, git2.20.1有.</p>
<p>若放弃merge, 则执行 <code>git merge --abort</code>, 则回到初始状态.</p>
<h4 id="rebase-_2"><a class="header-anchor" href="#rebase-_2"></a>rebase</h4>
<p>初始状态: 当前分支是A</p>
<pre class="line-numbers language-none"><code class="language-none">   A1-A2-A(HEAD)
 &#x2F;
o-o-B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>执行 <code>git rebase A</code></p>
<p>则git内部会先 <code>git checkout B</code>, 得到<strong>中间状态</strong>:</p>
<pre class="line-numbers language-none"><code class="language-none">   A1-A2-A(theirs)
 &#x2F;
o-o-B(ours,HEAD)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>再将A分支rebase, 然后 <code>git checkout A</code> , 从而变成最终状态:</p>
<pre class="line-numbers language-none"><code class="language-none">      A1-A2-A(HEAD)
     &#x2F;
o-o-B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>若发生冲突, 则当前处在中间状态. 冲突的文件所显示如下, HEAD所指的分支正好和merge冲突时相反</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
B的内容
&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
A的内容
&gt;&gt;&gt;&gt;&gt;&gt;&gt; 当前所rebase的A的某次提交的message (即A1或A2的message)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>解决冲突的方法:</strong></p>
<ul>
<li>
<p>手动修改冲突的文件</p>
</li>
<li>
<p>只保留A, 或只保留B: 解决冲突的命令中, ours和theirs 也与merge冲突时相反</p>
</li>
</ul>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout --ours 冲突的文件<span class="token punctuation">(</span>夹<span class="token punctuation">)</span>名    <span class="token comment"># => 保留B的内容</span>
<span class="token function">git</span> checkout --theirs 冲突的文件<span class="token punctuation">(</span>夹<span class="token punctuation">)</span>名  <span class="token comment"># => 保留A的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>若要对repo内所有文件采样上述策略, 则则 <code>冲突的文件(夹)名</code> 写作 <code>&quot;$(git rev-parse --show-toplevel 2&gt; /dev/null)”</code></p>
<ul>
<li>
<p>整个repo都保留A的内容, 也可执行 <code>git rebase —skip</code>. 区别如下</p>
<p><code>git rebase —skip</code> (推荐 ): 若某文件, B 分支删除 而A分支当前冲突的commit有, 则此命令会删除此文件<br>
<code>git checkout --ours &quot;$(git rev-parse --show-toplevel 2&gt; /dev/null)&quot;</code>: 若某文件, B 分支删除 而A分支当前冲突的commit有, 则此命令不会删除此文件</p>
</li>
</ul>
<p>解决完冲突, 执行 <code>git add -A &quot;$(git rev-parse --show-toplevel 2&gt; /dev/null)&quot;</code>, 然后<code>git rebase --continue</code>, 则来到最终状态</p>
<p>若放弃merge, 则执行 <code>git rebase --abort</code>, 则回到初始状态.</p>
<p><strong>批量化解冲突:</strong></p>
<p><a href="https://gist.github.com/bitmingw/414c1781412f4ece07087ab6f2ce42f8">一个批量处理脚本</a>。这个脚本根据设定的规则自动执行指令，让我在三分钟之内完成了一个14步（以 <code>git rebase --continue</code> 计）</p>
<h3 id="rebase的缺点"><a class="header-anchor" href="#rebase的缺点"></a>rebase的缺点</h3>
<ul>
<li>
<p>git rebase会产生连环冲突，git merge不会</p>
<p>这是因为</p>
<pre class="line-numbers language-none"><code class="language-none">  A1-A2-A3(A)
 &#x2F;
B1-B2-B3(B)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>在A, <code>git rebase B</code>, 则会依次将 A1, A2, A3 rebase 到 B3. 若B3中某文件与A1-A3均冲突, 就会连环冲突.</p>
<p>例如B1中有文件a, B3中无文件a, 而A1-A3均修改了文件a, 则要保留B3的文件, 则会连环冲突, 中间有三次要执行若<code>git rebase —skip</code> `来化解冲突, 保留B3的文件. 最终rebase结束将无a文件.</p>
</li>
<li>
<p>有时git rebase会产生冲突，git merge不会</p>
<p>如</p>
<pre class="line-numbers language-none"><code class="language-none">  A1-A2(A)
 &#x2F;
B1-B2-B3(B)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>B1有文件a, B2,B3未动a, 动了别的文件; A1将a删除, A2将a恢复了a.</p>
<p>则在A, <code>git merge B</code>, 不会出冲突. 而 <code>git rebase B</code> 则在rebase A1时会冲突.</p>
</li>
<li>
<p>push后merge可以原样保留正确运行的历史commit，而rebase不会</p>
<p>例如</p>
<pre class="line-numbers language-none"><code class="language-none">  A1-A2(A)
 &#x2F;
B1-B2-B3(B)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>在A, <code>git rebase B</code>, 则得到的A1节点, 是由 B3  <code>git merge A1</code>所得. 故A1节点内容可能发生变化, 从而未被能正确运行.</p>
<p>而在A, <code>git merge B</code>, 则A1节点未改动, 故A1还能正确运行.</p>
</li>
</ul>
<h3 id="git-rebase-的例子"><a class="header-anchor" href="#git-rebase-的例子"></a>git rebase 的例子</h3>
<ul>
<li>当前</li>
</ul>
<p><img data-src="/posts/21db94ec/image-20200113214519713.png" alt="image-20200113214519713"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase dev
<span class="token comment"># 或</span>
<span class="token function">git</span> rebase --onto dev a2405ce f1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>得到</p>
<p><img data-src="/posts/21db94ec/image-20200113214619559.png" alt="image-20200113214619559"></p>
<ul>
<li>当前</li>
</ul>
<p><img data-src="/posts/21db94ec/image-20200113213842403.png" alt="image-20200113213842403"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> <span class="token function">git</span> rebase dev
 <span class="token comment"># 或</span>
<span class="token function">git</span> rebase --onto dev a2405ce f1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>得到</p>
<p><img data-src="/posts/21db94ec/ScreenShot%202020-01-13%2021.37.05.png" alt="ScreenShot 2020-01-13 21.37.05"></p>
<h2 id="cherry-pick"><a class="header-anchor" href="#cherry-pick"></a>cherry-pick</h2>
<p>教程: <a href="https://blog.csdn.net/FightFightFight/article/details/81039050">git cherry-pick的使用</a>  <a href="https://blog.csdn.net/qq_32452623/article/details/79449534">cherry-pick 挑好看的小樱桃</a></p>
<p>不存在<code>git cherry-pick —squash</code>, 得用 <code>git cherry-pick -n</code>, <a href="https://stackoverflow.com/questions/35123108/cherry-pick-and-squash-a-range-of-commits-into-a-subdirectory-or-subtree">详见</a></p>
]]></content>
      <categories>
        <category>器</category>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>github的身份验证方式</title>
    <url>/posts/9368dece/</url>
    <content><![CDATA[<h2 id="命令行验证身份"><a class="header-anchor" href="#命令行验证身份"></a>命令行验证身份</h2>
<p>github在2021年不再支持用密码去clone私有库和push代码，只支持以下方式：</p>
<ul>
<li>使用https协议：要用acces_token，在<a href="https://github.com/settings/tokens">Settings/Developer settings/Personal access tokens</a>设置</li>
<li>使用ssh协议：要用ssh密钥（authentication keys），在<a href="https://github.com/settings/keys">Settings/SSH and GPS keys</a>设置</li>
</ul>
<h2 id="网站验证身份"><a class="header-anchor" href="#网站验证身份"></a>网站验证身份</h2>
<p>github在2023年严格了网站登陆方式，不再支持只用密码登陆，要求以下几种登陆方式：</p>
<ul>
<li>
<p>两步验证（2FA，two-factor authentication）在<a href="https://github.com/settings/security">Settings/Password and authentication</a>配置</p>
<ul>
<li>账号名和密码+<a href="https://github.com/sessions/two-factor/app">authenticator app</a>（这是手机app，用来验证登陆网站的身份，会每分钟变一个六位数验证码。
<ul>
<li>推荐用微软的Authenticator手机app（<a href="https://www.microsoft.com/zh-cn/security/mobile-authenticator-app">下载链接</a>，只支持iOS和安卓，可以从google play/华为/联想/三星/百度/apple store这些应用商店下载，免费的功能齐全，支持墙内使用，无需国外手机号即可注册。）</li>
<li>Authy：免费版功能有限</li>
<li>1password：需要收费。</li>
</ul>
</li>
<li>账号名和密码+recovery code（需要记录在本地备忘录，不要被别人看见</li>
<li>账号名和密码+security keys（usb安全密钥，这是一个用于储存密钥的专用u盘，随身携带犹如钥匙，需要购买）</li>
<li>账号名和密码+短信验证码（不支持+86和香港手机号）</li>
<li>账号名和密码+GitHub Mobile（github手机app，支持iOS、安卓，还没试能否墙内使用），<a href="https://github.com/mobile">下载链接</a></li>
</ul>
</li>
<li>
<p>passkey（一个passkey对应唯一账号名，无需输入密码）。</p>
<p><a href="https://support.apple.com/zh-cn/guide/mac-help/mchl4af65d1a/mac">支持passkey的苹果操作系统版本</a>（苹果将“passkey”译作“通行密钥”）：</p>
<ul>
<li>iOS&gt;=16、iPadOS&gt;=16的系统钥匙串</li>
<li>macOS&gt;=13的safari浏览器</li>
<li>任何版本的macOS的chrome浏览器</li>
</ul>
</li>
</ul>
<p>凡是在2023年被github要求开启两步验证的用户，无法取消两步验证。</p>
]]></content>
      <categories>
        <category>器</category>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>Mac上使用locate</title>
    <url>/posts/9e0a1c71/</url>
    <content><![CDATA[<h1 id="系统级locate"><a class="header-anchor" href="#系统级locate"></a>系统级locate</h1>
<p>以下用于搜整个系统的文件</p>
<h2 id="首次使用locate"><a class="header-anchor" href="#首次使用locate"></a>首次使用locate</h2>
<p>初次使用locate前, 需要执行以下命令, 开启一个开机自启进程, 用以创建 <code>locate</code> 的数据库</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> launchctl load -w /System/Library/LaunchDaemons/com.apple.locate.plist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>一段时间后, 命令执行完, <code>locate</code>数据库初次创建好, 此后可以 <code>locate (部分)文件名</code> 查找文件的路径</p>
<p>此自启进程会每周重建一次数据库, 如果你需要修改更新的频率, 详见下文 <a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0">数据库自动更新</a></p>
<h2 id="手动-建立-更新数据库"><a class="header-anchor" href="#手动-建立-更新数据库"></a>手动 建立/更新数据库</h2>
<p>LInux下: 运行命令 <code>sudo updatedb</code></p>
<p>Mac下: 运行命令 <code>sudo /usr/libexec/locate.updatedb</code>,</p>
<ul>
<li>必需sudo执行, 以便遍历<strong>整个系统的文件</strong></li>
<li>将locate数据库生成于 <code>/private/var/db/locate.database</code>  <code>/var/db/locate.database</code>文件</li>
<li>此二文件互为硬链接, 有相同文件id</li>
</ul>
<h2 id="报错-mktemp-too-few-X-s-in-template-‘updatedb’"><a class="header-anchor" href="#报错-mktemp-too-few-X-s-in-template-‘updatedb’"></a>报错 <code>mktemp: too few X's in template ‘updatedb’</code></h2>
<p><a href="https://roylez.info/2014-10-06-happy-locating/">参考资料</a></p>
<p>当执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> /usr/libexec/locate.updatedb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>会报错</p>
<pre class="line-numbers language-none"><code class="language-none">mktemp: too few X&#39;s in template ‘updatedb’
chown: missing operand after ‘nobody’
Try &#39;chown --help&#39; for more information.
shell-init: error retrieving current directory: getcwd: cannot access parent directories: Permission denied
shell-init: error retrieving current directory: getcwd: cannot access parent directories: Permission denied
shell-init: error retrieving current directory: getcwd: cannot access parent directories: Permission denied
^Crmdir: &#x2F;tmp&#x2F;locatefO9MXysbH8&#x2F;mklocate1UecfP0H1n: No such file or directory
rmdir: &#x2F;tmp&#x2F;locatefO9MXysbH8: No such file or directory
install: missing destination file operand after &#39;&#x2F;var&#x2F;db&#x2F;locate.database&#39;
Try &#39;install --help&#39; for more information.
rm: missing operand
Try &#39;rm --help&#39; for more information.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>原因: 装了<code>coreutils</code>, 致使 <code>mktemp</code> 命令被替换成 <code>coreutils</code> 的 <code>mktemp</code>. 而<code>updatedb</code>只能使用 OSX 自带的 <code>mktemp</code>, 故而报错.</p>
<p>解决方法: 将<code> /usr/libexec/locate.updatedb</code>中所有 <code>mktemp</code> 换成 <code>/usr/bin/mktemp</code>.</p>
<h2 id="数据库自动更新"><a class="header-anchor" href="#数据库自动更新"></a>数据库自动更新</h2>
<p>参考: <a href="https://apple.stackexchange.com/a/228170">更改locate数据库的自动更新频率</a></p>
<p><code>/System/Library/LaunchDaemons/com.apple.locate.plist</code> 文件是locate数据库自动更新的程序. 上文执行 <code>sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.locate.plist   </code> 后, 每次开机均会以 root 加载此程序, 它会定时更新locate数据库.</p>
<p><code>/System/Library/LaunchDaemons/com.apple.locate.plist</code> 文件中以下三个字段设置了如何更新 <code>locate</code> 的数据库.</p>
<ul>
<li>
<p>执行命令</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>ProgramArguments<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>/usr/libexec/locate.updatedb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>即执行 <code>sudo /usr/libexec/locate.updatedb</code></p>
</li>
<li>
<p>数据库路径</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>PathState<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dict</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>/var/db/locate.database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>false</span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dict</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>数据库文件  <code>/var/db/locate.database</code></p>
</li>
<li>
<p>更新频率</p>
<p>默认设置如下, 意为每周六3:15自动更新</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>StartCalendarInterval<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dict</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>Hour<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>integer</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>integer</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>Minute<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>integer</span><span class="token punctuation">></span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>integer</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>Weekday<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>integer</span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>integer</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dict</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如需改为每天3:15, 则将 <code>6</code> 改为 <code>*</code>, 或直接注释掉</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>Weekday<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>integer</span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>integer</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>如需设置每n秒自动更新一次, 则注释掉整个 <code>StartCalendarInterval</code> 字段, 在其下插入如下代码, 此为每3小时(即108000秒)更新一次</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">&lt;key StartInterval<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>integer</span><span class="token punctuation">></span></span>108000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>integer</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<h1 id="个人级locate"><a class="header-anchor" href="#个人级locate"></a>个人级locate</h1>
<p>以下用于搜个人目录中的文件</p>
<p><a href="https://roylez.info/2014-10-06-happy-locating/">参考资料</a></p>
<h2 id="报错-mktemp-too-few-X-s-in-template-‘updatedb’-_2"><a class="header-anchor" href="#报错-mktemp-too-few-X-s-in-template-‘updatedb’-_2"></a>报错 <code>mktemp: too few X's in template ‘updatedb’</code></h2>
<p>依照上文 <a href>系统级locate / 报错 <code>mktemp: too few X's in template ‘updatedb’</code></a> 进行设置</p>
<h2 id="设置自动更新"><a class="header-anchor" href="#设置自动更新"></a>设置自动更新</h2>
<p><a href="https://apple.stackexchange.com/a/341626">crontab设置</a></p>
<p>设置当前用户的定时执行程序</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">crontab</span> -e<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>注意不要加<code>sudo</code>. 加<code>sudo</code>则是为root设置定时执行程序.</li>
</ul>
<p>弹出vim, 输入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cron配置最开始设定</span>
<span class="token assign-left variable"><span class="token environment constant">SHELL</span></span><span class="token operator">=</span>/bin/zsh

<span class="token comment"># ...</span>

<span class="token comment"># 只搜索我的私人文件，数据库文件放自己的目录，一个小时运行一次</span>
<span class="token number">5</span>   *   *   *   *   <span class="token assign-left variable">SEARCHPATHS</span><span class="token operator">=</span><span class="token environment constant">$HOME</span> <span class="token assign-left variable">FCODES</span><span class="token operator">=</span><span class="token environment constant">$HOME</span>/.locate.db /usr/libexec/locate.updatedb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>保存, 退出.</p>
<p>此设置的含义为:</p>
<ul>
<li>
<p><code>5   *   *   *   *   </code>: 每小时的05分时执行</p>
<p>时间的格式, 参见 <a href="https://www.jianshu.com/p/0886e1510bbb">修改crontab执行时间</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">*      *      *     *      *    <span class="token builtin class-name">command</span>
分     时      日    月     周    命令
<span class="token number">0</span>～59  <span class="token number">0</span>-23    <span class="token number">1</span>～31 <span class="token number">1</span>-12  <span class="token number">0</span>-7<span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">=</span><span class="token number">7</span><span class="token operator">=</span>周日<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>以设置”分”为例:</p>
<ul>
<li><code>*</code>: 每分钟执行</li>
<li><code>5</code>: 05(分)之时执行</li>
<li><code>*/5</code>: 每隔5(分)执行</li>
<li><code>15,45,50</code>: 15分,45分,50分之时执行</li>
</ul>
<p>整体例如</p>
<p><code>0  0,12  *  *  *</code>: 每天0:00和12:00执行</p>
</li>
<li>
<p>执行 <code>/usr/libexec/locate.updatedb</code></p>
</li>
<li>
<p><code>SEARCHPATHS=$HOME</code>: 遍历 <code>$HOME</code> 以生成locate数据库</p>
</li>
<li>
<p><code>FCODES=$HOME/.locate.db</code>: 数据库生成到 <code>$HOME/.locate.db</code> 文件</p>
</li>
</ul>
<h2 id="设置alias"><a class="header-anchor" href="#设置alias"></a>设置alias</h2>
<p>在 <code>~/.zshrc</code> 或 <code>~/.bashrc</code> 加入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">mylocate</span><span class="token operator">=</span><span class="token string">'command locate -i -d ~/.locate.db'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><code>-i</code>: 忽略大小写</li>
<li><code>-d ~/.locate.db</code> : 指定数据库文件</li>
</ul>
<p>之后, 输入<code>mylocate</code> 则只搜 <code>$HOME</code> 里的文件.</p>
]]></content>
      <categories>
        <category>器</category>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title>OneDrive升级后无法在Catalina上运行</title>
    <url>/posts/2f5042d3/</url>
    <content><![CDATA[<h2 id="故障描述"><a class="header-anchor" href="#故障描述"></a>故障描述</h2>
<p>我在2024年7月23日，自动更新onedrive后，发现catalina上无法运行onedrive。</p>
<p>在 <code>/Application/Onedrive.app</code>的图标会变灰，并有一道斜杠。点击它，会显示如下弹窗，这个版本的onedrive无法在catalina系统上运行，需要升级macOS。</p>
<p><img data-src="/posts/2f5042d3/image-20240725165708756.png" alt="image-20240725165708756"></p>
<h2 id="解决办法"><a class="header-anchor" href="#解决办法"></a>解决办法</h2>
<ol>
<li>
<p><strong>卸载</strong> OneDrive。 即，在<code>/Application/</code>中选中 OneDrive.app，拖到废纸篓即可。</p>
</li>
<li>
<p>从Microsoft 社区下载ondrive-for-catalina，安装之：</p>
<ul>
<li>
<p>来源一（<strong>本文件旁边onedrive安装包的就是</strong>）：</p>
<ul>
<li><a href="https://oneclient.sfx.ms/Mac/Installers/23.086.0423.0001/universal/OneDrive.pkg">ondrive-for-catalina 23.086.0423.0001 下载链接</a></li>
</ul>
</li>
<li>
<p>Microsoft 社区原帖：<a href="https://techcommunity.microsoft.com/t5/onedrive/onedrive-broken-on-macos-10-15-catalina/m-p/3787672/page/3">OneDrive broken on macOS 10.15 Catalina?</a></p>
</li>
<li>
<p>来源二：</p>
<ul>
<li><a href="https://oneclient.sfx.ms/Mac/Installers/23.081.0416.0001/universal/OneDrive.pkg">ondrive-for-catalina 23.081.0416.0001 下载链接</a></li>
</ul>
</li>
<li>
<p>Microsoft 社区原帖： <a href="https://answers.microsoft.com/en-us/msoffice/forum/all/my-fix-for-onedrive-on-macos-catalina-1015x/de6ab37d-fa23-42b5-b5df-fbf05e09887b#:~:text=My%20Fix%20for%20OneDrive%20on%20MacOs%20Catalina%20%2810.15.x%29,3%20Step%20C%3A%20Prevent%20OneDrive%20from%20updating%20itself">My Fix for OneDrive on MacOs Catalina (10.15.x)</a></p>
</li>
</ul>
</li>
<li>
<p><strong>安装后先不要运行 OneDrive</strong>，先禁止OneDrive自动升级。若没禁止自动升级，则一旦联网时开启OneDrive，OneDrive就会自动升级，在几分钟内，升级到最新版本，然后重现上面macOS版本过低的故障。</p>
<p><strong>目前 macOS 上OneDrive没有关闭更新的内置选项</strong>，但可以尝试以下方法来<strong>手动关闭OneDrive的自动更新</strong>。<a href="https://answers.microsoft.com/zh-hans/msoffice/forum/all/mac-onedrive/d34a4954-7bd5-41c4-911c-92fc8c2e7a54">来源</a></p>
<ul>
<li>
<p>法一：取消可执行属性。目前有效的方式是将自动更新的程序文件设置不可执行, 需要打开&quot;终端&quot;，逐行执行如下命令。<strong>推荐</strong>用这个方法，因为将来macOS升级后，安装新的OneDrive.app后，这些修改不会保留，能自动升级。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> -x <span class="token string">'/Applications/OneDrive.app/Contents/OneDrive Updater.app/Contents/MacOS/OneDriveUpdater'</span>
<span class="token function">sudo</span> <span class="token function">chmod</span> -x /Applications/OneDrive.app/Contents/StandaloneUpdater.app/Contents/MacOS/OneDriveStandaloneUpdater<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>法二：关闭守护进程：</p>
<p>终端输入以下命令，以关停自动更新的<strong>守护进程</strong>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">launchctl remove com.microsoft.OneDriveStandaloneUpdater
<span class="token function">sudo</span> launchctl remove com.microsoft.OneDriveStandaloneUpdaterDaemon
<span class="token function">sudo</span> launchctl remove com.microsoft.OneDriveUpdaterDaemon<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>终端输入以，下命令以<strong>删除自动更新的配置文件</strong>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> /Library/LaunchAgents/com.microsoft.OneDriveStandaloneUpdater.plist
<span class="token function">sudo</span> <span class="token function">rm</span> /Library/LaunchDaemons/com.microsoft.OneDriveStandaloneUpdaterDaemon.plist
<span class="token function">sudo</span> <span class="token function">rm</span> /Library/LaunchDaemons/com.microsoft.OneDriveUpdaterDaemon.plist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li>
<p>开启OneDrive程序。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>器</category>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title>Mac按键符号</title>
    <url>/posts/39e47bde/</url>
    <content><![CDATA[<h2 id="Mac符号"><a class="header-anchor" href="#Mac符号"></a>Mac符号</h2>
<p><a href="https://blog.csdn.net/libing_zeng/article/details/73201264">参考</a></p>
<p>⌘: Command<br>
⇧: Shift<br>
⌥: Option<br>
⌃: Control<br>
↩︎: Return/Enter<br>
⌫: Delete<br>
⌦: 向前删除键（Fn+Delete）<br>
⇞: Page Up（Fn+↑）<br>
⇟: Page Down（Fn+↓）<br>
Home: Fn + ←<br>
End: Fn + →<br>
⇥: 右制表符（Tab键）<br>
⇤: 左制表符（Shift+Tab）<br>
⎋: Escape (Esc)</p>
<p><img data-src="/posts/39e47bde/20170614103620686.png" alt></p>
]]></content>
      <categories>
        <category>器</category>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title>brew使用教程</title>
    <url>/posts/bb7b572e/</url>
    <content><![CDATA[<h1 id="安装"><a class="header-anchor" href="#安装"></a>安装</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/bin/ruby -e <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>上边的命令行是两个命令，首先下载install文件，然后用系统的ruby工具安装。</p>
<p>尽量再bash或者zsh下安装，fish下会提示不识别’$'。</p>
<p>不需要使用超级权限（sudo），该文件会将HomeBrew安装至 <code>usr/local/</code> 下</p>
<p>后边还会有一些提示。继续的话会提示输入密码，等待安装完成。</p>
<p>安装完成后输入 <code>brew -v</code> 即可显示是否安装成功</p>
<pre class="line-numbers language-none"><code class="language-none">Homebrew 3.2.13-86-ga78d407
Homebrew&#x2F;homebrew-core (git revision 43c72b06c0c; last commit 2021-09-28)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="brew常用命令"><a class="header-anchor" href="#brew常用命令"></a>brew常用命令</h1>
<h2 id="安装卸载软件"><a class="header-anchor" href="#安装卸载软件"></a>安装卸载软件</h2>
<ul>
<li><code>brew --version</code> 或者 <code>brew -v</code> 显示brew版本信息</li>
<li><code>brew install &lt;软件&gt; </code> 安装指定软件</li>
<li><code>brew install  --build-from-source &lt;软件&gt;</code> 源码编译软件并安装, 而非安装预编译的软件</li>
<li><code>brew uninstall &lt;软件&gt; </code> 卸载指定软件, 但不卸载该软件的依赖</li>
<li><code>brew reinstall  &lt;软件&gt;</code> 重新安装指定软件，先卸载后安装</li>
<li><code>brew info  &lt;软件&gt;</code> 显示指定软件信息</li>
<li><code>brew list</code> 显示所有的已安装的软件</li>
<li><code>brew search &lt;搜索文本&gt;</code> 搜索本地远程仓库的软件，已安装会显示绿色的勾</li>
<li><code>brew search /&lt;搜索文本&gt;</code>/<code> 使用正则表达式搜软件</code></li>
<li><code>brew commands</code> 列出所有可用命令</li>
</ul>
<p>通过brew安装的文件会自动设置环境变量，所以不用担心命令行不能启动的问题。</p>
<ul>
<li>
<p>卸载软件及其依赖:</p>
<p>安装依赖卸载工具 <code>brew tap beeftornado/rmtree &amp;&amp; brew install brew-rmtree</code></p>
<p>卸载软件及其依赖 <code>brew rmtree &lt;软件&gt;</code></p>
</li>
</ul>
<h2 id="升级软件相关"><a class="header-anchor" href="#升级软件相关"></a>升级软件相关</h2>
<ul>
<li><code>brew update</code> 自动升级homebrew （从github下载最新版本）</li>
<li><code>brew outdated</code> 检测已经过时的软件</li>
<li><code>brew upgrade</code> 升级所有已过时的软件，即列出的以过时软件</li>
<li><code>brew upgrade --all</code> 升级所有的软件包，包括未清理干净的旧版本的包</li>
<li><code>brew upgrade  &lt;软件&gt;</code>  升级指定的软件</li>
<li><code>brew pin &lt;软件&gt; </code> 禁止指定软件升级</li>
<li><code>brew unpin &lt;软件&gt; </code> 解锁禁止升级</li>
<li><code>brew edit </code> 编辑软件，不会的情况下慎用</li>
<li><code>brew tap</code> 列出本地资源仓库，其中 homebrew 是默认仓库，其它都是第三方仓库</li>
<li><code>brew tap &lt;仓库&gt;</code> 添加第三方仓库，命名的规则按照github来定的。<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdocs.brew.sh%2FTaps">使用</a></li>
<li><code>brew untap &lt;仓库&gt; </code> 删除仓库</li>
<li><code>brew deps &lt;软件&gt; </code> 查看指定软件依赖于哪些软件</li>
<li><code>brew uses &lt;软件&gt; </code> 查看指定软件被哪些软件所依赖</li>
</ul>
<h2 id="清理相关"><a class="header-anchor" href="#清理相关"></a>清理相关</h2>
<p>homebrew再升级软件时候不会清理相关的旧版本，在软件升级后我们可以使用如下命令清理</p>
<ul>
<li><code>brew cleanup -n</code> 列出需要清理的内容</li>
<li><code>brew cleanup</code> 清理所有的过时软件</li>
<li><code>brew cleanup &lt;软件&gt;</code> 清理指定的软件过时包</li>
<li><code>brew unistall &lt;软件&gt; </code> 卸载指定软件</li>
<li><code>brew unistall  --force &lt;软件&gt;</code> 彻底卸载指定软件，包括旧版本</li>
</ul>
<h2 id="brew-cask"><a class="header-anchor" href="#brew-cask"></a>brew cask</h2>
<h3 id="安装cask"><a class="header-anchor" href="#安装cask"></a>安装cask</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew tap caskroom/cask<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="使用"><a class="header-anchor" href="#使用"></a>使用</h3>
<p><code>brew cask install </code> 安装指定图形界面软件</p>
<p><code>brew cask uninstall </code> 卸载软件</p>
<p><code>brew cask uninstall --force </code> 卸载软件，带参数</p>
<p><code>brew cask search text</code> 搜索软件</p>
<p><code>brew cask list</code> 列出所有通过cask安装的软件</p>
<p><a href="https://github.com/Homebrew/homebrew-cask/blob/master/USAGE.md">其它可以参考</a></p>
<h2 id="国内镜像安装"><a class="header-anchor" href="#国内镜像安装"></a>国内镜像安装</h2>
<p><a href="http://mirrors.ustc.edu.cn/help/brew.git.html">中科大源</a></p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">清华源</a></p>
]]></content>
      <categories>
        <category>器</category>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title>bundle文件包</title>
    <url>/posts/28e0288d/</url>
    <content><![CDATA[<h2 id="什么是bundle"><a class="header-anchor" href="#什么是bundle"></a>什么是bundle</h2>
<p>bundle文件包是macOS上的文件夹的特殊格式，使得Finder和图形界面下的应用程序可以像打开单个文件那样打开bundle文件包。</p>
<p>但是，在macOS的类unix系统内核看来，bundle仍然被当成文件夹。比如，在shell/bash/zsh下：</p>
<ul>
<li>
<p>是不是文件：<code>if [ -f &lt;bundle的路径&gt;]; then ...</code> 判断为false</p>
</li>
<li>
<p>是不是文件夹：<code>if [ -d &lt;bundle的路径&gt;]; then ...</code> 判断为true</p>
</li>
</ul>
<p>详见：<a href="https://zh.wikipedia.org/wiki/Bundle">Bundle - 维基百科，自由的百科全书</a></p>
<p>bundle的文件名格式是，<code>xxxx.特殊后缀</code>，只有特殊后缀（如 <code>.app</code>, <code>.bundle</code>, <code>.framework</code>, <code>.kext</code>, <code>.plugin</code>, <code>.textbundle</code>…等等）才会被macOS当作bundle。</p>
<h2 id="如何让Alfred能搜索到bundle"><a class="header-anchor" href="#如何让Alfred能搜索到bundle"></a>如何让Alfred能搜索到bundle</h2>
<p><img data-src="/posts/28e0288d/iShot_2024-01-19_16.07.45.png" alt="iShot_2024-01-19_16.07.45"></p>
<p><img data-src="/posts/28e0288d/iShot_2024-01-19_16.08.45.png" alt="iShot_2024-01-19_16.08.45"></p>
<h2 id="如何进入bundle内部"><a class="header-anchor" href="#如何进入bundle内部"></a>如何进入bundle内部</h2>
<p>在Finder，对着bundle单击右键，菜单内会显示<code>显示包内容</code>，点击后会进入这个特殊文件夹内部。</p>
<p>在终端，直接<code>cd xxxx.特殊后缀</code>，就能进入这个特殊文件夹内部。</p>
<h2 id="bundle和文件夹相互转换"><a class="header-anchor" href="#bundle和文件夹相互转换"></a>bundle和文件夹相互转换</h2>
<h3 id="文件夹转bundle"><a class="header-anchor" href="#文件夹转bundle"></a>文件夹转bundle</h3>
<p>详见： <a href="https://teknikaldomain.me/post/macos-bundles-explained/">https://teknikaldomain.me/post/macos-bundles-explained/</a></p>
<p><strong>有如下几种方法：</strong></p>
<h4 id="加后缀"><a class="header-anchor" href="#加后缀"></a>加后缀</h4>
<p>在Finder或在终端（用<code>mv xxxx xxxx.特殊后缀</code>命令），将文件夹重命名为<code>xxxx.特殊后缀</code>，Finder会弹出提示框（如下），若点<code>是</code>，则自动将它转换为bundle。</p>
<h4 id="命令行"><a class="header-anchor" href="#命令行"></a>命令行</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">getfileinfo -aB xxxx <span class="token comment"># 若返回1表示是bundle，返回0表示不是</span>
setfile -a B xxxx.特殊后缀 <span class="token comment"># 将文件夹属性转换为bundle属性； -a B不能写作-aB</span>
getfileinfo -aB xxxx <span class="token comment"># 若返回0，表示转换成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>题外话：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">setfile -a E xxxx.特殊后缀 <span class="token comment"># 使bundle的后缀在Finder下隐藏</span>
setfile -a e xxxx.特殊后缀 <span class="token comment"># 使bundle的后缀在Finder下可见</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="Info-plist"><a class="header-anchor" href="#Info-plist"></a>Info.plist</h4>
<p>from： <a href="https://teknikaldomain.me/post/macos-bundles-explained/">https://teknikaldomain.me/post/macos-bundles-explained/</a></p>
<blockquote>
<p>Use an extension that a program has defined in its <code>Info.plist</code> as a package type。</p>
<p>To put that second option simply, you need a <code>LSTypeIsPackage</code> key with an appropriate value in the <code>CFBundleDocumentTypes</code> key.</p>
</blockquote>
<p>from： <a href="https://stackoverflow.com/questions/2009687/make-mac-package-bundle-programmatically">objective c - make mac package/bundle programmatically - Stack Overflow</a></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>CFBundleDocumentTypes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dict</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>CFBundleTypeName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>Project<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>LSHandlerRank<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>Default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>LSTypeIsPackage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>true</span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>CFBundleTypeExtensions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>fbp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>CFBundleTypeIconFile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>CFBundleTypeRole<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>Editor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dict</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="bundle转文件夹"><a class="header-anchor" href="#bundle转文件夹"></a>bundle转文件夹</h3>
<p>首先，在Finder或在终端（用<code>mv xxxx.特殊后缀 xxxx</code>命令），将bundle的特殊后缀去掉。但此时，macOS不会自动将它转换为文件夹，而是继续当成bundle。</p>
<p>此时，在Finder中双击这个文件夹，Finder无法打开开，还会引起bug：每当进入其它app（如safari）时，状态栏会闪到Finder，因而无法使用其它app。需要重启Finder才能跳出这个bug。</p>
<p>然后，还需要在终端，执行如下命令，将bundle属性转化为文件夹属性：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">getfileinfo -aB xxxx <span class="token comment"># 若返回1表示是bundle，返回0表示不是</span>
setfile -a b xxxx <span class="token comment"># 将bundle属性转换为文件夹属性，仅当xxxx是没有特殊后缀的文件夹时，这个命令才能生效；-a b不能写作-ab</span>
getfileinfo -aB xxxx <span class="token comment"># 若返回0，表示转换成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>器</category>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title>mac_软件安装</title>
    <url>/posts/72c36e9e/</url>
    <content><![CDATA[<h2 id="第三方的软件-xxx-app-已损坏-无法打开"><a class="header-anchor" href="#第三方的软件-xxx-app-已损坏-无法打开"></a>第三方的软件  <code>xxx.app 已损坏, 无法打开</code></h2>
<p><code>xxx.app</code> 安装后, 初次打开时显示 <code>xxx.app 已损坏, 无法打开</code>， 原因是 Mac在安装第三方的软件的时候会对第三方的身份做check. 若显示  <code>xxx.app 已损坏, 无法打开</code>,</p>
<h3 id="开全局的允许安装任意来源的app"><a class="header-anchor" href="#开全局的允许安装任意来源的app"></a>开全局的允许安装任意来源的app</h3>
<p>只需要在<code>系统偏好设置 </code> -&gt; <code>安全与隐私</code> -&gt; <code>通用设置</code> 中</p>
<ul>
<li>
<p>若<code>任何来源</code> 选项被苹果隐藏起来了，如下图, 则运行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> spctl --master-disable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<p><img data-src="/posts/72c36e9e/v2-6d5737e6a0f07394b8c07a48980f2e0a_720w.jpg" alt="img"></p>
<ul>
<li>点击左下角的锁图标, 输入用户密码</li>
<li>然后选择选择 <code>任何来源</code> 然后选择 <code>仍要运行</code> 即可运行第三方的软件</li>
</ul>
<p><img data-src="/posts/72c36e9e/v2-64a193723017abb571e65cd63c694c42_720w.jpg" alt="img"></p>
<ul>
<li>若初次打开<code>xxx.app</code>仍然时显示 <code>xxx.app 已损坏, 无法打开</code>，重装<code>xxx.app</code>, 然后再打开<code>xxx.app</code>, 则可成功打开</li>
</ul>
<h3 id="授权单个app安装-macOS-Catalina-10-15-Catalina-10-15-4"><a class="header-anchor" href="#授权单个app安装-macOS-Catalina-10-15-Catalina-10-15-4"></a>授权单个app安装 (macOS &gt;=Catalina 10.15, &lt;Catalina 10.15.4)</h3>
<p>若上述操作后仍然能启动成功, 则需要授权单个app安装. 运行如下命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> xattr -d com.apple.quarantine /Applications/xxxx.app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后打开软件<code>xxx.app</code>, 即可运行成功</p>
<p>若初次打开<code>xxx.app</code>仍然时显示 <code>xxx.app 已损坏, 无法打开</code>，重装<code>xxx.app</code>, 然后再打开<code>xxx.app</code>, 则可成功打开</p>
<h2 id="TNT软件打开意外退出及崩溃闪退-macOS-Catalina-10-15-4"><a class="header-anchor" href="#TNT软件打开意外退出及崩溃闪退-macOS-Catalina-10-15-4"></a>TNT软件打开<code>意外退出</code>及<code>崩溃闪退</code> (macOS &gt;= Catalina 10.15.4 )</h2>
<p>TNT破解软件安装后, 初次打开报错 <code>意外退出</code>及<code>崩溃闪退</code></p>
<h3 id="原因"><a class="header-anchor" href="#原因"></a>原因</h3>
<p>apple删除了 TNT 破解软件的代码签名.</p>
<h3 id="对策"><a class="header-anchor" href="#对策"></a>对策</h3>
<p>自己给软件做代码签名</p>
<h4 id="安装xcode-Command-Line-Tools"><a class="header-anchor" href="#安装xcode-Command-Line-Tools"></a>安装xcode Command Line Tools</h4>
<h5 id="法一-若未装xcode-则直接装xcode-Command-Line-Tools"><a class="header-anchor" href="#法一-若未装xcode-则直接装xcode-Command-Line-Tools"></a>法一 若未装xcode, 则直接装xcode Command Line Tools</h5>
<p>访问<a href="https://developer.apple.com/download/more/">苹果开发者下载网站</a>, 选最新的xcode Command Line Tools , 点下载并按安装</p>
<h5 id="法二-若已经装过xcode-则装对应版本的xcode-Command-Line-Tools"><a class="header-anchor" href="#法二-若已经装过xcode-则装对应版本的xcode-Command-Line-Tools"></a>法二 若已经装过xcode, 则装对应版本的xcode Command Line Tools</h5>
<ul>
<li>
<p>若已经装过了<a href="https://nav.xpeople.design/tag/xcode/">xcode</a></p>
<p>可以在App Store中下载安装xCode，并且至少运行一次。</p>
</li>
<li>
<p>则需要安装xcode版本对应的安装Command Line Tools 工具</p>
<p>做法是, 打开终端工具输入如下命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xcode-select --install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>弹出后选择继续安装。</p>
</li>
</ul>
<h4 id="签名"><a class="header-anchor" href="#签名"></a>签名</h4>
<p>打开终端工具输入并执行如下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">codesign --force --deep --sign - /Applications/<span class="token operator">&lt;</span>软件名<span class="token operator">></span>.app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>输出结果</p>
<blockquote>
<p>/Applications/&lt;软件名&gt;.app : replacing existing signature</p>
</blockquote>
<p>注意后面的文件路径，你可以打开访达找到应用程序，找到要签名的软件，直接拖入 <code>终端</code> 界面，即可自动生成路径。</p>
<p>而后重新打开软件, 即可</p>
<h3 id="报错"><a class="header-anchor" href="#报错"></a>报错</h3>
<h4 id="similar-detritus-not-allowed"><a class="header-anchor" href="#similar-detritus-not-allowed"></a>similar detritus not allowed</h4>
<p>若如下报错</p>
<blockquote>
<p>/Applications/&lt;软件名&gt;.app : replacing existing signature<br>
/Applications/&lt;软件名&gt;.app : resource fork,Finder information,or similar detritus not allowed</p>
</blockquote>
<p>则先在终端执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xattr -cr /Applications/<span class="token operator">&lt;</span>软件名<span class="token operator">></span>.app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后再次执行如下指令即可</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">codesign --force --deep --sign - /Applications/<span class="token operator">&lt;</span>软件名<span class="token operator">></span>.app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果以上步骤执行完成后还是无法运行，尝试关闭一下SIP，再重复上述操作</p>
]]></content>
      <categories>
        <category>器</category>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title>mac_命令行专属命令</title>
    <url>/posts/e3c7e/</url>
    <content><![CDATA[<h1 id="mac-命令行专属命令"><a class="header-anchor" href="#mac-命令行专属命令"></a>mac 命令行专属命令</h1>
<h3 id="mac-命令行专属命令-_2"><a class="header-anchor" href="#mac-命令行专属命令-_2"></a>mac 命令行专属命令</h3>
<p>永久修改hostname (命令行行首提示中的主机名)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> scutil --set HostName <span class="token operator">&lt;</span>新hostname<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><a href="https://blog.csdn.net/flyter/article/details/8880583">参考</a></p>
]]></content>
      <categories>
        <category>器</category>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title>mac 微信备份到外接硬盘方案（软链接）</title>
    <url>/posts/f72606ee/</url>
    <content><![CDATA[<p>参考：<a href="https://luoxx.top/archives/mac-wechat-backup-path">mac 微信备份到外接硬盘方案（软链接）</a></p>
<h2 id="如何在微信里查看备份文件"><a class="header-anchor" href="#如何在微信里查看备份文件"></a>如何在微信里查看备份文件</h2>
<p>在电脑上进行如下操作：</p>
<p><img data-src="/posts/f72606ee/iShot_2023-10-31_17.32.36.png" alt="iShot_2023-10-31_17.32.36"></p>
<p>若点迁移，则可将选中的聊天或所有聊天，从电脑复制到手机，并在上手机上合并聊天记录。进行此操作需要手机也登陆了微信。</p>
<p><img data-src="/posts/f72606ee/iShot_2023-10-31_17.33.03.png" alt="iShot_2023-10-31_17.33.03"></p>
<p>若点<code>备份聊天记录至电脑</code>，且手机也登陆了微信，则会将这个微信账号的手机聊天记录，备份到电脑上，并生成一份<strong>备份文件</strong>。</p>
<p><img data-src="/posts/f72606ee/iShot_2023-10-31_17.33.12.png" alt="iShot_2023-10-31_17.33.12"></p>
<p>每一个微信账号的聊天记录备份文件</p>
<p><img data-src="/posts/f72606ee/image-1663226325395.png" alt="image-1663226325395"></p>
<h2 id="微信默认的备份目录"><a class="header-anchor" href="#微信默认的备份目录"></a>微信默认的备份目录</h2>
<p>微信的备份在 <code>~/Library/Containers/com.tencent.xinWeChat/Data/Library/Application\ Support/com.tencent.xinWeChat/2.0b4.0.9/Backup </code> ，该文件夹下，每一个微信账号的聊天记录备份一个文件夹，名称为一长串的字母及数字。</p>
<h2 id="把备份目录软链接到移动硬盘上"><a class="header-anchor" href="#把备份目录软链接到移动硬盘上"></a>把备份目录软链接到移动硬盘上</h2>
<p>把备份目录软链接到移动硬盘上，可以节约电脑上的磁盘空间。</p>
<p>操作如下：</p>
<ul>
<li>
<p>如果你的mac版微信没有执行过备份操作，那可能没有这个Backup目录，或者Backup目录下面没有子目录。为了保证文件权限一致，需要先执行一次备份生成这个目录。无需全量备份，只备份一个人的聊天记录都行。</p>
</li>
<li>
<p>将该<code> Backup</code>文件夹复制到移动硬盘下的某个目录，比如 <code>/Volumes/&lt;硬盘名&gt;/wechat-backup</code>。注意此处的<strong>路径中不要有中文</strong>，否则微信无法读取。</p>
</li>
<li>
<p>复制完成后，删除微信默认备份路径下的<code>Backup</code>文件夹。<br>
然后创建软连接，打开终端，执行如下命令</p>
<pre class="line-numbers language-back" data-language="back"><code class="language-back">cd ~&#x2F;Library&#x2F;Containers&#x2F;com.tencent.xinWeChat&#x2F;Data&#x2F;Library&#x2F;Application\ Support&#x2F;com.tencent.xinWeChat&#x2F;2.0b4.0.9
ln -s &#x2F;Volumes&#x2F;&lt;硬盘名&gt;&#x2F;backup&#x2F;wechat&#x2F;Backup Backup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>给微信签名，授权它访问程序目录外的文件。（没有授权时，只能访问程序目录内的文件，这是macOS的沙盒机制）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> codesign --sign - --force --deep /Applications/WeChat.app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>关闭微信，重新打开，再次进入微信的<code>管理备份文件</code>栏目（详见<a href="#%E5%A6%82%E4%BD%95%E5%9C%A8%E5%BE%AE%E4%BF%A1%E9%87%8C%E6%9F%A5%E7%9C%8B%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6">上文</a>），会弹出一个是否允许访问外挂硬盘的提示，点击同意之后就能看到我们之前的备份了：</p>
<p><img data-src="/posts/f72606ee/iShot_2023-02-21_09.59.14.png" alt="iShot_2023-02-21_09.59.14"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>器</category>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title>mac扫二维码</title>
    <url>/posts/370c0d9d/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>器</category>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title>mac上使用X11</title>
    <url>/posts/3ad41d06/</url>
    <content><![CDATA[<h2 id="XQuartz"><a class="header-anchor" href="#XQuartz"></a>XQuartz</h2>
<h3 id="多显示屏XQuartz闪退"><a class="header-anchor" href="#多显示屏XQuartz闪退"></a>多显示屏XQuartz闪退</h3>
<p><a href="https://apple.stackexchange.com/questions/235279/inkscape-or-other-xquartz-window-disappears-when-using-external-screen">对策</a> <a href="https://www.laptopmag.com/articles/mirror-display-macos">对策参考</a></p>
<h2 id="MacPorts安装X11"><a class="header-anchor" href="#MacPorts安装X11"></a>MacPorts安装X11</h2>
<p><a href="https://www.jianshu.com/p/fd422e004f62">安装教程</a> 我依照此教程安装后，X11.app打不开，故卸载了macports</p>
<p><a href="https://guide.macports.org/chunked/installing.macports.uninstalling.html">卸载macports</a></p>
]]></content>
      <categories>
        <category>器</category>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title>mac上读取ntfs</title>
    <url>/posts/5863fcf3/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>方法</th>
<th>原理</th>
<th>优缺点</th>
<th>速度</th>
<th>收费否</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://ntfstool.com">ntfstool</a></td>
<td><a href="https://github.com/ntfstool/ntfstool/blob/master/README-CN.md">参见</a>,第一次release在2020-3-10</td>
<td>免费里最靠谱的</td>
<td></td>
<td>开源免费</td>
</tr>
<tr>
<td><a href="https://liam.page/2020/04/08/enable-NTFS-writing-access-by-NTFS-3G/">ntfs-3g</a></td>
<td></td>
<td>可能遇到 chkdsk</td>
<td></td>
<td>免费</td>
</tr>
<tr>
<td><a href="https://github.com/ntfstool/ntfstool">tuxera</a></td>
<td>基于ntfs3g封装</td>
<td>可能遇到 chkdsk</td>
<td></td>
<td>付费</td>
</tr>
<tr>
<td>Paragon</td>
<td></td>
<td></td>
<td>先慢后快, 最终比Tuxera快, 类似于本机HFS+速度</td>
<td>付费</td>
</tr>
<tr>
<td><a href="https://www.jianshu.com/p/106c40f9500d">osx原生ntfs写功能</a></td>
<td>此功能不稳定, 被macOS默认关闭了</td>
<td>只能打开预定名字的的磁盘; 直接把磁盘可能损坏索引, 但 不丢文件，可在win下修复</td>
<td></td>
<td>免费</td>
</tr>
<tr>
<td><a href="https://mounty.app">mounty</a></td>
<td>基于 osx 内置的 ntfs 写功能</td>
<td>可能丢索引, 不丢文件，可在win下修复</td>
<td></td>
<td>免费</td>
</tr>
<tr>
<td>买希捷硬盘送软件（官网下载）</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>虚拟机</td>
<td></td>
<td>开销大</td>
<td>移动硬盘数据安全</td>
<td></td>
</tr>
<tr>
<td>fat32</td>
<td>通用文件系统</td>
<td>单文件&lt;=4GB</td>
<td></td>
<td></td>
</tr>
<tr>
<td>exfat</td>
<td>通用文件系统, 微软自家</td>
<td>单文件&lt;=1EB; 没有文件日志功能, 在修改文件索引时若拔下移动硬盘, 会有部分文件/子目录消失了</td>
<td></td>
<td>免费</td>
</tr>
</tbody>
</table>
<p><img data-src="/posts/5863fcf3/v2-cacc571eedb04c2fb116e64bb02733ac_720w.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>器</category>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title>mac开机启动项设置</title>
    <url>/posts/d4fc8fbf/</url>
    <content><![CDATA[<h1 id="将脚本设为开机自启"><a class="header-anchor" href="#将脚本设为开机自启"></a>将脚本设为开机自启</h1>
<h2 id="非sudo的自启脚本"><a class="header-anchor" href="#非sudo的自启脚本"></a>非sudo的自启脚本</h2>
<p>mac下，网上可查到脚本开机自启方法众多，经验证，有效的方法包括不限于以下两种</p>
<h3 id="不推荐的方法"><a class="header-anchor" href="#不推荐的方法"></a>不推荐的方法</h3>
<p>以下方法，不管是否勾选<code>隐藏</code>，都会造成开机时弹出“终端.app”或&quot;iTerm2.app&quot;窗口，以运行脚本。我希望是完全隐藏的运行，不要弹出窗口。</p>
<ul>
<li>
<p>直接将要开机运行的脚本（<a href="http://xn--xxx-eo8e.sh">如xxx.sh</a>，<a href="http://xxx.sh">xxx.sh</a>）设为可执行（无需设成777，可执行就好）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x 【脚本】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>将该脚本的自动打开软件设为“终端.app”或&quot;iTerm2.app&quot;</p>
</li>
<li>
<p>然后将此脚本<a href="#add_to_auto_start">添加到开机自启项</a></p>
</li>
</ul>
<h3 id="推荐的方法"><a class="header-anchor" href="#推荐的方法"></a>推荐的方法</h3>
<p>以下方法，设置便捷，且开机完全隐藏运行（不弹出任何窗口）</p>
<h4 id="创建一个“自动操作”的“应用程序”"><a class="header-anchor" href="#创建一个“自动操作”的“应用程序”"></a>创建一个“自动操作”的“应用程序”</h4>
<p><img data-src="/posts/d4fc8fbf/2019-02-22_09.59.13-0801515.png" alt></p>
<p><img data-src="/posts/d4fc8fbf/2019-02-22_09.59.33-0801522.png" alt></p>
<p><img data-src="/posts/d4fc8fbf/2019-02-22_09.59.59-0801527.png" alt></p>
<p><img data-src="/posts/d4fc8fbf/2019-02-22_10.00.31-0801536.png" alt></p>
<p><img data-src="/posts/d4fc8fbf/2019-02-22_10.01.46-0801542.png" alt></p>
<p><img data-src="/posts/d4fc8fbf/2019-02-22_10.05.36-0801553.png" alt></p>
<p><img data-src="/posts/d4fc8fbf/2019-02-22_10.09.21-0801561.png" alt></p>
<h4 id="将应用程序添加到开机自启项"><a class="header-anchor" href="#将应用程序添加到开机自启项"></a>将应用程序添加到开机自启项</h4>
<p><a name="add_to_auto_start"></a></p>
<p>在系统偏好设置中，如下操作</p>
<p><img data-src="/posts/d4fc8fbf/2019-02-22_09.47.18.png" alt></p>
<p><img data-src="/posts/d4fc8fbf/2019-02-22_09.47.37.png" alt></p>
<p><img data-src="/posts/d4fc8fbf/2019-02-22_09.47.50.png" alt></p>
<p><img data-src="/posts/d4fc8fbf/2019-02-22_09.44.35.png" alt></p>
<p>点击<code>隐藏</code>表示开机时<a href="https://www.pcmag.com/feature/368778/how-to-stop-mac-apps-from-launching-at-startup/4">App的窗口不在屏幕上弹出</a></p>
<h2 id="需要sudo的自启脚本"><a class="header-anchor" href="#需要sudo的自启脚本"></a>需要sudo的自启脚本</h2>
<h3 id="不推荐的方法-_2"><a class="header-anchor" href="#不推荐的方法-_2"></a>不推荐的方法</h3>
<p><a href="https://blog.csdn.net/github_35041937/article/details/52709098">com.apple.loginwindow LoginHook</a>: launchctl是苹果官方推荐的开机自启方法, 功能比此法更强大</p>
<h3 id="launchctl"><a class="header-anchor" href="#launchctl"></a>launchctl</h3>
<p><a href="https://0clickjacking0.github.io/2020/05/20/macos%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E4%BB%BB%E5%8A%A1/">教程</a> <a href="https://www.jianshu.com/p/bd9e12e3966c">案例参考</a></p>
<p>launchctl是苹果官方推荐的开机自启方法. 支持开机自启/用户登录自启，支持守护进程（周期性运行、持续运行），支持用sudo或普通用户运行</p>
<h4 id="配置步骤"><a class="header-anchor" href="#配置步骤"></a>配置步骤</h4>
<ul>
<li>
<p>编写自己的脚本, 添加可执行权限</p>
<ul>
<li>注意, 要用 <code>sh</code> 来测试运行, 而不是用<code>bash</code>或<code>sh</code></li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> a+x 【myscript】.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>编写Launchd配置文件, <code>【服务名称】.plist</code>文件(【服务名称】可以包含&quot;.&quot;), 文件内写入如下内容</p>
<ul>
<li>文件名与下文的<code>Label</code>字段必须相同</li>
</ul>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">plist</span> <span class="token name">PUBLIC</span> <span class="token string">"-//Apple Computer//DTD PLIST 1.0//EN"</span> <span class="token string">"http://www.apple.com/DTDs/PropertyList-1.0.dtd"</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plist</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dict</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>Label<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>【服务名称】<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>ProgramArguments<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>【myscript.sh的路径】<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>RunAtLoad<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>true</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dict</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plist</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>检查<code>.plist</code>文件语法是否正确</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">plutil 【.plist文件】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>结合上述两篇文章, 确定<code>.plist</code>文件放在系统启动还是用户启动时运行脚本, 我选择的是用户目录(<code>~/Library/LaunchAgents/</code>)</p>
<p>plist脚本存放在以下目录：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>目录</th>
<th>运行条件</th>
<th>用于</th>
</tr>
</thead>
<tbody>
<tr>
<td>User Agents</td>
<td>~/Library/LaunchAgents</td>
<td>当前用户登录后运行</td>
<td>由用户自己定义的任务项</td>
</tr>
<tr>
<td>Global Agents</td>
<td>/Library/LaunchAgents</td>
<td>任何用户登录后都会运行</td>
<td>由管理员为用户定义的任务项</td>
</tr>
<tr>
<td>Global Daemons</td>
<td>/Library/LaunchDaemons</td>
<td>内核初始化加载完后就运行, 无需用户登录</td>
<td>由管理员定义的守护进程任务项</td>
</tr>
<tr>
<td>System Agents</td>
<td>/System/Library/LaunchAgents</td>
<td>任何用户登录后都会运行</td>
<td>由Mac OS X为用户定义的任务项</td>
</tr>
<tr>
<td>System Daemons</td>
<td>/System/Library/LaunchDaemons</td>
<td>内核初始化加载完后就运行, 无需用户登录</td>
<td>由Mac OS X定义的守护进程任务项</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>load这个配置:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">launchctl load -w 【.plist文件】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>以下服务如果需要用sudo才能启动的，需要在命令前加入sudo</p>
</li>
<li>
<p>登入登出测试, 或用如下命令测试</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">launchctl start 【服务名称】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<h4 id="launchctl-命令用法"><a class="header-anchor" href="#launchctl-命令用法"></a>launchctl 命令用法</h4>
<p>加<code>sudo</code>则为root用户的launchctl, 不加<code>sudo</code>则为当前用户的launchctl.</p>
<ul>
<li>
<p>加载启动任务, 加<code>-w</code>则此后每次登录/开机仍然加载, 否则不加载</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> launchctl load <span class="token punctuation">[</span>-w<span class="token punctuation">]</span>【.plist文件路径】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>卸载启动任务, 加<code>-w</code>则此后每次登录/开机则不再加载, 否则仍加载</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> launchctl load <span class="token punctuation">[</span>-w<span class="token punctuation">]</span>【.plist文件路径】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>查看服务运行状态:</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> launchctl list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>第一个数字是进程的PID，如果它正在运行，如果它不运行，它显示一个’ - ‘</li>
<li>第二个数字是进程的退出代码（如果它已经完成），如果是负数，则是杀死信号的数量</li>
<li>第三列是进程名称</li>
</ul>
<p><img data-src="/posts/d4fc8fbf/image-20211020192441451.png" alt="image-20211020192441451"></p>
</li>
</ul>
<h1 id="将应用程序设置为开机自启"><a class="header-anchor" href="#将应用程序设置为开机自启"></a>将应用程序设置为开机自启</h1>
<h2 id="法一【推荐】"><a class="header-anchor" href="#法一【推荐】"></a>法一【推荐】</h2>
<p>在<code>系统偏好设置-用户与群组-登录项</code>加上<code>xxx.app</code>，<strong>并勾选<code>隐藏</code></strong>，则登录系统用户后：</p>
<ul>
<li>应用程序的前台窗口不会开（若<strong>勾选<code>隐藏</code></strong>）/会开（若<strong>勾除<code>隐藏</code></strong>）</li>
<li>屏幕下方程序坞中会出现这个应用的图标，并带有一个小白点（带有一个小白点，表示程序正在运行）</li>
<li>若该应用程序有相应的任务栏图标，则屏幕右上方也会出现它</li>
</ul>
<h2 id="法二（当法一失效时使用）"><a class="header-anchor" href="#法二（当法一失效时使用）"></a>法二（当法一失效时使用）</h2>
<p>在<code>系统偏好设置-用户与群组-登录项</code> 去掉XXX.app的开机自启</p>
<p>用<code>Automator.app</code>创建一个<code>隐藏打开Folx.app</code>, 内部使用applescript, applescript内容为</p>
<ul>
<li>
<p>后台开启应用程序</p>
<pre class="line-numbers language-none"><code class="language-none">on run &#123;input, parameters&#125;
    tell application &quot;XXX&quot; to launch
    tell application &quot;System Events&quot; to set visible of process &quot;XXX&quot; to false
end run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>而后，在<code>系统偏好设置-安全性与隐私-隐私-辅助功能</code>里, 添加<code>隐藏打开XXX.app</code>, 以便使得它能够如上面代码那样调用<code>&quot;System Events”</code>。</p>
</li>
</ul>
<p>​		<code>tell application &quot;应用程序名称&quot; to launch</code>是后台开启，即：<strong>应用程序的窗口不会开</strong></p>
<ul>
<li>
<p>前台开启应用程序</p>
<pre class="line-numbers language-none"><code class="language-none">on run &#123;input, parameters&#125;
    tell application &quot;XXX&quot; to activate
end run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><code>tell application &quot;应用程序名称&quot; to activate</code>是前台开启，即：<strong>应用程序的窗口会开</strong></p>
</li>
</ul>
<p>而后，在<code>系统偏好设置-用户与群组-登录项</code>里, 添加<code>隐藏打开XXX.app</code>。</p>
<p>则登录系统用户后, XXX.app的前台窗口全程都不会/会启动；屏幕右上方的任务栏中会出现XXX程序；屏幕下方的程序坞也会出现带小白点的XXX.app（带有一个小白点，表示程序正在运行）。</p>
<h1 id="异常开机自启的软件"><a class="header-anchor" href="#异常开机自启的软件"></a>异常开机自启的软件</h1>
<h2 id="Folx-app"><a class="header-anchor" href="#Folx-app"></a>Folx.app</h2>
<p>在Folx软件内部设置里<strong>没有</strong>开机自启的选项。</p>
<p>若在<code>系统偏好设置-用户与群组-登录项</code>加上Folx.app，并勾选<code>隐藏</code>，则登录系统用户后, Folx<strong>的前台窗口不会开</strong>；程序坞中会出现这个应用的图标，并带有一个小白点（带有一个小白点，表示程序正在运行）；任务栏图标会出现Folx的图标。</p>
<h2 id="SideNotes-app"><a class="header-anchor" href="#SideNotes-app"></a>SideNotes.app</h2>
<p>在软件内部的设置里, 勾选开机自启后, 在<code>系统偏好设置-用户与群组-登录项</code>里却没有此app. 登录系统用户后, 会闪现一个标题为”windows”, 内容为空的窗口, 一秒左右消失.</p>
<p>解决办法: 则软件内部的设置里, 勾除开机自启; 而后在<code>系统偏好设置-用户与群组-登录项</code>里, 勾选此app, 并选中<code>隐藏</code>. 登录系统用户后, 不会有此闪现的窗口.</p>
<h2 id="qv2ray-app"><a class="header-anchor" href="#qv2ray-app"></a>qv2ray.app</h2>
<p>在qv2ray软件内部设置里, 勾选开机自启后, 则在<code>系统偏好设置-用户与群组-登录项</code>里有qv2ray.app。 登录系统用户后, 会显示qv2ray的主窗口(即代理节点列表的窗口), 并不会自动关闭前台窗口</p>
<p>解决办法: 则软件内部的设置里, 勾除qv2ray的开机自启, 而后在<code>系统偏好设置-用户与群组-登录项</code>里此软件会自动消失. 用<code>Automator.app</code>创建一个<code>隐藏打开qv2ray.app</code>, 内部使用applescript, 内容为</p>
<pre class="line-numbers language-none"><code class="language-none">on run &#123;input, parameters&#125;
    tell application &quot;qv2ray&quot; to activate
    tell application &quot;System Events&quot;
        keystroke &quot;W&quot; using &#123;command down&#125;
    end tell
end run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>并在<code>系统偏好设置-安全性与隐私-隐私-辅助功能</code>里, 添加<code>隐藏打开qv2ray.app</code>, 以便使得它能给<code>&quot;System Events”</code>发送快捷键.</p>
<p>而后, 在<code>系统偏好设置-用户与群组-登录项</code>里, 添加<code>隐藏打开qv2ray.app</code>. 则登录系统用户后，屏幕右上方的任务栏中会出现qv2ray， qv2ray主窗口只会闪现一秒就消失, 而后qv2ray保持后台运行，且屏幕下方的程序坞qv2ray的带小白点会消失（带有小白点表示程序正在运行）。</p>
]]></content>
      <categories>
        <category>器</category>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title>mac隐藏dock图标</title>
    <url>/posts/3e3ee247/</url>
    <content><![CDATA[<h1 id="MacOS隐藏Dock栏中特定App图标的三种方法"><a class="header-anchor" href="#MacOS隐藏Dock栏中特定App图标的三种方法"></a>MacOS隐藏Dock栏中特定App图标的三种方法</h1>
<p>来自：<a href="https://zhuanlan.zhihu.com/p/464697398">出处</a></p>
<p>有些App在设定中并没有“<strong>在Dock中隐藏应用图标</strong>”的自定义选项，而我们有时不希望<strong>App图标在Dock中常驻</strong>，但又希望App能在<strong>后台保持运行</strong>。</p>
<p><strong>在这里总结出三种已知的方法：</strong></p>
<ol>
<li><a href="https://link.zhihu.com/?target=https%3A//www.macenhance.com/cdock.html">cDock</a> （需要关闭<a href="https://link.zhihu.com/?target=https%3A//sspai.com/post/55066">SIP</a>，暂不支持M1）</li>
<li>直接修改<strong>Info.plist</strong>文件 （通用性差，少数软件支持）</li>
<li><a href="https://link.zhihu.com/?target=https%3A//github.com/FirePanther/MacOS-Hide-Dock-Icon">PHP脚本</a>（通用性强，操作步骤较为复杂）</li>
</ol>
<h2 id="cDock"><a class="header-anchor" href="#cDock"></a>cDock</h2>
<p><img data-src="/posts/3e3ee247/v2-25c2f7e168cd9b6ae3fdd9a252de5e20_1440w.jpg" alt="img"></p>
<p>cDock是macEnhance旗下一款可以做到更改图标，间距，阴影甚至添加音乐播放器的强大Dock栏自定义应用。</p>
<p>该软件目前是付费的，可以从mac-torrent网站上下载TNT破解版。此软件需要关闭<a href="https://link.zhihu.com/?target=https%3A//sspai.com/post/55066">SIP</a>使用，且目前不支持M1，所以我也没有使用过，放在这里供非M1机型的用户参考，有兴趣的朋友可以去试一试。</p>
<p>目前出了beta版，链接在这里，<a href="https://link.zhihu.com/?target=https%3A//github.com/MacEnhance/appcast/tree/master/Beta/cDock">cDock 5.0.2</a>，是否支持M1尚不明确。</p>
<h3 id="如何恢复原生Dock的主题"><a class="header-anchor" href="#如何恢复原生Dock的主题"></a>如何恢复原生Dock的主题</h3>
<p><a href="https://github.com/w0lfschild/cDock-Issue-Tracker/issues/190#issuecomment-653399631">参见</a></p>
<p>删除文件 <code>/Library/Application Support/MacEnhance/Plugins/cDock.bundle</code>，再在cDock的窗口中点击 <code>Restart Dock</code> ，则恢复原生Dock的主题，但cDock中除主题之外的其他设置的也会失效，比如隐藏图标的设置。</p>
<p>卸载cDock前，请进行以上设置，以恢复原生Dock的主题。不然即使是重启操作系统，也不会恢复原生Dock的主题。</p>
<p><img data-src="/posts/3e3ee247/image-20231030191233830.png" alt="image-20231030191233830"></p>
<h2 id="修改Info-plist文件"><a class="header-anchor" href="#修改Info-plist文件"></a>修改Info.plist文件</h2>
<p>此方法适用于<strong>较少数软件</strong>，但方法简单，可以先试一试。（重启可能失效）</p>
<ul>
<li><strong>首先完全退出想要隐藏图标的App</strong></li>
<li>打开访达，进入应用程序文件夹，找到想要隐藏图标的App，右键选择【显示包内容】</li>
<li>双击打开<code>Contents/Info.plist</code></li>
<li>在<code>&lt;dict&gt;</code>下方一行插入以下代码，保存</li>
</ul>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;key>LSUIElement&lt;/key> 
&lt;true/><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>重启App</li>
</ul>
<p><img data-src="/posts/3e3ee247/v2-5289f5e52f7bd9d7e40602771aa15c55_1440w.jpg" alt="img"></p>
<p><strong>如果打开提示意外错误，则代表该方法不适用于此App，则重复上述步骤删除代码保存即可恢复。</strong></p>
<p>我测试下来主流软件基本都不支持，要么意外错误，要么Info.plist不给修改…</p>
<h2 id="PHP脚本"><a class="header-anchor" href="#PHP脚本"></a>PHP脚本</h2>
<p>该方法几乎适用于所有App（重启不失效），<strong>但Mac原生软件不支持</strong>。</p>
<p>原理是和方法2一样的，只不过好像是使用脚本修改了证书可以强行更改Info.plist文件（不是很懂）。</p>
<p><strong>使用这个方法的缺点是无法更改软件设定（左上角不会出现菜单栏），以及可能重置App的设定。</strong></p>
<p>所以比较<strong>适用于</strong>一些不怎么需要修改设定，开机打开直接常驻，或者可以使用快捷键呼出的App。</p>
<ol>
<li>安装PHP环境（已经有了的话可直接跳过）</li>
</ol>
<ul>
<li>
<p>最简单可以直接到<a href="https://link.zhihu.com/?target=https%3A//brew.sh/">Homebrew</a>，运行终端，输入网页中的代码回车，等待5-10分钟即可</p>
</li>
<li>
<p>下载<a href="https://link.zhihu.com/?target=https%3A//github.com/FirePanther/MacOS-Hide-Dock-Icon">PHP脚本</a>里的hideDockIcon.php脚本，右上角Code-Download ZIP解压就行</p>
</li>
<li>
<p><strong>首先完全退出想要隐藏图标的App</strong></p>
</li>
<li>
<p>打开终端，输入“export PATH=/opt/homebrew/bin:$PATH“，回车</p>
</li>
<li>
<p>输入“sudo php“，敲一下空格，把hideDockIcon.php文件直接拖进终端，回车</p>
</li>
<li>
<ul>
<li>如果显示command not found，可以试一下输入“brew install php“重新加载一下PHP环境</li>
</ul>
</li>
<li>
<p>输入mac的密码，文字不会显示，输完按回车</p>
</li>
<li>
<p>显示App name:</p>
</li>
</ul>
<p><img data-src="/posts/3e3ee247/v2-9857afda1b0bc1d9e3aba3dfbe368cca_1440w.jpg" alt="img"></p>
<ul>
<li>这里输入想要隐藏图标的App名称，中文不支持。可以右键App-显示包内容-Contents-MacOS里的Unix文件查看对应的英文名。例如微信对应的是WeChat</li>
</ul>
<p><img data-src="/posts/3e3ee247/v2-3c6563ade8f12a245edaf7f819bef81a_1440w.jpg" alt="img"></p>
<ul>
<li>回车后，如出现Finished则代表成功</li>
</ul>
<p><img data-src="/posts/3e3ee247/v2-fa81006a791949693a7837cb0f01a44e_1440w.jpg" alt="img"></p>
<ul>
<li>从启动台打开App，App会先在Dock栏跳动加载，加载完后图标自动消失，但App依旧在运行。</li>
<li>微信的话可以直接用设定好的快捷键呼出，菜单栏显示未读数量就行，省下一个Dock位~</li>
<li>我个人还将Rainlendar和iSee Pro这两个软件隐藏了，后台常驻不占用Dock栏保持整洁。</li>
</ul>
<p><img data-src="/posts/3e3ee247/v2-169f5a0692ebaa2a8c5fc0d0445873fa_1440w.jpg" alt="img"></p>
<p><strong>接下来说恢复显示的方法：</strong></p>
<ul>
<li>首先需要退出App，有的朋友就要问了**Dock栏也不显示，菜单栏也没有怎么退出呢？**别急！</li>
<li>咱们打开活动监视器，找到该App，倒数第二列会显示PID编号，如我这里微信的PID是86306</li>
</ul>
<p><img data-src="/posts/3e3ee247/v2-7e6e4f0de69e63f8e5d15b6f8bb91ce1_1440w.jpg" alt="img"></p>
<ul>
<li>打开终端，输入“kill PID号码“，例如“kill 86306”</li>
<li>回车即可退出该App</li>
</ul>
<p><strong>然后是恢复App在Dock栏显示的步骤</strong></p>
<ul>
<li>重复以上加载PHP脚本的步骤，一模一样照葫芦画瓢，在输入完App name之后会弹出<strong>不一样的指令</strong></li>
<li>在Would you like to show it? (y/n) 后输入y，回车即可</li>
<li>再重新打开软件，Dock栏即可恢复显示！</li>
</ul>
<p><img data-src="/posts/3e3ee247/v2-6e003fe38c4bdfc65da6a9cad3834a9e_1440w.jpg" alt="img"></p>
<p>以上方法主要是在这个帖子上查询到并总结的，有兴趣可以看看原帖的讨论。</p>
<blockquote>
<p><a href="https://link.zhihu.com/?target=https%3A//apple.stackexchange.com/questions/207939/how-to-hide-a-specific-active-app-on-os-x-has-to-be-reversible">https://apple.stackexchange.com/questions/207939/how-to-hide-a-specific-active-app-on-os-x-has-to-be-reversible</a></p>
</blockquote>
]]></content>
      <categories>
        <category>器</category>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title>mac外接显示屏开启HiDPI</title>
    <url>/posts/4bc94fac/</url>
    <content><![CDATA[<h1 id="分辨率与HiDPI"><a class="header-anchor" href="#分辨率与HiDPI"></a>分辨率与HiDPI</h1>
<h2 id="电脑显示器分辨率"><a class="header-anchor" href="#电脑显示器分辨率"></a>电脑显示器分辨率</h2>
<p>16:9 显示器</p>
<ul>
<li>1080p: 1920x1080 = 3 x 40 x (16:9)</li>
<li>2k: 2560x1440  = 4 x 40 x (16:9)</li>
<li>4k: 3840×2160 = 6 x 40 x (16:9) = 1080p 长宽均2倍</li>
<li>5k: 5120X2880 = 8 x 40 x (16:9) = 2k 长宽均2倍</li>
</ul>
<h2 id="HiDPI的原理"><a class="header-anchor" href="#HiDPI的原理"></a>HiDPI的原理</h2>
<p>WxH HiDPI, 即将原本渲染到WxH屏的内容(图像/文字/图形), 现在直接渲染到2Wx2H分辨率, 再由实际屏(分辨率为W’xH’), 上/下采样到W’xH’来显示.</p>
<p>两种实用的特殊情况:</p>
<ul>
<li>有下采样的: 若2W&gt;=W’&gt;W, 2H&gt;=H’&gt;H, 则在高分屏(W’xH’), 下采样显示两倍低分屏(2Wx2H)的内容, 内容大小与低分屏(WxH)等大, 但细节更多.</li>
<li>无下采样的: 若2W=W’, 2H=H’, 则将原本渲染低分屏(WxH)到1x1个像素内容, 现在直接渲染到2x2个像素, 高分屏(W’xH’)可以直接显示两倍低分屏(2Wx2H), 无需下采样环节, 故而<strong>这比前述情况HiDPI更清晰的.</strong></li>
</ul>
<p>注意:</p>
<ul>
<li>如果不考虑点阵字体的渲染, 仅考虑矢量字体/图像/图形的渲染, 则不要求一定W和W’可约, H和H’可约, 或者H/H’=1/2, 任何 W’,W, H’,H的情形 (即便它们互质), 皆可在整个屏幕的范围内实现HiDPI. 即不是成倍缩放, 而是&quot;无极缩放&quot;.</li>
<li>若W/W’!=H/H’, 可以通过屏幕上下/左右空出一些像素不使用, 来实现WxH HiDPI.</li>
</ul>
<p>例:</p>
<ul>
<li>
<p>无下采样的: 24寸4k屏 显示1080p :</p>
<ul>
<li>若选择1920x1080 HiDPI模式, 则显示的内容和24寸1080p屏一样多, 但更细腻. 这是因为原本渲染到1080p屏的1x1个像素的内容, 现在直接渲染到4k屏2x2个像素, 故而细节更多, 例图如下</li>
</ul>
<p><img data-src="/posts/4bc94fac/e1a2029b3539506dd33ab73f7862c2bf_1440w.jpg" alt="img"></p>
<ul>
<li>
<p>若选择1920x1080 非HiDPI模式, 则显示的内容和24寸1080p屏一样多, 但会很模糊. 这是因为, 1080p屏的1x1个像素的内容, 先渲染到1080p屏的1x1个像素, 再强行用4k屏2x2个像素去显示, 效果如下图左侧. (右侧是1920x1080 HiDPI模式)</p>
<p><img data-src="/posts/4bc94fac/f5412a73a4bf91d60a315d3dcdb25d8d_1440w.jpg" alt="img"></p>
</li>
</ul>
</li>
<li>
<p>有下采样的: 24寸2k屏 显示1080p:</p>
<ul>
<li>选择1920x1080 HiDPI模式, 则显示的内容和24寸1080p屏一样多, 但更细腻. 这是因为原本渲染到1080p屏的1x1个像素的内容, 现在直接渲染到<strong>4k屏2x2个像素</strong>, 然后用2k屏强行显示(需要下采样),  故而细节比起1080p屏更多, 例图略.</li>
<li>选择1920x1080 非HiDPI模式, 则显示的内容和24寸1080p屏一样多, 但更模糊, 字体发虚. 这是因为1080p屏幕内的内容, 先渲染到1920x1080个像素, 再由显示器内插值放缩到2560x1440个像素, 用2k屏显示, 由于内插值故而模糊发虚.</li>
</ul>
</li>
</ul>
<h2 id="显示器分辨率选择推荐"><a class="header-anchor" href="#显示器分辨率选择推荐"></a>显示器分辨率选择推荐</h2>
<p>使用了retina屏的新款macbookpro (RMBP), 其屏幕单位面积的像素数目(PPI, Pixels Per Inch)足够高, 使得位于 笔记本屏幕距眼的距离 时, 视网膜无法分辨出单个像素, 即 $像素宽度/屏眼距离&lt;人眼可分辨最小角度$, 故称视网膜屏.</p>
<img data-src="/posts/4bc94fac/image-20201107204216961.png" alt="image-20201107204216961" style="zoom:50%;">
<p>外接显示器在采购时, 如需达到和retina屏相同的细腻观感, 则需要选择竟可能高PPI的显示器, 以下是最优的选择:</p>
<ul>
<li>27寸外接屏: 5k屏</li>
<li>24寸外接屏: 4k屏</li>
</ul>
<img data-src="/posts/4bc94fac/image-20201107204232666.png" alt="image-20201107204232666" style="zoom:50%;">
<p>屏眼距离越远, 要达到视网膜屏, 所需的PPI越低. 例如30寸1080p的电视机, 离人足够远, 也能达到视网膜屏. (但电视机用于显示图像而非文字, 则不太讲究视网屏)</p>
<p>1 英寸 = 2.54 cm</p>
<p>pixel per inch: $PPI=\dfrac{\sqrt{高_{像素数}^2+宽_{像素数}^2}}{对角线长(inch)}$</p>
<p>自定义 pixel per radian: $ PPR:=\frac{像素数}{视角(弧度)}=PPI \times 视距(inch)=PPI \times \frac{视距(cm)}{2.54 cm/inch}$</p>
<p>人眼分辨率极限</p>
<p>最差θ=1.22<em>555</em>10^(-9)/(1.5<em>10^(-3))= 0.0004514rad<br>
最好θ=1.22</em>555<em>10^(-9)/(8</em>10^(-3))= 0.0000846375rad<br>
平均θ=1.22<em>555</em>10^(-9)/(5*10^(-3))= 0.00013542rad</p>
<table>
<thead>
<tr>
<th>对角线长</th>
<th>显示器实际分辨率</th>
<th>长宽(cm)</th>
<th>PPI</th>
<th>适合视距(cm)</th>
<th>PPR</th>
</tr>
</thead>
<tbody>
<tr>
<td>27寸</td>
<td>3840x2160 (4k)</td>
<td>59.67x33.56</td>
<td>164</td>
<td>70</td>
<td>4497</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td>75</td>
<td>4843</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td>80</td>
<td>5139</td>
</tr>
<tr>
<td>24寸</td>
<td>3840x2160 (4k)</td>
<td>52.68x29.63</td>
<td>184</td>
<td>60</td>
<td>4336</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td>65</td>
<td>4698</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td>70</td>
<td>5059</td>
</tr>
<tr>
<td>mbp 13.3寸</td>
<td>2560 x 1600</td>
<td>30.41x21.24</td>
<td>227</td>
<td>55</td>
<td>4915</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td>50</td>
<td>4468</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td>45</td>
<td>4021</td>
</tr>
</tbody>
</table>
<h1 id="通用技巧"><a class="header-anchor" href="#通用技巧"></a>通用技巧</h1>
<h2 id="SIP"><a class="header-anchor" href="#SIP"></a>SIP</h2>
<h3 id="判断是否开启了SIP"><a class="header-anchor" href="#判断是否开启了SIP"></a>判断是否开启了SIP</h3>
<p>终端执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">csrutil status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回<code>System Integrity Protection status: enabled.</code> 则为开启了</p>
<p>返回<code>System Integrity Protection status: disabled</code> 则为关闭了</p>
<h3 id="关闭SIP"><a class="header-anchor" href="#关闭SIP"></a>关闭SIP</h3>
<p>重启电脑，并在开机声响起后按住command+R, 直到出现苹果logo, 进入recovery mode</p>
<p>开Terminal，在终端输入关闭SIP的命令行语句：<code>csrutil disable</code></p>
<h3 id="开启SIP"><a class="header-anchor" href="#开启SIP"></a>开启SIP</h3>
<p>重启电脑，并在开机声响起后按住command+R, 直到出现苹果logo, 进入recovery mode</p>
<p>开Terminal，在终端输入关闭SIP的命令行语句：<code>csrutil enable</code></p>
<h2 id="系统的HiDPI选项"><a class="header-anchor" href="#系统的HiDPI选项"></a>系统的HiDPI选项</h2>
<h3 id="开启系统的HiDPI选项"><a class="header-anchor" href="#开启系统的HiDPI选项"></a>开启系统的HiDPI选项</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> defaults <span class="token function">write</span> /Library/Preferences/com.apple.windowserver.plist DisplayResolutionEnabled -bool <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="查看系统的HiDPI选项"><a class="header-anchor" href="#查看系统的HiDPI选项"></a>查看系统的HiDPI选项</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">defaults <span class="token builtin class-name">read</span> /Library/Preferences/com.apple.windowserver.plist DisplayResolutionEnabled<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回的是 <code>1</code> 或 <code>true</code>, 则开启了系统的HiDPI选项; 若返回<code>0</code>或<code>false</code>则为开启.</p>
<h1 id="mac外接2k显示器开启HiDPI"><a class="header-anchor" href="#mac外接2k显示器开启HiDPI"></a>mac外接2k显示器开启HiDPI</h1>
<p>mac内建想显示器会开HiDPI</p>
<p>mac 外接 4k 显示器, 会自动开HiDPI, 支持以下几种HiDPI, 以下观看距离是我自己摸索的:</p>
<ul>
<li>1504x846 = 94 x (16:9)</li>
<li>1920x1080 = 120 x (16:9) : 系统默认, 1080p HiDPI, 1个像素的内容渲染到2x2个像素. 适合距离显示器80cm看24寸屏</li>
<li>2304x1296 = 144 x (16:9) : 当距离显示器比mbp屏幕远时, 适合距离显示器60cm看24寸屏</li>
<li>2560x1440 = 160 x (16:9) : 与mbp等字体大小, 适合距离显示器40cm看24寸屏</li>
<li>3008x1692 = 188 x (16:9) :</li>
</ul>
<img data-src="/posts/4bc94fac/image-20201107235631208.png" alt="image-20201107235631208" style="zoom:50%;">
<p>mac 外接 2k 显示器, 会若使用2560x1440分辨率, 字体过小; 若使用1920x1080分辨率, 则字体模糊, 这是因为, mac 没有给2k显示器开HiDPI. 需要自己开HiDPI, 开方法如下. <a href="https://zhuanlan.zhihu.com/p/36913571">参考</a>.</p>
<h2 id="法一-一键脚本-推荐-免费-简洁"><a class="header-anchor" href="#法一-一键脚本-推荐-免费-简洁"></a>法一, 一键脚本 (推荐, 免费, 简洁)</h2>
<p>一键开启hidpi的脚本：<a href="https://github.com/xzhih/one-key-hidpi/">github项目</a></p>
<ul>
<li>
<p><strong>运行本脚本前无需暂时关闭SIP；本方法无需安装RDM</strong>（但兼容RDM）。</p>
</li>
<li>
<p>直接在终端下运行如下命令, 选择显示器, 选择是否开HiDPI,</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入root用户</span>
<span class="token function">sudo</span> <span class="token function">su</span>
<span class="token comment"># 给root用户设置翻墙代理的端口</span>
<span class="token assign-left variable">http_proxy</span><span class="token operator">=</span>http://127.0.0.1:7890
<span class="token assign-left variable">https_proxy</span><span class="token operator">=</span>http://127.0.0.1:7890
<span class="token comment"># 运行HiDPI设置脚本，需要从github下载代码，且需要sudo权限去完成HiDPI设置</span>
<span class="token function">bash</span> -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -fsSL https://raw.githubusercontent.com/xzhih/one-key-hidpi/master/hidpi.sh<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;xzhih&#x2F;one-key-hidpi&#x2F;master&#x2F;hidpi.sh)&quot;
  _    _   _____   _____    _____    _____
 | |  | | |_   _| |  __ \  |  __ \  |_   _|
 | |__| |   | |   | |  | | | |__) |   | |
 |  __  |   | |   | |  | | |  ___&#x2F;    | |
 | |  | |  _| |_  | |__| | | |       _| |_
 |_|  |_| |_____| |_____&#x2F;  |_|      |_____|

&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;

                      显示器
--------------------------------------------------------
   序号   |   供应商ID   |   产品ID   |   显示器名称
--------------------------------------------------------
    1    |    0610    |     a03d    |  Apple Display
    2    |    699f    |     2701    |  Lc

--------------------------------------------------------
选择显示器: 2
您的显示器 供应商ID:产品ID: 699f:2701

(1) 开启HIDPI
(2) 开启HIDPI(同时注入EDID)
(3) 关闭HIDPI

输入你的选择 [1~3]: 1

-------------------------------------
|********** 选择显示器ICON ***********|
-------------------------------------

(1) iMac
(2) MacBook
(3) MacBook Pro
(4) LG 显示器
(5) Pro Display XDR
(6) 保持原样

输入你的选择 [1~6]: 3

------------------------------------------
|********** 选择分辨率配置 ***********|
------------------------------------------
(1) 1920x1080 显示屏
(2) 1920x1080 显示屏 (使用 1424x802 分辨率，修复睡眠唤醒后的屏幕缩小问题)
(3) 1920x1200 显示屏
(4) 2560x1440 显示屏
(5) 3000x2000 显示屏
(6) 手动输入分辨率

输入你的选择: 6
输入想要开启的 HIDPI 分辨率，用空格隔开，就像这样：1680x945 1600x900 1440x810
:2192x1233 1920x1080
开启成功，重启生效
首次重启开机logo会变得巨大，之后就不会了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在最后一步若选<code>(6) 手动输入分辨率</code>，则可自行定制任何分辨率的HiDPI。</p>
<p>只需手动输入<code>mxn</code>，无需手动输入<code>mxn</code>和<code>2mx2n</code>，这个脚本就会自动开启mxn的HiDPI版 和 2mx2n 的普通版(即强行缩放版, 会模糊)，以实现mxn的HiDPI版。</p>
<blockquote>
<p>因为这个是前者的2倍，只有添加这个，前者才能以HIDPI的形式被打开，原理应该是强制让系统运行在 2mx2x 的分辨率下再打开的 mxn 的HIDPI，通过全屏截图的分辨率来看猜想是正确的，所以对机器显卡性能有点要求</p>
</blockquote>
<ul>
<li>
<p>然后重启系统, 调整到你想要分辨率.</p>
</li>
<li>
<p>开SIP</p>
<p>重启电脑，并在开机声响起后按住command+R, 直到出现苹果logo, 进入recovery mode</p>
<p>开Terminal，在终端输入关闭SIP的命令行语句：<code>csrutil enable</code></p>
</li>
</ul>
<p><strong>说明：</strong></p>
<ul>
<li>
<p>恢复原始分辨率：</p>
<p>上述脚本安装的回复脚本，能选择一台显示屏恢复原始分辨率</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token environment constant">$HOME</span>/.hidpi-disable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>这个脚本会自动开启系统的HiDPI选项，无需像下面这样手动开启</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> defaults <span class="token function">write</span> /Library/Preferences/com.apple.windowserver.plist DisplayResolutionEnabled -bool <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若开启成功, 则</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">defaults <span class="token builtin class-name">read</span> /Library/Preferences/com.apple.windowserver.plist DisplayResolutionEnabled<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回的是 <code>1</code> 或 <code>true</code></p>
</li>
<li>
<p>此脚本<strong>无需 RDM 软件</strong>也可切换分辨率，在系统显示器设置中设置即可。例如：</p>
<p><img data-src="/posts/4bc94fac/iShot_2024-01-08_19.07.12.png" alt="iShot_2024-01-08_19.07.12"></p>
<p><strong>此脚本兼容RDM软件</strong>，也可以下载<a href="http://avi.alkalay.net/software/RDM/">RDM</a>安装之。当RDM运行时，系统显示器设置菜单则变为下图。需要在RDM的菜单里切换分辨率。</p>
<p><img data-src="/posts/4bc94fac/iShot_2024-01-08_19.07.12-4712253.png" alt="iShot_2024-01-08_19.07.12"></p>
<p><img data-src="/posts/4bc94fac/image-20240108191227568.png" alt="image-20240108191227568"></p>
</li>
</ul>
<h2 id="法二-徒手配置显示器文件-RDM-不推荐-当法一三无效时-用此法总能生效"><a class="header-anchor" href="#法二-徒手配置显示器文件-RDM-不推荐-当法一三无效时-用此法总能生效"></a>法二, 徒手配置显示器文件+RDM (不推荐, 当法一三无效时, 用此法总能生效)</h2>
<p><a href="https://wacky.one/blog/macos-hi-dpi/#copy-conf">参考</a></p>
<ul>
<li>暂时关闭SIP</li>
</ul>
<p>重启电脑，并在开机声响起后按住command+R, 直到出现苹果logo, 进入recovery mode</p>
<p>开Terminal，在终端输入关闭SIP的命令行语句：<code>csrutil disable</code></p>
<ul>
<li>开启系统的HiDPI选项</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> defaults <span class="token function">write</span> /Library/Preferences/com.apple.windowserver.plist DisplayResolutionEnabled -bool <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>获得显示器信息</li>
</ul>
<p>获得DisplayProductName: <code>关于本机</code>-<code>显示器</code>: 会显示显示器的名称, 如”VX2478-4K-HD&quot;</p>
<img data-src="/posts/4bc94fac/image-20201107174828256.png" alt="image-20201107174828256" style="zoom:50%;">
<p>获得 DisplayProductID, DisplayVendorID</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ioreg -lw0 <span class="token operator">|</span> <span class="token function">grep</span> IODisplayPrefsKey <span class="token operator">|</span> <span class="token function">grep</span> -v AppleBacklightDisplay <span class="token operator">|</span> perl -pe <span class="token string">'s/^.+\-([0-9a-f]+)\-([0-9a-f]+)"$/DisplayVendorID-\1\nDisplayProductID-\2/g'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>
<p>安装配置文件</p>
<ul>
<li>
<p>手动操作</p>
<ul>
<li>
<p>访问:<a href="https://comsysto.github.io/Display-Override-PropertyList-File-Parser-and-Generator-with-HiDPI-Support-For-Scaled-Resolutions/">配置文件生成网站</a> 填入: DisplayProductName, DisplayProductID, DisplayVendorID。其中DisplayProductID, DisplayVendorID需以16进制填入。</p>
</li>
<li>
<p>添加你需要的分别率 <a href="https://www.jianshu.com/p/bcb0f04bfd96">参考</a></p>
<p>添加 2mx2n (勾选HiDPI) 和 mxn (勾选HiDPI), 以开启mxn的HiDPI版</p>
<p>原因:</p>
<blockquote>
<p>因为这个是前者的2倍，只有添加这个，前者才能以HIDPI的形式被打开，原理应该是强制让系统运行在 2nx2m 的分辨率下再打开的 mxn 的HIDPI，通过全屏截图的分辨率来看猜想是正确的，所以对机器显卡性能有点要求</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>点击下载</p>
<ul>
<li>
<p>安装配置文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># sudo mount -uw / # 克服系统目录'/'是只读的问题</span>
<span class="token comment"># DIR=/System/Library/Displays/Contents/Resources/Overrides</span>

<span class="token comment"># OS X 10.11及以上</span>
<span class="token assign-left variable">DIR</span><span class="token operator">=</span>/Library/Displays/Contents/Resources/Overrides
<span class="token comment"># OS X 10.10及以下</span>
<span class="token comment"># DIR=/Library/Displays/Overrides</span>

<span class="token assign-left variable">Vendor_ID</span><span class="token operator">=</span><span class="token operator">&lt;</span><span class="token number">16</span>进制-vendor-id<span class="token operator">></span>
<span class="token assign-left variable">Product_ID</span><span class="token operator">=</span><span class="token operator">&lt;</span><span class="token number">16</span>进制-product-id<span class="token operator">></span>

<span class="token assign-left variable">CONF_PATH</span><span class="token operator">=</span><span class="token variable">$&#123;DIR&#125;</span>/DisplayVendorID-<span class="token variable">$&#123;Vendor_ID&#125;</span>/DisplayProductID-<span class="token variable">$&#123;Product_ID&#125;</span>
<span class="token function">sudo</span> <span class="token function">mkdir</span> -p <span class="token variable"><span class="token variable">$(</span> <span class="token function">dirname</span> $<span class="token punctuation">&#123;</span>CONF_PATH<span class="token punctuation">&#125;</span> <span class="token variable">)</span></span>
<span class="token function">sudo</span> <span class="token function">cp</span> ~/Downloads/DisplayProductID-<span class="token variable">$&#123;Product_ID&#125;</span>.plist <span class="token variable">$&#123;CONF_PATH&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意要cp完的文件是没有<code>.plist</code>扩展名的</p>
</li>
</ul>
</li>
<li>
<p>等效的脚本操作，在我本地电脑上将下述命令alias为<code>hidpi</code>命令了</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">bash</span> /Users/mac/macENV/hidpi/hidpi.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
</li>
<li>
<p>下载<a href="http://avi.alkalay.net/software/RDM/">RDM</a>, 安装之.</p>
</li>
<li>
<p>重启系统, 打开RDM, 24寸的2k显示器选择 <code>1920x1080 ⚡️ </code></p>
</li>
<li>
<p>开SIP</p>
<p>重启电脑，并在开机声响起后按住command+R, 直到出现苹果logo, 进入recovery mode</p>
<p>开Terminal，在终端输入关闭SIP的命令行语句：<code>csrutil enable</code></p>
</li>
</ul>
<h2 id="法三-SwitchResX-也推荐-功能强大"><a class="header-anchor" href="#法三-SwitchResX-也推荐-功能强大"></a>法三, **SwitchResX **(也推荐, 功能强大)</h2>
<p>收费软件, 有<a href="https://xclient.info/s/switchresx.html">破解版</a>. <a href="https://www.zhihu.com/question/35300978/answer/68752378">用法参见</a>.</p>
<ul>
<li>
<p>暂时关闭SIP</p>
<p>重启电脑，并在开机声响起后按住command+R, 直到出现苹果logo, 进入recovery mode</p>
<p>开Terminal，在终端输入关闭SIP的命令行语句：<code>csrutil disable</code></p>
</li>
<li>
<p>开启系统的HiDPI选项</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> defaults <span class="token function">write</span> /Library/Preferences/com.apple.windowserver.plist DisplayResolutionEnabled -bool <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>支持自定义任何分辨率: 添加 2mx2n, 会开启mxn的HiDPI版, 和2mx2n 的普通版(即强行缩放版, 会模糊).</li>
</ul>
<p><img data-src="/posts/4bc94fac/image-20201110061629462.png" alt="image-20201110061629462"></p>
<p>然后会显示新添加的分辨率是 <code>not saved</code></p>
<p><img data-src="/posts/4bc94fac/image-20201110061457868.png" alt="image-20201110061457868"></p>
<p>然后<code>cmd+w</code>退出软件, 会弹出提示框, 选<code>save</code></p>
<p><img data-src="/posts/4bc94fac/image-20201110061347850.png" alt="image-20201110061347850"></p>
<ul>
<li>
<p>而后, 新加的分辨率的状态就从”not saved”变成了”needs to reboot”.</p>
</li>
<li>
<p>此时重启电脑后, 则添加了原来的2mx2n普通分辨率, 和mxn HiDPI分辨率</p>
<p><img data-src="/posts/4bc94fac/image-20201110063029206.png" alt="image-20201110063029206"></p>
</li>
<li>
<p>重开SIP</p>
<p>重启电脑，并在开机声响起后按住command+R, 直到出现苹果logo, 进入recovery mode</p>
<p>开Terminal，在终端输入关闭SIP的命令行语句：<code>csrutil enable</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>器</category>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title>mac的移动硬盘分区方案</title>
    <url>/posts/6f7822e5/</url>
    <content><![CDATA[<h3 id="分区方案"><a class="header-anchor" href="#分区方案"></a>分区方案</h3>
<p>完全参照https://www.jianshu.com/p/5f8b4d9a8922</p>
<p>主力分区是<code>NTFS</code>格式，以确保和windows的数据交换，配套Tuxera NTFS for Mac来解决Mac系统无法写入NTFS文件系统的问题。</p>
<p>mac的备份区用<code>OS X 拓展（日志式）</code>格式。</p>
<h3 id="NTFS写入软件的选择"><a class="header-anchor" href="#NTFS写入软件的选择"></a>NTFS写入软件的选择</h3>
<table>
<thead>
<tr>
<th>软件</th>
<th>速度</th>
<th>进阶功能</th>
<th>稳定性</th>
<th>收费否</th>
</tr>
</thead>
<tbody>
<tr>
<td>Paragon NTFS</td>
<td>中</td>
<td>无</td>
<td>次稳定</td>
<td>￥150</td>
</tr>
<tr>
<td>Tuxera NTFS</td>
<td>快</td>
<td>有</td>
<td>最稳定</td>
<td>￥100</td>
</tr>
<tr>
<td>mount类：如mountly软件 或 开启mac自带的ntfs写入功能</td>
<td>快</td>
<td>无</td>
<td>很不稳定</td>
<td>免费</td>
</tr>
</tbody>
</table>
<p>使用过程中出现设备断电或 USB 接口拔出等意外情况，Tuxera 的故障安全技术会确保各类文件完整，并防止驱动器损坏；而mount类则很容易丢失数据、损坏；Paragon也可能丢如此。</p>
<p><img data-src="/posts/6f7822e5/v2-58016781c731bb96345e5e1b3ae069b7_hd.jpg" alt="v2-58016781c731bb96345e5e1b3ae069b7_hd"></p>
<p><a href="https://zhuanlan.zhihu.com/p/68927971">参考</a></p>
<p>建议：</p>
<ul>
<li>办公、写代码、日常备份资料，对速度要求不高，则稳定最要紧最高，推荐选择Tuxera</li>
<li>影视制作，对速度要求高，推荐选Paragon</li>
</ul>
<h3 id="读写速度对比速度"><a class="header-anchor" href="#读写速度对比速度"></a>读写速度对比速度</h3>
<p>使用Disk Speed Test软件测试移动硬盘不同格式分区的读写速度，<code>OS X 拓展（日志式）</code>和<code>NTFS</code>(Tuxera NTFS for Mac)读写速度相差不大</p>
<ul>
<li>
<p>使用Tuxera NTFS for Mac，写入NTFS格式的分区，结果如下</p>
<p><img data-src="/posts/6f7822e5/ntfs.png" alt="ntfs"></p>
</li>
<li>
<p>读写入&quot;OS X 拓展（日志式）&quot;格式的分区，结果如下</p>
<p><img data-src="/posts/6f7822e5/hfs+.png" alt="hfs+"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>器</category>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title>注销icloud后桌面文件消失</title>
    <url>/posts/1c9a41fc/</url>
    <content><![CDATA[<h2 id="原因"><a class="header-anchor" href="#原因"></a>原因</h2>
<p>注销iCloud时, <strong>若误点”不保留”</strong> icloud所同步的文档, 则系统会将所同步的文档删除, 例如若之前<code>桌面</code>和<code>文稿</code>被iCloud同步, 注销iCloud后则桌面被完全清空.</p>
<h2 id="解决方法"><a class="header-anchor" href="#解决方法"></a>解决方法</h2>
<p>有以下三种解决方案</p>
<h3 id="等待icloud自己下载"><a class="header-anchor" href="#等待icloud自己下载"></a>等待icloud自己下载</h3>
<p>登录<a href="https://www.icloud.com">网页版iCloud</a>, 回想一些你近期及远期使用过的文件, 检查icloud是否包含他们.</p>
<p>若检查发现文件有所缺漏, 则说明是由于iCloud容量用尽, 故而只将<code>桌面</code>和<code>文稿</code>中的文件同步了一部分. 此时需要使用<a href="#%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0icloud%E5%BD%92%E6%A1%A3" title="推荐">使用本地icloud归档</a>去恢复.</p>
<p>若检查发现文件齐全, 则可本地重新登录iCloud, 然后等iCloud从云上下载之前同步的文件. 需要网络条件好. 约要半小时.</p>
<p>注意:</p>
<ul>
<li>不要从网页版iCloud上直接下载之前同步的文件, 因为网页版iCloud不支持下载文件夹, 只能一个个文件下载.</li>
</ul>
<h3 id="使用本地icloud归档-推荐"><a class="header-anchor" href="#使用本地icloud归档-推荐"></a>使用本地icloud归档 (推荐)</h3>
<p><a href="https://www.jianshu.com/p/b330399a7fd4">以下操作截图来源</a></p>
<p><img data-src="/posts/1c9a41fc/1200.jpeg" alt="img"></p>
<h4 id="img"><a class="header-anchor" href="#img"></a><img data-src="/posts/1c9a41fc/1200-20201219225249466.jpeg" alt="img"></h4>
<h4 id="本地icloud归档"><a class="header-anchor" href="#本地icloud归档"></a>本地icloud归档</h4>
<p>注销iCloud时, 若<strong>误点”不保留”</strong> icloud所同步的文档, 则 那些移除的文件, 以及会自动放入本地<code>/Users/&lt;用户名&gt;/iCloud云盘（归档）</code>保存30天.</p>
<p>在iCloud Drive中彻底删除的文件, 本地<code>/Users/&lt;用户名&gt;/iCloud云盘（归档）</code>保存30天.</p>
<h4 id="还原丢失文件"><a class="header-anchor" href="#还原丢失文件"></a>还原丢失文件</h4>
<p>在<code>Finder</code>进入<code>/Users/&lt;用户名&gt;/iCloud云盘（归档）</code>,  按<code>⌘⇧.</code>以显示隐藏文件, 然后分别进入其下的 <code>桌面</code> <code>文稿</code> 等所有文件夹, 挨个文件夹下, <code>⌘A</code>全选, 然后去本地的 <code>桌面</code> <code>文稿</code> 等对应文件夹下, 按 <code>⌘V</code>.</p>
<p>注意:</p>
<ul>
<li>
<p>不要使用命令行去复制文件, 因为这样无法将文件夹和文件在Finder下的标签一同复制过去</p>
</li>
<li>
<p>一定记得进入Finder后, 按<code>⌘⇧.</code>以显示隐藏文件, 不然隐藏文件不会被复制过去</p>
</li>
</ul>
<p>还原后, 回想近期和远期使用过的一些文件或文件夹, 看看是否都在 都能打开, 若有所缺失, 可从time machine中最近一次备份里, 还原所缺的文件和文件夹.</p>
<h3 id="使用time-machine"><a class="header-anchor" href="#使用time-machine"></a>使用time machine</h3>
<p>若近期使用了time machine备份了系统, 可将 <code>桌面</code> <code>文稿</code> 等文件夹 整体还原到最近一次备份.</p>
<p>若发现使用<a href="#%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0icloud%E5%BD%92%E6%A1%A3" title="推荐">使用本地icloud归档</a>去恢复的文件有缺失, 也可从time machine中最近一次备份里, 还原所缺的文件和文件夹.</p>
]]></content>
      <categories>
        <category>器</category>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title>禁止safar从http跳转到https</title>
    <url>/posts/e8cf39d2/</url>
    <content><![CDATA[<p>Safari对于一些用https访问的域名, 会存入一个列表, 此后访问 <code>http://此域名</code> , 会自动跳转到  <code>https://此域名</code> .</p>
<p>若不想跳转, 可如下操作:</p>
<ul>
<li>
<p>⌘+Q 退出Safari</p>
</li>
<li>
<p>执行如下命令. 这个文件是个域名列表, safari见之则访https而非http. 删此文件, 则列表清空. <a href="https://discussions.apple.com/thread/6989319">出处</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> /Users/<span class="token variable">$&#123;<span class="token environment constant">USER</span>&#125;</span>/Library/Cookies/HSTS.plist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>打开 Safari, 访问<code>http://&lt;目标域名&gt;</code>, 一般能解决问题.</p>
</li>
</ul>
<p>若还是跳转https, 则继续下述操作</p>
<ul>
<li>
<p>⌘+Q 退出Safari</p>
</li>
<li>
<p>运行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> /Users/<span class="token variable">$&#123;<span class="token environment constant">USER</span>&#125;</span>/Library/Cookies/HSTS.plist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>重启操作系统</p>
</li>
<li>
<p>打开 Safari, 访问<code>http://&lt;目标域名&gt;</code>, 几乎都能解决.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>器</category>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title>自动操作</title>
    <url>/posts/5c43759d/</url>
    <content><![CDATA[<h2 id="自动操作文件分类"><a class="header-anchor" href="#自动操作文件分类"></a>自动操作文件分类</h2>
<p>使用 mac 自带的app <code>/Application/Automator.app</code> (自动操作), 可以创建自动工作流.</p>
<p>用此app新建文件, 会创建到 <code>/Users/&lt;username&gt;/Library/Services/</code> 目录, 创建文件格式有好几种, 如下图所.</p>
<p><img data-src="/posts/5c43759d/image-20201118181847738.png" alt="image-20201118181847738"></p>
<p>以下简要介绍其中的一些文件格式及其用法:</p>
<h3 id="工作流程"><a class="header-anchor" href="#工作流程"></a>工作流程</h3>
<p>默认图标为 <img data-src="/posts/5c43759d/image-20201118190053854.png" alt="image-20201118190053854" style="zoom:33%;"></p>
<p>在访达张扩展名为 .workflow, 用 Automator.app 上打开 显示的扩展名 也是  .workflow.</p>
<p><img data-src="/posts/5c43759d/image-20201118201408081.png" alt="image-20201118201408081"></p>
<p>无法绑定快捷键, 无法在右键菜单中出现出现</p>
<h3 id="应用程序"><a class="header-anchor" href="#应用程序"></a>应用程序</h3>
<p>扩展名为 .app, 默认图标为 <img data-src="/posts/5c43759d/image-20201118201119255.png" alt="image-20201118201119255" style="zoom:33%;"></p>
<p>无法绑定快捷键, 无法在右键菜单中出现出现</p>
<p>有以下即用用法:</p>
<h4 id="设为开机自启app"><a class="header-anchor" href="#设为开机自启app"></a>设为开机自启app</h4>
<p><img data-src="/posts/5c43759d/image-20201118195201923.png" alt="image-20201118195201923"></p>
<h4 id="设为开文件的默认app"><a class="header-anchor" href="#设为开文件的默认app"></a>设为开文件的默认app</h4>
<img data-src="/posts/5c43759d/image-20201118195958622.png" alt="image-20201118195958622" style="zoom:33%;">
<img data-src="/posts/5c43759d/image-20201118200308369.png" alt="image-20201118200308369" style="zoom:33%;">
<p><img data-src="/posts/5c43759d/iShot2020-11-18%2020.06.06.png" alt="iShot2020-11-18 20.06.06"></p>
<p><img data-src="/posts/5c43759d/image-20201118200349909.png" alt="image-20201118200349909"></p>
<img data-src="/posts/5c43759d/image-20201118200945959.png" alt="image-20201118200945959" style="zoom: 33%;">
<h3 id="快速操作"><a class="header-anchor" href="#快速操作"></a>快速操作</h3>
<p>&quot;快速操作” 又名 ”服务”,  默认图标为<img data-src="/posts/5c43759d/image-20201118185716458.png" alt="image-20201118185716458" style="zoom: 33%;">, 也可在Automator.app中自选图标.</p>
<p><img data-src="/posts/5c43759d/image-20201118185944072.png" alt="image-20201118185944072"></p>
<p>&quot;快速操作&quot;在访达中文件扩展名为 .workflow, 而&quot;工作流程”也显示为 .workflow.</p>
<p>用 Automator.app 打开后, “快速操作&quot;会显示为”.workflow (快速操作)”, 而&quot;工作流程”显示为”.workflow”, 这二者不同.</p>
<p>有以下即用用法: 以下用法仅对  <code>/Users/&lt;username&gt;/Library/Services/</code>  中的&quot;快速操作”有效.</p>
<h4 id="绑定快捷键"><a class="header-anchor" href="#绑定快捷键"></a>绑定快捷键</h4>
<p>所有服务, 都会出现在&quot;系统偏好设置-键盘-快捷键-服务” 中, 如下图所示.</p>
<p><img data-src="/posts/5c43759d/image-20201118183054420.png" alt="image-20201118183054420"></p>
<h4 id="右键菜单-快速操作"><a class="header-anchor" href="#右键菜单-快速操作"></a>右键菜单-快速操作</h4>
<p>若一个服务 是<strong>位于访达.app</strong>的, 不论是否在&quot;系统偏好设置-键盘-快捷键-服务”菜单中被勾选, 都会在&quot;系统偏好设置-扩展-访达”里出现.</p>
<p><img data-src="/posts/5c43759d/image-20201118184042137.png" alt="image-20201118184042137"></p>
<p><img data-src="/posts/5c43759d/image-20201118185112810.png" alt="image-20201118185112810"></p>
<p>若在此菜单中勾选此服务, 则在访达的&quot;右键菜单-快速操作”看见它</p>
<p><img data-src="/posts/5c43759d/image-20201118185016570.png" alt="image-20201118185016570"></p>
<h4 id="右键菜单-服务"><a class="header-anchor" href="#右键菜单-服务"></a>右键菜单-服务</h4>
<p>若一个服务, 是<strong>位于访达.app</strong>的, 在&quot;系统偏好设置-键盘-快捷键-服务”菜单中被<strong>勾选</strong>, 不论是否绑定了快捷键, 则在访达的&quot;右键菜单-服务&quot;也会出现它</p>
<img data-src="/posts/5c43759d/image-20201118184328895.png" alt="image-20201118184328895" style="zoom:50%;">
<img data-src="/posts/5c43759d/image-20201118183534692.png" alt="image-20201118183534692" style="zoom:67%;">
<h2 id="授权原理"><a class="header-anchor" href="#授权原理"></a>授权原理</h2>
<h3 id="授权的原理"><a class="header-anchor" href="#授权的原理"></a>授权的原理</h3>
<p>mac的automator运行内核, 从用如下授权的原则:</p>
<h4 id="app-A-快速操作-app-B"><a class="header-anchor" href="#app-A-快速操作-app-B"></a><code>app A (-&gt; 快速操作) -&gt; app B</code></h4>
<p>若当前某app A, 触发一个快速操作, 它令app B (B≠A) 去执行某个需要授权的操作,</p>
<p>或者用Automator写的一个 app A, 直接令令app B (B≠A) 去执行某个需要授权的操作,</p>
<p>需要授权的操作例如按按键/关闭窗口/退出app,</p>
<p>则需要把app A添加到”安全性与隐私-辅助功能”, 并在&quot;”安全性与隐私-自动化”中允许app A控制app B. 具体步骤如下:</p>
<h5 id="”安全性与隐私-辅助功能”"><a class="header-anchor" href="#”安全性与隐私-辅助功能”"></a>”安全性与隐私-辅助功能”</h5>
<p>若App A, 或中介的快速操作的代码里, 用到了&quot;System Events”, 则必须把App A添加到”安全性与隐私-辅助功能”</p>
<p>注: System Events.app 是app A令app B执行快捷键的中介应用.</p>
<img data-src="/posts/5c43759d/image-20201118182150048.png" alt="image-20201118182150048" style="zoom:50%;">
<p>否则会有如下报错:</p>
<img data-src="/posts/5c43759d/image-20201118182237257.png" alt="image-20201118182237257" style="zoom:50%;">
<h5 id="”安全性与隐私-自动化”"><a class="header-anchor" href="#”安全性与隐私-自动化”"></a>”安全性与隐私-自动化”</h5>
<p>在把App A添加到”安全性与隐私-辅助功能”后, 首次允许时, 会弹出弹窗, 要求用户授权app A控制app B:</p>
<img data-src="/posts/5c43759d/iShot2020-11-18%2018.11.02.png" alt="iShot2020-11-18 18.11.02" style="zoom: 50%;">
<p>若授权, 则之后再次执行此workflow, 无需再次授权, 且在”系统偏好设置-安全性与隐私-自动化”中, 会看见</p>
<img data-src="/posts/5c43759d/iShot2020-11-16%2001.36.40-1.png" alt="iShot2020-11-16 01.36.40" style="zoom:50%;">
<p>若未授权, 则会如下报错, 解决方法是在上图的”系统偏好设置-安全性与隐私-自动化”中, 允许app A控制app B.</p>
<img data-src="/posts/5c43759d/image-20201118182451788.png" alt="image-20201118182451788" style="zoom: 50%;">
<h3 id="全局授权"><a class="header-anchor" href="#全局授权"></a>全局授权</h3>
<p>根据上述的授权原理可知, 如果写一个快速操作, 要授权一切app A, 去经由此快捷操作xxx.workflow, 令某个app B执行特定的操作, 则需要对每个app A 去一一授权, 十分麻烦.</p>
<p>解决办法是:</p>
<h4 id="step-1-转换为应用程序"><a class="header-anchor" href="#step-1-转换为应用程序"></a>step 1: 转换为应用程序</h4>
<p>将此快速操作用automator.app打开, 点<code>文件-转换为</code>, 选”应用程序”, 然后在自动新建的副本中, 按<code>⌘S</code>, 钻则保存为”应用程序”, 得到xxx.app.</p>
<p>然后对xxx.app授权:</p>
<h5 id="”安全性与隐私-辅助功能”-_2"><a class="header-anchor" href="#”安全性与隐私-辅助功能”-_2"></a>”安全性与隐私-辅助功能”:</h5>
<p>若xxx.app的代码里, 用到了&quot;System Events”, 则必须把xxx.app添加到”安全性与隐私-辅助功能”</p>
<img data-src="/posts/5c43759d/iShot2020-11-16%2001.55.30.png" alt="iShot2020-11-16 01.55.30" style="zoom:50%;">
<h6 id="修改-xxx-app-后重添加-xxx-app"><a class="header-anchor" href="#修改-xxx-app-后重添加-xxx-app"></a>修改 <code>xxx.app</code> 后重添加 <code>xxx.app</code></h6>
<p>每当修改 <code>xxx.app</code> 后, 必需从上图中选中 <code>xxx.app</code> 点<code>-</code>删掉, 再点<code>+</code>重新加上 <code>xxx.app</code> . 不然在”辅助功能”与”自动化”中的 <code>xxx.app</code> 是旧的  <code>xxx.app</code> , 新的 <code>xxx.app</code> 无法得到此二者授权, 运行时会分别报此二者所致的错.</p>
<h5 id="”安全性与隐私-自动化”-_2"><a class="header-anchor" href="#”安全性与隐私-自动化”-_2"></a>”安全性与隐私-自动化”</h5>
<p>在finder里, 双击xxx.app, 初次运行它, 在弹出授权窗口(例如下)时点”好”:</p>
<img data-src="/posts/5c43759d/iShot2020-11-18%2018.11.02%E7%9A%84%E5%89%AF%E6%9C%AC.png" alt="iShot2020-11-18 18.11.02的副本" style="zoom:50%;">
<p>则在”系统偏好设置-安全性与隐私-自动化”里会看见xxx.app对B.app有了权限</p>
<img data-src="/posts/5c43759d/iShot2020-11-16%2001.36.40.png" alt="iShot2020-11-16 01.36.40" style="zoom:50%;">
<h4 id="step-2-另写一个快速操作"><a class="header-anchor" href="#step-2-另写一个快速操作"></a>step 2: 另写一个快速操作</h4>
<p>另写一个 xxx.workflow (快速操作), 其内容如下, 仅调用xxx.app. 这样, 则可以在将  xxx.workflow (快速操作) 绑定快捷键, 并添加到右键菜单, 具体做法详见<a href="#%E5%BF%AB%E9%80%9F%E6%93%8D%E4%BD%9C">上文</a>.</p>
<p><img data-src="/posts/5c43759d/iShot2020-11-18%2022.03.52.png" alt="iShot2020-11-18 22.03.52"></p>
]]></content>
      <categories>
        <category>器</category>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title>ipython与jupyter_notebook安装配置使用</title>
    <url>/posts/aa8d830b/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="ipython安装配置使用"><a class="header-anchor" href="#ipython安装配置使用"></a>ipython安装配置使用</h1>
<h2 id="配置"><a class="header-anchor" href="#配置"></a>配置</h2>
<h3 id="生成配置文件"><a class="header-anchor" href="#生成配置文件"></a>生成配置文件</h3>
<p>若ipython的配置文件<code>~/.ipython/profile_default/&#123;ipython_config.py,ipython_kernel_config.py&#125;</code>不存在，则执行如下命令以创建之</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ipython profile create<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>会返回</p>
<blockquote>
<p>[ProfileCreate] Generating default config file: ‘~/.ipython/profile_default/ipython_config.py’<br>
[ProfileCreate] Generating default config file: ‘~/.ipython/profile_default/ipython_kernel_config.py’</p>
</blockquote>
<h3 id="终端下ipython的配色"><a class="header-anchor" href="#终端下ipython的配色"></a>终端下ipython的配色</h3>
<p><a href="https://stackoverflow.com/questions/14129278/how-do-i-customize-text-color-in-ipython">参考</a></p>
<h4 id="更换配色方案"><a class="header-anchor" href="#更换配色方案"></a>更换配色方案</h4>
<p>默认的终端下ipython配色，<code>__class__</code>等显示为深蓝色，当你的终端背景是深色时容易，深蓝字难看清，建议修改配色方案。在<code>~/.ipython/profile_default/ipython_config.py</code>，找到如下两行，删除其行首”#“，并将等号后修改为</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">c<span class="token punctuation">.</span>InteractiveShell<span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token string">'Linux'</span>
c<span class="token punctuation">.</span>TerminalInteractiveShell<span class="token punctuation">.</span>highlighting_style <span class="token operator">=</span> <span class="token string">'monokai'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>
<p><code>c.InteractiveShell.colors</code>是指在ipython报错用的配色</p>
</li>
<li>
<p><code>c.TerminalInteractiveShell.highlighting_style</code>是指python代码的配色。配色方案在定义在</p>
<p><code>/Users/mac/anaconda/lib/python3.6/site-packages/pygments/styles/&lt;配色方案名称&gt;.py</code></p>
<p>这里， &lt;配色方案名称monokai，是我找到<code>styles/</code>下较友好的配色了。</p>
</li>
</ul>
<h4 id="手动修改高亮"><a class="header-anchor" href="#手动修改高亮"></a>手动修改高亮</h4>
<p>若对所选配色方案还有不满意的地方，可以手动修改指定语法成分的高亮</p>
<p>搜索<code>c.TerminalInteractiveShell.highlighting_style_overrides</code>，然后如下改写</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pygments<span class="token punctuation">.</span>token <span class="token keyword">import</span> Token<span class="token punctuation">,</span> Keyword<span class="token punctuation">,</span> Name<span class="token punctuation">,</span> Comment<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Error<span class="token punctuation">,</span> \
     Number<span class="token punctuation">,</span> Operator<span class="token punctuation">,</span> Generic<span class="token punctuation">,</span> Whitespace
<span class="token comment">## Override highlighting format for specific tokens</span>
c<span class="token punctuation">.</span>TerminalInteractiveShell<span class="token punctuation">.</span>highlighting_style_overrides <span class="token operator">=</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">## Standard Pygments tokens (are all used by IPython ?)</span>

    <span class="token comment"># Whitespace:                "#bbbbbb",</span>
    <span class="token comment"># Comment:                   "italic #008800",</span>
    <span class="token comment"># Comment.Preproc:           "noitalic",</span>
    <span class="token comment"># Comment.Special:           "noitalic bold",</span>

    Keyword<span class="token punctuation">:</span>                     <span class="token string">"bold #5fd4f9"</span><span class="token punctuation">,</span> <span class="token comment">#  8ce98c</span>
    <span class="token comment"># Keyword.Pseudo:            "nobold",</span>
    <span class="token comment"># Keyword.Type:              "bold #00BB00",</span>

    <span class="token comment"># Operator:                  "#ff736f",   #</span>
    <span class="token comment"># Operator.Word:             "bold #AA22FF",</span>

    Name<span class="token punctuation">.</span>Builtin<span class="token punctuation">:</span>                <span class="token string">"#5fd4f9"</span><span class="token punctuation">,</span>
    <span class="token comment"># Name.Function:             "#99f46a", #</span>
    <span class="token comment"># Name.Class:                "#99f46a", #</span>
    <span class="token comment"># Name.Namespace:            "bold #99f46a", #</span>
    <span class="token comment"># Name.Exception:            "italic bold #89f9fc",</span>
    Name<span class="token punctuation">.</span>Variable<span class="token punctuation">:</span>               <span class="token string">"italic"</span><span class="token punctuation">,</span> <span class="token comment">#</span>
    <span class="token comment"># Name.Constant:             "#880000",</span>
    <span class="token comment"># Name.Label:                "#A0A000",</span>
    <span class="token comment"># Name.Entity:               "bold #999999",</span>
    <span class="token comment"># Name.Attribute:            "#BB4444",</span>
    <span class="token comment"># Name.Tag:                  "bold #008000",</span>
    <span class="token comment"># Name.Decorator:            "#AA22FF",</span>


    <span class="token comment"># String:                    "#f7f86c",</span>
    <span class="token comment"># String.Doc:                "italic",</span>
    <span class="token comment"># String.Interpol:           "bold #BB6688",</span>
    <span class="token comment"># String.Escape:             "bold #BB6622",</span>
    <span class="token comment"># String.Regex:              "#BB6688",</span>
    <span class="token comment"># String.Symbol:             "#71f3f6", #</span>
    <span class="token comment"># String.Other:              "#008000",</span>
    <span class="token comment"># Number:                    "#cf97f2", #</span>

    <span class="token comment"># Generic.Heading:           "bold #000080",</span>
    <span class="token comment"># Generic.Subheading:        "bold #800080",</span>
    <span class="token comment"># Generic.Deleted:           "#A00000",</span>
    <span class="token comment"># Generic.Inserted:          "#5affb4", #</span>
    <span class="token comment"># Generic.Error:             "#FF0000",</span>
    <span class="token comment"># Generic.Emph:              "italic",</span>
    <span class="token comment"># Generic.Strong:            "bold",</span>
    <span class="token comment"># Generic.Prompt:            "bold #000080",</span>
    <span class="token comment"># Generic.Output:            "#888",</span>
    <span class="token comment"># Generic.Traceback:         "#04D",</span>

    <span class="token comment"># Error:                     "border:#ff0000",</span>

    <span class="token comment">## IPython</span>

    <span class="token comment"># Token.Number: '#ffffff',</span>
    <span class="token comment"># Token.Operator: 'noinherit',</span>
    <span class="token comment"># Token.String: '#8b8',</span>
    <span class="token comment"># Token.Name.Function: '#2080D0',</span>
    <span class="token comment"># Token.Name.Class: 'bold #2080D0',</span>
    <span class="token comment"># Token.Name.Namespace: 'bold #2080D0',</span>
    <span class="token comment"># Token.Prompt: '#ffffff bold',</span>
    <span class="token comment"># Token.PromptNum: '#888888 bold',</span>
    Token<span class="token punctuation">.</span>OutPrompt<span class="token punctuation">:</span> <span class="token string">'#ff5753'</span><span class="token punctuation">,</span>
    Token<span class="token punctuation">.</span>OutPromptNum<span class="token punctuation">:</span> <span class="token string">'#ff5753 bold'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="jupyter-notebook-安装配置使用"><a class="header-anchor" href="#jupyter-notebook-安装配置使用"></a>jupyter notebook 安装配置使用</h1>
<p><a href="https://zhuanlan.zhihu.com/p/23110830">参考</a></p>
<p>已经验证此配置方法可用的环境：实验室服务器juncluster、jungpu</p>
<h2 id="配置方法"><a class="header-anchor" href="#配置方法"></a>配置方法</h2>
<p>ssh登录服务器</p>
<h3 id="安装"><a class="header-anchor" href="#安装"></a>安装</h3>
<p>进入python虚拟环境</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> bin/activate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>检查是否安装jupyter</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jupyter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如返回未安装，则安装之</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> jupyter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>已安装则升级之</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> -U jupyter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="配置-_2"><a class="header-anchor" href="#配置-_2"></a>配置</h3>
<h4 id="生成配置文件-_2"><a class="header-anchor" href="#生成配置文件-_2"></a>生成配置文件</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jupyter notebook --generate-config
<span class="token comment"># 返回 Writing default config to: ~/.jupyter/jupyter_notebook_config.py</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>会自动创建文件夹<code>~/.jupyter</code>与配置文件<code>~/.jupyter/jupyter_notebook_config.py</code></p>
<p>命令行会返回此【配置文件路径】，请保存</p>
<h4 id="生成网络证书"><a class="header-anchor" href="#生成网络证书"></a>生成网络证书</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/.jupyter
<span class="token comment"># openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout mycert.pem -out mycert.pem</span>
openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days <span class="token number">3650</span> -out mycert.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>回车系统会要求你填写：国家、省份、城市、单位、项目、邮箱，按真实填写之即可。<br>
保存【证书路径】=<code>~/.jupyter/mycert.pem</code>，【密钥路径】=<code>~/.jupyter/key.pem</code></p>
<h4 id="生成notebook登录密码"><a class="header-anchor" href="#生成notebook登录密码"></a>生成notebook登录密码</h4>
<p>若想给notebook设置登录密码，则做此事。可以在任何电脑上做，生成的密文是一样的</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">ipython
In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">from</span> notebook<span class="token punctuation">.</span>auth <span class="token keyword">import</span> passwd
In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> passwd<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#  创建一个密文的密码</span>
Enter password<span class="token punctuation">:</span> <span class="token comment"># 在此处设置notebook的【登录密码】</span>
Verify password<span class="token punctuation">:</span> <span class="token comment"># 重复密码</span>
Out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'sha1:adsasdasd:34da7adasdas87d0as8d70asda8sdaasd076f018'</span> <span class="token comment"># 会生成一个形如它的【哈希密码】</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将登录密码与哈希密码保存</p>
<h4 id="更改配置文件"><a class="header-anchor" href="#更改配置文件"></a>更改配置文件</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /home/<span class="token environment constant">$USER</span>/.jupyter/jupyter_notebook_config.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>
<p>通用配置</p>
<p>进入文件后</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 加在文件开头</span>
<span class="token keyword">import</span> os
<span class="token comment">#【证书新路径】</span>
c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>certfile <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>expanduser<span class="token punctuation">(</span><span class="token string">u'~/.jupyter/mycert.pem'</span><span class="token punctuation">)</span>
<span class="token comment">#【密钥路径】</span>
c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>keyfile <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>expanduser<span class="token punctuation">(</span><span class="token string">u'~/.jupyter/key.pem'</span><span class="token punctuation">)</span>
<span class="token comment"># NotebookApp的ip，'0.0.0.0'莫写成"*"。</span>
<span class="token comment"># 写成"*"有时会报错”socket.gaierror: [Errno -5] No address associated with hostname“</span>
c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>ip <span class="token operator">=</span> <span class="token string">'0.0.0.0'</span>
<span class="token comment"># 使得服务器上输入'jupyter notebook'命令后，不会立即进入它的浏览器</span>
c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>open_browser <span class="token operator">=</span> <span class="token boolean">False</span>
<span class="token comment"># 在浏览器访问notebook，要在浏览器中输入密码，才能登陆</span>
c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token string">u'【哈希密码】'</span>
<span class="token comment"># 将该【服务器端口】保存，使用固定端口号，可以随便设置，建议用不常见的，以免与其他任务的端口号冲突</span>
<span class="token comment">#  注：若别的任务先占用了该端口，输入'jupyter notebook'命令，则会自动用该端口+1，再不行+2，以此类推</span>
c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>port <span class="token operator">=</span> <span class="token number">11328</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>ipython notebook的配置</p>
<p>老的版本的ipython，使用的是ipython notebook；新版本的ipython，已将notebook给了jupyter，故使用的是jupyter notebook</p>
<p>ipython notebook则还需要更</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">c <span class="token operator">=</span> get_config<span class="token punctuation">(</span><span class="token punctuation">)</span>
c<span class="token punctuation">.</span>IPKernelApp<span class="token punctuation">.</span>pylab <span class="token operator">=</span> <span class="token string">'inline'</span>  <span class="token comment"># if you want plotting support always</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>jupyter notebook替代“c.IPKernelApp.pylab = ‘inline’”的配置如下，这是默认设置，不用更改</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># DISABLED: use %pylab or %matplotlib in the notebook to enable matplotlib.</span>
<span class="token comment"># c.NotebookApp.pylab = 'disabled'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>取消jupyter notebook密码</p>
<p>这样访问notebook就可以不需要密码</p>
<p>把</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># c.NotebookApp.token = '&lt;generated>'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>改为</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>token <span class="token operator">=</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<h2 id="使用"><a class="header-anchor" href="#使用"></a>使用</h2>
<h3 id="启动notebook"><a class="header-anchor" href="#启动notebook"></a>启动notebook</h3>
<ul>
<li>
<p>转接</p>
<p>服务器若设了防火墙，浏览器无法直接访问服务器的notebook【服务器端口】，只能经ssh转接</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> 【服务器】 -L127.0.0.1:11327:127.0.0.1:11328<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>注：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">'-L127.0.0.1:【代理端口】:127.0.0.1:【服务器端口】'</span>
<span class="token comment"># 用户端的localhost:【代理端口】 转接到 服务器端的localhost:【服务器端口】</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>登录服务器后，这个转接终端不要关，直到不用notebook</p>
</li>
<li>
<p>进入虚拟环境</p>
<p>若jupyter装在virtualenv里，才需要这一步</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> bin/activate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>启动notebook</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jupyter notebook<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<h3 id="访问notebook"><a class="header-anchor" href="#访问notebook"></a>访问notebook</h3>
<p>在本地电脑，使用浏览器访问<code>https://localhost:【代理端口】 </code></p>
<ul>
<li>
<p>必须是https，jupyter不支持http</p>
</li>
<li>
<p>浏览器的选择</p>
<p>支持：qq浏览器/chrome浏览器/firefox浏览器<br>
不支持：safari(可以登陆notebook的文件管理界面；但.ipynb文件的编辑界面下，无法连接到服务器的python内核)</p>
</li>
<li>
<p>浏览器警告&quot;访问不安全&quot;</p>
<p><a href="https://www.cnblogs.com/ZhYQ-Note/p/8493848.html">参考</a></p>
<ul>
<li>chrome:  高级&gt;&gt;继续前往（不安全），即可访问，但即使此证书到钥匙串，chrome每次访问<strong>依旧警告</strong></li>
<li>safari：详细信息&gt;&gt;访问此网站&gt;&gt;接下来跟着提示步骤操作，会提示“以添加此证书到钥匙串”，之后用safari查看此网页，都<strong>不再警告</strong></li>
<li>firefox：高级&gt;&gt;添加例外&gt;&gt;勾选永远添加此例外&gt;&gt;确认安全例外，之后firefox查看此网页，都<strong>不再警告</strong></li>
</ul>
<p><strong>相关技术</strong></p>
<p>手动添加网页的证书</p>
<ul>
<li>导出证书：firefox访问此网页，显示访问不安全，点高级&gt;&gt;添加例外&gt;&gt;确认安全例外&gt;&gt;证书状态-查看&gt;&gt;详细详细&gt;&gt;导出，导出到随便什么地方</li>
<li>打开 钥匙串访问.app，左栏分别选 登录+证书
<ul>
<li>若之前用safari信任了此证书，则可见你条件的证书</li>
<li>若没，则将导出的证书拖到这里，然后双击此证书，再点”信任“，全调整为“总是信任”，然后之前导出的证书可以删了</li>
</ul>
</li>
</ul>
</li>
<li>
<p>弹出jupyter页面，要求输入【登录密码】</p>
<p>只有服务器上notebook程序重启，再次登录该网页，才需要再输入密码。<br>
服务器上notebook程序未关，本地即便断网重连，过数天重连，同一个浏览器不用再次输入密码。</p>
</li>
</ul>
<h3 id="脚本打开"><a class="header-anchor" href="#脚本打开"></a>脚本打开</h3>
<p>上述启动、访问操作可以用shell或Python脚本打开实现</p>
<h2 id="保持开启状态"><a class="header-anchor" href="#保持开启状态"></a>保持开启状态</h2>
<h3 id="使用tmux"><a class="header-anchor" href="#使用tmux"></a>使用tmux</h3>
<p>推荐此法，用tmux保持转接进程和jupyter notebook一直开启</p>
<ul>
<li>本机开个tmux session，用来ssh -L转接</li>
<li>服务器上开个tmux session，用来开jupyter notebook</li>
</ul>
<h3 id="普通方法"><a class="header-anchor" href="#普通方法"></a>普通方法</h3>
<ul>
<li>
<p>暂停jupyter notebook<br>
服务器上按<code>ctrl+z</code>，会出现</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>+  Stopped                 jupyter notebook<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>表示jupyter notebook暂停，本地浏览器上无法访问Notebook网页</p>
</li>
<li>
<p>放入后台运行</p>
<p>服务器上输入</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bg</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>会出现</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>+ jupyter notebook <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>表示jupyter notebook变成后台运行。</p>
</li>
<li>
<p>查看进程</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">jobs</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若返回有</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>+  Running                 jupyter notebook <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>则为jupyter notebook在后台运行</p>
</li>
<li>
<p>退出登录</p>
<p><code>ctrl+Q/W</code> 退出服务器的登录，则jupyter notebook立即停止</p>
<p><code>exit</code>或<code>logout</code>退出服务器的登录，则jupyter notebook不会立即停止</p>
</li>
</ul>
]]></content>
      <categories>
        <category>器</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>给mac上的app更换图标</title>
    <url>/posts/7770c192/</url>
    <content><![CDATA[<p><a href="https://www.macappbox.com/a/400.html">参考</a></p>
<p>用自动操作(Automator.app)生成的app，其默认图标如下，有时我们需要给它一个别的图标，就得更换app图标。</p>
<p><img data-src="/posts/7770c192/image-20241026235158485.png" alt="image-20241026235158485"></p>
<h1 id="命令行自制图标"><a class="header-anchor" href="#命令行自制图标"></a>命令行自制图标</h1>
<h2 id="无效方法：超级右键的图片转成图标"><a class="header-anchor" href="#无效方法：超级右键的图片转成图标"></a>无效方法：超级右键的<code>图片转成图标</code></h2>
<p>我试验了以下，用超级右键的<code>图片转成图标</code>功能所生成icns文件，将app图标替换成此icns后（使用的是下文提到的<a href="#%E6%9C%89%E6%95%88%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%9A%E6%98%BE%E7%A4%BA%E5%8C%85%E5%86%85%E5%AE%B9-%E6%9B%B4%E6%8D%A2icns">有效的方法：显示包内容-更换icns</a>），无法变成自制图标，而是会变成</p>
<p><img data-src="/posts/7770c192/image-20241026234534565.png" alt="image-20241026234534565"></p>
<h2 id="有效方法：用命令行"><a class="header-anchor" href="#有效方法：用命令行"></a>有效方法：用命令行</h2>
<p>macOS上app使用图标的文件格式是<code>.icns</code>，将可以用命令把png图片转换成icns图标。</p>
<p>打开终端执行如下命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">png2icon</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">local</span> <span class="token assign-left variable">source_image</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$1</span>"</span>  <span class="token comment"># 准备一个png</span>
    <span class="token comment"># 必需是png格式</span>
    <span class="token comment"># 最好是正方形，不然生成图标时会拉伸成正方形</span>
    <span class="token comment"># 分辨率最好为1024*1024，这个图片为macOS系统规范的最大格式，能让后续生成的图标尽可能清晰</span>

    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -r <span class="token string">"<span class="token variable">$source_image</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">echo</span> <span class="token variable">$source_image</span> not found
        <span class="token builtin class-name">return</span>
    <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token string">"<span class="token variable">$&#123;source_image&#125;</span>"</span> <span class="token operator">=~</span> <span class="token punctuation">\</span>.png$ <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">echo</span> <span class="token variable">$source_image</span> is not png
        <span class="token builtin class-name">return</span>
    <span class="token keyword">fi</span>
    <span class="token builtin class-name">cd</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> $source_image<span class="token variable">)</span></span>

    <span class="token builtin class-name">local</span> <span class="token assign-left variable">filename</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $source_image<span class="token variable">)</span></span>
    <span class="token assign-left variable">filename</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;filename<span class="token operator">/</span>.png<span class="token operator">/</span>&#125;</span>"</span>
    <span class="token builtin class-name">local</span> <span class="token assign-left variable">iconset_dir</span><span class="token operator">=</span><span class="token variable">$filename</span>.iconset
    <span class="token function">mkdir</span> <span class="token variable">$iconset_dir</span> <span class="token comment"># 必须以.iconset后缀结尾</span>
    <span class="token comment"># 生成不同尺寸的Png图片</span>
    sips -z <span class="token number">16</span> <span class="token number">16</span> <span class="token variable">$source_image</span> --out <span class="token variable">$iconset_dir</span>/icon_16x16.png
    sips -z <span class="token number">32</span> <span class="token number">32</span> <span class="token variable">$source_image</span> --out <span class="token variable">$iconset_dir</span>/icon_16x16@2x.png
    sips -z <span class="token number">32</span> <span class="token number">32</span> <span class="token variable">$source_image</span> --out <span class="token variable">$iconset_dir</span>/icon_32x32.png
    sips -z <span class="token number">64</span> <span class="token number">64</span> <span class="token variable">$source_image</span> --out <span class="token variable">$iconset_dir</span>/icon_32x32@2x.png
    sips -z <span class="token number">128</span> <span class="token number">128</span> <span class="token variable">$source_image</span> --out <span class="token variable">$iconset_dir</span>/icon_128x128.png
    sips -z <span class="token number">256</span> <span class="token number">256</span> <span class="token variable">$source_image</span> --out <span class="token variable">$iconset_dir</span>/icon_128x128@2x.png
    sips -z <span class="token number">256</span> <span class="token number">256</span> <span class="token variable">$source_image</span> --out <span class="token variable">$iconset_dir</span>/icon_256x256.png
    sips -z <span class="token number">512</span> <span class="token number">512</span> <span class="token variable">$source_image</span> --out <span class="token variable">$iconset_dir</span>/icon_256x256@2x.png
    sips -z <span class="token number">512</span> <span class="token number">512</span> <span class="token variable">$source_image</span> --out <span class="token variable">$iconset_dir</span>/icon_512x512.png
    sips -z <span class="token number">1024</span> <span class="token number">1024</span> <span class="token variable">$source_image</span> --out <span class="token variable">$iconset_dir</span>/icon_512x512@2x.png

    <span class="token comment"># 生成icns图片</span>
    iconutil -c icns <span class="token variable">$iconset_dir</span> -o <span class="token variable">$filename</span>.icns
<span class="token punctuation">&#125;</span>

png2icon <span class="token operator">&lt;</span>待转换的png文件<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过预览打开 app.icns 图片，可以查看图片包含了多个尺寸的Png图片</p>
<p><img data-src="/posts/7770c192/8GlEcN.jpg" alt="小编制作的icns图标文件的预览 "></p>
<h1 id="更换app图标"><a class="header-anchor" href="#更换app图标"></a>更换app图标</h1>
<h2 id="更换为自制图标"><a class="header-anchor" href="#更换为自制图标"></a>更换为自制图标</h2>
<h3 id="无效的方法：在显示简介中粘贴自制icns"><a class="header-anchor" href="#无效的方法：在显示简介中粘贴自制icns"></a>无效的方法：在显示简介中粘贴自制icns</h3>
<p>下述方法对安装的app和自动操作(Automator.app)生成的app都无效：</p>
<p>在Finder中，选中自制的图标(.icns文件），按ctrl+c；在Finder中选中<code>软件名称.app</code>，右键，点<code>显示简介</code>，点击上图红框处的图标，按ctrl+V。</p>
<p>这样<code>B.app</code>的图标并不会变成自制图标，而是会变成</p>
<p><img data-src="/posts/7770c192/image-20241026234534565.png" alt="image-20241026234534565"></p>
<h3 id="有效的方法：显示包内容-更换icns"><a class="header-anchor" href="#有效的方法：显示包内容-更换icns"></a>有效的方法：显示包内容-更换icns</h3>
<h4 id="更换包内容中的icns"><a class="header-anchor" href="#更换包内容中的icns"></a>更换包内容中的icns</h4>
<p>在Finder中，选中待更换图标的app，右键菜单中，点<code>显示包内容</code>。将<code>软件名.app/Contents/Resources/xxxx.icns</code>改名为<code>xxx-backup.icns</code>（自动操作(Automator.app)生成的app其图标名称为AutomatorApplet.icns，下载的app的图标名称是别的），然后将自己制作的icns复制到<code>软件名.app/Contents/Resources</code>，并更名为<code>AutomatorApplet.icns</code></p>
<p>注：上述操作可以用终端完成</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>软件名<span class="token operator">></span>.app/Contents/Resources/
<span class="token function">mv</span> xxx.icns xxx-backup.icns <span class="token comment"># 自动操作(Automator.app)生成的app其图标名称为AutomatorApplet.icns，下载的app的图标名称是别的</span>
<span class="token function">cp</span> <span class="token operator">&lt;</span>.icns文件的路径<span class="token operator">></span> AutomatorApplet.icns<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="触发app加载新icns"><a class="header-anchor" href="#触发app加载新icns"></a>触发app加载新icns</h4>
<p>然后，还需要一番操作触发这个app去加载新的icns，操作如下：</p>
<p>在Finder中，选中待更换图标的app，右键菜单中，点<code>显示简介</code>，然后在Finder中ctrl+c复制任意图片（.png）或图标（.icns）（可以是之前复制进来的自制icns），点击下图红框区域，然后按ctrl+v。</p>
<p><img data-src="/posts/7770c192/image-20241026234814931.png" alt="image-20241026234814931"></p>
<p>然后，图标会变成了下图的样子。而后点击红框区域，然后按<code>delete</code>键，</p>
<p><img data-src="/posts/7770c192/image-20241026234534565.png" alt="image-20241026234534565"></p>
<p>图标立即就会变成之前自己制作的icns。</p>
<p><img data-src="/posts/7770c192/image-20241026234435106.png" alt="image-20241026234435106"></p>
<h2 id="更换为另一个app的图标"><a class="header-anchor" href="#更换为另一个app的图标"></a>更换为另一个app的图标</h2>
<p>在Finder中选中<code>A.app</code>，右键，点<code>显示简介</code>，点击上图红框处的图标，按ctrl+c；</p>
<p>然后，在Finder中选中<code>B.app</code>，右键，点<code>显示简介</code>，点击上图红框处的图标，按ctrl+V。</p>
<p>这样<code>B.app</code>的图标就换成了<code>A.app</code>的图标。</p>
<p>该方法适用于A或B是安装的app和用自动操作(Automator.app)生成的app。</p>
]]></content>
      <categories>
        <category>器</category>
        <category>mac</category>
      </categories>
  </entry>
  <entry>
    <title>anaconda安装与使用</title>
    <url>/posts/1a6992ea/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="参考链接"><a class="header-anchor" href="#参考链接"></a>参考链接</h2>
<p><a href="https://conda.io/docs/">conda文档</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/24664358">Linux下Anaconda的安装使用与卸载</a></p>
<p><a href="http://www.jianshu.com/p/d2e15200ee9b">anaconda的使用和环境管理</a></p>
<h2 id="安装anaconda"><a class="header-anchor" href="#安装anaconda"></a>安装anaconda</h2>
<p>参见<a href="https://zhuanlan.zhihu.com/p/24664358">Linux下Anaconda的安装使用与卸载</a></p>
<ul>
<li>
<p>在PC上，去<a href="https://www.continuum.io/downloads">Anaconda官网</a>，获得安装包的下载链接</p>
<ul>
<li>Download for Your Preferred Platform下，选Linux，根据需要选Python版本和操作系统位数</li>
<li>右键点击下载按钮，选<code>复制链接</code>，如https://repo.continuum.io/archive/Anaconda2-4.4.0-Linux-x86_64.sh</li>
</ul>
</li>
<li>
<p>cd到服务器上自己d的用户目录</p>
<ul>
<li>
<p>下载安装文件b</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> 上述链接<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>查看安装文件是否下载成功</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>看见有形如<code>	Anaconda3-4.0.0-Linux-x86_64.sh</code>的文件说明下载成功</p>
</li>
<li>
<p>执行安装文件，如</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> Anaconda2-4.4.0-Linux-x86_64.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>整个过程点几下回车，或者选yes就好了。</p>
</li>
<li>
<p>但到最后一步，会提示是否把anaconda加入到系统环境变量中，选no（直接回车即可，默认就是no）</p>
<p><img data-src="/posts/1a6992ea/conda%E5%AE%89%E8%A3%85.png" alt="conda安装"></p>
</li>
<li>
<p>安装完成后，</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span>
<span class="token comment"># 会有anaconda2或者anaconda3文件夹， 分别对应python2 或 python3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>此时若终端中输入conda，发现command not found。这是因为，尚未向用户环境变量加入ananconda</li>
</ul>
</li>
</ul>
<h2 id="配置"><a class="header-anchor" href="#配置"></a>配置</h2>
<ul>
<li>向用户环境变量加入ananconda</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将anaconda的bin目录加入PATH，根据版本不同，也可能是~/anaconda3/bin</span>
<span class="token builtin class-name">echo</span> <span class="token string">'export PATH=~/anaconda2/bin:$PATH'</span> <span class="token operator">>></span> ~/.bashrc
<span class="token comment"># 激活bashrc以立即生效</span>
<span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>
<p>如用户登录服务器后，conda无l法使用</p>
<ul>
<li>症状：conda命令、conda虚拟环境、conda-forge安装的软件无法使用，ls显示的文件不是彩色的</li>
<li>对策：重新激活bashrc</li>
</ul>
</li>
<li>
<p>此时，用户目录下就可以正常使用conda了。测试方法如下</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 调出conda</span>
conda
<span class="token comment"># 查看安装了那些包</span>
conda list
<span class="token comment"># 查看anaconda是否成功劫持python命令</span>
<span class="token function">which</span> python
<span class="token comment"># 若返回/home/$USER/anaconda2/bin/python则成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>测试anaconda预装的软件能否打开</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># jupter notebook</span>
jupyter notebook
<span class="token punctuation">[</span>I <span class="token number">11</span>:38:51.999 NotebookApp<span class="token punctuation">]</span> Serving notebooks from <span class="token builtin class-name">local</span> directory: /home/<span class="token variable">$USERliang</span>
<span class="token punctuation">[</span>I <span class="token number">11</span>:38:51.999 NotebookApp<span class="token punctuation">]</span> <span class="token number">0</span> active kernels
<span class="token punctuation">[</span>I <span class="token number">11</span>:38:51.999 NotebookApp<span class="token punctuation">]</span> The Jupyter Notebook is running at: http://localhost:8888/?token<span class="token operator">=</span>2f2a56290a357f0ab3aa3be983091614474113ca24f9edc1
<span class="token punctuation">[</span>I <span class="token number">11</span>:38:52.000 NotebookApp<span class="token punctuation">]</span> Use Control-C to stop this server and shut down all kernels <span class="token punctuation">(</span>twice to skip confirmation<span class="token punctuation">)</span>.
<span class="token punctuation">[</span>W <span class="token number">11</span>:38:52.000 NotebookApp<span class="token punctuation">]</span> No web browser found: could not <span class="token function">locate</span> runnable browser.
<span class="token punctuation">[</span>C <span class="token number">11</span>:38:52.000 NotebookApp<span class="token punctuation">]</span>

    Copy/paste this URL into your browser when you connect <span class="token keyword">for</span> the first time,
    to login with a token:
        http://localhost:8888/?token<span class="token operator">=</span>2f2a56290a357f0ab3aa3be983091614474113ca24f9edc1
<span class="token comment"># spyder</span>
spyder
QXcbConnection: Could not connect to display
Aborted <span class="token punctuation">(</span>core dumped<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="卸载"><a class="header-anchor" href="#卸载"></a>卸载</h2>
<ul>
<li>直接删除用户目录下的anaconda文件夹即可</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> -rf ~/anaconda2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>更改用户环境变量为系统的python</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'export PATH=/usr/bin/:$PATH'</span> <span class="token operator">>></span> .bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>测试python能否使用</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">which</span> python
<span class="token comment"># 得到 /usr/bin/python 则说明更改成功</span>
python
pip
<span class="token comment"># 都能成功打开则说明成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="conda下安装包-软件"><a class="header-anchor" href="#conda下安装包-软件"></a>conda下安装包/软件</h2>
<h3 id="python的包"><a class="header-anchor" href="#python的包"></a>python的包</h3>
<h4 id="conda命令概述"><a class="header-anchor" href="#conda命令概述"></a>conda命令概述</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda 命令             <span class="token comment"># 在当前虚拟环境下执行</span>
conda 命令 -n 虚拟环境名 <span class="token comment"># 在指定虚拟环境下执行</span>
<span class="token comment"># 如 conda -n python2.7 list,  conda -n python2.7 install numpy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="包的管理"><a class="header-anchor" href="#包的管理"></a>包的管理</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda list       <span class="token comment"># 查看已装包</span>
conda search  包 <span class="token comment"># 查找包信息——从网上获取所有版本的这个包的列表，标 * 的是已装的</span>
conda <span class="token function">install</span> 包 <span class="token comment"># 安装包</span>
conda -c channel <span class="token function">install</span> 包 <span class="token comment"># 通过指定channel安装</span>
<span class="token comment"># 如 conda -c conda-forge install tmux</span>
<span class="token comment"># 如 conda install -c bioconda coreutils</span>
conda update     <span class="token comment"># 更新包</span>
conda remove     <span class="token comment"># 卸载包——会删除包所在的文件夹</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="conda与pip的区别"><a class="header-anchor" href="#conda与pip的区别"></a>conda与pip的区别</h4>
<ul>
<li>
<p>install</p>
<ul>
<li>conda install会自动列出，要装某包，缺何版本的哪些依赖包，问你要不要一并装掉，只需按<code>y</code>，即自动安装。还能装非python的包，只要anaconda cloud上有。</li>
<li>pip install遇到缺依赖包，则直接终端安装，且并不总能报错说缺什么包。只能装python的包。</li>
</ul>
<p>故，pip install装不上去的包，用conda install常能装上。</p>
</li>
<li>
<p>list</p>
<ul>
<li>conda list可见pip list可见的所有包：最新版的conda从<code>conda/env/环境名称/lib/python3.6/site-packages/</code>文件夹中搜索已装的包，不依赖于pip，可显示各种方式（含pip安装、自己make的）安装的包</li>
<li>pip list可见初创conda环境中所有的包，但不可见之后conda安装、和自己make的包</li>
</ul>
</li>
<li>
<p>uninstall</p>
<ul>
<li>conda不能卸载用pip安装的包：因为conda卸载时，要分析包的依赖。但pip装的包，conda不知其在conda上的来源，故无法分析。</li>
<li>pip不能卸载环境创建后用conda安装的包：pip list 可见的包才可pip卸载</li>
</ul>
</li>
<li>
<p>克隆环境</p>
<p>使用conda<a href="#%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83">克隆环境</a>（可以跨电脑克隆），只要在<code>conda/env/环境名称/lib/python3.6/site-packages/</code>下，不论以何种方式（如pip, conda, 自己make）安装的python包，都会克隆</p>
</li>
</ul>
<h3 id="非python软件"><a class="header-anchor" href="#非python软件"></a>非python软件</h3>
<p>anaconda是一个用户环境，而非单纯的python包管理器，其下不仅仅可以安装python的包，还可以通过conda forge/biconda等通道(channel)安装其他软件</p>
<h4 id="安装"><a class="header-anchor" href="#安装"></a>安装</h4>
<ul>
<li>
<p>登录<a href="https://anaconda.org/search?q=">conda cloud</a>，在搜索栏搜索软件名称，如<code>tmux</code></p>
</li>
<li>
<p>得到tmux软件列表，点击<a href="https://anaconda.org/conda-forge"> conda-forge</a> 下的 <a href="https://anaconda.org/conda-forge/tmux"><strong>tmux</strong> 2.3</a></p>
</li>
<li>
<p>进入tmux2.3的安装网页，会显示安装命令，如<code>conda install -c conda-forge tmux</code></p>
</li>
<li>
<p>在用户目录下执行上述命令</p>
</li>
</ul>
<h4 id="效果"><a class="header-anchor" href="#效果"></a>效果</h4>
<ul>
<li>之后该用户登录后，不论在何目录下，均可运行tmux</li>
</ul>
<h4 id="安装网页链接与安装命令"><a class="header-anchor" href="#安装网页链接与安装命令"></a>安装网页链接与安装命令</h4>
<p><a href="https://anaconda.org/conda-forge/tmux">tmux</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> -c conda-forge tmux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><a href="https://anaconda.org/conda-forge/htop">htop</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> -c conda-forge <span class="token function">htop</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><a href="https://anaconda.org/bioconda/coreutils">coreutils</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> -c bioconda coreutils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装后，在htop中可见所有用户的进程</p>
<h2 id="虚拟环境"><a class="header-anchor" href="#虚拟环境"></a>虚拟环境</h2>
<p>参见<a href="http://www.jianshu.com/p/d2e15200ee9b">anaconda的使用和环境管理</a></p>
<ul>
<li>
<p>功能简介</p>
<p>anaconda的各虚拟环境相互独立，可装有不同包，可为多个python版本（如python2，python3，不论你装的是anaconda2还是anaconda3）</p>
</li>
<li>
<p>创建环境</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create -n 环境的名字<span class="token punctuation">(</span>如conda_python2.7<span class="token punctuation">)</span> <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">2.7</span>
<span class="token comment"># -n 即 --name</span>
<span class="token comment"># 还可以写其他python版本号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>查看环境</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda info -e                 <span class="token comment"># -e 即 --envs  , enviroments之意</span>
root                  *  /home/<span class="token environment constant">$USER</span>/anaconda2 <span class="token comment"># * 表示当前处在这个环境下</span>
<span class="token comment"># root环境，即用户环境变量中的python路径</span>
conda_python2.7          /home/<span class="token environment constant">$USER</span>/anaconda2/envs/conda_python2.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>切换环境</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> activate 环境的名字<span class="token punctuation">(</span>如conda_python2.7<span class="token punctuation">)</span> <span class="token comment">#Linux，OS X</span>
activate 环境的名字<span class="token punctuation">(</span>如conda_python2.7<span class="token punctuation">)</span> <span class="token comment"># Windows</span>
<span class="token comment"># 效果如下</span>
<span class="token punctuation">(</span>conda_python2.7<span class="token punctuation">)</span>conda info -e        <span class="token comment"># (conda_python2.7)表示处在虚拟环境里</span>
root                     /home/<span class="token environment constant">$USER</span>/anaconda2         <span class="token comment"># * 表示当前处在这个环境下</span>
conda_python2.7        * /home/<span class="token environment constant">$USER</span>/anaconda2/envs/conda_python2.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>返回root环境</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>conda_python2.7<span class="token punctuation">)</span>source deactivate <span class="token comment"># Linux，OS X</span>
<span class="token punctuation">(</span>conda_python2.7<span class="token punctuation">)</span>deactivate <span class="token comment"># Windows</span>
<span class="token comment"># 效果为 (conda_python2.7)消失，* 标记到 root</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>克隆环境</li>
</ul>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create -n 新环境名字 --clone 原环境名字或原环境所在路径<span class="token punctuation">(</span>anaconda/envs/原环境名<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>原环境名字 ：</p>
<ul>
<li>
<p>“base” (等价于&quot;root&quot;): conda默认环境</p>
</li>
<li>
<p>其他conda环境: anaconda/envs/下的文件夹名即是，或<code>conda info -e</code>可见</p>
</li>
</ul>
<p>原环境所在路径：</p>
<ul>
<li>
<p>可将别的电脑上<code>anaconda/envs/原环境名</code>文件夹拷过来，其环境下用conda和pip安装的python与非python包，克隆后仍皆可用   <span id="anchor">锚点</span></p>
</li>
<li>
<p>也可是本机上的<code>anaconda/envs/原环境名</code>文件夹</p>
</li>
<li>
<p>删除环境</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda remove -n 环境名字 --all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="不兼容"><a class="header-anchor" href="#不兼容"></a>不兼容</h2>
<h3 id="matplotlib"><a class="header-anchor" href="#matplotlib"></a>matplotlib</h3>
<ul>
<li>
<p>问题描述</p>
<p>在<strong>mac系统</strong>上的<strong>虚拟环境</strong>（不论是anaconda还是virtualenv的）中，<strong>matplotlib</strong>无法使用：</p>
<p>import matplotlib.pyplot时，显示</p>
<blockquote>
<p>RuntimeError: Python is not installed as a framework. The Mac OS X backend will not be able to function correctly if Python is not installed as a framework…(略)…See ‘Working with Matplotlib on OSX’ in the Matplotlib FAQ for more information.</p>
</blockquote>
</li>
<li>
<p>解决方法1</p>
<p>在~/.matplotlib下，新建matplotlibrc文件，写入<code>&quot;backend : TkAgg&quot;</code></p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"backend : TkAgg"</span> <span class="token operator">></span> ~/.matplotlib/matplotlibrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>​	该方法可使得虚拟环境能用matplotlib，但不影响conda的root环境、操作系统的python使用matplotlib</p>
<ul>
<li>
<p>解决方法2</p>
<p>每次在虚拟环境下用matplotlib时，python代码中这样import</p>
</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib       <span class="token comment"># 先import它，以便下一行</span>
matplotlib<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">'TkAgg'</span><span class="token punctuation">)</span> <span class="token comment"># 加入此行，之后可import matplotlib中的各种模块</span>
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt <span class="token comment"># 例如</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1 id="报错"><a class="header-anchor" href="#报错"></a>报错</h1>
<h2 id="anaconda报错-ImportError-No-module-named-conda-cli"><a class="header-anchor" href="#anaconda报错-ImportError-No-module-named-conda-cli"></a>anaconda报错 <code>ImportError: No module named conda.cli</code></h2>
<p><a href="https://blog.csdn.net/u011331731/article/details/89407914">参考</a></p>
<h4 id="症状"><a class="header-anchor" href="#症状"></a>症状</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">Traceback (most recent call last):
  File &quot;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;bin&#x2F;conda&quot;, line 12, in &lt;module&gt;
    from conda.cli import main
ModuleNotFoundError: No module named &#39;conda&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h4 id="对策"><a class="header-anchor" href="#对策"></a>对策</h4>
<h5 id="更新式重装"><a class="header-anchor" href="#更新式重装"></a>更新式重装</h5>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> Anaconda3-2018.12-Linux-x86_64.sh -u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装过程中选择之前的<code>&lt;anaconda根目录&gt;</code></p>
<p>注：<code>bash Anaconda3-2018.12-Linux-x86_64.sh -h </code>显示 <code>-u</code> 表示 “update an existing installation”，如此更新式重装anaconda，但anaconda的base环境及其他自定义环境均会保留</p>
<h5 id="重装"><a class="header-anchor" href="#重装"></a>重装</h5>
<p>若依旧不能解决上述bug，则删掉之前的<code>&lt;anaconda根目录&gt;</code>，然后重装anaconda</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> Anaconda3-2018.12-Linux-x86_64.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>anaconda的base环境及其他自定义环境均不会保留</p>
]]></content>
      <categories>
        <category>器</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>jupyter_notebook更换配色</title>
    <url>/posts/b10b86e7/</url>
    <content><![CDATA[<h1 id="jupyter-themes-修改-jupyter-notebook-的主题"><a class="header-anchor" href="#jupyter-themes-修改-jupyter-notebook-的主题"></a>jupyter-themes: 修改 jupyter notebook 的主题</h1>
<h2 id="安装方法"><a class="header-anchor" href="#安装方法"></a>安装方法</h2>
<ul>
<li>
<p>安装</p>
<p>看jupyter是用conda还是pip装的</p>
<pre class="line-numbers language-none"><code class="language-none">conda list | grep -e &#39;^jupyter &#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">jupyter                   1.0.0            py36h9896ce5_0    【defaults】<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<ul>
<li>
<p>若<code>【】</code>中为<code>default</code>，则是jupyter notebook是conda安装的，强烈建议用conda安装jupyterthemes，不然若用pip安装jupyterthemes，会出现多种依赖不匹配</p>
  <pre class="line-numbers language-none"><code class="language-none">conda install -c conda-forge jupyterthemes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>若<code>【】</code>中为<code>pypi</code>，jupyter notebook是pip安装的，则</p>
  <pre class="line-numbers language-none"><code class="language-none">pip install jupyterthemes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
</li>
<li>
<p>配置</p>
<p>终端下输入以下命令</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jt -t gruvboxd -T -N -cellw <span class="token number">90</span>% -f roboto -fs <span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这表示我选择了 gruvboxd 这个主题，同时希望打开顶部的工具栏（Toolbar），显示笔记本的名字（Name），文本框占浏览器页宽的90%，用roboto等宽字体，字号11</p>
<p>运行过程中可能会返回报错如下，这说明已经别的用户安装了jupyterthemes，并重建了<code>/tmp/yacctab.py</code>，故你无法重写这个文件，这并不运行你使用jupyter notebook的配色。你的配色设置，保存到 <code>$HOME/.jupyter/custom/</code>，不和他的配色设置冲突。</p>
<blockquote>
<p>WARNING: Couldn’t create ‘yacctab’. [Errno 13] Permission denied: ‘/tmp/yacctab.py’<br>
WARNING: Couldn’t create ‘yacctab’. [Errno 13] Permission denied: ‘/tmp/yacctab.py’</p>
</blockquote>
</li>
<li>
<p>配置文件</p>
<p>配置文件保存到了 <code>$HOME/.jupyter/custom/</code>，下是四个配置和依赖文件<code>current_theme. txt, custom.css, custom.js, fonts/</code>，之后每次执行<code>jupyter notebook</code>启动notebook时，会加载此配置，看见你要的主题。</p>
</li>
</ul>
<h2 id="依赖不匹配怎么解决"><a class="header-anchor" href="#依赖不匹配怎么解决"></a>依赖不匹配怎么解决</h2>
<p>若jupyter notebook是conda安装，却用安装pip安装jupyterthemes，会出现多种依赖不匹配，最终如下装一圈依赖，才能安装成功</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda upgrade notebook libsodium
pip <span class="token function">install</span> jupyterthemes
pip <span class="token function">install</span> --upgrade --user nbconvert
pip <span class="token function">install</span> --upgrade ipykernel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>以下是各个依赖不匹配的详解：</p>
<h3 id="Found-existing-installation-terminado-0-6"><a class="header-anchor" href="#Found-existing-installation-terminado-0-6"></a>Found existing installation: terminado 0.6</h3>
<p>执行<code>pip install jupyterthemes</code>时报错</p>
<blockquote>
<p>notebook 5.7.6 has requirement jupyter-core&gt;=4.4.0, but you’ll have jupyter-core 4.3.0 which is incompatible.</p>
<p>Installing collected packages: lesscpy, terminado, pyzmq, jupyter-client, prometheus-client, Send2Trash, notebook, jupyterthemes<br>
<strong>Found existing installation</strong>: terminado 0.6<br>
Cannot uninstall ‘terminado’. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.</p>
</blockquote>
<p>这是因为，上述操作中pip自动更新了notebook，但这个notebook是用conda而非pip装的，故依赖项terminado不对</p>
<p>解决方法：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">conda upgrade notebook<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>而后可正常安装</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip <span class="token function">install</span> jupyterthemes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="ImportError-libsodium-so-23"><a class="header-anchor" href="#ImportError-libsodium-so-23"></a>ImportError: libsodium.so.23</h3>
<p>执行<code>jupyter notebook</code>，报错</p>
<blockquote>
<p>ImportError: libsodium.so.23: cannot open shared object file: No such file or directory</p>
</blockquote>
<p>这是由于<code>jupyterthemes</code>依赖的<code>libsodium</code>没有更新</p>
<p>解决办法：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">conda update libsodium
<span class="token comment"># 或</span>
conda <span class="token function">install</span> -c conda-forge libsodium<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="ModuleNotFoundError-No-module-named-‘nbconvert-exporters-base’"><a class="header-anchor" href="#ModuleNotFoundError-No-module-named-‘nbconvert-exporters-base’"></a>ModuleNotFoundError: No module named ‘nbconvert.exporters.base’</h3>
<p>运行notebook时，用浏览器成功打开notebook的目录网页，但无法打开/新建python3 的 notebook文件，命令行下报错</p>
<blockquote>
<p>ModuleNotFoundError: No module named ‘nbconvert.exporters.base’</p>
<p>[E 20:28:58.544 NotebookApp]</p>
</blockquote>
<p>这是因为，这是由于<code>jupyterthemes</code>依赖的<code>nbconvert</code>没有更新</p>
<p>解决办法：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip <span class="token function">install</span> --upgrade --user nbconvert<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后将<code>$USER/.local/bin</code>添加到PATH，即可实现上述运行</p>
<h3 id="ERROR-tornado-general-Uncaught-exception-in-zmqstream-callback"><a class="header-anchor" href="#ERROR-tornado-general-Uncaught-exception-in-zmqstream-callback"></a>ERROR:tornado.general: Uncaught exception in zmqstream callback</h3>
<p>运行notebook时，用浏览器成功打开notebook的目录网页，能成功打开/新建python3 的 notebook文件，但点运行，迟迟不运行，命令行下报错</p>
<blockquote>
<p>ERROR:tornado.general: Uncaught exception in zmqstream callback</p>
</blockquote>
<p>这是因为，这是由于<code>jupyterthemes</code>依赖的<code>ipykernel</code>没有更新</p>
<p>解决办法：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip <span class="token function">install</span> --upgrade ipykernel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2>
<p><a href="https://github.com/dunovank/jupyter-themes">https://github.com/dunovank/jupyter-themes</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/46242116">【内容引起舒适】让你的Jupyter Notebook不再辣眼睛</a></p>
]]></content>
      <categories>
        <category>器</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>mac安装与卸载系统自带Python</title>
    <url>/posts/62fe829c/</url>
    <content><![CDATA[<p>[TOC]</p>
<p><a href="https://blog.csdn.net/qq_35246620/article/details/78252549">参考</a></p>
<h2 id="安装与卸载Python-x-x"><a class="header-anchor" href="#安装与卸载Python-x-x"></a>安装与卸载Python x.x</h2>
<p>安装路径</p>
<table>
<thead>
<tr>
<th>来源</th>
<th>python框架路径</th>
<th>python应用目录</th>
<th>指向 python框架 链接</th>
</tr>
</thead>
<tbody>
<tr>
<td>系统自带</td>
<td><code>/System/Library/Frameworks/Python.framework/Versions/x.x</code></td>
<td>-</td>
<td><code>/usr/bin/</code></td>
</tr>
<tr>
<td>官网pkg安装</td>
<td><code>/Library/Frameworks/Python.framework/Versions/x.x</code></td>
<td><code>/Applications/Python x.x</code></td>
<td><code>/usr/local/bin/</code></td>
</tr>
<tr>
<td>brew安装</td>
<td><code>/usr/local/Cellar/python/x.x</code></td>
<td>-</td>
<td>-</td>
</tr>
</tbody>
</table>
<h3 id="官网pkg安装"><a class="header-anchor" href="#官网pkg安装"></a>官网pkg安装</h3>
<h4 id="安装"><a class="header-anchor" href="#安装"></a>安装</h4>
<p>首先，登录 Python 官网，下载所需版本：<a href="https://www.python.org/">Welcome to Python</a>.</p>
<p>下载得<code>.pkg</code>文件，戳开安装之。会自动安装三样东西：</p>
<ul>
<li>
<p>Python 框架：<code>/Library/Frameworks/Python.framework/Version/x.x</code></p>
</li>
<li>
<p>Python 应用（如python自带IDE，Python launcher）目录：<code>/Applications/Python x.x</code></p>
</li>
<li>
<p>指向 Python 的连接：<code>/usr/local/bin/&#123;pydoc,python,pythonw,python-config,等&#125;x.x  </code></p>
<p>指向<code>/Library/Frameworks/Python.framework/Versions/x.x/&#123;pydoc,python,pythonw,python-config,等&#125;x.x</code></p>
</li>
</ul>
<h4 id="卸载"><a class="header-anchor" href="#卸载"></a>卸载</h4>
<ul>
<li>删除框架</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> -rf /Library/Frameworks/Python.framework/Versions/x.x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>删除应用目录</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> -rf <span class="token string">"/Applications/Python x.x"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>删除指向python的链接</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/bin/
<span class="token function">ls</span> -l /usr/local/bin <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'/Library/Frameworks/Python.framework/Versions/2.7'</span> <span class="token comment"># 查看链接</span>
brew prune  <span class="token comment"># 清除链接和目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>清除后可再次查看链接，会发现链接已清除</p>
<h3 id="brew安装"><a class="header-anchor" href="#brew安装"></a>brew安装</h3>
<p>推荐使用homebrew安装python：</p>
<ul>
<li>可以指定python版本</li>
<li>安装卸载方便，避免对系统自带的python版本误操作</li>
<li>安装某些软件时会连带安装python包，如果系统中已安装该版本包，但不是用brew安装的，就会引起冲突，导致安装失败</li>
</ul>
<h4 id="安装-_2"><a class="header-anchor" href="#安装-_2"></a>安装</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew isntall python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="卸载-_2"><a class="header-anchor" href="#卸载-_2"></a>卸载</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew unisntall python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="conda安装虚拟环境"><a class="header-anchor" href="#conda安装虚拟环境"></a>conda安装虚拟环境</h3>
<p>详见本文件夹下 conda的教程</p>
<h2 id="替换系统python"><a class="header-anchor" href="#替换系统python"></a>替换系统python</h2>
<p>依上法用pkg安装的python后，欲望替换系统python（但<strong>不要删除</strong>系统python），需如下操作。还原到原来的系统python (x.x=2.7)，也如此。</p>
<h3 id="开放系统文件夹修改权限"><a class="header-anchor" href="#开放系统文件夹修改权限"></a>开放系统文件夹修改权限</h3>
<p>以“改变Python安装目录的用户组”,“修改Python当前安装目录的一些快捷方式” ,“重新建立新的命令符号链接”</p>
<p>重启电脑,长按<code>⌘R</code>，直到苹果logo出现，打开utility中终端，执行如下命令:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">csrutil disable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后点重启电脑</p>
<h3 id="配置"><a class="header-anchor" href="#配置"></a>配置</h3>
<p>移动 安装的Python框架 到 系统python框架 所在目录</p>
<pre class="line-numbers language-ba&#39;sh" data-language="ba&#39;sh"><code class="language-ba&#39;sh">sudo mv &#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;x.x &#x2F;System&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>改变Python安装目录的用户组</p>
<pre class="line-numbers language-ba&#39;sh" data-language="ba&#39;sh"><code class="language-ba&#39;sh">cd &#x2F;System&#x2F;Library&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;
sudo chown -R root:wheel x.x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>修改Python当前安装目录的一些快捷方式</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /System/Library/Frameworks/Python.framework/Versions/
<span class="token function">sudo</span> <span class="token function">rm</span> Current
<span class="token function">sudo</span> <span class="token function">ln</span> -s x.x Current<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="链接替换"><a class="header-anchor" href="#链接替换"></a>链接替换</h4>
<p>删除旧的命令符号链接</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/bin
<span class="token function">sudo</span> <span class="token function">rm</span> pydoc<span class="token operator">&lt;</span>v<span class="token operator">></span> python<span class="token operator">&lt;</span>v<span class="token operator">></span> pythonw<span class="token operator">&lt;</span>v<span class="token operator">></span> python<span class="token operator">&lt;</span>v<span class="token operator">></span>-config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>&lt;v&gt; = “” 或 “x” 或 “x.x” , 如python&lt;v&gt; 可以是 “python” “python2” “python2.7”，分别用于替换默认的python、python2、python2.7</li>
</ul>
<p>重新建立新的命令符号链接</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/bin
<span class="token function">sudo</span> <span class="token function">ln</span> -s /System/Library/Frameworks/Python.framework/Versions/<span class="token operator">&lt;</span>V<span class="token operator">></span>/bin/<span class="token punctuation">&#123;</span>pydoc<span class="token operator">&lt;</span>v<span class="token operator">></span>,python<span class="token operator">&lt;</span>v<span class="token operator">></span>,pythonw<span class="token operator">&lt;</span>v<span class="token operator">></span>,python<span class="token operator">&lt;</span>v<span class="token operator">></span>-config<span class="token punctuation">&#125;</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>&lt;V&gt;=“x.x” 或 “Current”，“Current&quot;是链接指向某个&quot;x.x”</li>
</ul>
<p>上述&lt;v&gt;，&lt;V&gt;的选择：</p>
<ul>
<li>替换&quot;python&quot;，则&lt;v&gt;=“”，&lt;V&gt;=“Current”</li>
<li>替换&quot;pythonx&quot;或&quot;pythonx.x&quot;，则&lt;v&gt;=&lt;V&gt;=“x.x”</li>
</ul>
<p>更新/root/.bash_profile文件中的路径，在~/.bash_profile插入下面的内容即可</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Setting PATH for Python x.x</span>
<span class="token comment"># The orginal version is saved in .bash_profile.pysave</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>"/System/Library/Frameworks/Python.framework/Versions/x.x/bin:<span class="token variable">$&#123;<span class="token environment constant">PATH</span>&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="验证更改成功"><a class="header-anchor" href="#验证更改成功"></a>验证更改成功</h4>
<p>现在重新启动一下终端，然后执行<code>python&lt;v&gt; --version</code>，得到Python x.x，即成功</p>
<p>如果在python程序中，需要使用下面代码获取python版本</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> platform
<span class="token keyword">print</span><span class="token punctuation">(</span>platform<span class="token punctuation">.</span>python_version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 返回 x.x 即成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="关闭系统文件夹修改权限"><a class="header-anchor" href="#关闭系统文件夹修改权限"></a>关闭系统文件夹修改权限</h3>
<p>重启电脑，长按<code>⌘R</code>,直到苹果logo出现，打开utility中终端，执行如下命令:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">csrutil <span class="token builtin class-name">enable</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后点重启电脑</p>
]]></content>
      <categories>
        <category>器</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>pip使用方法</title>
    <url>/posts/749bd8bc/</url>
    <content><![CDATA[<h2 id="pip使用方法"><a class="header-anchor" href="#pip使用方法"></a>pip使用方法</h2>
<ul>
<li>装包</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> 包<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>卸包</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip uninstall 包<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>升级到最新版本</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> -U 包<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>升级/降级到制定版本</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> -U 包<span class="token operator">==</span>版本号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>上述方法，令包为<code>pip</code>，即可 卸/升级/降级 pip 自己</li>
<li>看有哪些包</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>看装了的包的信息</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip show 包<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>器</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>virtualenv_教程</title>
    <url>/posts/48c97705/</url>
    <content><![CDATA[<h1 id="virtualenv-教程"><a class="header-anchor" href="#virtualenv-教程"></a>virtualenv 教程</h1>
<p>参考资料：</p>
<p><a href="http://pythonguidecn.readthedocs.io/zh/latest/dev/virtualenvs.html">安装与使用说明</a></p>
<p><a href="http://www.jianshu.com/p/08c657bd34f1">Python–Virtualenv简明教程</a></p>
<h2 id="安装"><a class="header-anchor" href="#安装"></a>安装</h2>
<p>通过pip安装virtualenv：</p>
<pre class="line-numbers language-none"><code class="language-none">$ pip install virtualenv
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>测试你的安装</p>
<pre class="line-numbers language-none"><code class="language-none">$ virtualenv --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="创建环境"><a class="header-anchor" href="#创建环境"></a>创建环境</h2>
<h3 id="查看你机子上不同版本python的地址"><a class="header-anchor" href="#查看你机子上不同版本python的地址"></a>查看你机子上不同版本python的地址</h3>
<pre class="line-numbers language-none"><code class="language-none">which python
which python2
which python2.7
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>会返回一个地址，是你需要的python所在&lt;地址&gt;，复制它</p>
<h3 id="创建虚拟环境"><a class="header-anchor" href="#创建虚拟环境"></a>创建虚拟环境</h3>
<h4 id="创建方法"><a class="header-anchor" href="#创建方法"></a>创建方法</h4>
<p>可在任意选定&lt;目录&gt;创建虚拟环境</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>目录<span class="token operator">></span>$ virtualenv --python<span class="token operator">=</span><span class="token operator">&lt;</span>地址<span class="token operator">></span> <span class="token operator">&lt;</span>虚拟环境的名字<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>创建后，&lt;目录&gt;下会生成&lt;虚拟环境的名字&gt;文件夹，其下有bin/，include/，lib/</p>
<ul>
<li>&lt;目录&gt;可为用户根目录（即<code>~/</code>)，用于创建整个用户的虚拟环境</li>
<li>&lt;目录&gt;可为工程目录，用于创建本工程使用的虚拟环境</li>
</ul>
<h4 id="权限不足"><a class="header-anchor" href="#权限不足"></a>权限不足</h4>
<pre class="line-numbers language-none"><code class="language-none">The program &#39;virtualenv&#39; is currently not installed. To run &#39;virtualenv&#39; please ask your administrator to install the package &#39;python-virtualenv&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>请服务器管理员安装python-virtualenv</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pip <span class="token function">install</span> virtualenv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="使用"><a class="header-anchor" href="#使用"></a>使用</h2>
<h3 id="安装python的包"><a class="header-anchor" href="#安装python的包"></a>安装python的包</h3>
<p>装pip的软件，必须先到虚拟环境所在目录</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>目录<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>输入一下命令激活python的虚拟环境</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>目录<span class="token operator">></span>$ <span class="token builtin class-name">source</span> bin/activate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>激活成功后，用户名前会加<code>(&lt;目录&gt;)</code></p>
<p>此时，输入以下命令装软件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span><span class="token operator">&lt;</span>目录<span class="token operator">></span><span class="token punctuation">)</span>用户名@服务器名: 当前目录$ pip <span class="token function">install</span> <span class="token operator">&lt;</span>软件<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装完成后，从虚拟环境出来</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span><span class="token operator">&lt;</span>目录<span class="token operator">></span><span class="token punctuation">)</span>用户名@服务器名: deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="使用python及python的包"><a class="header-anchor" href="#使用python及python的包"></a>使用python及python的包</h3>
<ul>
<li>
<p>当&lt;目录&gt;为在用户根目录（即<code>~/</code>)时：</p>
<p>只要该用户登录，无需<code>source bin/activate</code>激活，即可在任意目录下，使用虚拟环境（包括python版本及python包），但不能<code>pip install</code> 安装pyhton包</p>
</li>
<li>
<p>当&lt;目录&gt;为某pyhton工程文件夹：</p>
<p>只有在该工程目录，输入<code>source bin/activate</code>激活后，才能使用该虚拟环境的包括python版本及python包，即<code>pip install</code> 安装pyhton包，在任意目录下均可使用</p>
</li>
</ul>
]]></content>
      <categories>
        <category>器</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>我的python使用tips</title>
    <url>/posts/53bbc892/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="运行"><a class="header-anchor" href="#运行"></a>运行</h2>
<h3 id="命令行"><a class="header-anchor" href="#命令行"></a>命令行</h3>
<p>mac/unix/Linux<br>
进入：<code>python</code>、<code>ipython</code><br>
退出：<code>ctrl+d</code>，显示是否退出，输y，回车<br>
挂起：<code>ctrl+z</code><br>
杀死：<code>ctrl+c</code></p>
<h3 id="sublime内"><a class="header-anchor" href="#sublime内"></a>sublime内</h3>
<p>长按<code>command</code>，调出sublime的快捷键清单，点击清单上的快捷键即可执行</p>
<h2 id="版本"><a class="header-anchor" href="#版本"></a>版本</h2>
<h3 id="包的存放位置"><a class="header-anchor" href="#包的存放位置"></a>包的存放位置</h3>
<p>python的包存放在site-packages/文件夹内，包可以是文件夹（内含.py等文件）、单独的.py等文件。</p>
<h4 id="import的方法"><a class="header-anchor" href="#import的方法"></a>import的方法</h4>
<p>需要从当前python的site-packages开始，逐层写import。例如，要导入这个包：“当前python的site-packages/文件夹1/文件夹2/目标文件.py”，需写</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> 文件夹<span class="token number">1</span><span class="token punctuation">.</span>文件夹<span class="token number">2</span><span class="token punctuation">.</span>目标文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="如何确定当前python的-site-packages-位置"><a class="header-anchor" href="#如何确定当前python的-site-packages-位置"></a>如何确定当前python的&quot;site-packages/&quot;位置</h4>
<p>即相当于确定<code>which python</code>那个python的site-packages/的位置</p>
<p><strong>法一</strong> 在命令行中</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -c <span class="token string">"from distutils.sysconfig import get_python_lib; print(get_python_lib())"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>法二</strong> 在python中</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> distutils<span class="token punctuation">.</span>sysconfig <span class="token keyword">import</span> get_python_lib<span class="token punctuation">;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>get_python_lib<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>均会返回形如“/Users/mac/anaconda/lib/python3.6/site-packages”的地址。若在mac系统，按<code>command+shift+G</code>，输入该地址，回车即到达包所在目录。</p>
<h2 id="输出"><a class="header-anchor" href="#输出"></a>输出</h2>
<h3 id="整行输出"><a class="header-anchor" href="#整行输出"></a>整行输出</h3>
<p>python的print输出的特性：</p>
<ul>
<li>
<p>在出现换行符(可以是sleep 尾巴自带的，或字符串里的)前，不会输出</p>
</li>
<li>
<p>要在未出现换行符时强行输出，有两种情况</p>
<ul>
<li>
<p>用<code>sys.stdout.flush()</code>输出尽stdout所存，输出后换不行，光标在行尾</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep
<span class="token keyword">import</span> sys
<span class="token comment"># 先输出'a'并换行，过一秒才输出'bc'并换行</span>
<span class="token keyword">print</span> <span class="token string">'a\nb'</span><span class="token punctuation">,</span> <span class="token comment"># 字符串里有'\n',print结尾不带'\n'</span>
sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'c'</span>     <span class="token comment"># pritn结尾有'\n'</span>

<span class="token comment"># 先输出'a\nb'，过一秒在'b'后紧接着输出'c\n'</span>
<span class="token keyword">print</span> <span class="token string">'a\nb'</span><span class="token punctuation">,</span> <span class="token comment"># 字符串里有'\n',print结尾不带'\n'</span>
sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>
sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'c'</span>     <span class="token comment"># pritn结尾有'\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>python脚本执行完毕，输出尽stdout所存</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在ipython中</span>
<span class="token keyword">print</span> <span class="token string">'abc\r'</span>   <span class="token comment"># 然后回车</span>
<span class="token comment"># 输出</span>
<span class="token comment"># abc</span>
<span class="token comment">#       //下面换了一行</span>

<span class="token keyword">print</span> <span class="token string">'abc\r'</span><span class="token punctuation">,</span>  <span class="token comment"># 然后回车</span>
<span class="token comment"># 输出</span>
<span class="token comment"># abc   //下面没有换一行了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="同一行反复输出"><a class="header-anchor" href="#同一行反复输出"></a>同一行反复输出</h3>
<ul>
<li>
<p><code>'\r'</code>表示光标回到屏幕上光标所在行之首，但不清除本行已输出字符，之后新输出的字符会覆盖已有字符。</p>
</li>
<li>
<p>不是两个’\n’之间称为一行，而是屏幕上一行输出叫一行</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span> <span class="token string">'---------------------------------------------------------------------------------------------------------------------\ra'</span>
<span class="token comment"># 得到</span>
<span class="token comment"># -------------------------------------------------------------------------------------</span>
<span class="token comment"># a----------------------------------</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><strong>同一行反复输出的方法</strong></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys
<span class="token comment"># 循环</span>
    <span class="token keyword">print</span> <span class="token string">"就地覆盖的内容\r"</span><span class="token punctuation">,</span>
 	sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 循环</span>
    <span class="token keyword">print</span> <span class="token string">"不断向后延长的内容"</span><span class="token punctuation">,</span>
  	sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="进度条"><a class="header-anchor" href="#进度条"></a>进度条</h4>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys

<span class="token keyword">def</span> <span class="token function">progess_bar</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> precision<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>num_block<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token comment"># 输出到屏幕</span>
<span class="token comment"># p 是[0,1]的float，表示百分之多少的进度</span>
<span class="token comment"># precision小数点位数</span>
<span class="token comment"># 进度条的'>'块数</span>
    <span class="token comment"># 以防之前stdout修改，如"屏幕文件双向输出"功能</span>
    original <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdout
    sys<span class="token punctuation">.</span>stdout <span class="token operator">=</span> sys<span class="token punctuation">.</span>__stdout__
    <span class="token comment"># 右对齐输出百分数</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'%%%ds'</span><span class="token operator">%</span><span class="token punctuation">(</span>precision<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">%</span> \
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'%%.%df'</span><span class="token operator">%</span>precision<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">,</span>
    <span class="token keyword">print</span> <span class="token string">'   |'</span><span class="token punctuation">,</span>
    n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>p<span class="token operator">*</span>num_block<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">'>'</span><span class="token punctuation">,</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num_block<span class="token operator">-</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">' '</span><span class="token punctuation">,</span>
    <span class="token keyword">if</span> p<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">'|\r'</span><span class="token punctuation">,</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span>
    <span class="token comment"># 还原sys.stdout</span>
    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>stdout <span class="token operator">=</span> original

<span class="token comment"># 效果</span>
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep
<span class="token keyword">for</span> p <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    p<span class="token operator">=</span>p<span class="token operator">/</span><span class="token number">100.0</span>
    progess_bar<span class="token punctuation">(</span>p<span class="token punctuation">,</span> precision<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>num_block<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>
    sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>
<span class="token comment"># 0.01秒变化一下</span>
<span class="token comment">#  94.000 %   | > > > > > > > > > > > > > > > > > >     |</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>一些对比实例</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep
<span class="token comment"># 例1</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token string">'asdasdasdas'</span><span class="token punctuation">,</span>
    <span class="token keyword">print</span> <span class="token string">"\r%d"</span><span class="token operator">%</span>x<span class="token punctuation">,</span>        <span class="token comment"># 回到行首</span>
    <span class="token keyword">print</span> <span class="token string">"hahah\r"</span><span class="token punctuation">,</span>       <span class="token comment"># 光标回到行首</span>
    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
<span class="token comment"># 输出</span>
<span class="token comment"># x ha  asdas</span>
<span class="token comment"># x=0,1,2,...9 (每0.1秒一变化)</span>
<span class="token comment"># asdas未被清除</span>

<span class="token comment"># 例2</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token string">'asdasdasdas'</span><span class="token punctuation">,</span>
    <span class="token keyword">print</span> <span class="token string">"%d"</span><span class="token operator">%</span>x<span class="token punctuation">,</span>        <span class="token comment"># 不回到行首</span>
    <span class="token keyword">print</span> <span class="token string">"hahah\r"</span><span class="token punctuation">,</span>
    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
<span class="token comment"># 输出</span>
<span class="token comment"># asdasdasdas x hahah</span>
<span class="token comment"># x=0,1,2,...9 (每0.1秒一变化)</span>

<span class="token comment"># 例3</span>
<span class="token keyword">print</span> <span class="token string">'asdasdasdas'</span><span class="token punctuation">,</span>     <span class="token comment"># 未换行</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token string">"%d"</span><span class="token operator">%</span>x<span class="token punctuation">,</span>        <span class="token comment"># 不回到行首</span>
    <span class="token keyword">print</span> <span class="token string">"hahah\r"</span><span class="token punctuation">,</span>
    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
<span class="token comment"># 输出</span>
<span class="token comment"># x hahahsdas 0 hahah</span>
<span class="token comment"># x=1,2,...9 (每0.1秒一变化)</span>

<span class="token comment"># 例4</span>
<span class="token keyword">print</span> <span class="token string">'asdasdasdas'</span><span class="token punctuation">,</span>     <span class="token comment"># 未换行</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token string">"%d"</span><span class="token operator">%</span>x<span class="token punctuation">,</span>        <span class="token comment"># 不回到行首</span>
    <span class="token keyword">print</span> <span class="token string">"hahah\r"</span><span class="token punctuation">,</span>
    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
<span class="token comment"># 1秒后输出</span>
<span class="token comment"># x hahahsdas 9 hahah</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="路径"><a class="header-anchor" href="#路径"></a>路径</h2>
<p>获得当文件(而不是其所在文件夹)的绝对路径</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">dir_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>从路径取得文件名字</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span><span class="token operator">&lt;</span>filepath_string<span class="token operator">></span><span class="token punctuation">)</span>
<span class="token comment"># Linux下相当于 &lt;filepath_string>.split('/')[-1]</span>
<span class="token comment"># 若&lt;filepath_string>为文件路径，返回文件名(带扩展名)</span>
<span class="token comment"># 若&lt;filepath_string>为文件夹路径，返回“”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>从路径取得文件夹名字</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>dir_string<span class="token operator">></span> <span class="token operator">=</span> os.path.dirname<span class="token punctuation">(</span><span class="token operator">&lt;</span>path_string<span class="token operator">></span><span class="token punctuation">)</span>
<span class="token comment"># 若&lt;path_string>为文件夹路径，则返回 &lt;path_string></span>
<span class="token comment"># 若&lt;path_string>为文件路径，  则返回其所在文件夹的路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>一路向下创建文件夹</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">os.makedirs<span class="token punctuation">(</span><span class="token operator">&lt;</span>path_string<span class="token operator">></span><span class="token punctuation">)</span> <span class="token comment"># 此文件夹已经存在则报错</span>
os.makedirs<span class="token punctuation">(</span><span class="token operator">&lt;</span>path_string<span class="token operator">></span>, <span class="token assign-left variable">exist_ok</span><span class="token operator">=</span>True<span class="token punctuation">)</span> <span class="token comment"># 此文件夹已经存在不报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>连接路径名，在不同操作系统下都work</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>path_string<span class="token operator">></span> <span class="token operator">=</span> os.path.join<span class="token punctuation">(</span><span class="token operator">&lt;</span>path_string<span class="token operator"><span class="token file-descriptor important">1</span>></span>,<span class="token operator">&lt;</span>path_string<span class="token operator"><span class="token file-descriptor important">2</span>></span>,<span class="token punctuation">..</span>.<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>器</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>更换pip和conda源</title>
    <url>/posts/20426c3c/</url>
    <content><![CDATA[<h1 id="TUNA一键换源【推荐】"><a class="header-anchor" href="#TUNA一键换源【推荐】"></a>TUNA一键换源【推荐】</h1>
<p>清华tuna源，官网 <a href="https://github.com/tuna/oh-my-tuna">https://github.com/tuna/oh-my-tuna</a></p>
<p>国内建议使用tuna源，装包会快很多。</p>
<p>目前支持更改下列软件的配置，将其直接指向 TUNA 镜像站: conda, Homebrew, PyPI(即pip源), TeX Live (by tlmgr), Arch Linux, CTAN, Debian, Ubuntu, CentOS, AOSC OS。</p>
<p><code>tuna</code>是一键换源的alias，<code>tuna-help</code>是他的帮助命令。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">alias tuna<span class="token operator">=</span><span class="token string">'wget --no-check-certificate -O - https://tuna.moe/oh-my-tuna/oh-my-tuna.py | python -- -'</span>

tuna<span class="token operator">-</span><span class="token builtin">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
     echo <span class="token string">'tuna是一个一键换源的脚本：目前支持更改下列软件的配置，将其直接指向 TUNA 镜像站: conda, Homebrew, PyPI(即pip源), TeX Live (by tlmgr), Arch Linux, CTAN, Debian, Ubuntu, CentOS, AOSC OS'</span>
    echo
    echo "tuna <span class="token punctuation">[</span> install <span class="token operator">|</span> update<span class="token punctuation">]</span>  <span class="token punctuation">:</span> 下载最新的 oh<span class="token operator">-</span>my<span class="token operator">-</span>tuna<span class="token punctuation">.</span>py 脚本
    来自      https<span class="token punctuation">:</span><span class="token operator">//</span>tuna<span class="token punctuation">.</span>moe<span class="token operator">/</span>oh<span class="token operator">-</span>my<span class="token operator">-</span>tuna<span class="token operator">/</span>oh<span class="token operator">-</span>my<span class="token operator">-</span>tuna<span class="token punctuation">.</span>py
    保存到    $share_app_config"
    echo <span class="token string">"tuna : 当前用户一键换源"</span>
    echo <span class="token string">"sudo tuna --global : 所有用户一键换源"</span>
    echo <span class="token string">"tuna [ help | -h | --help ] : 显示帮助"</span>
    echo <span class="token string">"tuna             : 使用在线下载的"</span>
    echo <span class="token string">"tuna [arguments] : oh-my-tuna.py 的参数，详见下面:"</span>
    echo
    tuna <span class="token operator">-</span>h
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="手动换源"><a class="header-anchor" href="#手动换源"></a>手动换源</h1>
<h2 id="pip换成清华源"><a class="header-anchor" href="#pip换成清华源"></a>pip换成清华源</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip config <span class="token builtin class-name">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>
<p>Linux：<code>~/.config/pip/pip.conf </code></p>
</li>
<li>
<p>Mac：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip config list -v <span class="token comment"># pip>10 可用</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回：</p>
<pre class="line-numbers language-none"><code class="language-none">For variant &#39;global&#39;, will try loading &#39;&#x2F;Library&#x2F;Application Support&#x2F;pip&#x2F;pip.conf&#39;
For variant &#39;user&#39;, will try loading &#39;&#x2F;Users&#x2F;mac&#x2F;.pip&#x2F;pip.conf&#39;
For variant &#39;user&#39;, will try loading &#39;&#x2F;Users&#x2F;mac&#x2F;Library&#x2F;Application Support&#x2F;pip&#x2F;pip.conf&#39;
For variant &#39;site&#39;, will try loading &#39;&#x2F;Users&#x2F;mac&#x2F;miniconda3&#x2F;pip.conf&#39;
global.index-url&#x3D;&#39;https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="conda换成清华源"><a class="header-anchor" href="#conda换成清华源"></a>conda换成清华源</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config --set show_channel_urls <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>配置文件：<code>~/.condarc</code></p>
]]></content>
      <categories>
        <category>器</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>用tqdm显示进度条</title>
    <url>/posts/5ec581f7/</url>
    <content><![CDATA[<h2 id="tdqm用法"><a class="header-anchor" href="#tdqm用法"></a>tdqm用法</h2>
<p><a href="https://tqdm.github.io/docs/tqdm/">官方文档</a></p>
<h3 id="显示进度条"><a class="header-anchor" href="#显示进度条"></a>显示进度条</h3>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm
pbar <span class="token operator">=</span> tqdm<span class="token punctuation">(</span>total<span class="token operator">=</span>重复次数<span class="token punctuation">,</span> dynamic_ncols<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> initial<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>重复次数<span class="token punctuation">)</span><span class="token punctuation">:</span>
    pbar<span class="token punctuation">.</span>set_description_str<span class="token punctuation">(</span>前缀字符串<span class="token punctuation">)</span>
    <span class="token comment"># 等价于写 pbar.desc = 前缀字符串</span>
    pbar<span class="token punctuation">.</span>set_postfix_str<span class="token punctuation">(</span>后缀字符串<span class="token punctuation">)</span>
    <span class="token comment"># 等价于写 pbar.postfix = 后缀字符串</span>
    pbar<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>
pbar<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">prefix:  85%|█████████████▏        | 85&#x2F;100 [00:08&lt;00:01,  9.94it&#x2F;s, suffix]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p>常用参数：</p>
<ul>
<li><code>dynamic_ncols</code>  ：默认False，请选为True以使终端宽度变化时，进度条会随着变化</li>
</ul>
<table>
<thead>
<tr>
<th><code>dynamic_ncols</code></th>
<th>终端窗口变窄`</th>
<th>终端窗口变宽</th>
</tr>
</thead>
<tbody>
<tr>
<td>False</td>
<td>1. 很多行，输出长度都是原窗口的宽度</td>
<td>2. 输出长度不随着窗口变宽而增加</td>
</tr>
<tr>
<td>True</td>
<td>3. 原有的一行保留，然后空一行，在另起一行适配性的窗口输出</td>
<td>4. 输出长度随着窗口变宽而增加</td>
</tr>
</tbody>
</table>
<ol>
<li>
<p><img data-src="/posts/5ec581f7/1.png" alt="屏幕快照 2019-09-05 16.14.35"></p>
</li>
<li>
<p><img data-src="/posts/5ec581f7/2.png" alt="屏幕快照 2019-09-05 16.14.15"></p>
</li>
<li>
<p><img data-src="/posts/5ec581f7/3.png" alt="屏幕快照 2019-09-05 16.15.31"></p>
</li>
<li>
<p><img data-src="/posts/5ec581f7/4.png" alt="屏幕快照 2019-09-05 16.15.52"></p>
</li>
</ol>
<ul>
<li><code>initial</code>：进度条初始值，默认为0</li>
</ul>
<h4 id="退出时清除此进度条"><a class="header-anchor" href="#退出时清除此进度条"></a>退出时清除此进度条</h4>
<ul>
<li><code>pbar.close()</code>时<strong>保留</strong>此进度条</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pbar <span class="token operator">=</span> tqdm<span class="token punctuation">(</span>total<span class="token operator">=</span>重复次数, <span class="token assign-left variable">leave</span><span class="token operator">=</span>True<span class="token punctuation">)</span>
pbar <span class="token operator">=</span> tqdm<span class="token punctuation">(</span>total<span class="token operator">=</span>重复次数<span class="token punctuation">)</span> <span class="token comment"># default leave=True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li><code>pbar.close()</code>时<strong>清除</strong>此进度条</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">pbar <span class="token operator">=</span> tqdm<span class="token punctuation">(</span>total<span class="token operator">=</span>重复次数<span class="token punctuation">,</span> leave<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="多个进度条并行"><a class="header-anchor" href="#多个进度条并行"></a>多个进度条并行</h4>
<p>使用<code>position</code>参数，从0开始计算，position越大打印出来所在行最下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pbar0 <span class="token operator">=</span> tqdm<span class="token punctuation">(</span>total<span class="token operator">=</span>重复次数, <span class="token assign-left variable">leave</span><span class="token operator">=</span>False, <span class="token assign-left variable">position</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
pbar1 <span class="token operator">=</span> tqdm<span class="token punctuation">(</span>total<span class="token operator">=</span>重复次数, <span class="token assign-left variable">leave</span><span class="token operator">=</span>False, <span class="token assign-left variable">position</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
pbar3 <span class="token operator">=</span> tqdm<span class="token punctuation">(</span>total<span class="token operator">=</span>重复次数, <span class="token assign-left variable">leave</span><span class="token operator">=</span>False, <span class="token assign-left variable">position</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token comment">## 同时更新pbar0，pbar1，pbar3</span>

pbar0.close<span class="token punctuation">(</span><span class="token punctuation">)</span>
pbar1.close<span class="token punctuation">(</span><span class="token punctuation">)</span>
pbar2.close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>示例</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm

fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">]</span>
pbars <span class="token operator">=</span> <span class="token punctuation">&#123;</span>fruit<span class="token punctuation">:</span> tqdm<span class="token punctuation">(</span>total<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> leave<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> position<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
         <span class="token keyword">for</span> fruit <span class="token keyword">in</span> fruits<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    fruit <span class="token operator">=</span> fruits<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">]</span>
    pbars<span class="token punctuation">[</span>fruit<span class="token punctuation">]</span><span class="token punctuation">.</span>set_description_str<span class="token punctuation">(</span>fruit<span class="token punctuation">)</span>
    pbar<span class="token punctuation">.</span>set_postfix_str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    pbars<span class="token punctuation">[</span>fruit<span class="token punctuation">]</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> pbar <span class="token keyword">in</span> pbars<span class="token punctuation">:</span>
    pbar<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">apple:  27%|████████████▋                 | 27&#x2F;100 [00:07&lt;00:22,  3.32it&#x2F;s, 78]
banana:  26%|███████████▉                 | 26&#x2F;100 [00:07&lt;00:22,  3.32it&#x2F;s, 76]
orange:  26%|███████████▉                 | 26&#x2F;100 [00:07&lt;00:22,  3.32it&#x2F;s, 77]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h3 id="显示实时更新的字符串"><a class="header-anchor" href="#显示实时更新的字符串"></a>显示实时更新的字符串</h3>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm
pbar <span class="token operator">=</span> tqdm<span class="token punctuation">(</span>bar_format<span class="token operator">=</span><span class="token string">'&#123;desc&#125;'</span><span class="token punctuation">)</span> <span class="token comment"># 即不要进度条，只有description_str的意思</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>重复次数<span class="token punctuation">)</span><span class="token punctuation">:</span>
    pbar<span class="token punctuation">.</span>set_description_str<span class="token punctuation">(</span>字符串<span class="token punctuation">)</span>
    pbar<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>
pbar<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>例如</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm
pbar <span class="token operator">=</span> tqdm<span class="token punctuation">(</span>bar_format<span class="token operator">=</span><span class="token string">'&#123;desc&#125;'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
    pbar<span class="token punctuation">.</span>set_description_str<span class="token punctuation">(</span><span class="token string">'prefix %d'</span><span class="token operator">%</span>i<span class="token punctuation">)</span>
    pbar<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>
pbar<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">prefix 24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
]]></content>
      <categories>
        <category>器</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>cuda安装教程</title>
    <url>/posts/3078800000000/</url>
    <content><![CDATA[<h1 id="文件夹组织"><a class="header-anchor" href="#文件夹组织"></a>文件夹组织</h1>
<pre class="line-numbers language-none"><code class="language-none">cuda_cudnn&#x2F;
    cuda&#x2F;
        各个版本的cuda安装包
    cudnn&#x2F;
        各个版本的cuda对应的各个版本的cudnn的安装包
    README.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="cuDNN与cuda之间的关系"><a class="header-anchor" href="#cuDNN与cuda之间的关系"></a>cuDNN与cuda之间的关系</h1>
<p>cuda：显卡计算的加速库，可用于渲染、神经网络等等</p>
<p>cudnn：神经网络加速库文件，依赖于cuda，大幅优化显卡上的神经网络计算，比cuda加速两倍以上</p>
<p>nccl：多显卡通讯加速，可加速神经网络多卡训练</p>
<h1 id="直接用apt安装"><a class="header-anchor" href="#直接用apt安装"></a>直接用apt安装</h1>
<p><a href="https://gist.github.com/bogdan-kulynych/f64eb148eeef9696c70d485a76e42c3a">参见</a></p>
<h1 id="徒手安装教程"><a class="header-anchor" href="#徒手安装教程"></a>徒手安装教程</h1>
<p>参考：</p>
<ul>
<li><a href="http://www.rignitc.com/2018/12/29/install-cuda-10-with-ubuntu-16-04/">http://www.rignitc.com/2018/12/29/install-cuda-10-with-ubuntu-16-04/</a></li>
<li><a href="https://blog.csdn.net/qq_32408773/article/details/84112166">https://blog.csdn.net/qq_32408773/article/details/84112166</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/47330858">https://zhuanlan.zhihu.com/p/47330858</a></li>
<li><a href="https://blog.csdn.net/qq_38231807/article/details/83780336">https://blog.csdn.net/qq_38231807/article/details/83780336</a></li>
</ul>
<h2 id="从NVIDIA官网下载安装包的技巧"><a class="header-anchor" href="#从NVIDIA官网下载安装包的技巧"></a>从NVIDIA官网下载安装包的技巧</h2>
<ul>
<li>
<p>需要翻墙开全局模式，才能下载链接/下载按钮才能工作</p>
</li>
<li>
<p>可再本地用浏览器(w3m不可)登录账号、下载，传到服务器</p>
</li>
<li>
<p>直接下载到服务器：</p>
<ul>
<li>
<p>不可在网页上直接拷贝下载按钮的链接，去服务器wget，这样无法下载成功。</p>
</li>
<li>
<p>必需用（本地）浏览器（<code>w3m</code>终端浏览器不可以）访问下载页，登录账号。</p>
</li>
<li>
<p>再点下载网页上的按钮，开始下载了，再从浏览器的下载栏处复制链接。</p>
</li>
<li>
<p>然后到服务器<code>wget [此链接]</code>，下载得到的文件名结尾有一串乱码，形如</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">&#39;cudnn-10.1-linux-x64-v7.6.3.30.tgz?ziMqZ3giGG1v5v90de6Of-_NpBtGVRLIR4O7hkSQ4Hu5RE_Qr-qxE98NFILK6B89iL1xitgZGQMy1ZH_o3ayiKsoYVbK1K3GmYUbNkFKUTn-jDCpEv726d61fCYT5SC6rI17tKt8hDVHxC-4zDH5XJtEjSovwJn5obx_04zS72ohX8HvmNEI8MxqTrq97Jq55krHcKU5l&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p>只需 <code>mv  cudnn-10.1-linux-x64-v7.6.3.30.tgz?xxxxxxx cudnn-10.1-linux-x64-v7.6.3.30.tgz</code></p>
</li>
<li>
<p>之后解压必需用<code>tar -xzvf  cudnn-x.x-linux-x64-vxx.tgz</code>，用其他<code>7z</code>解压会得到一个文件而不是文件夹。</p>
</li>
</ul>
</li>
</ul>
<h2 id="安装cuda"><a class="header-anchor" href="#安装cuda"></a>安装cuda</h2>
<p><a href="https://developer.nvidia.com/cuda-90-download-archive">cuda-9.0下载cuda</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">sh</span> cuda_x.x.x_xxx.xx_linux.run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>⌃C</code>滑到协议的结尾，然后依下选项选择</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Do you accept the previously <span class="token builtin class-name">read</span> EULA?
accept/decline/quit: accept

Install NVIDIA Accelerated Graphics Driver <span class="token keyword">for</span> Linux-x86_64 <span class="token number">384.81</span>?
<span class="token punctuation">(</span>y<span class="token punctuation">)</span>es/<span class="token punctuation">(</span>n<span class="token punctuation">)</span>o/<span class="token punctuation">(</span>q<span class="token punctuation">)</span>uit: n  <span class="token comment"># 这是因为已经安装了NVIDIA的驱动</span>

Install the CUDA <span class="token number">9.0</span> Toolkit?
<span class="token punctuation">(</span>y<span class="token punctuation">)</span>es/<span class="token punctuation">(</span>n<span class="token punctuation">)</span>o/<span class="token punctuation">(</span>q<span class="token punctuation">)</span>uit: y

Enter Toolkit Location
 <span class="token punctuation">[</span> default is /usr/local/cuda-9.0 <span class="token punctuation">]</span>: <span class="token comment"># 直接回车</span>

Do you want to <span class="token function">install</span> a symbolic <span class="token function">link</span> at /usr/local/cuda?
<span class="token punctuation">(</span>y<span class="token punctuation">)</span>es/<span class="token punctuation">(</span>n<span class="token punctuation">)</span>o/<span class="token punctuation">(</span>q<span class="token punctuation">)</span>uit: y

Install the CUDA <span class="token number">9.0</span> Samples?
<span class="token punctuation">(</span>y<span class="token punctuation">)</span>es/<span class="token punctuation">(</span>n<span class="token punctuation">)</span>o/<span class="token punctuation">(</span>q<span class="token punctuation">)</span>uit: y

Enter CUDA Samples Location
 <span class="token punctuation">[</span> default is /home/xxxx <span class="token punctuation">]</span>: <span class="token comment"># 直接回车</span>

Installing the CUDA Toolkit <span class="token keyword">in</span> /usr/local/cuda-9.0 <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>安装完成返回</p>
<blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Installing the CUDA Toolkit <span class="token keyword">in</span> /usr/local/cuda-9.0 <span class="token punctuation">..</span>.
Installing the CUDA Samples <span class="token keyword">in</span> /home/haoyu <span class="token punctuation">..</span>.
Copying samples to /home/haoyu/NVIDIA_CUDA-9.0_Samples now<span class="token punctuation">..</span>.
Finished copying samples.

<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token operator">=</span> Summary <span class="token operator">=</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>

Driver:   Not Selected <span class="token comment"># 这是因为上面 Install NVIDIA Accelerated Graphics Driver 选了n</span>
Toolkit:  Installed <span class="token keyword">in</span> /usr/local/cuda-9.0
Samples:  Installed <span class="token keyword">in</span> /home/haoyu

Please <span class="token function">make</span> sure that
 -   <span class="token environment constant">PATH</span> includes /usr/local/cuda-9.0/bin
 -   LD_LIBRARY_PATH includes /usr/local/cuda-9.0/lib64, or, <span class="token function">add</span> /usr/local/cuda-9.0/lib64 to /etc/ld.so.conf and run ldconfig as root

To uninstall the CUDA Toolkit, run the uninstall script <span class="token keyword">in</span> /usr/local/cuda-9.0/bin

Please see CUDA_Installation_Guide_Linux.pdf <span class="token keyword">in</span> /usr/local/cuda-9.0/doc/pdf <span class="token keyword">for</span> detailed information on setting up CUDA.

***WARNING: Incomplete installation<span class="token operator">!</span> This installation did not <span class="token function">install</span> the CUDA Driver. A driver of version at least <span class="token number">384.00</span> is required <span class="token keyword">for</span> CUDA <span class="token number">9.0</span> functionality to work.
To <span class="token function">install</span> the driver using this installer, run the following command, replacing <span class="token operator">&lt;</span>CudaInstaller<span class="token operator">></span> with the name of this run file:
    <span class="token function">sudo</span> <span class="token operator">&lt;</span>CudaInstaller<span class="token operator">></span>.run -silent -driver

Logfile is /tmp/cuda_install_51161.log
Signal caught, cleaning up<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h2 id="测试cuda"><a class="header-anchor" href="#测试cuda"></a>测试cuda</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/cuda/samples/1_Utilities/deviceQuery
<span class="token function">sudo</span> <span class="token function">make</span> clean <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">make</span>
./deviceQuery<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>返回</p>
<blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> Peer access from GeForce GTX TITAN X <span class="token punctuation">(</span>GPU0<span class="token punctuation">)</span> -<span class="token operator">></span> GeForce GTX TITAN X <span class="token punctuation">(</span>GPU1<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> Yes
<span class="token operator">></span> Peer access from GeForce GTX TITAN X <span class="token punctuation">(</span>GPU0<span class="token punctuation">)</span> -<span class="token operator">></span> GeForce GTX TITAN X <span class="token punctuation">(</span>GPU2<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> No
<span class="token operator">></span> Peer access from GeForce GTX TITAN X <span class="token punctuation">(</span>GPU0<span class="token punctuation">)</span> -<span class="token operator">></span> GeForce GTX TITAN X <span class="token punctuation">(</span>GPU3<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> No
<span class="token operator">></span> Peer access from GeForce GTX TITAN X <span class="token punctuation">(</span>GPU1<span class="token punctuation">)</span> -<span class="token operator">></span> GeForce GTX TITAN X <span class="token punctuation">(</span>GPU0<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> Yes
<span class="token operator">></span> Peer access from GeForce GTX TITAN X <span class="token punctuation">(</span>GPU1<span class="token punctuation">)</span> -<span class="token operator">></span> GeForce GTX TITAN X <span class="token punctuation">(</span>GPU2<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> No
<span class="token operator">></span> Peer access from GeForce GTX TITAN X <span class="token punctuation">(</span>GPU1<span class="token punctuation">)</span> -<span class="token operator">></span> GeForce GTX TITAN X <span class="token punctuation">(</span>GPU3<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> No
<span class="token operator">></span> Peer access from GeForce GTX TITAN X <span class="token punctuation">(</span>GPU2<span class="token punctuation">)</span> -<span class="token operator">></span> GeForce GTX TITAN X <span class="token punctuation">(</span>GPU0<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> No
<span class="token operator">></span> Peer access from GeForce GTX TITAN X <span class="token punctuation">(</span>GPU2<span class="token punctuation">)</span> -<span class="token operator">></span> GeForce GTX TITAN X <span class="token punctuation">(</span>GPU1<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> No
<span class="token operator">></span> Peer access from GeForce GTX TITAN X <span class="token punctuation">(</span>GPU2<span class="token punctuation">)</span> -<span class="token operator">></span> GeForce GTX TITAN X <span class="token punctuation">(</span>GPU3<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> Yes
<span class="token operator">></span> Peer access from GeForce GTX TITAN X <span class="token punctuation">(</span>GPU3<span class="token punctuation">)</span> -<span class="token operator">></span> GeForce GTX TITAN X <span class="token punctuation">(</span>GPU0<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> No
<span class="token operator">></span> Peer access from GeForce GTX TITAN X <span class="token punctuation">(</span>GPU3<span class="token punctuation">)</span> -<span class="token operator">></span> GeForce GTX TITAN X <span class="token punctuation">(</span>GPU1<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> No
<span class="token operator">></span> Peer access from GeForce GTX TITAN X <span class="token punctuation">(</span>GPU3<span class="token punctuation">)</span> -<span class="token operator">></span> GeForce GTX TITAN X <span class="token punctuation">(</span>GPU2<span class="token punctuation">)</span> <span class="token builtin class-name">:</span> Yes

deviceQuery, CUDA Driver <span class="token operator">=</span> CUDART, CUDA Driver Version <span class="token operator">=</span> <span class="token number">10.1</span>, CUDA Runtime Version <span class="token operator">=</span> <span class="token number">9.0</span>, NumDevs <span class="token operator">=</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>结果最后一行若有<code>Result = PASS</code>则测试成功</p>
<h2 id="安装cudnn"><a class="header-anchor" href="#安装cudnn"></a>安装cudnn</h2>
<p>参考：</p>
<ul>
<li><a href="https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#installlinux-deb">官方文档</a></li>
<li><a href="https://blog.csdn.net/qq_32408773/article/details/84112166">https://blog.csdn.net/qq_32408773/article/details/84112166</a></li>
</ul>
<p><a href="https://developer.nvidia.com/rdp/cudnn-archive">下载cudnn官网</a></p>
<ul>
<li>进入网页首先需要注册账号</li>
</ul>
<h3 id="法一-dpkg安装"><a class="header-anchor" href="#法一-dpkg安装"></a>法一 dpkg安装</h3>
<p>下载<code>[cuDNN Runtime Library for UbuntuXX.X (Deb)]</code></p>
<p>然后执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg -i libcudnnX_X.X.X.XX-X+cudaX.X_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>即完成安装</p>
<h3 id="法二-cp安装"><a class="header-anchor" href="#法二-cp安装"></a>法二 cp安装</h3>
<ul>
<li>
<p>请选择下载</p>
<p><code>Download cuDNN vx.x.x (月 日, 年), for CUDA x.x</code></p>
<ul>
<li><code>cuDNN vx.x.x Library for Linux</code> cuDNN 动态库文件</li>
<li><code>cuDNN vx.x.x Developer Library for Ubuntu16.04 (Deb)</code> cuDNN 测试代码</li>
</ul>
</li>
<li>
<p>下载得到<code>.tar</code>文件，解压之</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -xzvf cudnn-x.x-linux-x64-vxx.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>进入解压的文件夹后</strong></p>
<p>通过拷贝来安装cudnn，并修改权限</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">CUDA_TO_INSTALL</span><span class="token operator">=</span>cuda-x.x  <span class="token comment"># 设置版本号</span>
<span class="token function">sudo</span> <span class="token function">cp</span> cuda/include/cudnn.h /usr/local/<span class="token variable">$CUDA_TO_INSTALL</span>/include/
<span class="token function">sudo</span> <span class="token function">cp</span> cuda/lib64/libcudnn* /usr/local/<span class="token variable">$CUDA_TO_INSTALL</span>/lib64/
<span class="token function">sudo</span> <span class="token function">chmod</span> a+r /usr/local/<span class="token variable">$CUDA_TO_INSTALL</span>/include/cudnn.h
<span class="token function">sudo</span> <span class="token function">chmod</span> a+r /usr/local/<span class="token variable">$CUDA_TO_INSTALL</span>/lib64/libcudnn*
<span class="token function">sudo</span> ldconfig /usr/local/<span class="token variable">$CUDA_TO_INSTALL</span>/lib64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="测试cudnn"><a class="header-anchor" href="#测试cudnn"></a><a href="https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html">测试cudnn</a></h2>
<p>cuDNN v7.0 Code Samples and User Guide for Ubuntu16.04 (Deb)</p>
<h3 id="获得测试代码"><a class="header-anchor" href="#获得测试代码"></a>获得测试代码</h3>
<ul>
<li>法一，从官网获得：下载方法见[安装cudnn]-[cuDNN 测试代码]</li>
</ul>
<p>测试cuDNN</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg -i cudnn7.1.4_for_cuda9.0_sample_and_doc.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">(Reading database ... 263943 files and directories currently installed.)
Preparing to unpack cudnn7.1.4_for_cuda9.0_sample_and_doc.deb ...
Unpacking libcudnn7-doc (7.1.4.18-1+cuda9.0) over (7.1.4.18-1+cuda9.0) ...
dpkg: dependency problems prevent configuration of libcudnn7-doc:
 libcudnn7-doc depends on libcudnn7-dev; however:
  Package libcudnn7-dev is not installed.

dpkg: error processing package libcudnn7-doc (--install):
 dependency problems - leaving unconfigured
Errors were encountered while processing:
 libcudnn7-doc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>虽然上面报错，但不影响，因为这一步已经把<code>/usr/src/cudnn_samples_v7/</code>创建好，可以开始测试了</p>
<p>Copy the cuDNN sample to a writable path.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> -r /usr/src/cudnn_samples_v7/ /home/<span class="token environment constant">$USER</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>法二：<code>本目录/cudnn/cudnn_samples_v7</code>，适用于所有<code>cudnn7.x.x_for_cudax.x</code></li>
</ul>
<p>Copy the cuDNN sample to a writable path.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> -r ./cudnn/cudnn_samples_v7/ /home/<span class="token environment constant">$USER</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="开始测试"><a class="header-anchor" href="#开始测试"></a>开始测试</h3>
<p>Go to the writable path.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/<span class="token environment constant">$USER</span>/cudnn_samples_v7/mnistCUDNN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>Compile the mnistCUDNN sample.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">make</span> clean <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>Run the mnistCUDNN sample</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./mnistCUDNN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">
Test passed!

Testing half precision (math in single precision)
Loading image data&#x2F;one_28x28.pgm
Performing forward propagation ...
Testing cudnnGetConvolutionForwardAlgorithm ...
Fastest algorithm is Algo 1
Testing cudnnFindConvolutionForwardAlgorithm ...
^^^^ CUDNN_STATUS_SUCCESS for Algo 1: 0.024896 time requiring 3464 memory
^^^^ CUDNN_STATUS_SUCCESS for Algo 0: 0.030912 time requiring 0 memory
^^^^ CUDNN_STATUS_SUCCESS for Algo 2: 0.039712 time requiring 28800 memory
^^^^ CUDNN_STATUS_SUCCESS for Algo 7: 0.098592 time requiring 2057744 memory
^^^^ CUDNN_STATUS_SUCCESS for Algo 5: 0.149504 time requiring 203008 memory
Resulting weights from Softmax:
0.0000001 1.0000000 0.0000001 0.0000000 0.0000563 0.0000001 0.0000012 0.0000017 0.0000010 0.0000001
Loading image data&#x2F;three_28x28.pgm
Performing forward propagation ...
Resulting weights from Softmax:
0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000714 0.0000000 0.0000000 0.0000000 0.0000000
Loading image data&#x2F;five_28x28.pgm
Performing forward propagation ...
Resulting weights from Softmax:
0.0000000 0.0000008 0.0000000 0.0000002 0.0000000 1.0000000 0.0000154 0.0000000 0.0000012 0.0000006

Result of classification: 1 3 5

Test passed!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>此即测试成功</p>
<h2 id="安装nccl"><a class="header-anchor" href="#安装nccl"></a><a href="https://docs.nvidia.com/deeplearning/sdk/nccl-install-guide/index.html#usingnccl">安装nccl</a></h2>
<p>NCCL是Nvidia Collective multi-GPU Communication Library的简称，它是一个实现多GPU的collective communication通信库，Nvidia做了很多优化，以在PCIe、Nvlink、InfiniBand上实现较高的通信速度。</p>
<p><a href="https://docs.ksyun.com/documents/2594">参考</a> <a href="https://docs.ksyun.com/documents/2593">参考</a></p>
<ul>
<li>
<p>访问<a href="https://developer.nvidia.com/nccl/nccl-download">官方下载页</a>注册、登录、选择和cuda、系统适配的安装包、下载</p>
<ul>
<li>下载<code> local NCCL repository</code> 必需用浏览器(w3m不可)登录账号、下载，传到服务器。不可在网页上直接拷贝下载按钮的链接，去服务器wget，这样无法下载成功。</li>
<li>下载<code>For the network repository </code>可以直接在网页上的下载按钮复制下载链接用wget获取。</li>
</ul>
</li>
<li>
<p>Install the repository.</p>
<ul>
<li>For the local NCCL repository:</li>
</ul>
  <pre class="line-numbers language-none"><code class="language-none">sudo dpkg -i nccl-repo-&lt;version&gt;.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>For the network repository:</li>
</ul>
  <pre class="line-numbers language-none"><code class="language-none">sudo dpkg -i nvidia-machine-learning-repo-&lt;version&gt;.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>Update the APT database:</p>
  <pre class="line-numbers language-none"><code class="language-none">sudo apt update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>Install the libnccl2 package with APT. Additionally, if you need to compile applications with NCCL, you can install the libnccl-dev package as well:</p>
<ul>
<li>If you are using the network repository, the following command will upgrade CUDA to the latest version.</li>
</ul>
  <pre class="line-numbers language-none"><code class="language-none">sudo apt install libnccl2 libnccl-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>装不是全网最新版本的cuda的nccl，则需执行</li>
</ul>
  <pre class="line-numbers language-none"><code class="language-none">sudo apt install libnccl2&#x3D;2.0.0-1+cuda8.0 libnccl-dev&#x3D;2.0.0-1+cuda8.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<h2 id="测试nccl"><a class="header-anchor" href="#测试nccl"></a>测试nccl</h2>
<h3 id="查看版本"><a class="header-anchor" href="#查看版本"></a>查看版本</h3>
<pre class="line-numbers language-none"><code class="language-none">python -c &#39;import torch; print(torch.cuda.nccl.version())&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="专门的测试程序"><a class="header-anchor" href="#专门的测试程序"></a><a href="https://github.com/NVIDIA/nccl-tests">专门的测试程序</a></h3>
<p>These tests check both the performance and the correctness of <a href="http://github.com/nvidia/nccl">NCCL</a> operations.</p>
<p>下载</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/NVIDIA/nccl-tests.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="编译"><a class="header-anchor" href="#编译"></a>编译</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> nccl-tests
<span class="token function">make</span> clean
<span class="token function">make</span> <span class="token comment"># (我们的服务器就跑这个)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>If CUDA is not installed in <code>/usr/local/cuda</code>, you may specify CUDA_HOME. Similarly, if NCCL is not installed in <code>/usr</code>, you may specify NCCL_HOME.</p>
<pre class="line-numbers language-none"><code class="language-none">make CUDA_HOME&#x3D;&#x2F;path&#x2F;to&#x2F;cuda NCCL_HOME&#x3D;&#x2F;path&#x2F;to&#x2F;nccl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>NCCL tests rely on MPI to work on multiple processes, hence multiple nodes. If you want to compile the tests with MPI support, you need to set MPI=1 and set MPI_HOME to the path where MPI is installed. (我们的服务器无需跑这个)</p>
<pre class="line-numbers language-none"><code class="language-none">make MPI&#x3D;1 MPI_HOME&#x3D;&#x2F;path&#x2F;to&#x2F;mpi CUDA_HOME&#x3D;&#x2F;path&#x2F;to&#x2F;cuda NCCL_HOME&#x3D;&#x2F;path&#x2F;to&#x2F;nccl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>make</code>成功会返回</p>
<pre class="line-numbers language-none"><code class="language-none">make -C src build
make[1]: Entering directory &#39;&#x2F;home&#x2F;haoyu&#x2F;nccl-tests&#x2F;src&#39;
Compiling  all_reduce.cu                       &gt; ..&#x2F;build&#x2F;all_reduce.o
Compiling  common.cu                           &gt; ..&#x2F;build&#x2F;common.o
Linking  ..&#x2F;build&#x2F;all_reduce.o               &gt; ..&#x2F;build&#x2F;all_reduce_perf
Compiling  all_gather.cu                       &gt; ..&#x2F;build&#x2F;all_gather.o
Linking  ..&#x2F;build&#x2F;all_gather.o               &gt; ..&#x2F;build&#x2F;all_gather_perf
Compiling  broadcast.cu                        &gt; ..&#x2F;build&#x2F;broadcast.o
Linking  ..&#x2F;build&#x2F;broadcast.o                &gt; ..&#x2F;build&#x2F;broadcast_perf
Compiling  reduce_scatter.cu                   &gt; ..&#x2F;build&#x2F;reduce_scatter.o
Linking  ..&#x2F;build&#x2F;reduce_scatter.o           &gt; ..&#x2F;build&#x2F;reduce_scatter_perf
Compiling  reduce.cu                           &gt; ..&#x2F;build&#x2F;reduce.o
Linking  ..&#x2F;build&#x2F;reduce.o                   &gt; ..&#x2F;build&#x2F;reduce_perf
make[1]: Leaving directory &#39;&#x2F;home&#x2F;haoyu&#x2F;nccl-tests&#x2F;src&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="Usage"><a class="header-anchor" href="#Usage"></a>Usage</h4>
<p>NCCL tests can run on multiple processes, multiple threads, and multiple CUDA devices per thread. The number of process is managed by MPI and is therefore not passed to the tests as argument. The total number of ranks (=CUDA devices) will be equal to (number of processes)<em>(number of threads)</em>(number of GPUs per thread).</p>
<h4 id="Quick-examples"><a class="header-anchor" href="#Quick-examples"></a>Quick examples</h4>
<p>Run on 8 GPUs (<code>-g 8</code>), scanning from 8 Bytes to 128MBytes : (我们的服务器就跑这个)</p>
<pre class="line-numbers language-none"><code class="language-none">.&#x2F;build&#x2F;all_reduce_perf -b 8 -e 128M -f 2 -g 8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>Run with MPI on 40 processes (potentially on multiple nodes) with 4 GPUs each :</p>
<pre class="line-numbers language-none"><code class="language-none">mpirun -np 40 .&#x2F;build&#x2F;all_reduce_perf -b 8 -e 128M -f 2 -g 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>测试结果会返回</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none"># nThread 1 nGpus 8 minBytes 8 maxBytes 134217728 step: 2(factor) warmup iters: 5 iters: 20 validation: 1
#
# Using devices
#   Rank  0 Pid  12164 on   jungpu30 device  0 [0x1a] GeForce RTX 2080 Ti
#   Rank  1 Pid  12164 on   jungpu30 device  1 [0x1b] GeForce RTX 2080 Ti
#   Rank  2 Pid  12164 on   jungpu30 device  2 [0x3d] GeForce RTX 2080 Ti
#   Rank  3 Pid  12164 on   jungpu30 device  3 [0x3e] GeForce RTX 2080 Ti
#   Rank  4 Pid  12164 on   jungpu30 device  4 [0x88] GeForce RTX 2080 Ti
#   Rank  5 Pid  12164 on   jungpu30 device  5 [0x89] GeForce RTX 2080 Ti
#   Rank  6 Pid  12164 on   jungpu30 device  6 [0xb1] GeForce RTX 2080 Ti
#   Rank  7 Pid  12164 on   jungpu30 device  7 [0xb2] GeForce RTX 2080 Ti
#
#                                                     out-of-place                       in-place
#       size         count    type   redop     time   algbw   busbw  error     time   algbw   busbw  error
#        (B)    (elements)                     (us)  (GB&#x2F;s)  (GB&#x2F;s)            (us)  (GB&#x2F;s)  (GB&#x2F;s)
           8             2   float     sum    35.93    0.00    0.00  1e-07    35.72    0.00    0.00  1e-07
          16             4   float     sum    37.01    0.00    0.00  1e-07    36.77    0.00    0.00  1e-07
          32             8   float     sum    36.74    0.00    0.00  6e-08    36.44    0.00    0.00  6e-08
          64            16   float     sum    37.21    0.00    0.00  6e-08    36.61    0.00    0.00  6e-08
         128            32   float     sum    36.98    0.00    0.01  6e-08    36.97    0.00    0.01  6e-08
         256            64   float     sum    37.26    0.01    0.01  3e-08    36.42    0.01    0.01  3e-08
         512           128   float     sum    37.47    0.01    0.02  3e-08    37.28    0.01    0.02  3e-08
        1024           256   float     sum    37.54    0.03    0.05  1e-07    36.81    0.03    0.05  1e-07
        2048           512   float     sum    38.50    0.05    0.09  2e-07    37.57    0.05    0.10  2e-07
        4096          1024   float     sum    38.97    0.11    0.18  2e-07    38.46    0.11    0.19  2e-07
        8192          2048   float     sum    39.49    0.21    0.36  2e-07    38.23    0.21    0.37  2e-07
       16384          4096   float     sum    41.20    0.40    0.70  2e-07    40.58    0.40    0.71  2e-07
       32768          8192   float     sum    67.22    0.49    0.85  2e-07    67.61    0.48    0.85  2e-07
       65536         16384   float     sum    124.9    0.52    0.92  2e-07    126.4    0.52    0.91  2e-07
      131072         32768   float     sum    237.0    0.55    0.97  2e-07    236.7    0.55    0.97  2e-07
      262144         65536   float     sum    207.2    1.27    2.21  2e-07    204.7    1.28    2.24  2e-07
      524288        131072   float     sum    325.5    1.61    2.82  2e-07    325.4    1.61    2.82  2e-07
     1048576        262144   float     sum    615.4    1.70    2.98  2e-07    613.0    1.71    2.99  2e-07
     2097152        524288   float     sum   1289.4    1.63    2.85  2e-07   1290.3    1.63    2.84  2e-07
     4194304       1048576   float     sum   2740.9    1.53    2.68  2e-07   2740.6    1.53    2.68  2e-07
     8388608       2097152   float     sum   5830.5    1.44    2.52  2e-07   5829.7    1.44    2.52  2e-07
    16777216       4194304   float     sum    11991    1.40    2.45  2e-07    11981    1.40    2.45  2e-07
    33554432       8388608   float     sum    23923    1.40    2.45  2e-07    23913    1.40    2.46  2e-07
    67108864      16777216   float     sum    47784    1.40    2.46  2e-07    47781    1.40    2.46  2e-07
   134217728      33554432   float     sum    95470    1.41    2.46  2e-07    95477    1.41    2.46  2e-07
# Out of bounds values : 0 OK
# Avg bus bandwidth    : 1.20304
#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>见此状完整的结果，即通过测试。</p>
<h2 id="多版本cuda的管理"><a class="header-anchor" href="#多版本cuda的管理"></a>多版本cuda的管理</h2>
<h3 id="设置默认cuda版本"><a class="header-anchor" href="#设置默认cuda版本"></a>设置默认cuda版本</h3>
<ul>
<li>当装了多个版本的cuda，要设置哪个版本的cuda为系统默认的cuda，只需修改<code>/usr/local/cuda</code></li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> /usr/local/cuda <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/cuda-x.x /usr/local/cuda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>当<code>/usr/local/cuda</code>链接变更后，需要更新共享库缓存</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ldconfig /usr/local/cuda/lib64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>lbconfig</code>是一个动态链接库管理命令，为了让动态链接库为系统所共享。linux下的共享库机制采用了类似于高速缓存的机制，即将库信息保存在<code>/etc/ld.so.cache</code>文件里边。运行上述命令，可搜索<code>/usr/local/cuda/lib64</code>内<code>lib*.so.*</code>文件，将其路径等信息添加到<code>/etc/ld.so.cache</code>文件里。</p>
<h3 id="使用非默认版本的cuda"><a class="header-anchor" href="#使用非默认版本的cuda"></a>使用非默认版本的cuda</h3>
<p>一个用户若想使用非默认版本的cuda, 则在当前终端执行如下命令, 修改环境变量:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/local/cuda-x.x/bin:<span class="token environment constant">$PATH</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span>/usr/local/cuda-x.x/lib64:<span class="token variable">$LD_LIBRARY_PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这样, 此终端将使用<code>cuda-x.x</code>版本运行各种程序. 此时若执行 <code>nvcc -V</code> 查看cuda版本会返回此版本.</p>
<h1 id="报错日志与解决方案"><a class="header-anchor" href="#报错日志与解决方案"></a>报错日志与解决方案</h1>
<h2 id="cuda-8-0-安装"><a class="header-anchor" href="#cuda-8-0-安装"></a>cuda-8.0 安装</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/xxx/NVIDIA_CUDA-8.0_Samples
<span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>报错</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">nvcc warning : The &#39;compute_20&#39;, &#39;sm_20&#39;, and &#39;sm_21&#39; architectures are deprecated, and may be removed in a future release (Use -Wno-deprecated-gpu-targets to suppress warning).
In file included from &#x2F;usr&#x2F;local&#x2F;cuda-8.0&#x2F;bin&#x2F;..&#x2F;&#x2F;include&#x2F;cuda_runtime.h:78:0,
                 from &lt;command-line&gt;:0:
&#x2F;usr&#x2F;local&#x2F;cuda-8.0&#x2F;bin&#x2F;..&#x2F;&#x2F;include&#x2F;host_config.h:119:2: error: #error -- unsupported GNU version! gcc versions later than 5 are not supported!
 #error -- unsupported GNU version! gcc versions later than 5 are not supported!
  ^~~~~
Makefile:250: recipe for target &#39;simplePrintf.o&#39; failed
make[1]: *** [simplePrintf.o] Error 1
make[1]: Leaving directory &#39;&#x2F;usr&#x2F;local&#x2F;cuda-8.0&#x2F;samples&#x2F;0_Simple&#x2F;simplePrintf&#39;
Makefile:52: recipe for target &#39;0_Simple&#x2F;simplePrintf&#x2F;Makefile.ph_build&#39; failed
make: *** [0_Simple&#x2F;simplePrintf&#x2F;Makefile.ph_build] Error 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>解决办法：手动给cuda-8.0添加gcc和g++（版本&lt;5）的链接</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gcc-4.9 g++-4.9
<span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/bin/g++-4.9 /usr/local/cuda-8.0/bin/g++
<span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/bin/gcc-4.9 /usr/local/cuda-8.0/bin/gcc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="cudnn-测试"><a class="header-anchor" href="#cudnn-测试"></a>cudnn 测试</h2>
<h3 id="编译-_2"><a class="header-anchor" href="#编译-_2"></a>编译</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">make</span> clean <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;bin&#x2F;ld:&#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&#x2F;libcudnn.so: file format not recognized; treating as linker script<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p><strong><a href="https://blog.csdn.net/qq_33144323/article/details/85465975">解决方法</a></strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/cuda/lib64
<span class="token function">ls</span> -l <span class="token operator">|</span> <span class="token function">grep</span> libcudnn.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> -rf libcudnn.so libcudnn.so.7
<span class="token function">sudo</span> <span class="token function">ln</span> -s libcudnn.so.7.x.x libcudnn.so.7
<span class="token function">sudo</span> <span class="token function">ln</span> -s libcudnn.so.7 libcudnn.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>然后回到测试代码的目录</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">make</span> clean <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>即编译成功</p>
<h3 id="运行"><a class="header-anchor" href="#运行"></a>运行</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./mnistCUDNN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">.&#x2F;mnistCUDNN: error while loading shared libraries: libcudart.so.9.0: cannot open shared object file: No such file or directory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p><strong><a href="https://github.com/BVLC/caffe/issues/4944">解决方法</a></strong></p>
<p>这是由于装了多个版本的cuda，当链接<code>/usr/local/cuda-&gt;cuda-x.x</code>变更后，需要再进行如下操作</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ldconfig /usr/local/cuda/lib64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;sbin&#x2F;ldconfig.real: &#x2F;usr&#x2F;local&#x2F;cuda-10.1&#x2F;targets&#x2F;x86_64-linux&#x2F;lib&#x2F;libcudnn.so.7 is not a symbolic link

&#x2F;sbin&#x2F;ldconfig.real: &#x2F;usr&#x2F;local&#x2F;cuda-10.1&#x2F;targets&#x2F;x86_64-linux&#x2F;lib&#x2F;libcudnn.so.5 is not a symbolic link<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./mnistCUDNN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>则测试成功</p>
]]></content>
      <categories>
        <category>器</category>
        <category>linux杂项</category>
      </categories>
  </entry>
  <entry>
    <title>NAT设置</title>
    <url>/posts/c6f1da62/</url>
    <content><![CDATA[<h1 id="使用Iptables设置NAT"><a class="header-anchor" href="#使用Iptables设置NAT"></a>使用Iptables设置NAT</h1>
<ul>
<li>查看NAT映射关系列表</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables -t nat -L -n --line-number<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>--line-number</code>: 显示规则的<code>&lt;规则的行号&gt;</code></p>
<ul>
<li>查看NAT命令列表</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables -t nat -S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>
<p>开NAT：</p>
<ul>
<li>在第n条前插入新规则：使新规则成为第n条规则，而原来编号&gt;=n的规则则编号加1</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables -t nat -I PREROUTING <span class="token operator">&lt;</span>n<span class="token operator">></span> -d <span class="token operator">&lt;</span>公网ip<span class="token operator">></span>/32 -i <span class="token operator">&lt;</span>公网访问的网卡<span class="token operator">></span> -p tcp -m tcp --dport <span class="token operator">&lt;</span>公网端口<span class="token operator">></span> -j DNAT --to-destination <span class="token operator">&lt;</span>内网ip<span class="token operator">></span>:<span class="token operator">&lt;</span>内网端口<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>替换第n条规则：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">sudo iptables -t nat -R PREROUTING &lt;n&gt; -d &lt;公网ip&gt;&#x2F;32 -i &lt;公网访问的网卡&gt; -p tcp -m tcp --dport &lt;公网端口&gt; -j DNAT --to-destination &lt;内网ip&gt;:&lt;内网端口&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>在PREROUTING的结尾添加规则</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables -t nat -A PREROUTING -d <span class="token operator">&lt;</span>公网ip<span class="token operator">></span>/32 -i <span class="token operator">&lt;</span>公网访问的网卡<span class="token operator">></span> -p tcp -m tcp --dport <span class="token operator">&lt;</span>公网端口<span class="token operator">></span> -j DNAT --to-destination <span class="token operator">&lt;</span>内网ip<span class="token operator">></span>:<span class="token operator">&lt;</span>内网端口<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>上面命令中的<code>/32</code> <code>-m tcp</code> 可省，此即缺省值</p>
</li>
<li>
<p>删除一条NAT规则</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables -t nat -D PREROUTING <span class="token operator">&lt;</span>规则的行号<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>
<p>去除重复的iptables规则，<a href="https://blog.csdn.net/tobyliu415/article/details/124781249">详见</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables-save <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;if($1=="COMMIT")&#123;delete x&#125;&#125;$1=="-A"?!x[$0]++:1'</span> <span class="token operator">|</span> <span class="token function">sudo</span> iptables-restore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>请勿使用</strong>以下方法:</p>
<ul>
<li>
<p>没有排序（<code>sort</code>)就用<code>uniq</code>，会有漏网之鱼</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables-save <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token operator">|</span> 【请勿使用本方法】 <span class="token function">sudo</span> iptables-restore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p><code>sort</code>会打乱iptables规则的排序，使得规则的执行顺序发生变化（编号从小到大执行），详见<a href="https://juejin.cn/s/iptables%E8%AF%A6%E8%A7%A3%20%E5%A4%84%E7%90%86%E9%A1%BA%E5%BA%8F">iptables详解 处理顺序</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables-save <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token operator">|</span> 【请勿使用本方法】 <span class="token function">sudo</span> iptables-restore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>会误删“COMMIT”这种正常的重复语句。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables-save <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'!x[$0]++'</span> <span class="token operator">|</span> 【请勿使用本方法】sudo iptables-store<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>器</category>
        <category>linux杂项</category>
      </categories>
  </entry>
  <entry>
    <title>docker使用教程</title>
    <url>/posts/e8880219/</url>
    <content><![CDATA[<h1 id="docker安装"><a class="header-anchor" href="#docker安装"></a>docker安装</h1>
<p><a href="https://www.runoob.com/docker/ubuntu-docker-install.html">参见</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -fsSL https://get.docker.com -o get-docker.sh
<span class="token function">sudo</span> <span class="token function">sh</span> get-docker.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="docker使用教程"><a class="header-anchor" href="#docker使用教程"></a>docker使用教程</h1>
<h3 id="docker缓存撑爆磁盘"><a class="header-anchor" href="#docker缓存撑爆磁盘"></a>docker缓存撑爆磁盘</h3>
<p>检查docker存放容器的目录是否很大</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">du</span> /var/lib/docker/aufs/diff -hd0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若很大，则关闭docker，清空<code>/var/lib/docker</code>，再重启docker</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span>
<span class="token function">service</span> docker stop
<span class="token builtin class-name">cd</span> /var/lib/docker
<span class="token function">rm</span> -rf *
<span class="token function">service</span> docker start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="添加用户"><a class="header-anchor" href="#添加用户"></a>添加用户</h3>
<p>创建分组</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检查是否有docker分组</span>
<span class="token function">sudo</span> <span class="token function">cat</span> /etc/group <span class="token operator">|</span> <span class="token function">grep</span> docker
<span class="token comment"># 若没有，则创建docker分组</span>
<span class="token function">sudo</span> <span class="token function">groupadd</span> -g <span class="token number">999</span> docker
<span class="token comment"># 为doker分组添加root用户</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>添加用户，让无 root 权限的用户可用 Docker</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加用户</span>
<span class="token function">sudo</span> <span class="token function">usermod</span> -aG docker <span class="token operator">&lt;</span>用户名<span class="token operator">></span>
<span class="token comment"># 检查一下创建是否有效</span>
<span class="token function">cat</span> /etc/group
<span class="token comment"># 重启docker服务 以便让权限生效</span>
<span class="token function">sudo</span> systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以&lt;用户名&gt;登陆服务器，看看能否执行docker命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker info
<span class="token comment"># 若不返回“你没有权限用docker”，则添加用户成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><a href="https://zhenye-na.github.io/2019/09/29/docker-practical-guide.html">Docker 容器技术 (基础篇) </a></p>
<p><a href="http://leilux.github.io/lou/docker_practice/index.html">Docker —— 从入门到实践</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1484322">利用 Katacoda 免费同步 Docker 镜像到 Docker Hub</a></p>
]]></content>
      <categories>
        <category>器</category>
        <category>linux杂项</category>
      </categories>
  </entry>
  <entry>
    <title>iso镜像</title>
    <url>/posts/5453726a/</url>
    <content><![CDATA[<h2 id="ISO介绍"><a class="header-anchor" href="#ISO介绍"></a>ISO介绍</h2>
<p><code>xxxx.iso</code>文件，称镜像（mirror）文件，相当于光盘，内存有文件。</p>
<h2 id="安装ISO中的文件"><a class="header-anchor" href="#安装ISO中的文件"></a>安装ISO中的文件</h2>
<h3 id="挂载镜像"><a class="header-anchor" href="#挂载镜像"></a>挂载镜像</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> /mnt/<span class="token operator">&lt;</span>挂载文件夹名<span class="token operator">></span>
<span class="token function">sudo</span> <span class="token function">mount</span> -o loop <span class="token operator">&lt;</span>xxx<span class="token operator">></span>.iso /mnt/<span class="token operator">&lt;</span>挂载文件夹名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>注：只有root用户才能执行<code>mount</code>命令</p>
<p>参数</p>
<ul>
<li><code>-t iso9660</code>    -t（文件系统类型）=  iso9660（CD-ROM光盘标准文件系统），此参数可选，非必需</li>
<li><code>-o loop</code>      -o （选项） loop （用来把一个文件或着镜像当成分区挂上系统）</li>
</ul>
<h3 id="安装"><a class="header-anchor" href="#安装"></a>安装</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /mnt/<span class="token operator">&lt;</span>挂载文件夹名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以看见其下的文件，而后按照当中的文件即可，如<code>./&lt;可执行安装文件&gt;</code> ，或 自己 <code>make</code> 安装，等等</p>
<h3 id="解挂载"><a class="header-anchor" href="#解挂载"></a>解挂载</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">umount</span> <span class="token operator">&lt;</span>挂载路径<span class="token operator">></span>
<span class="token function">sudo</span> <span class="token function">rm</span> -rf <span class="token operator">&lt;</span>挂载路径<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>器</category>
        <category>linux杂项</category>
      </categories>
  </entry>
  <entry>
    <title>linux系统知识</title>
    <url>/posts/270b526/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="基础命令"><a class="header-anchor" href="#基础命令"></a>基础命令</h2>
<h2 id="mkdir"><a class="header-anchor" href="#mkdir"></a>mkdir</h2>
<p>检查文件夹路径存在否，若不存在则创建路径中各级文件夹，若存在则啥也不做也不报错</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p <span class="token operator">&lt;</span>新建文件夹路径<span class="token operator">></span>
<span class="token function">mkdir</span> <span class="token operator">&lt;</span>新建文件夹路径<span class="token operator">></span> -p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="路径"><a class="header-anchor" href="#路径"></a>路径</h2>
<h3 id="相对于绝对路径"><a class="header-anchor" href="#相对于绝对路径"></a>相对于绝对路径</h3>
<p>绝对: /xx/xxx/xxx</p>
<p>相对：xx/xx/xxx</p>
<h3 id="程序中写"><a class="header-anchor" href="#程序中写"></a>程序中写</h3>
<ul>
<li>
<p>python代码中：表示路径，使用的是相对程序文件所在目录的路径。</p>
<p>如：/home/somebody/WGAN/main.py中写的“data/figure/”，是/home/somebody/WGAN/data/figure/</p>
</li>
</ul>
<h2 id="软链接"><a class="header-anchor" href="#软链接"></a>软链接</h2>
<h3 id="创建链接"><a class="header-anchor" href="#创建链接"></a>创建链接</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> -s <span class="token operator">&lt;</span>被链接对象<span class="token operator">></span> <span class="token operator">&lt;</span>链接名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>&lt;被链接对象&gt; 可以是本机/网络上 文件夹/任何文件</li>
<li>&lt;链接名&gt;省略，则名为&lt;被链接对象&gt;</li>
</ul>
<h3 id="查看链接对象"><a class="header-anchor" href="#查看链接对象"></a>查看链接对象</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> -l
ll -l
la -l
l -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>-l 查看链接</li>
</ul>
<h3 id="使用要求"><a class="header-anchor" href="#使用要求"></a>使用要求</h3>
<h4 id="以下操作软连接会失效"><a class="header-anchor" href="#以下操作软连接会失效"></a>以下操作软连接会失效</h4>
<p>&lt;被链接对象&gt; -&gt; &lt;被链接对象&gt;的地址<br>
&lt;被链接对象&gt;不能改名，不能移动目录，不能改目录中的文件夹名字</p>
<h4 id="软连接自身可以"><a class="header-anchor" href="#软连接自身可以"></a>软连接自身可以</h4>
<p>改名/移动/复制</p>
<h3 id="删除链接"><a class="header-anchor" href="#删除链接"></a>删除链接</h3>
<ul>
<li>
<p><code>rm 链接</code></p>
<p>只删除链接，留被链接目标</p>
</li>
<li>
<p><code>rm -rf 链接</code></p>
<p>只删除链接，留被链接目标</p>
</li>
<li>
<p><code>rm -rf 链接/</code></p>
<ul>
<li>被链接的是文件：删链接，留被链接目标</li>
<li>被链接的是文件夹：<strong>删除被链接的文件夹下所有东西</strong>，留链接、留被链接的文件夹空壳</li>
</ul>
<p>故此操作危险，严禁<code>rm -rf 链接/</code>也严禁<code>rm -rf 链接</code>，以免误删</p>
</li>
<li>
<p><code>rm -rf 某文件夹/</code>或<code>rm -rf 某文件夹</code>，<code>链接</code>在<code>某文件夹/</code>中</p>
<ul>
<li>删除<code>某文件夹/</code>，故其下<code>链接</code>删除，但留被链接目标</li>
</ul>
</li>
</ul>
<h2 id="下载"><a class="header-anchor" href="#下载"></a>下载</h2>
<h3 id="wget"><a class="header-anchor" href="#wget"></a>wget</h3>
<h4 id="断点续传"><a class="header-anchor" href="#断点续传"></a>断点续传</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -c -t <span class="token number">0</span> -O new_name.tar.gz http://www.cnscn.org/old_name.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>参数解释：</p>
<ul>
<li>-c      断点续传</li>
<li>-t 0   反复尝试的次数，0为不限次数</li>
<li>-O name_name.tar.gz     把下载的文件命名为new_name.tar.gz</li>
<li><a href="http://www.cnscn.org/old_name.tar.gz">http://www.cnscn.org/old_name.tar.gz</a>      要下载的文件的网址</li>
</ul>
<p>其他参数：</p>
<ul>
<li>–passive-ftp                            使用pasv即被动模式下载，只有在搭配保全系统而遇到问题时，才要加此参数</li>
<li>–proxy-user=【username】设置登陆代理服务器的用户名</li>
<li>–proxy-passwd=【密码】     设置登陆代理服务器的密码</li>
<li>–retr-symlinks                        下载FTP的符号链接</li>
</ul>
<h3 id="w3m浏览器"><a class="header-anchor" href="#w3m浏览器"></a>w3m浏览器</h3>
<p>这是一个纯文本浏览器</p>
<p>若访问下载链接需要登录网、输入账号、密码等，wget会失效，可用w3m</p>
<ul>
<li>访问方法</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">w3m <span class="token operator">&lt;</span>网址<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>
<p>w3m下载文件到当前目录（即，你在哪里打开w3m）</p>
</li>
<li>
<p>安装情况</p>
<p>已安装于：cpu1, gpu5</p>
<p>未安装于：gpu4</p>
</li>
</ul>
<h2 id="安装软件"><a class="header-anchor" href="#安装软件"></a>安装软件</h2>
<h3 id="make编译"><a class="header-anchor" href="#make编译"></a>make编译</h3>
<p><a href="https://my.oschina.net/surjur/blog/349464">参考资料</a></p>
<p>将安装包加压到任意路径得&lt;源文件夹&gt;</p>
<h4 id="configure"><a class="header-anchor" href="#configure"></a>configure</h4>
<p>执行<code>configure</code>脚本，依给定的参数和系统环境，自动生成<code>Makefile</code>文件</p>
<p>若<code>&lt;源文件夹&gt;/unix/</code> 或<code>&lt;源文件夹&gt;</code>下有<code>configure</code>文件，则cd过去，之后一直在这个目录下操作到make install；若无<code>configure</code>文件，则免去此步</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure --prefix<span class="token operator">=</span><span class="token operator">&lt;</span>安装路径<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h5 id="选项"><a class="header-anchor" href="#选项"></a>选项</h5>
<ul>
<li><code>--prefix=&lt;安装路径&gt;</code>
<ul>
<li>默认/usr/local（<code>make install</code>需要sudo权限）</li>
<li>自己的目录下，如 /home/somebody/ENV/shareENV/local，/home/somebody/ENV/localENV/local，无需sudo权限</li>
</ul>
</li>
<li><code>--sys-config=&lt;参数&gt; </code> 指定软件的配置文件</li>
<li><code>--with、--enable、--without、--disable</code> 控制编译</li>
<li><code> ./configure --help</code> 察看`` ./configure`的帮助</li>
</ul>
<h4 id="make"><a class="header-anchor" href="#make"></a>make</h4>
<p>依<code>Makefile</code>用<code>make</code>命令，编译产生可执行文件、资源文件，需调用 <a href="http://www.icultivator.com/tag/gcc">gcc</a> 、ld、其他编译依赖程序</p>
<p>大数源码用次编译，perl或python源码调perl或python编译</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> clean <span class="token comment"># 新下载解压的安装包免此步，曾make过的则</span>
<span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h5 id="选项-_2"><a class="header-anchor" href="#选项-_2"></a>选项</h5>
<p><code>Makefile</code>文件可能设置多种编译选项，如</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token function">install</span>   <span class="token comment"># 安装， 也即 make</span>
<span class="token function">make</span> uninstall <span class="token comment"># 卸载软件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h5 id="报错"><a class="header-anchor" href="#报错"></a>报错</h5>
<p>报error ，则记下错误代码（不仅在最后一行），原因有：</p>
<ul>
<li>缺依赖库</li>
<li>可向开发者提交 bugreport（一般在 INSTALL 里有提交地址）</li>
</ul>
<h4 id="make-install"><a class="header-anchor" href="#make-install"></a>make install</h4>
<p>自动拷贝&lt;源文件夹&gt;编译成品到&lt;安装路径&gt;下相应文件夹：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;源文件夹&gt;&#x2F;
    bin&#x2F;
        软件名         名可执行(二进制)文件
    share&#x2F;            资源文件
        软件名&#x2F;
            各种资源文件
    man&#x2F;
        man1&#x2F;
            软件名.1   帮助文件
        man2&#x2F;
    lib&#x2F;              静、动态库文件
        软件名.so
    include&#x2F;
    	软件名&#x2F;
            .hpp .h 文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="若有configure文件"><a class="header-anchor" href="#若有configure文件"></a>若有<code>configure</code>文件</h5>
<p>之前已运行<code>configure</code>文件，故此处无需指定安装路径</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h5 id="若无configure文件"><a class="header-anchor" href="#若无configure文件"></a>若无<code>configure</code>文件</h5>
<p>此处需指定安装路径</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token function">install</span> <span class="token assign-left variable">prefix</span><span class="token operator">=~</span>/ENV/local  <span class="token comment"># 复制二进制文件到bin/,man/</span>
<span class="token comment"># ~/ENV/local 为自定义安装路径，如没有，则安装到/usr/bin,/usr/man，这需要sudo权限</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="改环境变量"><a class="header-anchor" href="#改环境变量"></a>改环境变量</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:<span class="token operator">&lt;</span>安装路径<span class="token operator">></span>/bin <span class="token operator">>></span> ~/.bashrc <span class="token comment"># 修改环境变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="我的环境设置"><a class="header-anchor" href="#我的环境设置"></a>我的环境设置</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ENV/
    local/
        bin/
        man/
        share/
        lib/
        include/
        <span class="token punctuation">..</span>.
    Anaconda3/
    mfsENV/ ——<span class="token operator">></span> mfs/server_config/mfsENV/
        local/
            bin/
            man/
            share/
            lib/
            include/
            <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="环境变量（-PATH）"><a class="header-anchor" href="#环境变量（-PATH）"></a>环境变量（$PATH）</h2>
<h3 id="修改PATH的语句"><a class="header-anchor" href="#修改PATH的语句"></a>修改PATH的语句</h3>
<ul>
<li>
<p>添加路径</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:新加路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>$PATH是当前&quot;路径1:路径2:路径3&quot;，在后面追加&quot;:新加路径&quot;，把此新路径集赋值给PATH</li>
<li><code>export</code>以导出变量，当即令系统更新PATH，<strong>关闭终端后失效</strong>，<code>source .bashrc</code>后失效</li>
</ul>
</li>
<li>
<p>删改路径</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span> <span class="token comment"># 先显示环境变量</span>
<span class="token comment"># 返回 路径1:路径2:路径3:路径4</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>路径1:路径2:路径3 <span class="token comment"># 在改环境变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="修改环境变量"><a class="header-anchor" href="#修改环境变量"></a>修改环境变量</h3>
<p>常用3种方法:</p>
<ul>
<li>
<p>直接在命令行输入语句</p>
<p>只对当前shell有用，关终端就失效</p>
</li>
<li>
<p>在普通文件(常命名为为.sh脚本文件,也可无后缀)中写语句</p>
<p>source此文件生效，常用在安装软件和交叉编译</p>
</li>
<li>
<p>在系统文件(如.bashrc)中写语句</p>
<p>source此文件或重启shell生效；删除此语句，再source此文件或重启shell，则可恢复</p>
<ul>
<li>在<code>/etc/bashrc</code> 写 <code>export PATH=$PATH:新加路径</code>，对所有用户有效</li>
<li>在<code>~/.bashrc</code> 写 <code>export PATH=$PATH:新加路径</code>，对自己这个用户有效</li>
</ul>
</li>
</ul>
<h2 id="进程管理"><a class="header-anchor" href="#进程管理"></a><a href="http://www.cnblogs.com/kaituorensheng/p/3980334.html">进程管理</a></h2>
<p>fg、bg、jobs、&amp;、nohup、ctrl+z、ctrl+c 命令</p>
<p><strong>一、&amp;</strong></p>
<p>加在一个命令的最后，可以把这个命令放到后台执行，如</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">watch</span>  -n <span class="token number">10</span> <span class="token function">sh</span>  test.sh  <span class="token operator">&amp;</span>  <span class="token comment">#每10s在后台执行一次test.sh脚本</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>二、ctrl + z</strong></p>
<p>可以将一个正在前台执行的命令放到后台，并且处于暂停状态。</p>
<p><strong>三、jobs</strong></p>
<p>查看当前有多少在后台运行的命令</p>
<p>jobs -l选项可显示所有任务的PID，jobs的状态可以是running, stopped, Terminated。但是如果任务被终止了（kill），shell 从当前的shell环境已知的列表中删除任务的进程标识。</p>
<p><strong>四、fg</strong></p>
<p>将后台中的命令调至<strong>前台</strong>继续运行。如果后台中有多个命令，可以用fg %jobnumber（是命令编号，不是进程号）将选中的命令调出。</p>
<p><img data-src="/posts/270b526/182233000819052.png" alt="182233000819052"></p>
<p><strong>五、bg</strong></p>
<p>将一个在后台暂停的命令，变成在<strong>后台</strong>继续执行。如果后台中有多个命令，可以用bg %jobnumber将选中的命令调出。</p>
<p><strong>六、kill</strong></p>
<ul>
<li>法子1：通过jobs命令查看job号（假设为num），然后执行kill %num</li>
<li>法子2：通过ps命令查看job的进程号（PID，假设为pid），然后执行kill pid</li>
</ul>
<p>前台进程的终止：Ctrl+c</p>
<p><strong>七、nohup</strong></p>
<p>如果让程序始终在后台执行，即使关闭当前的终端也执行（之前的&amp;做不到），这时候需要nohup。该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。关闭中断后，在另一个终端jobs已经无法看到后台跑得程序了，此时利用ps（进程查看命令）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"test.sh"</span>  <span class="token comment">#a:显示所有程序 u:以用户为主的格式来显示 x:显示所有程序，不以终端机来区分</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="用户管理"><a class="header-anchor" href="#用户管理"></a>用户管理</h2>
<p><a href="https://blog.51cto.com/zlfwmm/1764264">教程</a></p>
<h3 id="开用户"><a class="header-anchor" href="#开用户"></a>开用户</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span>
<span class="token comment"># 输入密码</span>
adduser <span class="token operator">&lt;</span>用户名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="加管理员权限"><a class="header-anchor" href="#加管理员权限"></a>加管理员权限</h3>
<ul>
<li>Ubuntu专用方法（推荐，方便）</li>
</ul>
<p>将用户加入sudo用户组，使其获得sudo权限。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">usermod</span> -aG <span class="token function">sudo</span> <span class="token operator">&lt;</span>用户名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>其中</p>
<pre class="line-numbers language-none"><code class="language-none">-a, --append                  append the user to the supplemental GROUPS
                              mentioned by the -G option without removing
                              him&#x2F;her from other groups
-G, --groups GROUPS           new list of supplementary GROUPS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>此方法不会修改<code>/etc/sudoers</code>文件，仅修改 <code>/etc/group</code> 文件中的 <code>sudo</code> 用户组，会变为</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo:x:27:<span class="token operator">&lt;</span>用户名<span class="token operator"><span class="token file-descriptor important">1</span>></span>,<span class="token operator">&lt;</span>用户名<span class="token operator"><span class="token file-descriptor important">2</span>></span>,<span class="token operator">&lt;</span>用户名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>其他linux系统</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># User privilege specification</span>
root <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> ALL
<span class="token operator">&lt;</span>用户名<span class="token operator">></span> <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>退出vim按</p>
<pre class="line-numbers language-none"><code class="language-none">:wq!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="用户管理相关的文件"><a class="header-anchor" href="#用户管理相关的文件"></a>用户管理相关的文件</h3>
<p><a href="https://blog.51cto.com/zhaoyulin/1787708">参考</a></p>
<table>
<thead>
<tr>
<th>文件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>/etc/passwd</td>
<td>存放用户名和用户信息</td>
</tr>
<tr>
<td>/etc/shadow</td>
<td>存放用户密码</td>
</tr>
<tr>
<td>/etc/group</td>
<td>存放用户组名称和组信息</td>
</tr>
<tr>
<td>/etc/gshadow</td>
<td>存放用户组密码</td>
</tr>
<tr>
<td>/etc/skel</td>
<td>默认创建用户时，把该目录下的环境变量文件拷贝到新创建的用户家目录下</td>
</tr>
<tr>
<td>/etc/default/useradd</td>
<td>useradd的默认配置文件，useradd在创建信用股时会优先读取该文件，会根据这个文件的设置进行处理，</td>
</tr>
<tr>
<td>/etc/login.defs</td>
<td>文件主要定义了用户初始化的邮件地址、umask值、用户使用期限。用户UID值等等，这个文件一般不需要改，<strong>主要用于普通用户</strong></td>
</tr>
<tr>
<td>/etc/sudoers</td>
<td>sudo授权配置文件，root可在该配置文件给普通用户授权；vim /etc/sudoers=visudo</td>
</tr>
<tr>
<td>/var/db/sudo/……</td>
<td>下面是以sudo授权用户命名的时间戳文件</td>
</tr>
</tbody>
</table>
<h3 id="用户管理相关的命令"><a class="header-anchor" href="#用户管理相关的命令"></a>用户管理相关的命令</h3>
<table>
<thead>
<tr>
<th>命令</th>
<th>解释说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>useradd</td>
<td>添加用户</td>
</tr>
<tr>
<td>userdel</td>
<td>删除用户</td>
</tr>
<tr>
<td>usermod</td>
<td>修改用户属性，修改用户的基本信息</td>
</tr>
<tr>
<td>groupadd</td>
<td>添加用户组</td>
</tr>
<tr>
<td>groupdel</td>
<td>删除用户组</td>
</tr>
<tr>
<td>groupmod</td>
<td>修改用户组属性</td>
</tr>
<tr>
<td>passwd</td>
<td>修改密码</td>
</tr>
<tr>
<td>chage</td>
<td>用来修改账号和密码的有效时间，更改密码属性</td>
</tr>
<tr>
<td>su</td>
<td>切换工具</td>
</tr>
<tr>
<td>sudo</td>
<td>root授权普通用户命令</td>
</tr>
</tbody>
</table>
<p>**说明：**这些命令有很多功能都是一样的，所以挑几个偏重要的命令坐下范例</p>
<h3 id="useradd参数"><a class="header-anchor" href="#useradd参数"></a>useradd参数</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>解释说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-u</td>
<td>指定创建用户的uid</td>
</tr>
<tr>
<td>-g</td>
<td>指定用户所属的组</td>
</tr>
<tr>
<td>-G</td>
<td>指定用户所属的附加群组（一对多组）</td>
</tr>
<tr>
<td>-c</td>
<td>指定用户说明（就是passwd文件每行以冒号分割第5列）</td>
</tr>
<tr>
<td>-s</td>
<td>指定登录shell （/etc/passwd文件每行后面的‘/bin/bash’）</td>
</tr>
<tr>
<td>-e</td>
<td>指定账号的有效期限  useradd –e“2016/04/05” 日期格式0000/00/00</td>
</tr>
<tr>
<td>-M</td>
<td>不要自动建立用户的登录目录</td>
</tr>
<tr>
<td>-d</td>
<td>设定用户的家目录（指定）</td>
</tr>
<tr>
<td>-D</td>
<td>修改useradd创建用户时的配置文件/etc/default/useradd</td>
</tr>
</tbody>
</table>
<h3 id="usermod参数"><a class="header-anchor" href="#usermod参数"></a>usermod参数</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>解释说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-u</td>
<td>更改账户UID</td>
</tr>
<tr>
<td>-g</td>
<td>更改用户所属的组（组必须事先存在）</td>
</tr>
<tr>
<td>-G</td>
<td>更改用户属于的附加组（一对多组）</td>
</tr>
<tr>
<td>-c</td>
<td>增加用户说明（就是passwd文件每行以冒号分割第5列，也可以手工修改）</td>
</tr>
<tr>
<td>-s</td>
<td>修改shell （/etc/passwd文件每行后面的‘/bin/bash’）</td>
</tr>
<tr>
<td>-e</td>
<td><strong>修改过期时间</strong>。加上用户账号、停止日期  日期格格式：0000/00/00</td>
</tr>
<tr>
<td>-d</td>
<td><strong>指定用户新的家目录</strong>，如果给定-m参数，用户旧的家目录会搬到新的家目录去，如果旧的家目录不存在则会建个新的</td>
</tr>
<tr>
<td>-f</td>
<td><strong>账号过期几日后永久停权</strong>，当值为0时账号则会呗立刻停权，而值为-1时则会关闭此功能，预设值为-1</td>
</tr>
<tr>
<td>-l</td>
<td><strong>变更用户名</strong>，其余信息不变  （实例2） [root@beita /]#usermod -l oldboy10 oldboy（改名字差不多，将oldboy改为oldboy10）</td>
</tr>
<tr>
<td>-L</td>
<td>**冻结用户密码，<strong>让其无法登录，实际上就是间接修改/etc/shadow，在密码栏的开头加上</strong>！**即表示冻结</td>
</tr>
<tr>
<td>-U</td>
<td><strong>取消冻结用户的密码</strong>，使之恢复登录；其实就是间接修改/etc/shadow，在密码栏的开头去掉**！**即表示恢复</td>
</tr>
</tbody>
</table>
<p><strong>passwd参数</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>解释说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>–stdin</td>
<td>从标准输入读取密码（只能root使用） echo  “密码” | passwd - -stdin 用户名</td>
</tr>
<tr>
<td>-S</td>
<td>列出密码的相关信息，仅有系统管理员才能使用</td>
</tr>
<tr>
<td>-n</td>
<td>在n天内不能改密码（最小）</td>
</tr>
<tr>
<td>-x</td>
<td>在n天内必须改密码（最大）</td>
</tr>
<tr>
<td>-w</td>
<td>密码过期n天后警告</td>
</tr>
<tr>
<td>-i</td>
<td>是设定密码过期几日后后停权</td>
</tr>
<tr>
<td>-d</td>
<td>删除密码，只有系统管理者才能使用</td>
</tr>
<tr>
<td>-i</td>
<td>锁住密码</td>
</tr>
<tr>
<td>-u</td>
<td>解开已上锁的账号</td>
</tr>
</tbody>
</table>
<h3 id="chage参数"><a class="header-anchor" href="#chage参数"></a>chage参数</h3>
<p>和passwd的参数大同小异</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>解释说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-E</td>
<td>给账户设“过期日期”，日期写法：0000/00/00</td>
</tr>
<tr>
<td>-l</td>
<td>查看账户的信息（小写L）</td>
</tr>
<tr>
<td>-M</td>
<td>密码保持有效的最大天数</td>
</tr>
<tr>
<td>-m</td>
<td>密码保持有效期的最小天数（在n天之内不能改密码）</td>
</tr>
<tr>
<td>-W</td>
<td>账户密码到期前。提前收到警告信息的天数</td>
</tr>
<tr>
<td>-I（大写i）</td>
<td>停滞时刻：如果一个密码已过期这些天，那么此账号将不可用（<strong>设置过期 N天后停权</strong>）</td>
</tr>
</tbody>
</table>
<h2 id="时区修改"><a class="header-anchor" href="#时区修改"></a>时区修改</h2>
<ul>
<li>查看时间</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">date</span> <span class="token string">"+%Y-%m-%d-%H:%M:%S"</span>
<span class="token comment"># 返回 2019-03-06-16:52:38</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>个人用户修改</li>
</ul>
<p>获得修改指令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tzselect<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>一路选择地区，直到得到返回<code>export TZ='Asia/Shanghai'</code>，即为修改指令。</p>
<p>将修改指令加到<code>~/.zshenv</code>，则每次用户使用zshenv，时间为此种时间。</p>
<ul>
<li>整个系统修改</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">date</span> -R <span class="token comment"># 再次查看时间</span>
<span class="token function">sudo</span> <span class="token function">cp</span> /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime
<span class="token function">date</span> -R <span class="token comment"># 再次查看时间，确认已经修改为北京时间</span>
<span class="token function">sudo</span> hwclock --systohc <span class="token comment"># 修改硬件CMOS的时间，不然后面时间还是不准</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="修改hostname"><a class="header-anchor" href="#修改hostname"></a>修改hostname</h2>
<p><a href="https://www.cyberciti.biz/faq/ubuntu-change-hostname-command/">参考</a></p>
<p><a href="https://support.rackspace.com/how-to/centos-hostname-change/">https://support.rackspace.com/how-to/centos-hostname-change/</a></p>
<p>永久修改hostname</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">hostname_change</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">local</span> <span class="token assign-left variable">new_hostname</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$1</span>"</span>
    <span class="token builtin class-name">local</span> <span class="token assign-left variable">old_hostname</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">hostname</span><span class="token variable">)</span></span>"</span>
    <span class="token function">sudo</span> hostnamectl set-hostname <span class="token string">"<span class="token variable">$&#123;new_hostname&#125;</span>"</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"current hostname: "</span>
    hostnamectl <span class="token operator">|</span> <span class="token function">head</span> -n <span class="token number">1</span>
    <span class="token builtin class-name">echo</span>
    <span class="token function">sudo</span> <span class="token function">sed</span> -E -i <span class="token string">"s/(\s)<span class="token variable">$&#123;old_hostname&#125;</span>(\s|$)/<span class="token entity" title="\1">\1</span><span class="token variable">$&#123;new_hostname&#125;</span><span class="token entity" title="\2">\2</span>/g"</span> /etc/hosts
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"$(cat /etc/hosts | grep -E "\s<span class="token variable">$&#123;new_hostname&#125;</span>(\s|$)"</span><span class="token punctuation">)</span><span class="token string">" = '' ]
    then
        &#123;
            echo "</span><span class="token number">127.0</span>.0.1 <span class="token variable">$&#123;new_hostname&#125;</span><span class="token string">"
            cat /etc/hosts
        &#125; | sudo tee /etc/hosts > /dev/null
    fi
    echo "</span>current /etc/hosts:"
    <span class="token function">cat</span> /etc/hosts <span class="token operator">|</span> <span class="token function">grep</span> --color <span class="token number">127.0</span>.0.1
<span class="token punctuation">&#125;</span>

hostname_change <span class="token operator">&lt;</span>新hostname<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>器</category>
        <category>linux杂项</category>
      </categories>
  </entry>
  <entry>
    <title>linux开机界面</title>
    <url>/posts/d3d6ed05/</url>
    <content><![CDATA[<h2 id="开机过程中"><a class="header-anchor" href="#开机过程中"></a>开机过程中</h2>
<p><code>alt+ctrl+del</code>：在系统启动完成前，按此可重启系统，而无需去按电源键 <a href="https://askubuntu.com/questions/995286/restart-ubuntu-via-keyboard">参考</a></p>
<h3 id="BIOS-界面"><a class="header-anchor" href="#BIOS-界面"></a>BIOS 界面</h3>
<p><code>esc</code>: 一开机/重启, 就持反复之, 直到首次出现供应商的页面(如超威/斯腾合力), 而后会进入 BIOS 界面:</p>
<p>.<img data-src="/posts/d3d6ed05/E469CC2F-B4E7-4B61-9E2E-5A845E69AD5E.jpeg" alt="Image result for bios界面"></p>
<p>在 BIOS 界面中的操作:</p>
<ul>
<li>可以配置 IPMI 等内容</li>
<li>配置完成, 按 <code>esc</code> 选 yes 退出 BIOS 界面</li>
</ul>
<h3 id="grub-界面"><a class="header-anchor" href="#grub-界面"></a>grub 界面</h3>
<p>从 BIOS 界面退出会进入 Grub 界面:</p>
<p><img data-src="/posts/d3d6ed05/2191577195586.jpg" alt="2191577195586_.pic"></p>
<ul>
<li>
<p>若选 Ubuntu 则正常开机</p>
</li>
<li>
<p>若选 Advanced options for Ubuntu, 回车, 则进入如下界面</p>
</li>
</ul>
<p><img data-src="/posts/d3d6ed05/20130824023747255.png" alt="img"></p>
<p>此界面中若选 recovery mode, 回车, 则进入恢复模式界面</p>
<h3 id="恢复模式"><a class="header-anchor" href="#恢复模式"></a>恢复模式</h3>
<p>恢复模式界面如图:</p>
<p><img data-src="/posts/d3d6ed05/20130824023748114.png" alt="img"></p>
<p>若选 root, 回车, 则其下方出现 root 终端, 可再此输入命令, 如修改用户密码/root 密码/修改网络配置/修改防火墙配置 等等</p>
<p><img data-src="/posts/d3d6ed05/558.png" alt="img"></p>
<p>完成后, 在下方终端 <code>exit</code>, 而后弹出对话框中选 yes (or ok), 而后会根据修改后的配置, 继续正常开机</p>
<h2 id="开机完成后"><a class="header-anchor" href="#开机完成后"></a>开机完成后</h2>
<h3 id="窗口切换的快捷键"><a class="header-anchor" href="#窗口切换的快捷键"></a>窗口切换的快捷键</h3>
<p><code>alt+ctrl+f1~F5</code>：在五个终端登录窗口之间切换</p>
<p><code>alt+ctrl+f6</code>：切换到图形窗口</p>
<h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2>
<p>部分图片来源, 侵删: <a href="https://www.jianshu.com/p/66ac9441fd1b">https://www.jianshu.com/p/66ac9441fd1b</a></p>
]]></content>
      <categories>
        <category>器</category>
        <category>linux杂项</category>
      </categories>
  </entry>
  <entry>
    <title>linux修改hostname</title>
    <url>/posts/5f3db8f7/</url>
    <content><![CDATA[<p>以下为永久更改ubuntu主机名的方法：</p>
<p>查看主机名，记下老主机名</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">hostname</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改主机名：本机如何显示自己的名字。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/hostname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img data-src="/posts/5f3db8f7/image-20231120162527867.png" alt="image-20231120162527867"></p>
<p>修改网络解析配置：将主机名解析为什么IP</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img data-src="/posts/5f3db8f7/image-20231120162251231.png" alt="image-20231120162251231"></p>
<p>让其立即生效</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">hostname</span> -F /etc/hostname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查看主机名，检查是否变化，若变化，说明修改成功</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">hostname</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>器</category>
        <category>linux杂项</category>
      </categories>
  </entry>
  <entry>
    <title>linuxssh登录界面</title>
    <url>/posts/28b9a0fd/</url>
    <content><![CDATA[<h2 id="自定制ssh登录界面"><a class="header-anchor" href="#自定制ssh登录界面"></a>自定制ssh登录界面</h2>
<p>用sudo创建可执行文件<code>/etc/update-motd.d/&lt;执行序号&gt;-文件名</code>（bash脚本），则此脚本会在ssh登录时执行，脚本输出会显示在ssh登录界面上。此法可用户定制酷炫的ssh登录界面，例如</p>
<p><img data-src="/posts/28b9a0fd/ScreenShot%202019-12-04%2017.59.39.png" alt="ScreenShot 2019-12-04 17.59.39"></p>
<h2 id="安装方法"><a class="header-anchor" href="#安装方法"></a>安装方法</h2>
<h3 id="安装依赖"><a class="header-anchor" href="#安装依赖"></a>安装依赖</h3>
<ul>
<li>
<p><code>update-motd</code>显示ssh登录提示</p>
</li>
<li>
<p><code>lolcat</code> 让终端输出彩虹色</p>
</li>
<li>
<p><code>figlet</code> 让终端创建字符图案</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> update-motd lolcat figlet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="hostname-color：主机名"><a class="header-anchor" href="#hostname-color：主机名"></a>hostname-color：主机名</h3>
<p>预期效果</p>
<p><img data-src="/posts/28b9a0fd/ScreenShot%202019-12-04%2017.59.39%E7%9A%84%E5%89%AF%E6%9C%AC.png" alt="ScreenShot 2019-12-04 17.59.39的副本"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">tmp</span><span class="token operator">=</span><span class="token string">'/etc/update-motd.d/10-hostname-color'</span>
<span class="token function">sudo</span> <span class="token function">touch</span> <span class="token variable">$tmp</span>
<span class="token function">sudo</span> <span class="token function">chmod</span> a+x <span class="token variable">$tmp</span>
<span class="token function">sudo</span> <span class="token function">vim</span> <span class="token variable">$tmp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>vim中写入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> -e /usr/bin/figlet <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> -e /usr/games/lolcat <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    /usr/bin/figlet <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">hostname</span><span class="token variable">)</span></span>"</span> <span class="token operator">|</span> /usr/games/lolcat -f
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="neofetch：系统信息"><a class="header-anchor" href="#neofetch：系统信息"></a>neofetch：系统信息</h3>
<p>预期效果</p>
<p><img data-src="/posts/28b9a0fd/image-20231120165641914.png" alt="image-20231120165641914"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> neofetch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">tmp</span><span class="token operator">=</span><span class="token string">'/etc/update-motd.d/12-neofetch'</span>
<span class="token function">sudo</span> <span class="token function">touch</span> <span class="token variable">$tmp</span>
<span class="token function">sudo</span> <span class="token function">chmod</span> a+x <span class="token variable">$tmp</span>
<span class="token function">sudo</span> <span class="token function">vim</span> <span class="token variable">$tmp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> -e /usr/bin/neofetch <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">""</span>
    /usr/bin/neofetch --off --colors <span class="token number">0</span> <span class="token number">0</span> <span class="token number">6</span> <span class="token number">6</span> <span class="token number">3</span> <span class="token number">7</span> --color_blocks off --underline off --bar_border off --disable title line_break
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="diskspace：磁盘使用"><a class="header-anchor" href="#diskspace：磁盘使用"></a>diskspace：磁盘使用</h3>
<p>预期效果</p>
<p><img data-src="/posts/28b9a0fd/ScreenShot%202019-12-04%2017.59.39%E7%9A%84%E5%89%AF%E6%9C%AC-2.png" alt="ScreenShot 2019-12-04 17.59.39的副本 2"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">tmp</span><span class="token operator">=</span><span class="token string">'/etc/update-motd.d/35-diskspace'</span>
<span class="token function">sudo</span> <span class="token function">touch</span> <span class="token variable">$tmp</span>
<span class="token function">sudo</span> <span class="token function">chmod</span> a+x <span class="token variable">$tmp</span>
<span class="token function">sudo</span> <span class="token function">vim</span> <span class="token variable">$tmp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>vim中写入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># config</span>
<span class="token assign-left variable">max_usage</span><span class="token operator">=</span><span class="token number">90</span>
<span class="token assign-left variable">bar_width</span><span class="token operator">=</span><span class="token number">50</span>
<span class="token comment"># colors</span>
<span class="token assign-left variable">white</span><span class="token operator">=</span><span class="token string">"<span class="token entity" title="\e">\e</span>[39m"</span>
<span class="token assign-left variable">green</span><span class="token operator">=</span><span class="token string">"<span class="token entity" title="\e">\e</span>[1;32m"</span>
<span class="token assign-left variable">red</span><span class="token operator">=</span><span class="token string">"<span class="token entity" title="\e">\e</span>[1;31m"</span>
<span class="token assign-left variable">dim</span><span class="token operator">=</span><span class="token string">"<span class="token entity" title="\e">\e</span>[2m"</span>
<span class="token assign-left variable">undim</span><span class="token operator">=</span><span class="token string">"<span class="token entity" title="\e">\e</span>[0m"</span>

<span class="token comment"># disk usage: ignore zfs, squashfs &amp; tmpfs</span>
<span class="token builtin class-name">mapfile</span> -t dfs <span class="token operator">&lt;</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">df</span> -H -x zfs -x squashfs -x tmpfs -x devtmpfs --output<span class="token operator">=</span>target,pcent,size <span class="token operator">|</span> <span class="token function">tail</span> -n+2<span class="token punctuation">)</span>
<span class="token builtin class-name">printf</span> <span class="token string">"<span class="token entity" title="\n">\n</span>disk usage:<span class="token entity" title="\n">\n</span>"</span>

<span class="token keyword">for</span> <span class="token for-or-select variable">line</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$&#123;dfs<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token comment"># get disk usage</span>
    <span class="token assign-left variable">usage</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$line</span>"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/%//'</span><span class="token variable">)</span></span>
    <span class="token assign-left variable">used_width</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span><span class="token punctuation">(</span>$usage<span class="token operator">*</span>$bar_width<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">100</span><span class="token variable">))</span></span>
    <span class="token comment"># color is green if usage &lt; max_usage, else red</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$&#123;usage&#125;</span>"</span> -ge <span class="token string">"<span class="token variable">$&#123;max_usage&#125;</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token variable">$red</span>
    <span class="token keyword">else</span>
        <span class="token assign-left variable">color</span><span class="token operator">=</span><span class="token variable">$green</span>
    <span class="token keyword">fi</span>
    <span class="token comment"># print green/red bar until used_width</span>
    <span class="token assign-left variable">bar</span><span class="token operator">=</span><span class="token string">"[<span class="token variable">$&#123;color&#125;</span>"</span>
    <span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>$used_width<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>
        <span class="token assign-left variable">bar</span><span class="token operator">+=</span><span class="token string">"="</span>
    <span class="token keyword">done</span>
    <span class="token comment"># print dimmmed bar until end</span>
    <span class="token assign-left variable">bar</span><span class="token operator">+=</span><span class="token string">"<span class="token variable">$&#123;white&#125;</span><span class="token variable">$&#123;dim&#125;</span>"</span>
    <span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span>$used_width<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>$bar_width<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>
        <span class="token assign-left variable">bar</span><span class="token operator">+=</span><span class="token string">"="</span>
    <span class="token keyword">done</span>
    <span class="token assign-left variable">bar</span><span class="token operator">+=</span><span class="token string">"<span class="token variable">$&#123;undim&#125;</span>]"</span>
    <span class="token comment"># print usage line &amp; bar</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;line&#125;</span>"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123; printf("%-31s%+3s used out of %+4s\n", $1, $2, $3); &#125;'</span> <span class="token operator">|</span> <span class="token function">sed</span> -e <span class="token string">'s/^/  /'</span>
    <span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token variable">$&#123;bar&#125;</span>"</span> <span class="token operator">|</span> <span class="token function">sed</span> -e <span class="token string">'s/^/  /'</span>
<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="landscape-sysinfo：各类负荷"><a class="header-anchor" href="#landscape-sysinfo：各类负荷"></a>landscape-sysinfo：各类负荷</h3>
<p>预期效果</p>
<p><img data-src="/posts/28b9a0fd/image-20231120170110450.png" alt="image-20231120170110450"></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">bc</span> landscape-common<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">tmp</span><span class="token operator">=</span><span class="token string">'/etc/update-motd.d/50-landscape-sysinfo'</span>
<span class="token function">sudo</span> <span class="token function">touch</span> <span class="token variable">$tmp</span>
<span class="token function">sudo</span> <span class="token function">chmod</span> a+x <span class="token variable">$tmp</span>
<span class="token function">sudo</span> <span class="token function">vim</span> <span class="token variable">$tmp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>vim中写入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>
<span class="token comment"># pam_motd does not carry the environment</span>
<span class="token punctuation">[</span> -f /etc/default/locale <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">.</span> /etc/default/locale
<span class="token builtin class-name">export</span> <span class="token environment constant">LANG</span>
<span class="token assign-left variable">cores</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">grep</span> -c ^processor /proc/cpuinfo <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span class="token variable">)</span></span>
<span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$cores</span>"</span> -eq <span class="token string">"0"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">cores</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token assign-left variable">threshold</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;cores<span class="token operator">:-</span>1&#125;</span>.0"</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable"><span class="token variable">`</span><span class="token function">cut</span> -f1 -d <span class="token string">' '</span> /proc/loadavg<span class="token variable">`</span></span> &lt; <span class="token variable">$threshold</span>"</span> <span class="token operator">|</span> <span class="token function">bc</span><span class="token variable">)</span></span> -eq <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span>
    <span class="token builtin class-name">echo</span> -n <span class="token string">"  System information as of "</span>
    /bin/date
    <span class="token builtin class-name">echo</span>
    /usr/bin/landscape-sysinfo
<span class="token keyword">else</span>
    <span class="token builtin class-name">echo</span>
    <span class="token builtin class-name">echo</span> <span class="token string">" System information disabled due to load higher than <span class="token variable">$threshold</span>"</span>
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="motd：今日信息"><a class="header-anchor" href="#motd：今日信息"></a>motd：今日信息</h3>
<p>motd，即Message of The Day</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">tmp</span><span class="token operator">=</span><span class="token string">'/etc/update-motd.d/50-landscape-sysinfo'</span>
<span class="token function">sudo</span> <span class="token function">touch</span> <span class="token variable">$tmp</span>
<span class="token function">sudo</span> <span class="token function">chmod</span> a+x <span class="token variable">$tmp</span>
<span class="token function">sudo</span> <span class="token function">vim</span> <span class="token variable">$tmp</span> <span class="token comment"># 用vim向当中手动添加自定义的今日提示消息。默认文件内容为空。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="试运行-最终效果"><a class="header-anchor" href="#试运行-最终效果"></a>试运行-最终效果</h3>
<p>运行登录输出的出现</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> run-parts /etc/update-motd.d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img data-src="/posts/28b9a0fd/ScreenShot%202019-12-04%2017.59.39.png" alt="ScreenShot 2019-12-04 17.59.39"></p>
<p>如得到上述输出，则配置成功。之后每次<code>ssh &lt;服务器&gt;</code>的截面均是上图输出。注：非ssh登录，则不会有此输出，例如当ssh登录后运行<code>bash</code>，则无此输出。</p>
<h2 id="关闭ssh登录界面提示"><a class="header-anchor" href="#关闭ssh登录界面提示"></a>关闭ssh登录界面提示</h2>
<h3 id="关闭所有提示"><a class="header-anchor" href="#关闭所有提示"></a>关闭所有提示</h3>
<p>修改ssh服务端配置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/ssh/sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>其中<code>UsePAM no</code>表示关闭ssh登录提示，<code>UsePAM yes</code>表示开启</p>
<p>重启ssh服务端</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> /etc/init.d/ssh restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>而后ssh登录时，上述修改就会生效。</p>
<p>但执行<code>sudo run-parts /etc/update-motd.d</code>时，始终都会显示ssh登录提示。</p>
<h3 id="关闭特定条目的提示"><a class="header-anchor" href="#关闭特定条目的提示"></a>关闭特定条目的提示</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/update-motd.d
<span class="token comment"># 关闭特定条目的提示</span>
<span class="token function">sudo</span> <span class="token function">chmod</span> -x /etc/update-motd.d/<span class="token operator">&lt;</span>特定条目的配置文件<span class="token operator">></span>
<span class="token comment"># 打开特定条目的提示</span>
<span class="token function">sudo</span> <span class="token function">chmod</span> +x /etc/update-motd.d/<span class="token operator">&lt;</span>特定条目的配置文件<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行<code>[sudo] run-parts /etc/update-motd.d</code>时，始终都会显示修改后的ssh登录提示。</p>
]]></content>
      <categories>
        <category>器</category>
        <category>linux杂项</category>
      </categories>
  </entry>
  <entry>
    <title>linux防火墙</title>
    <url>/posts/2f013e1f/</url>
    <content><![CDATA[<h2 id="概述"><a class="header-anchor" href="#概述"></a>概述</h2>
<p>linux的防火墙有ufw和iptables两套命令，都是ip、url、端口的匹配规则</p>
<ul>
<li>iptables：不仅仅能当防火墙，还能做端口转发、nat；但需要第三方软件 iptables-persistent 才能实现持久化规则</li>
<li>ufw：全称 <s>ubuntu</s> uncomplicated firewall，是Debian下的简化版iptables，ufw的规则会被记录到iptables中；自动持久化规则。</li>
</ul>
<p>二者关系详见：<a href="https://www.centos.bz/2017/12/ubuntu-%E7%9A%84ufw-%E5%92%8Ciptables-%E7%9A%84%E5%85%B3%E7%B3%BB/">参考</a></p>
<h2 id="ufw"><a class="header-anchor" href="#ufw"></a>ufw</h2>
<ul>
<li>查看防火墙状态，会显示<code>&lt;规则的编号&gt;</code></li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw  status numbered<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>打开防火墙：刚配的诸规则立即生效，重启系统仍然开着服务器，规则都还在，即<strong>各规则均已自动持续化</strong>。</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw <span class="token builtin class-name">enable</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>关闭防火墙：重启系统仍然关闭</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw disable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>服务器重启：等价于先disable后enable</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ufw reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>删除规则</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">sudo ufw delete &lt;规则的编号&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="iptables"><a class="header-anchor" href="#iptables"></a>iptables</h2>
<p>参考：<a href="https://zhuanlan.zhihu.com/p/62418274">iptables常用命令及持久化</a>    <a href="https://www.91yun.co/archives/1690">iptables原理及常用命令</a></p>
<h3 id="基础命令"><a class="header-anchor" href="#基础命令"></a>基础命令</h3>
<ul>
<li>开放端口出入</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables -A INPUT -p tcp --dport <span class="token operator">&lt;</span>端口<span class="token operator">></span> -j ACCEPT
<span class="token function">sudo</span> iptables -A OUTPUT -p tcp --dport <span class="token operator">&lt;</span>端口<span class="token operator">></span> -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>查看规则列表</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables -L -n --line-number<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>输出</p>
<pre class="line-numbers language-none"><code class="language-none">Chain INPUT (policy ACCEPT)
num  target     prot opt source               destination
1    ACCEPT     udp  --  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0            state NEW udp dpt:59828
2    ACCEPT     tcp  --  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0            state NEW tcp dpt:59828
3    sshguard   all  --  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0
4    ACCEPT     tcp  --  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0            tcp dpt:42038

Chain FORWARD (policy ACCEPT)
num  target     prot opt source               destination

Chain OUTPUT (policy ACCEPT)
num  target     prot opt source               destination
1    ACCEPT     tcp  --  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0            tcp dpt:42038

...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>查看规则命令</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables -S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>输出例如</p>
<pre class="line-numbers language-none"><code class="language-none">-P INPUT ACCEPT
-P FORWARD ACCEPT
-P OUTPUT ACCEPT
-N sshguard
-A INPUT -p udp -m state --state NEW -m udp --dport 59828 -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 59828 -j ACCEPT
-A INPUT -j sshguard
-A INPUT -p tcp -m tcp --dport 42038 -j ACCEPT
-A OUTPUT -p tcp -m tcp --dport 42038 -j ACCEPT
-A sshguard -s 77.81.229.207&#x2F;32 -j DROP
-A sshguard -s 142.44.184.79&#x2F;32 -j DROP
-A sshguard -s 211.159.150.10&#x2F;32 -j DROP
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>删除规则:   <code>sudo iptables -L -n --line-number</code> 输出某个<code>&lt;Chain&gt;</code>的第<code>&lt;行号&gt;</code>行 的规则，删除之</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables -D <span class="token operator">&lt;</span>Chain<span class="token operator">></span> <span class="token operator">&lt;</span>行号<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>例如 <code>sudo iptables -D INPUT 2 </code> 删掉的是</p>
<pre class="line-numbers language-none"><code class="language-none">...
Chain INPUT (policy ACCEPT)
num  target     prot opt source               destination
1    ACCEPT     udp  --  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0            state NEW udp dpt:59828
2    ACCEPT     tcp  --  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0            state NEW tcp dpt:59828 # 删掉此规则
3    sshguard   all  --  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0
4    ACCEPT     tcp  --  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0            tcp dpt:42038
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="规则的持久化"><a class="header-anchor" href="#规则的持久化"></a>规则的持久化</h3>
<p>使用<code>iptables-save</code> <code>iptables-restore</code> 手动保存、加载规则；使用 <code>iptables-persistent</code> 来自动关闭保存、开机加载规则 【推荐】。</p>
<h4 id="iptables-save"><a class="header-anchor" href="#iptables-save"></a>iptables-save</h4>
<p>系统重启后 iptables不再有原来的规则。重启前可用使用<code>iptables-save</code>保存规则到文件，重启用<code>iptables-restore</code>加载文件中的规则。</p>
<ul>
<li>保存规则到文件</li>
</ul>
<p><code>iptablbes-save</code> 只是把当前iptables的规则，都以字符串形式输出到屏幕（标准输出）。需要手动重定向到<strong>任意自定文件</strong>，如 <code>/etc/iptables.conf</code> 。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables-save <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/iptables.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>加载文件中的规则</li>
</ul>
<p><code>iptables-restore</code>只是从标准输入读取规则，故需手动将自定文件重定向到此命令。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables-restore <span class="token operator">&lt;</span> /etc/iptables.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>开机自动加载规则：可以自己写systemd service去执行上述加载命令，但不方便。推荐用iptables-persistent。</li>
</ul>
<h4 id="iptables-persistent-【推荐】"><a class="header-anchor" href="#iptables-persistent-【推荐】"></a>iptables-persistent 【推荐】</h4>
<p>安装iptables-persistent，并开启其开机自启服务，可以实现持久化iptables的当前规则，并且重启后仍然保留。以下是详细介绍：</p>
<ul>
<li>安装iptables-persistent</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> iptables-persistent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>手动保存、加载规则</li>
</ul>
<p>Ubuntu 14.04</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> /etc/init.d/iptables-persistent save
<span class="token function">sudo</span> /etc/init.d/iptables-persistent reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>Ubuntu &gt;=16.04</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> netfilter-persistent save
<span class="token function">sudo</span> netfilter-persistent reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>保存、加载的规则的文件为</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/iptables/rules.v4  <span class="token comment"># ipv4的规则，对应iptables命令</span>
/etc/iptables/rules.v6  <span class="token comment"># ipv6的规则，对应ip6tables命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>上述手动保存规则的命令等价于 <code>iptables-save &gt; /etc/iptables/rules.v4; ip6tables-save &gt; /etc/iptables/rules.v6</code></p>
<p>上述手动加载规则的命令等价于 <code>iptables-restore &lt; /etc/iptables/rules.v4; ip6tables-restore &lt; /etc/iptables/rules.v6</code></p>
<ul>
<li>开启开机项，以实现关机自动保存规则、开机自动加载规则，无需手动保存、加载了。</li>
</ul>
<p>Ubuntu 14.04</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> iptables-persistent.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>Ubuntu  &gt;=16.04</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> netfilter-persistent.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>同样是加载、保存 <code>/etc/iptables/rules.v&#123;4,6&#125;</code> 文件。</p>
<h2 id="防火墙的测试"><a class="header-anchor" href="#防火墙的测试"></a>防火墙的测试</h2>
<ul>
<li>测试能否访问外部ip-端口</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">telnet <span class="token operator">&lt;</span>ip<span class="token operator">></span> <span class="token operator">&lt;</span>port<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>测试本地端口是否开放</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">telnet localhost <span class="token operator">&lt;</span>port<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>上二命令，若能访问/本地端口开放，则返回</p>
<pre class="line-numbers language-none"><code class="language-none">Trying &lt;ip&gt;...
Connected to localhost.
Escape character is &#39;^]&#39;.
SSH-2.0-OpenSSH_7.6p1 Ubuntu-4ubuntu0.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>否则返回</p>
<pre class="line-numbers language-none"><code class="language-none">Trying &lt;ip&gt;...
telnet: Unable to connect to remote host: Connection refused<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>器</category>
        <category>linux杂项</category>
      </categories>
  </entry>
  <entry>
    <title>matlab在linux上安装教程</title>
    <url>/posts/f6a992ac/</url>
    <content><![CDATA[<h1 id="安装教程"><a class="header-anchor" href="#安装教程"></a>安装教程</h1>
<p>适用于：linux上装matlab</p>
<h2 id="目录结构"><a class="header-anchor" href="#目录结构"></a>目录结构</h2>
<blockquote>
<p>matlab2018b<br>
├── 安装教程<br>
│   ├── <a href="http://README.md">README.md</a><br>
├── docs<br>
│   ├── FAQ.txt<br>
│   ├── MATLAB安装手册.docx<br>
│   └── 技术支持.docx<br>
├── installer_input.txt<br>
├── network.lic<br>
├── R2018b_glnxa64_dvd1.iso<br>
├── R2018b_glnxa64_dvd2.iso<br>
└── sn.txt</p>
</blockquote>
<p>用于安装清华校园版，只能在清华内网使用，服务器可用之</p>
<h2 id="下载来源"><a class="header-anchor" href="#下载来源"></a>下载来源</h2>
<p>-X参数可使用Xserver</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -X <span class="token operator">&lt;</span>服务器名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>用firefox打开清华的计算软件资源网站</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firefox https://its.tsinghua.edu.cn/column/jsrj/1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>弹出图形界面窗口</p>
<p>点击下载以下三个文件</p>
<ul>
<li>
<p><a href="https://its.tsinghua.edu.cn/info/jsrj/1904">Matlab R2018b for Linux 64位（DVD1）</a></p>
</li>
<li>
<p><a href="https://its.tsinghua.edu.cn/info/jsrj/1903">Matlab R2018b for Linux 64位（DVD2）</a></p>
</li>
<li>
<p><a href="https://its.tsinghua.edu.cn/info/jsrj/1703">Matlab安装手册及相关文件</a></p>
</li>
</ul>
<p>或者在台式机上下载好，传到服务器上亦可</p>
<p><strong>本文件夹<code>matlab2018b/</code>下的文件即是下载所得</strong></p>
<h2 id="安装步骤"><a class="header-anchor" href="#安装步骤"></a><a href="https://sbargoti.wordpress.com/2016/06/06/install-matlab-on-remote-server-without-x11/">安装步骤</a></h2>
<h3 id="挂载dvd1"><a class="header-anchor" href="#挂载dvd1"></a>挂载dvd1</h3>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">mkdir</span> /mnt/matlab
<span class="token function">sudo</span> <span class="token function">mount</span> -t iso9660 -o loop <span class="token operator">&lt;</span>path-to-R2018b_glnxa64_dvd1.iso<span class="token operator">></span> /mnt/matlab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="修改installer-input-txt"><a class="header-anchor" href="#修改installer-input-txt"></a>修改<code>installer_input.txt</code></h3>
<p><code>matlab2018b/installer_input.txt</code> 是已经为清华校园版修改好了，用于安装清华校园版，只能在清华内网使用，服务器可用之</p>
<p>若不想用清华校园版的，可自行修改，依照下法：</p>
<ul>
<li>
<p>挂载目录<code>/mnt/matlab</code>是只读的，但需要修改<code>/mnt/matlab/installer_input.txt</code> 文件，故打开<code>/mnt/matlab/installer_input.txt</code>，全文复制，关闭之。</p>
</li>
<li>
<p>再<code>vim matlab2018b/installer_input.txt</code>，将上述复制粘贴到此文件中，然后将下述行修改成下列</p>
</li>
<li>
<pre><code>fileInstallationKey=密钥形如xxxxx-xxxxx-共19节
agreeToLicense=yes
mode=silent
licensePath=[license-directory]/network.lic
<pre class="line-numbers language-none"><code class="language-none">
  其中  &#96;密钥&#96; 和 &#96;network.lic &#96;，自行到网上找破解资源可得到

### 安装

&#96;&#96;&#96;bash
cd matlab2018b
sudo &#x2F;mnt&#x2F;matlab&#x2F;install -inputFile installer_input.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</code></pre>
</li>
</ul>
<p>注：不得<code>cd</code>到<code>/mnt/matlab</code>后，执行上述命令，不然无法正常安装</p>
<h3 id="挂载dvd2"><a class="header-anchor" href="#挂载dvd2"></a>挂载dvd2</h3>
<p>当终端不断出现下面输出时</p>
<blockquote>
<p>(Apr 09, 2019 21:37:06) Info: Eject DVD 1 and insert DVD 2 to continue.<br>
(Apr 09, 2019 21:37:06) Info: Eject DVD 1 and insert DVD 2 to continue.<br>
(Apr 09, 2019 21:37:06) Info: Eject DVD 1 and insert DVD 2 to continue.<br>
…</p>
</blockquote>
<p>新开一个窗口执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mount</span> -t iso9660 -o loop <span class="token operator">&lt;</span>path-to-R2018b_glnxa64_dvd2.iso<span class="token operator">></span> /mnt/matlab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>则会继续安装，并输出</p>
<blockquote>
<p>(Apr 09, 2019 21:37:06) Info: Eject DVD 1 and insert DVD 2 to continue.<br>
(Apr 09, 2019 21:37:06) Installing Product: Aerospace Blockset 4.0<br>
(Apr 09, 2019 21:37:09) Installing Product: Aerospace Toolbox 3.0<br>
(Apr 09, 2019 21:37:11) Installing Product: Antenna Toolbox 3.2<br>
(Apr 09, 2019 21:37:22) Installing Product: Audio System Toolbox 1.5<br>
(Apr 09, 2019 21:37:27) Installing Product: Automated Driving System Toolbox 1.3<br>
(Apr 09, 2019 21:37:33) Installing Product: Bioinformatics Toolbox 4.11<br>
…</p>
</blockquote>
<p>直到输出</p>
<blockquote>
<p>Finished</p>
</blockquote>
<p>则安装完成</p>
<h3 id="修改链接"><a class="header-anchor" href="#修改链接"></a>修改链接</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> /usr/bin/matlab
<span class="token function">ln</span> -s /usr/local/MATLAB/R2018b/bin/matlab /usr/bin/matlab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="取消挂载"><a class="header-anchor" href="#取消挂载"></a>取消挂载</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">umount</span> -l /mnt/matlab <span class="token comment"># 解挂 R2018b_glnxa64_dvd2.iso，/mnt/matlab 下恢复 R2018b_glnxa64_dvd1.iso 挂载的内容</span>
<span class="token function">umount</span> -l /mnt/matlab <span class="token comment"># 解挂 R2018b_glnxa64_dvd1.iso，/mnt/matlab 下应该是空的</span>
<span class="token function">rm</span> -f /mnt/matlab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="测试能否使用"><a class="header-anchor" href="#测试能否使用"></a>测试能否使用</h3>
<p><code>ssh 服务器名</code>后，执行<code>matlab</code>，能正常启动MATLAB的命令行界面，并执行<code>disp 'hello world'</code>，输出’hello world’</p>
<p><code>ssh -X 服务器名</code>后，执行<code>matlab</code>，能正常启动MATLAB的图形界面，并执行<code>disp 'hello world'</code>，输出’hello world’</p>
]]></content>
      <categories>
        <category>器</category>
        <category>linux杂项</category>
      </categories>
  </entry>
  <entry>
    <title>压缩解压工具</title>
    <url>/posts/7c14f85c/</url>
    <content><![CDATA[<h1 id="压缩解压工具"><a class="header-anchor" href="#压缩解压工具"></a>压缩解压工具</h1>
<h3 id="Linux下压缩解压算法与工具比较"><a class="header-anchor" href="#Linux下压缩解压算法与工具比较"></a><a href="(https://www.jianshu.com/p/38b32107bc3e)">Linux下压缩解压算法与工具比较</a></h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>Linux自带否</th>
<th>优点</th>
<th>压缩命令</th>
<th>解压命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>zip</td>
<td>是</td>
<td><strong>所有操作系统都自带</strong>，可压缩文件夹</td>
<td><code>zip -r xxx.zip 一或多个文件会文件夹</code></td>
<td><code>unzip xxx.zip -d 解压到的路径</code>  （会自动创建解压到的路径；压缩包内根目录下诸物皆解压到解压到的路径）</td>
</tr>
<tr>
<td>7z</td>
<td>否</td>
<td>压缩解压都<strong>最快</strong>，可压缩文件夹</td>
<td><code>7z a  xxx.7z  一或多个文件会文件夹 </code>(注意： <code>a</code>前无<code>-</code>)</td>
<td><code>7z e xxx.7z  -o解压到的路径</code> (注意：<code>x</code>前无<code>-</code>;<code>-o</code>后没空格；会自动创建解压到的路径，压缩包内根目录下诸物皆解压到解压到的路径)</td>
</tr>
</tbody>
</table>
<h2 id="7z"><a class="header-anchor" href="#7z"></a>7z</h2>
<h3 id="安装"><a class="header-anchor" href="#安装"></a>安装</h3>
<h4 id="apt-get安装"><a class="header-anchor" href="#apt-get安装"></a>apt-get安装</h4>
<p>推荐<code>p7zip-full</code> 和<code>p7zip-rar</code>都装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> p7zip <span class="token comment"># 包含7zr（最小的7zip归档工具），只支持7z格式。</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> p7zip-full <span class="token comment"># 包含完整7z，支持7z、LZMA2、XZ、ZIP、CAB、GZIP、BZIP2、ARJ、TAR、CPIO、RPM、ISO和DEB格式，不支持rar</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> p7zip-rar <span class="token comment"># 只支持RAR格式</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="conda安装"><a class="header-anchor" href="#conda安装"></a>conda安装</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> -c bioconda p7zip <span class="token comment"># 安装的是p7zip-full，不支持rar</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="用法"><a class="header-anchor" href="#用法"></a>用法</h3>
<h3 id="命令"><a class="header-anchor" href="#命令"></a>命令</h3>
<p><a href="https://wiki.archlinux.org/index.php/P7zip_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">参考</a></p>
<p>安装了三种二进制文件， <code>/usr/bin/&#123;7z,7za,7zr&#125;</code></p>
<ul>
<li><code>7z  </code>  : <code>/usr/bin/7z</code>调用插件<code>/usr/lib/p7zip/7z</code>，支持众多格式；因此若只将<code>/usr/bin/7z</code>拷贝到别的电脑，并不能运行<code>7z</code>。</li>
<li><code>7za </code> : 独立程序，不用插件；支持一些格式，比<code>7z</code>少</li>
<li><code>7zr</code>  : 独立程序，不用插件；只支持&quot;.7z&quot;格式</li>
</ul>
<p>一般用<code>7z</code>就好，支持格式最多</p>
<p>拷到别的电脑——需把<code>/usr/lib/p7zip/</code>和 <code>/usr/bin/&#123;7z,7za,7zr&#125;</code>拷走</p>
<h4 id="解压"><a class="header-anchor" href="#解压"></a>解压</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">7z x -t<span class="token operator">&lt;</span>格式<span class="token operator">></span> <span class="token operator">&lt;</span>压缩文件<span class="token operator">></span>.<span class="token operator">&lt;</span>扩展名<span class="token operator">></span> -o<span class="token operator">&lt;</span>解压目录<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><code>x</code>： 解压</li>
<li><code>-t&lt;格式&gt;</code>：
<ul>
<li>如 &lt;格式&gt; = “7z”,“zip”,&quot;.tar.bz2&quot;等</li>
<li>缺省：&lt;格式&gt;=“7z”</li>
</ul>
</li>
<li><code>&lt;压缩文件&gt;.&lt;扩展名&gt;</code> : <strong>仅一个</strong></li>
<li><code>&lt;扩展名&gt;</code> 不可缺省，7z不会帮你脑补扩展名</li>
<li><code>-o&lt;解压目录&gt;</code>
<ul>
<li>压缩包内根目录下文件(夹)都解压到&lt;解压目录&gt;</li>
<li><strong>强烈建议</strong>写成<code>-o&lt;目录&gt;/&lt;新建文件夹&gt;</code>, 7z<strong>会帮你创建</strong>&lt;解压目录&gt;/&lt;新建文件夹&gt;。可避免，压缩包内根级目录下多个文件(夹)<strong>堆满&lt;目录&gt;</strong></li>
<li>缺省： &lt;格式&gt;=“./”</li>
</ul>
</li>
<li><code>-o</code>,  <code> -t</code> 后没有空格</li>
</ul>
<h4 id="压缩"><a class="header-anchor" href="#压缩"></a>压缩</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">7z a -t<span class="token operator">&lt;</span>格式<span class="token operator">></span> <span class="token operator">&lt;</span>压缩文件<span class="token operator">></span>.<span class="token operator">&lt;</span>扩展名<span class="token operator">></span> <span class="token operator">&lt;</span>待压缩文件<span class="token punctuation">(</span>夹<span class="token punctuation">)</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><code>a</code>： 压缩</li>
<li><code>-t&lt;格式&gt;</code>：
<ul>
<li>如 &lt;格式&gt; = “7z”,&quot;zip&quot;等</li>
<li>缺省：&lt;格式&gt;=“7z”</li>
</ul>
</li>
<li><code>&lt;扩展名&gt;</code> 不可缺省，7z不会帮你脑补扩展名</li>
<li><code>&lt;待压缩文件(夹)&gt;</code>: 可多个， 空格分隔</li>
</ul>
]]></content>
      <categories>
        <category>器</category>
        <category>linux杂项</category>
      </categories>
  </entry>
  <entry>
    <title>磁盘配额设置</title>
    <url>/posts/bd0cccac/</url>
    <content><![CDATA[<h2 id="目录下统计磁盘用量"><a class="header-anchor" href="#目录下统计磁盘用量"></a>目录下统计磁盘用量</h2>
<h3 id="法一-使用duc-推荐"><a class="header-anchor" href="#法一-使用duc-推荐"></a>法一 使用<a href="http://duc.zevv.nl">duc</a> (推荐)</h3>
<p>仅能统计磁盘大小, 不能统计文件数目. 是按照子文件夹来统计, 而不是文件归属的用户来统计.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> duc <span class="token comment"># install duc</span>
<span class="token function">sudo</span> duc index -fHpx <span class="token operator">&lt;</span>dir<span class="token operator">></span> <span class="token comment"># build the index of any &lt;dir> to a dataset file $HOME/.duc.db</span>
<span class="token comment"># it which will be upated every time when things under &lt;dir> change</span>
<span class="token function">sudo</span> duc <span class="token function">ls</span> -Fg <span class="token operator">&lt;</span>dir<span class="token operator">></span> <span class="token comment"># list the subdirs and their size of &lt;dir>, No wait times</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="法二-使用quota"><a class="header-anchor" href="#法二-使用quota"></a>法二 使用quota</h3>
<p>使用quota, 只统计每个用户的磁盘大小和文件数目用量, 不用限制用户的使用.</p>
<p>可以按文件归属的用户来统计, 也可以按照子文件夹来统计.</p>
<h2 id="quota安装与配置"><a class="header-anchor" href="#quota安装与配置"></a>quota安装与配置</h2>
<p>本文在此<a href="https://www.howtoing.com/set-filesystem-disk-quotas-on-ubuntu">教程</a>上修改. 其他参考: <a href="http://cn.linux.vbird.org/linux_basic/fedora_4/0420quota-fc4.php">鸟哥</a>.</p>
<h3 id="安装quota"><a class="header-anchor" href="#安装quota"></a>安装quota</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">quota</span> -y
<span class="token function">sudo</span> <span class="token function">quota</span> --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="安装配额内核模块"><a class="header-anchor" href="#安装配额内核模块"></a>安装配额内核模块</h3>
<p>确认是否安装配额内核模块</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> /lib/modules/<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -r<span class="token variable">`</span></span> -type f -name <span class="token string">'*quota_v*.ko*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若返回</p>
<blockquote>
  <pre class="line-numbers language-none"><code class="language-none">&#x2F;lib&#x2F;modules&#x2F;4.15.0-88-generic&#x2F;kernel&#x2F;fs&#x2F;quota&#x2F;quota_v2.ko
&#x2F;lib&#x2F;modules&#x2F;4.15.0-88-generic&#x2F;kernel&#x2F;fs&#x2F;quota&#x2F;quota_v1.ko<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</blockquote>
<p>则此两模块已安装额内核模块; 若返回为空, 则未安装 (通常云服务器由此物体), 需要手动安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> linux-image-extra-virtual -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>而后再次执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> /lib/modules/<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -r<span class="token variable">`</span></span> -type f -name <span class="token string">'*quota_v*.ko*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>确认已安装额内核模块.</p>
<h3 id="更新文件系统挂载选项"><a class="header-anchor" href="#更新文件系统挂载选项"></a>更新文件系统挂载选项</h3>
<ul>
<li>
<p>通过修改 <code>/etc/fstab</code> 文件来决定哪些文件系统需要使用quota</p>
<p><code>sudo vim /etc/fstab</code>, 找到需要的文件系统 (如<code>/</code>) 所在行, 第四字段尾部增加<code>,usrquota,grpquota</code>选项, 这样会对此文件系统启用对用户和用户组的限额.</p>
<p>例如:</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;dev&#x2F;mapper&#x2F;jungpu21--vg-root &#x2F;               ext4    errors&#x3D;remount-ro,usrquota,grpquota 0       1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;dev&#x2F;mapper&#x2F;jungpu21--vg-root &#x2F;               ext4    defaults,usrquota,grpquota 0       1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>注:</strong></p>
<ul>
<li>查看文件系统的格式 <code>df -T -h</code>, <code>-T</code> 显示文件系统, <code>-h</code> 可读的磁盘大小</li>
<li>第四字段若为<code>defaults</code>, 表示所有选项全部使用默认配置, 包括rw, suid, dev, exec, auto, nouser, 和 async。一般用户没有特殊需求，直接使用 <code>defaults</code> 就可以了</li>
<li>若 <code>/etc/fstab</code> 中已有不同于<code>defaults</code>的选项, 把<code>,usrquota,grpquota</code>加在已有的选项后即可</li>
</ul>
</li>
<li>
<p>重新挂载文件系统，以使更改生效</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mount</span> -o remount /<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>验证quota选项生效</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cat</span> /proc/mounts <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">' / '</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若返回如下则继续</p>
</li>
</ul>
<blockquote>
  <pre class="line-numbers language-none"><code class="language-none">&#x2F;dev&#x2F;mapper&#x2F;jungpu21--vg-root &#x2F; ext4 rw,relatime,quota,usrquota,grpquota,errors&#x3D;remount-ro,data&#x3D;ordered 0 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<h3 id="启用quota程序"><a class="header-anchor" href="#启用quota程序"></a>启用quota程序</h3>
<ul>
<li>
<p>创建配额文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">quotacheck</span> -ugm /<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>该命令将在<code>/</code>创建  <code>aquota.group</code>  与 <code>aquota.user</code> 文件，即配额用户和配额组，它们具有有关文件系统的限制和使用情况的信息。 在开始使用配额之前，这些文件必须存在。</p>
<ul>
<li><code>-u</code> ：表示将创建基于用户的配额文件。</li>
<li><code>-g</code> ：表示将创建基于组的配额文件。</li>
<li><code>-m</code>: disables remounting of the file system as a read-only while at the same time gives accurate results in an environment where the user keeps saving files. 在安装过程中此选项不是必需的。</li>
</ul>
<p>确认已创建  <code>aquota.group</code>  与 <code>aquota.user</code> 文件.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token variable">$mount_point</span> <span class="token operator">|</span> <span class="token function">grep</span> aquota<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>启用quota程序</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> quotaon -v /<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若显示如下则成功</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;dev&#x2F;sda4 [&#x2F;]: group quotas turned on
&#x2F;dev&#x2F;sda4 [&#x2F;]: user quotas turned on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="单个用户的配额"><a class="header-anchor" href="#单个用户的配额"></a>单个用户的配额</h3>
<ul>
<li>
<p>非交互设置配额</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> setquota -u <span class="token operator">&lt;</span>用户名<span class="token operator">></span> <span class="token operator">&lt;</span>soft-block-limit<span class="token operator">></span> <span class="token operator">&lt;</span>hard-block-limit<span class="token operator">></span> <span class="token operator">&lt;</span>soft-index-limit<span class="token operator">></span> <span class="token operator">&lt;</span>hard-block-limit<span class="token operator">></span> /
<span class="token function">sudo</span> setquota -g <span class="token operator">&lt;</span>用户组名<span class="token operator">></span> <span class="token operator">&lt;</span>soft-block-limit<span class="token operator">></span> <span class="token operator">&lt;</span>hard-block-limit<span class="token operator">></span> <span class="token operator">&lt;</span>soft-index-limit<span class="token operator">></span> <span class="token operator">&lt;</span>hard-block-limit<span class="token operator">></span> /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li><code>&lt;soft-block-limit&gt;</code> : 磁盘大小软限制, 单位1kB, 可写成 <code>12321</code> (12321kB), <code>12M</code> (12MB), <code>12G</code>, <code>12T</code> (1024升位)</li>
<li><code>&lt;hard-block-limit&gt;</code> : 磁盘大小硬限制, 写法同<code>&lt;soft-block-limit&gt;</code></li>
<li><code>&lt;soft-index-limit&gt;</code>: 文件数目软限制, 单位1个文件, 可写成 <code>12121</code> (<code>12121</code>个文件), <code>12k</code> (12,000个文件),  <code>12M</code>, <code>12G</code>,  <code>12T</code> (1000升位)</li>
<li><code>&lt;hard-index-limit&gt;</code>: 文件数目硬限制, 写法同<code>&lt;soft-index-limit&gt;</code></li>
</ul>
<p>当用户超过</p>
<ul>
<li>
<p>软限制: 在宽限期 (grace) 内仍然可继续写入文件, 但向此用户发警告; 超过宽限期, 则不得继续写入并报错.</p>
</li>
<li>
<p>硬限制: 不得继续写入并报错如下.</p>
<pre class="line-numbers language-none"><code class="language-none">sdb1: write failed, user block limit reached.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
</li>
<li>
<p>交互设置配额</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> edquota -u <span class="token operator">&lt;</span>用户名<span class="token operator">></span>
<span class="token function">sudo</span> edquota -g <span class="token operator">&lt;</span>用户组名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img data-src="/posts/bd0cccac/Check-User-Quota-on-Disk.png" alt="检查磁盘上的用户配额"></p>
<p>修改文件中的soft/hard限额, 保存退出编辑器即可.</p>
</li>
</ul>
<h3 id="设置宽限期"><a class="header-anchor" href="#设置宽限期"></a>设置宽限期</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> setquota -t <span class="token operator">&lt;</span>block-grace<span class="token operator">></span> <span class="token operator">&lt;</span>index-grace<span class="token operator">></span> /<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><code>&lt;block-grace&gt;</code>: 磁盘大小配额的宽限期, 单位必须为秒, 写成例如 <code>864000</code> , 即10天.</li>
<li><code>&lt;index-grace&gt;</code> : 文件数目配额的宽限期, 写法如上.</li>
</ul>
<h3 id="查看配额"><a class="header-anchor" href="#查看配额"></a>查看配额</h3>
<p>查看单个用户/用户组</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">quota</span> -vs <span class="token operator">&lt;</span>用户名<span class="token operator">></span>
<span class="token function">sudo</span> <span class="token function">quota</span> -vsg <span class="token operator">&lt;</span>用户组名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li><code>-s</code> : 人类可读的数字格式</li>
<li><code>-v</code> : verbose</li>
</ul>
<p><img data-src="/posts/bd0cccac/Verify-User-Quota-Limit.png" alt="验证用户配额限制"></p>
<p>查看所有用户/用户组</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> repquota -s /
<span class="token function">sudo</span> repquota -sg /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img data-src="/posts/bd0cccac/Generate-Quota-Reports.png" alt="生成配额报告"></p>
<h2 id="常见错误消息"><a class="header-anchor" href="#常见错误消息"></a>常见错误消息</h2>
<h3 id="quotaon-cannot-find-aquota-group-on-dev-vda1"><a class="header-anchor" href="#quotaon-cannot-find-aquota-group-on-dev-vda1"></a>quotaon: cannot find <a href="//aquota.group">//aquota.group</a> on /dev/vda1 [/]</h3>
<pre class="line-numbers language-none"><code class="language-none">quotaon: cannot find &#x2F;&#x2F;aquota.group on &#x2F;dev&#x2F;vda1 [&#x2F;]
quotaon: cannot find &#x2F;&#x2F;aquota.user on &#x2F;dev&#x2F;vda1 [&#x2F;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>如果您尝试使用命令<strong>qoutaon</strong>打开配额，然后再尝试使用命令 <code>sudo quotacheck -ugm /</code>  检查配额的状态</p>
<h3 id="quotaon-Quota-format-not-supported-in-kernel"><a class="header-anchor" href="#quotaon-Quota-format-not-supported-in-kernel"></a>quotaon: Quota format not supported in kernel</h3>
<pre class="line-numbers language-none"><code class="language-none">quotaon: using &#x2F;&#x2F;aquota.group on &#x2F;dev&#x2F;vda1 [&#x2F;]: No such process
quotaon: Quota format not supported in kernel.
quotaon: using &#x2F;&#x2F;aquota.user on &#x2F;dev&#x2F;vda1 [&#x2F;]: No such process
quotaon: Quota format not supported in kernel.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>此错误告诉管理员内核不支持  <code>quota_v1</code> 和 <code>quota_v2</code> ，或者您在计算机上的版本可能不正确。 对于<strong>Ubuntu而言</strong> ，此类错误在基于云的虚拟服务器上很常见。通过<code>sudo apt install linux-image-extra-virtual -y</code>来修复错误。</p>
<p>更多参考:</p>
<p><a href="https://askubuntu.com/questions/109585/quota-format-not-supported-in-kernel">https://askubuntu.com/questions/109585/quota-format-not-supported-in-kernel</a></p>
<p><a href="https://serverfault.com/questions/843994/ubuntu-quota-format-not-supported-in-kernel">https://serverfault.com/questions/843994/ubuntu-quota-format-not-supported-in-kernel</a></p>
<h3 id="quota-Cannot-open-quotafile-aquota-user-Permission-denied"><a class="header-anchor" href="#quota-Cannot-open-quotafile-aquota-user-Permission-denied"></a>quota: Cannot open quotafile <a href="//aquota.user">//aquota.user</a>: Permission denied</h3>
<pre class="line-numbers language-none"><code class="language-none">quota: Cannot open quotafile &#x2F;&#x2F;aquota.user: Permission denied
quota: Cannot open quotafile &#x2F;&#x2F;aquota.user: Permission denied
quota: Cannot open quotafile &#x2F;&#x2F;quota.user: No such file or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>当当前用户没有读取配额文件的权限时，该错误将很明显。使用 <code>sudo</code>即可避免此错误。</p>
<h2 id="测试quota有效"><a class="header-anchor" href="#测试quota有效"></a>测试quota有效</h2>
<p>测试quota有效</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建用户组 quota, 其下有 用户quser1, 用户 quser2</span>
<span class="token function">sudo</span> <span class="token function">groupadd</span> <span class="token function">quota</span>
<span class="token function">sudo</span> <span class="token function">useradd</span> -m -g <span class="token function">quota</span> quser1
<span class="token function">sudo</span> <span class="token function">useradd</span> -m -g <span class="token function">quota</span> quser2
<span class="token function">sudo</span> <span class="token function">passwd</span> quser1
<span class="token function">sudo</span> <span class="token function">passwd</span> quser2

<span class="token comment"># 为用户添加限额</span>
<span class="token function">sudo</span> setquota -u quser1 200M 220M <span class="token number">0</span> <span class="token number">0</span> /
<span class="token function">sudo</span> setquota -u quser2 200M 220M <span class="token number">0</span> <span class="token number">0</span> /
<span class="token function">sudo</span> setquota -g <span class="token function">quota</span> 300M 320M <span class="token number">0</span> <span class="token number">0</span> /

<span class="token comment"># 显示配额</span>
<span class="token function">sudo</span> <span class="token function">quota</span> -vs  quser1
<span class="token function">sudo</span> <span class="token function">quota</span> -vs  quser2
<span class="token function">sudo</span> setquota -vsg <span class="token function">quota</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>登录  <code>quser1</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在当前目录下会生成一个190MB的test文件，文件内容为全0</span>
<span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>test <span class="token assign-left variable">bs</span><span class="token operator">=</span>1M <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">190</span> <span class="token comment"># 未超过软限额, 不报错</span>
<span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>test <span class="token assign-left variable">bs</span><span class="token operator">=</span>1M <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">210</span> <span class="token comment"># 超过软限额, 未超过硬限额, 也不报错</span>
<span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>test <span class="token assign-left variable">bs</span><span class="token operator">=</span>1M <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">230</span> <span class="token comment"># 超过硬限额, 报错如下, 并test只写入了220M</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
  <pre class="line-numbers language-none"><code class="language-none">sdb1: write failed, user block limit reached.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<h2 id="超过软quota发送警告"><a class="header-anchor" href="#超过软quota发送警告"></a>超过软quota发送警告</h2>
<p>法一: 通过邮件给用户发送警告, 参考: <a href="http://cn.linux.vbird.org/linux_basic/0420quota_1.php">warnquota</a>.</p>
<p>法二: 定时发送到用户的终端上, 使用我开发的此<a href="https://github.com/hyliang96/admin_tool">工具</a>, 参见<a href="/mfs/haoyu/server_conf/ENV/serverENV/.git/modules/admin_tool/index.lock">readme</a>.</p>
<h2 id="Project-quota"><a class="header-anchor" href="#Project-quota"></a>Project quota</h2>
<p>不同于限制用户/用户组的磁盘使用, 将文件夹及其下文件, 设置为从属于一个项目, 对项目限制磁盘使用. 参考: <a href="https://blog.csdn.net/luckyapple1028/article/details/75754591">project quota</a></p>
]]></content>
      <categories>
        <category>器</category>
        <category>linux杂项</category>
      </categories>
  </entry>
  <entry>
    <title>增删用户的sudo权限</title>
    <url>/posts/76dbe307/</url>
    <content><![CDATA[<p>增加用户的sudo权限，即将用户加入到sudo用户组</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> adduser <span class="token operator">&lt;</span>用户名<span class="token operator">></span> <span class="token function">sudo</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>删除用户的sudo权限，即将用户从sudo用户组删除</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> deluser <span class="token operator">&lt;</span>用户名<span class="token operator">></span> <span class="token function">sudo</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>显示哪些用户有sudo权限，即显示哪些用户在sudo用户组</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cat</span> /etc/group <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">sudo</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>器</category>
        <category>linux杂项</category>
      </categories>
  </entry>
  <entry>
    <title>hexo博客搭建与升级</title>
    <url>/posts/b27b9f95/</url>
    <content><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1520557">hexo博客搭建教程</a></p>
<h1 id="安装环境"><a class="header-anchor" href="#安装环境"></a>安装环境</h1>
<h2 id="node"><a class="header-anchor" href="#node"></a>node</h2>
<p>node.js, 简称node, 是一个开源与跨平台的JavaScript运行时环境. 博客框架hexo依赖node环境.</p>
<h3 id="安装node"><a class="header-anchor" href="#安装node"></a>安装node</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这一命令同时安装了<code>node</code>, 及其node的默认包管理器<code>npm</code></p>
<h2 id="npm"><a class="header-anchor" href="#npm"></a>npm</h2>
<p>npm是node的默认包管理器</p>
<h3 id="安装npm"><a class="header-anchor" href="#安装npm"></a>安装npm</h3>
<p>在前面安装node时, 也自动同时安装了npm</p>
<h3 id="修改npm源"><a class="header-anchor" href="#修改npm源"></a>修改npm源</h3>
<p>国外的NPM源并不稳定，即使翻墙也不一定能将Hexo下载下来，所以这里将npm全局修改为淘宝源</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查看源是否可有</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> info underscore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果上面配置正确这个命令会有字符串response. 不然会有如下的报错:</p>
<pre class="line-numbers language-none"><code class="language-none">npm ERR! registry error parsing json
npm ERR! Unexpected end of JSON input<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>换回官方的源</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmjs.org/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查看源的url</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config get registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="npm使用"><a class="header-anchor" href="#npm使用"></a>npm使用</h3>
<p>装包</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> i<span class="token punctuation">[</span>nstall<span class="token punctuation">]</span> -g <span class="token operator">&lt;</span>包名<span class="token operator">></span> <span class="token comment"># -g 表示全局装包, 必需有sudo权限</span>
<span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> --save <span class="token comment"># 安装 package.json 中的npm包</span>
<span class="token function">npm</span> i<span class="token punctuation">[</span>nstall<span class="token punctuation">]</span> <span class="token operator">&lt;</span>包名<span class="token operator">></span> --save <span class="token comment"># 仅当前项目装包, --save或-S, 表示将包的变更, 保存到当前项目根目录/package.json</span>
<span class="token function">npm</span> <span class="token function">install</span> --save <span class="token comment"># 安装 package.json 中的npm包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>删包</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> un<span class="token punctuation">[</span>install<span class="token punctuation">]</span> -g <span class="token operator">&lt;</span>包名<span class="token operator">></span> <span class="token comment"># -g 表示全局删包, 必需有sudo权限</span>
<span class="token function">npm</span> un<span class="token punctuation">[</span>install<span class="token punctuation">]</span> <span class="token operator">&lt;</span>包名<span class="token operator">></span> --save <span class="token comment"># 仅当前项目删包, --save或-S, 表示将包的变更, 保存到当前项目根目录/package.json</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>查看包</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">ls</span> <span class="token punctuation">[</span>--depth <span class="token operator">&lt;</span>n<span class="token operator">></span><span class="token punctuation">]</span> <span class="token comment"># 包的嵌套展开到第n层</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="hexo"><a class="header-anchor" href="#hexo"></a>hexo</h2>
<h3 id="安装hexo"><a class="header-anchor" href="#安装hexo"></a>安装hexo</h3>
<p>安装全局的hexo-cli</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="初始配置"><a class="header-anchor" href="#初始配置"></a>初始配置</h1>
<h2 id="创建hexo项目"><a class="header-anchor" href="#创建hexo项目"></a>创建hexo项目</h2>
<p>创建hexo项目文件夹</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init <span class="token operator">&lt;</span>hexo根目录<span class="token operator">></span> <span class="token comment"># 创建新hexo项目文件夹</span>
<span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>hexo根目录<span class="token operator">></span>
<span class="token function">npm</span> <span class="token function">install</span> --save <span class="token comment"># 安装 package.json 中的npm包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="git配置"><a class="header-anchor" href="#git配置"></a>git配置</h2>
<p>在github网页创建新repo <code>&lt;github-repo-name&gt;</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init
<span class="token function">git</span> <span class="token function">add</span> -A <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit -m <span class="token string">'first commit'</span>
<span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:<span class="token operator">&lt;</span>github-username<span class="token operator">></span>/<span class="token operator">&lt;</span>github-repo-name<span class="token operator">></span>.git
<span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="安装npm包"><a class="header-anchor" href="#安装npm包"></a>安装npm包</h2>
<p>在<code>&lt;新hexo根目录&gt;</code>运行, 以下配置需要hexo&gt;=5.0, next&gt;=8</p>
<p>以下配置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 搜索引擎站点地图生成</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap --save
<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-baidu-sitemap --save
<span class="token comment"># 站点地图主动推送给百度</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-baidu-url-submit --save
<span class="token comment"># 换主题</span>
<span class="token function">npm</span> uninstall hexo-theme-landscape --save
<span class="token function">npm</span> <span class="token function">install</span> hexo-theme-next --save
<span class="token comment">## 代码高亮: 使用next不自带的prism主题, 才需要安装</span>
<span class="token comment"># npm install prism-themes --save</span>
<span class="token comment"># 评论区</span>
<span class="token function">npm</span> <span class="token function">install</span> @waline/hexo-next --save
<span class="token comment"># npm install hexo-next-valine --save</span>
<span class="token comment"># 部署器</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save
<span class="token comment"># 图像懒加载</span>
<span class="token function">npm</span> <span class="token function">install</span> lozad --save
<span class="token comment"># 渲染本地图像</span>
<span class="token function">npm</span> <span class="token function">install</span> github:hyliang96/hexo-asset-image --save <span class="token comment"># 与hexo-abbrlink兼容，与hexo5兼容</span>
<span class="token comment"># 计时器</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-symbols-count-time --save
<span class="token comment"># 本地搜索</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-searchdb --save
<span class="token comment"># 渲染器</span>
<span class="token function">npm</span> uninstall hexo-renderer-marked --save <span class="token comment"># 卸载默认渲染器,</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-markdown-it --save <span class="token comment"># 新渲染器, 支持参考文献引用和章节标题的锚点</span>
<span class="token comment">## npm install markdown-it-mathjax --save # 公式渲染插件, 无需安装, next>=8 自带公式渲染器</span>
<span class="token comment"># 文章摘要</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-excerpt --save          <span class="token comment"># 按限量个html的tag来截取</span>
<span class="token comment">## npm install hexo-auto-excerpt --save  # 按限量字符截取</span>
<span class="token comment"># 玩偶</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-helper-live2d --save
<span class="token function">npm</span> <span class="token function">install</span> live2d-widget-model-tororo --save
<span class="token comment"># 检查坏了的链接文件</span>
<span class="token comment"># npm install hexo-broken-links-checker --save</span>
<span class="token comment"># 自动生成文章链接</span>
<span class="token function">npm</span> <span class="token function">install</span> github:hyliang96/hexo-abbrlink --save
<span class="token comment"># 支持.textpack压缩包文件(内含插入的图片)</span>
<span class="token comment"># npm install hexo-renderer-textpack --save</span>
<span class="token comment"># 文章置顶, 可以置顶多篇文章, 在要置顶的文章的title写"sticky: xxx", xxx是数字, 如100, 越大越往上排</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-index --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="关于配置文件的说明"><a class="header-anchor" href="#关于配置文件的说明"></a>关于配置文件的说明</h2>
<ul>
<li>
<p>迁移配置文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在新hexo根目录下</span>
<span class="token function">cp</span> <span class="token operator">&lt;</span>旧hexo根目录<span class="token operator">></span>/_config.yml _config.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<p>从hexo&gt;=5.0开始, 就能实现主题配置 与 主题项目目录 相隔离:</p>
<ul>
<li>
<p><a href="https://theme-next.js.org/docs/getting-started/installation">安装主题</a>: 不需要像过去一样, 手动git clone主题项目了</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token operator">&lt;</span>主题的github-repo<span class="token operator">></span> themes/<span class="token operator">&lt;</span>主题名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>而是直接用npm安装主题, 例如如下安装<code>next</code>主题readme</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-theme-next@latest --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装到<code>&lt;hexo根目录&gt;/node_modules/hexo-theme-next/</code>, 这是next的项目文件夹.</p>
<p>不要直接在此文件夹中改配置, 而是在<code>&lt;hexo根目录&gt;</code>和 <code>&lt;hexo根目录&gt;/source/_data</code>下添加用户配置, 去覆盖next项目文件夹的配置.</p>
<p><strong>这样可以实现 主题配置 与 主题项目目录 相分离, 用<code>npm</code>升级主题, 不改变主题配置.</strong></p>
</li>
<li>
<p><a href="https://theme-next.js.org/docs/getting-started/configuration.htm">配置主题</a>: 不需和过去一样修改<code>themes/next/_config.yml</code>, 而是如下操作, 然后编辑<code>_config.next.yml</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在新hexo根目录下</span>
<span class="token function">cp</span> <span class="token operator">&lt;</span>旧hexo根目录<span class="token operator">></span>/node_modules/hexo-theme-next/_config.yml _config.next.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>在<code>&lt;hexo根目录&gt;/source/_data </code> 添加用户配置, 去覆盖原有配置 (就是说, 用户配置了的变量, 按用户配置来, 用户没有配置的变量, 按默认配置来)</p>
<ul>
<li>
<p>修改背景图像: 参考<a href="https://www.snowmoon.top/2021/02/21/next%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/">这篇文章</a> 创建 <code>&lt;hexo根目录&gt;/source/_data/styles.styl</code> , 能起到 ``&lt;hexo根目录&gt;/node_modules/hexo-next-theme/source/css/_custom/custom.styl` 的作用</p>
</li>
<li>
<p>修改字体: 参考<a href="https://leay.net/2020/02/14/hexo-next-font/">这篇文章</a> 创建 <code>&lt;hexo根目录&gt;/source/_data/variables.styl</code>, 能覆盖 <code>&lt;hexo根目录&gt;/node_modules/hexo-next-theme/source/css/_variables/*.styl</code> 中的默认配置</p>
</li>
<li>
<p>启用上述修改: 在<code>_config.next.yml</code> 中将上述改过的文件接触注释:</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">custom_file_path</span><span class="token punctuation">:</span>
  <span class="token comment">#head: source/_data/head.njk</span>
  <span class="token comment">#header: source/_data/header.njk</span>
  <span class="token comment">#sidebar: source/_data/sidebar.njk</span>
  <span class="token comment">#postMeta: source/_data/post-meta.njk</span>
  <span class="token comment">#postBodyEnd: source/_data/post-body-end.njk</span>
  <span class="token comment">#footer: source/_data/footer.njk</span>
  <span class="token comment">#bodyEnd: source/_data/body-end.njk</span>
  <span class="token comment">#variable: source/_data/variables.styl</span>
  <span class="token comment">#mixin: source/_data/mixins.styl</span>
  <span class="token key atrule">style</span><span class="token punctuation">:</span> source/_data/styles.styl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>设置博客菜单(menu)中条目的中文名: 在<code>&lt;hexo根目录&gt;/source/_data/languages.yml</code> 设置的menu中文名如下, 只需要添加要修改中文名的条目, 不用把 <code>&lt;hexo根目录&gt;/themes/next/anguages/zh-CN.yml </code> 全部粘过来再改, 也不用直接改后者文件. 这一修改, 无需在 <code>_config.next.yml</code> 中<code>custom_file_path:</code>项将<code>languages.yml</code>接触注释, 这是<code>hexo</code>自带的功能, 详见<a href="https://github.com/hexojs/hexo/issues/3595">hexo的language.yml</a>和<a href="https://github.com/theme-next/hexo-theme-next/issues/974">next的language.yml</a>.</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">zh-CN</span><span class="token punctuation">:</span>
  <span class="token key atrule">menu</span><span class="token punctuation">:</span>
    <span class="token key atrule">home</span><span class="token punctuation">:</span> 首页
    <span class="token key atrule">archives</span><span class="token punctuation">:</span> 时序
    <span class="token key atrule">categories</span><span class="token punctuation">:</span> 分类
    <span class="token key atrule">tags</span><span class="token punctuation">:</span> 标签
    <span class="token key atrule">about</span><span class="token punctuation">:</span> 关于
    <span class="token key atrule">search</span><span class="token punctuation">:</span> 搜索
    <span class="token key atrule">philosophy</span><span class="token punctuation">:</span> 道
    <span class="token key atrule">academics</span><span class="token punctuation">:</span> 术
    <span class="token key atrule">tools</span><span class="token punctuation">:</span> 器
    <span class="token key atrule">book</span><span class="token punctuation">:</span> 书
    <span class="token key atrule">movie</span><span class="token punctuation">:</span> 影
    <span class="token key atrule">photo</span><span class="token punctuation">:</span> 相
    <span class="token key atrule">essay</span><span class="token punctuation">:</span> 杂谈
    <span class="token key atrule">schedule</span><span class="token punctuation">:</span> 日程
    <span class="token key atrule">sitemap</span><span class="token punctuation">:</span> 站点地图
    <span class="token key atrule">commonweal</span><span class="token punctuation">:</span> 公益 404<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="迁移博客"><a class="header-anchor" href="#迁移博客"></a>迁移博客</h2>
<h3 id="迁移配置"><a class="header-anchor" href="#迁移配置"></a>迁移配置</h3>
<p>若从hexo&lt;5的旧博客, 迁移到hexo5的新博客, 需要参照旧博客填写新博客的<code>&#123;_config.yml,_config.next.yml&#125;</code></p>
<p>若从hexo5的旧博客, 迁移到hexo5的新博客, 则运行如下命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在新hexo根目录下</span>
<span class="token assign-left variable">old_hexo_dir</span><span class="token operator">=</span>xxxxx
<span class="token function">cp</span> <span class="token variable">$&#123;old_hexo_dir&#125;</span>/<span class="token punctuation">&#123;</span>_config.yml,_config.next.yml<span class="token punctuation">&#125;</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="迁移内容"><a class="header-anchor" href="#迁移内容"></a>迁移内容</h3>
<p>若此博客要完全迁移内容, 则则执行如下命令, 而后不用做后续的所有操作</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token variable">$&#123;old_hexo_dir&#125;</span>/source/* <span class="token builtin class-name">source</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若此仅把旧博客的板式迁移到新博客, 则执行如下命令, 而后要做后续的所有操作</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token variable">$&#123;old_hexo_dir&#125;</span>/source/<span class="token punctuation">&#123;</span>_data,categories,tags,about<span class="token punctuation">&#125;</span> <span class="token builtin class-name">source</span>
<span class="token function">mkdir</span> source/images<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="修改配置"><a class="header-anchor" href="#修改配置"></a>修改配置</h3>
<p>修改<code>_config.yml</code></p>
<pre class="line-numbers language-none"><code class="language-none">108:  repository: git@github.com:hyliang96&#x2F;hyliang96.github.io.git
215:  serverURL: https:&#x2F;&#x2F;waline-hyliang96.vercel.app # Waline server address url<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>修改<code>_config.next.yml</code></p>
<pre class="line-numbers language-none"><code class="language-none">153:  GitHub: https:&#x2F;&#x2F;github.com&#x2F;hyliang96 || fab fa-github
154:  E-Mail: mailto:hyliang96@gmail.com || fa fa-envelope

409:  permalink: https:&#x2F;&#x2F;github.com&#x2F;hyliang96<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改<code>_config.next.yml</code>并更换图标</p>
<pre class="line-numbers language-none"><code class="language-none">52:favicon:
53:  small: &#x2F;images&#x2F;favicon16.png
54:  medium: &#x2F;images&#x2F;favicon32.png
55:  # small: &#x2F;images&#x2F;inftyset-favicon-16x16-next.png
56:  # medium: &#x2F;images&#x2F;inftyset-favicon-32x32-next.png
57:  apple_touch_icon: &#x2F;images&#x2F;favicon.png
58:  safari_pinned_tab: &#x2F;images&#x2F;favicon.svg

139:  url: &#x2F;images&#x2F;heat.jpg

271:  wechatpay: &#x2F;images&#x2F;wechatpay.jpg
272:  alipay: &#x2F;images&#x2F;alipay.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改<code>source/_data/styles.styl</code>, 并更换背景图像</p>
<pre class="line-numbers language-none"><code class="language-none">background:url(&#x2F;images&#x2F;backgroud.png);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="评论区和浏览计数"><a class="header-anchor" href="#评论区和浏览计数"></a>评论区和浏览计数</h3>
<p>先后参考<a href="#%E8%AF%84%E8%AE%BA%E5%8C%BA">评论区</a>和<a href="#%E6%B5%8F%E8%A7%88%E8%AE%A1%E6%95%B0">浏览计数</a>去配置</p>
<p>然后配置<code>_config.yml</code></p>
<pre class="line-numbers language-none"><code class="language-none">215:  serverURL: https:&#x2F;&#x2F;xxx-xxx.xxx.app # Waline server address url<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>配置<code>_config.next.yml</code></p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">leancloud_visitors</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">app_id</span><span class="token punctuation">:</span> 5JGxxxxxxI
  <span class="token key atrule">app_key</span><span class="token punctuation">:</span> Jv9xxxxxxEq7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="配置域名和搜索引擎"><a class="header-anchor" href="#配置域名和搜索引擎"></a>配置域名和搜索引擎</h3>
<p>在Freenom域名注册域名, 在cloudflare转发此域名, 然后参考<a href="#%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E">搜索引擎</a>配置搜索引擎</p>
<p><code>_config.yml</code></p>
<pre class="line-numbers language-none"><code class="language-none">16:url: https:&#x2F;&#x2F;blog.lianghy.ml
251:  host: https:&#x2F;&#x2F;blog.lianghy.ml    # 在百度站长平台中添加的域名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><code>_config.next.yml</code></p>
<pre class="line-numbers language-none"><code class="language-none">482:google_site_verification: googleaxxx.html
494:baidu_site_verification: baidu_verify_code-xxxx.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>更换文件</p>
<p><code>source/&#123;CNAME,googleaxxx.html,baidu_verify_code-xxxx.html&#125;</code></p>
<h2 id="渲染"><a class="header-anchor" href="#渲染"></a>渲染</h2>
<p>本地预览</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="部署到github"><a class="header-anchor" href="#部署到github"></a>部署到github</h2>
<p>部署到<code>https://&lt;github用户名&gt;.github.io</code></p>
<p>依照此<a href="https://hexo.io/zh-cn/docs/github-pages.html">步骤</a>和<a href="https://docs.github.com/cn/pages/getting-started-with-github-pages/creating-a-github-pages-site">部署github pages</a>完成github-page的配置</p>
<p>然后在本地<code>&lt;hexo根目录&gt;</code>执行部署</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="升级"><a class="header-anchor" href="#升级"></a>升级</h1>
<p>步骤: 升级node-&gt;升级npm-&gt;</p>
<ul>
<li>小版本升级hexo, 若无法正常渲染, 则另起新的hexo项目再迁移</li>
<li>大版本升级hexo, 若无法正常渲染, 则另起新的hexo项目再迁移</li>
<li>另起新的hexo项目再迁移</li>
</ul>
<h2 id="升级node"><a class="header-anchor" href="#升级node"></a>升级node</h2>
<p><a href="https://juejin.cn/post/6844903733239742477">npm和node升级的正确方式</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看当前node版本</span>
node -v
<span class="token comment"># 清除npm cache</span>
<span class="token function">sudo</span> <span class="token function">npm</span> cache clean -f
<span class="token comment"># 安装多版本node的管理工具"n"</span>
<span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g n
<span class="token comment"># 安装最新的稳定版本的node</span>
<span class="token function">sudo</span> n stable
<span class="token comment"># 安装并切换到指定版本的node</span>
<span class="token function">sudo</span> n <span class="token number">12.14</span>.1
<span class="token comment"># 查看所有已经安装的node版本</span>
<span class="token function">sudo</span> node <span class="token function">ls</span>
<span class="token comment"># 返回如下, 不会指明当前使用的node版本, 需要用`node -v`来查看当前使用的node版本</span>
<span class="token comment"># node/12.14.1</span>
<span class="token comment"># node/14.17.4</span>

<span class="token comment"># 查看当前node版本</span>
node -v
<span class="token comment"># 移除指定node版本</span>
<span class="token function">sudo</span> n <span class="token function">rm</span> <span class="token number">14.17</span>.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="升级npm"><a class="header-anchor" href="#升级npm"></a>升级npm</h2>
<p>查看版本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>升级到最高版本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> npm@latest -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="小版本升级hexo"><a class="header-anchor" href="#小版本升级hexo"></a>小版本升级hexo</h2>
<h3 id="升级全局的hexo-cli"><a class="header-anchor" href="#升级全局的hexo-cli"></a>升级全局的hexo-cli</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="升级项目内所有npm包"><a class="header-anchor" href="#升级项目内所有npm包"></a>升级项目内所有npm包</h3>
<p><a href="https://www.4spaces.org/how-to-upgrade-hexo/">hexo升级</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看当前hexo版本, 会列出当项目内hexo(及其构成模块) 和 全局hexo-cli 的版本</span>
hexo version
<span class="token comment"># 升级当项目内所有的npm包, 包括hexo在内</span>
<span class="token function">npm</span> update
<span class="token comment"># 查看升级后的hexo版本</span>
hexo version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="大版本升级hexo"><a class="header-anchor" href="#大版本升级hexo"></a>大版本升级hexo</h2>
<p><a href="https://tommy.net.cn/2020/08/08/upgrade-hexo-to-v5-0-0/">将 Hexo 升级到 v5.0.0</a></p>
<p>全局安装npm包的大版本升级检查工具<code>ncu</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> npm-check-updates -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在npm项目文件夹内运行<code>ncu</code>, 以查看当前项目中可升级的npm包</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ncu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回</p>
<pre class="line-numbers language-none"><code class="language-none">Checking &#x2F;Users&#x2F;tommy&#x2F;blog&#x2F;package.json
[&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] 16&#x2F;16 100%

 hexo                    ^4.2.0  →  ^5.0.0
 hexo-generator-sitemap  ^2.0.0  →  ^2.1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行升级</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ncu -u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回</p>
<pre class="line-numbers language-none"><code class="language-none">Upgrading &#x2F;Users&#x2F;tommy&#x2F;blog&#x2F;package.json
[&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;] 16&#x2F;16 100%

 hexo                    ^4.2.0  →  ^5.0.0
 hexo-generator-sitemap  ^2.0.0  →  ^2.1.0

Run npm install to install new versions.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当前项目中可升级的npm包</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> node_modules node_modules_old
<span class="token function">npm</span> <span class="token function">install</span> --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="另起新的hexo项目再迁移"><a class="header-anchor" href="#另起新的hexo项目再迁移"></a>另起新的hexo项目再迁移</h2>
<h3 id="创建新hexo项目文件夹"><a class="header-anchor" href="#创建新hexo项目文件夹"></a>创建新hexo项目文件夹</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init <span class="token operator">&lt;</span>新hexo根目录<span class="token operator">></span> <span class="token comment"># 创建新hexo项目文件夹</span>
<span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>新hexo根目录<span class="token operator">></span>
<span class="token function">npm</span> <span class="token function">install</span> --save <span class="token comment"># 安装 package.json 中的npm包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="移动源文件"><a class="header-anchor" href="#移动源文件"></a>移动源文件</h3>
<p>在<code>&lt;新hexo根目录&gt;</code>运行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token punctuation">&#123;</span>scaffolds,source,source,README.md<span class="token punctuation">&#125;</span> -rf
<span class="token function">cp</span> <span class="token operator">&lt;</span>旧hexo根目录<span class="token operator">></span>/<span class="token punctuation">&#123;</span>scaffolds,source,source<span class="token punctuation">&#125;</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="重新安装npm包"><a class="header-anchor" href="#重新安装npm包"></a>重新安装npm包</h3>
<p>与上文 <a href="#%E5%AE%89%E8%A3%85npm%E5%8C%85">安装npm包</a> 小节相同</p>
<h3 id="配置新文件"><a class="header-anchor" href="#配置新文件"></a>配置新文件</h3>
<p>hexo配置:</p>
<ul>
<li>参照<code>&lt;旧hexo根目录&gt;/_config.yml</code>, 逐行修改<code>&lt;新hexo根目录&gt;/_config.yml</code></li>
</ul>
<p>next主题配置:</p>
<ul>
<li>
<p>将最新安装的next的配置文件拷贝到<code>新hexo根目录&gt;</code>: 在<code>&lt;新hexo根目录&gt;</code>运行如下命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> node_modules/hexo-theme-next/_config.yml _config.next.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>参照<code>&lt;旧hexo根目录&gt;/_config.next.yml</code>, 逐行修改<code>&lt;新hexo根目录&gt;/_config.next.yml</code></p>
</li>
</ul>
<h3 id="本地渲染并调试bug"><a class="header-anchor" href="#本地渲染并调试bug"></a>本地渲染并调试bug</h3>
<p>通常大版本升级, 会与旧的配置, npm包不兼容, 需要调试bug</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="重新git配置"><a class="header-anchor" href="#重新git配置"></a>重新git配置</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token operator">&lt;</span>旧hexo根目录<span class="token operator">></span>/.gitignore <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后与上文<a href="#git%E9%85%8D%E7%BD%AE">git配置</a>相同, 注意, 要创建新的 <code>&lt;github-repo-name&gt;</code>, 不要和旧hexo项目的 <code>&lt;github-repo-name&gt;</code>相同, 不然会带上git臃肿的历史数据.</p>
<h1 id="插件安装说明"><a class="header-anchor" href="#插件安装说明"></a>插件安装说明</h1>
<h2 id="插件推荐与参考"><a class="header-anchor" href="#插件推荐与参考"></a>插件推荐与参考</h2>
<p><a href="https://hexo.io/plugins/">hexo插件查询网站</a></p>
<p><a href="https://tding.top/archives/42c38b10.html">hexo-next插件配置参考</a></p>
<p><a href="https://zhouyuqian.com/2020/03/06/hexo-%E7%BE%8E%E5%8C%96/">hexo-next插件配置参考</a></p>
<h2 id="评论区"><a class="header-anchor" href="#评论区"></a>评论区</h2>
<p>valine是轻量级的第三方评论模块, 后台是<a href="https://leancloud.app">LeanCloud</a>. 但由于valine有数据泄露的问题, <a href="https://github.com/next-theme/hexo-theme-next/issues/4">next v8.1.0开始不支持valine</a>, 需要用valine需安装<code>next-theme/hexo-next-valine</code>插件, <a href="https://github.com/next-theme/hexo-next-valine">详见</a>.</p>
<p>建议使用waline, 它是在valine外面裹了一层Vercel.</p>
<ul>
<li>先依照 <a href="https://waline.js.org/guide/get-started.html#leancloud-%E8%AE%BE%E7%BD%AE-%E6%95%B0%E6%8D%AE%E5%BA%93">waline配置方法</a>配置LeanCloud（使用国际版）和Vercel</li>
<li>再依照<a href="https://www.npmjs.com/package/@waline/hexo-next">@waline/hexo-next</a>安装npm插件和配置插件.
<ul>
<li>其中的<code>serverURL</code>的获得: 访问<code>https://vercel.com/&lt;你的&gt;/waline</code>, 在如下位置选区任意一个url即可</li>
</ul>
</li>
</ul>
<p><img data-src="/posts/b27b9f95/image-20210803005919113.png" alt="image-20210803005919113"></p>
<ul>
<li>访问<code>&lt;serverURL&gt;/ui</code>, 首次注册的用户, 会成为此waline项目的管理员, 可以删评论</li>
</ul>
<h2 id="搜索引擎"><a class="header-anchor" href="#搜索引擎"></a>搜索引擎</h2>
<p><a href="https://asurada.zone/post/Blog-Search-Engine-Index/">Hexo 博客主流搜索引擎收录详细指南</a></p>
<p>操作详见<a href="https://zhuanlan.zhihu.com/p/100922816">参考</a> <a href="https://asurada.zone/post/Blog-Search-Engine-Index/">参考</a></p>
<h3 id="添加哪个域名"><a class="header-anchor" href="#添加哪个域名"></a>添加哪个域名</h3>
<p>google search console 需要把<code>https://&lt;用户名&gt;.github.io</code>（选<code>网址前缀</code>）添加为站点；不然若用自己注册的域名，添加sitemap.xml会显示“无法获取“。<a href="https://www.cxyzjd.com/article/weixin_43971764/96754325">详见</a></p>
<p>百度站长需要把自己注册的域名添加为站点；不然若用<code>https://&lt;用户名&gt;.github.io</code>，会如下报错</p>
<blockquote>
<p>该站点为低质站点，暂不可添加，请持续优化后，再行尝试</p>
</blockquote>
<p>或</p>
<blockquote>
<p>该主域可添加站点数量超过限制，无法添加更多站点。如您仍需要添加站点，请在已添加站点中删除部分站点后重试。</p>
</blockquote>
<p>必须给它套一层自己的域名，才能添加成功。</p>
<h3 id="验证域名归属"><a class="header-anchor" href="#验证域名归属"></a>验证域名归属</h3>
<h4 id="用HTML-tag验证-推荐"><a class="header-anchor" href="#用HTML-tag验证-推荐"></a>用HTML tag验证(推荐)</h4>
<p>google：</p>
<p><img data-src="/posts/b27b9f95/search-console-verification-code.png" alt="Google网站验证：使用Search Console验证网站的9种方法– 维修指南"></p>
<p>百度：</p>
<p><img data-src="/posts/b27b9f95/1567136478962442.jpg" alt="在百度站长平台上完成“网站验证”详细步骤"></p>
<p>修改<code>_config.next.yml</code>：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">google_site_verification</span><span class="token punctuation">:</span> &lt;google粘贴到这里<span class="token punctuation">></span>
<span class="token key atrule">baidu_site_verification</span><span class="token punctuation">:</span> &lt;baidu粘贴到这里<span class="token punctuation">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="用DNS记录验证网域归属"><a class="header-anchor" href="#用DNS记录验证网域归属"></a>用DNS记录验证网域归属</h4>
<p>在google验证网域归属时, 需要创建txt类型的dns, 方法如下:</p>
<p>在Google Search Concole, 选择验证网域归属, 点<code>复制</code></p>
<p><img data-src="/posts/b27b9f95/iShot2021-08-03%2004.35.43.png" alt="iShot2021-08-03 04.35.43"></p>
<p>然后前往域名管理网站, 如cloudflare, 添加<code>类型</code>为TXT的一条域名, <code>名称</code>与博客网址的<code>名称</code>相同, <code>内容</code>为剪切板内容.</p>
<p><img data-src="/posts/b27b9f95/%E6%9C%AA%E5%91%BD%E5%90%8D.png" alt="未命名"></p>
<h4 id="用文件验证网址归属"><a class="header-anchor" href="#用文件验证网址归属"></a>用文件验证网址归属</h4>
<p>其中在验证网址归属的时候, 若使用文件来验证, 请将下载的<code>xxx.html</code>文件复制到<code>&lt;hexo根目录&gt;/xxx.html</code>, 并在文件开头加上如下内容, 以便使<code>hexo g</code>时<strong>不把此文件渲染成一个博客页面</strong>, 而是直接把文件原有内容为<code>博客网址/xxx.html</code>纯文本文件. 可<code>hexo d</code>然后访问<code>博客网址/xxx.html</code>查看是否是纯文本.</p>
<pre class="line-numbers language-none"><code class="language-none">---
layout: false
---
文件原有内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="写roboots-txt"><a class="header-anchor" href="#写roboots-txt"></a>写roboots.txt</h3>
<p><a href="https://mikolaje.github.io/2019/hexo_seo.html">详见</a></p>
<p>写<code>&lt;hexo根目录&gt;/source/robots.txt</code>以告诉搜索引擎的爬虫要爬我这网站的那些内容</p>
<p>因为现在（2019-09以后）Google Search默认是用智能手机引擎来抓取, 写robots.txt时 不要写<code>Disallow</code>, 因为如果js和fonts这些加了disallow的话，会出现谷歌抓取问题</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">User-agent</span><span class="token punctuation">:</span> *

<span class="token comment"># 就是告诉搜索引擎的爬虫要爬我这网站的那些内容。</span>
<span class="token key atrule">Allow</span><span class="token punctuation">:</span> /
<span class="token key atrule">Allow</span><span class="token punctuation">:</span> /archives/
<span class="token key atrule">Allow</span><span class="token punctuation">:</span> /categories/
<span class="token key atrule">Allow</span><span class="token punctuation">:</span> /tags/
<span class="token key atrule">Allow</span><span class="token punctuation">:</span> /about/

<span class="token comment"># 因为现在（2019-09以后）Google Search默认是用智能手机引擎来抓取，</span>
<span class="token comment"># 所以如果js和css这样被disallow的话会有问题，建议还是把上面的disallow去掉。</span>
<span class="token comment"># 参见: https :// mikolaje .github . io/2019/ hexo_seo . html</span>
<span class="token comment"># Disallow: /js/</span>
<span class="token comment"># Disallow: /fonts/</span>
<span class="token comment"># Disallow: /css/</span>
<span class="token comment"># Disallow: /live2dw/</span>
<span class="token comment"># Disallow: /vendors/</span>

<span class="token key atrule">Sitemap</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//blog.lianghy.ml/sitemap.xml
<span class="token key atrule">Sitemap</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//blog.lianghy.ml/baidu_sitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="更新safari标签页图标-favicon"><a class="header-anchor" href="#更新safari标签页图标-favicon"></a>更新safari标签页图标(favicon)</h2>
<p>在<code>_config.next.yml</code>配置过favicon后, 重新<code>hexo g &amp;&amp; hexo s</code>, safari可能不更新标签页图标(favicon), 但其他浏览器会立即更新.  <a href="https://www.macworld.com/article/233243/how-to-refresh-the-tiny-tab-icons-in-safari-when-they-start-disappearing.html">这篇</a>给出了方法让safari 更新favicon, 但我试了, 对其他网页有用, 对我的hexo(5.4.0)next(8.6.1)的博客没有用.</p>
<h2 id="代码高亮"><a class="header-anchor" href="#代码高亮"></a>代码高亮</h2>
<p>hexo&gt;=5, 参考<a href="https://theme-next.js.org/highlight/">预览高亮方案</a>, 选择喜欢的方案, 参照其上的代码, 去配置  <code>_config.yml</code> 和 <code>_config.next.yml</code></p>
<p>若选的prism高亮方案, 不是next自带的, 需要安装<code>prism-themes</code>插件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> prism-themes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="参考文献和标题锚点"><a class="header-anchor" href="#参考文献和标题锚点"></a>参考文献和标题锚点</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> uninstall hexo-renderer-marked --save <span class="token comment"># 卸载默认渲染器</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-markdown-it --save <span class="token comment"># 新渲染器, 支持参考文献引用和章节标题的锚点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><code>hexo-renderer-markdown-it</code> 支持把 footnote 渲染成文尾<strong>自动编号</strong>的参考文献, 还能为每个章节标题添加一个锚点, 点击一下锚点, 就能在浏览器的网址栏里跳转成此标题的url, 以便复制分享. 但是, 点击锚点并不能自动把锚点的url复制到剪切板. <a href="https://zhanghuimeng.github.io/post/add-footnote-plugin-for-hexo-blog/">详见</a></p>
<p>以下是我的配置</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">
<span class="token comment"># Markdown-it config</span>
<span class="token comment"># hexo默认的渲染插件 hexo-renderer-marked 的替代插件</span>
<span class="token comment">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span>
<span class="token key atrule">markdown</span><span class="token punctuation">:</span>
  <span class="token comment"># preset: 'default'</span>
  <span class="token comment"># 渲染设置</span>
  <span class="token key atrule">render</span><span class="token punctuation">:</span>
    <span class="token comment"># 置为true时，html内容保持不变；置为false时，html内容将被转义成普通字符串</span>
    <span class="token key atrule">html</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment"># 是否生成与XHTML完全兼容的标签（虽然我不懂是什么意思）</span>
    <span class="token key atrule">xhtmlOut</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token comment"># 置为true时，每个换行符都被渲染成一个&lt;br>（即Hexo的默认表现）；置为false时，只有空行才会被渲染为&lt;br>（GFM的默认表现）</span>
    <span class="token key atrule">breaks</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment"># 是否自动识别链接并把它渲染成链接</span>
    <span class="token key atrule">linkify</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment"># 是否自动识别印刷格式（意思是把(c)渲染为©这样的）</span>
    <span class="token key atrule">typographer</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment"># 如果typographer被设置为true，则该选项用于设置将dumb quotes（""）自动替换为smart quotes</span>
    <span class="token key atrule">quotes</span><span class="token punctuation">:</span> <span class="token string">'“”‘’'</span>
  <span class="token comment"># 设置所需插件</span>
  <span class="token key atrule">plugins</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>abbr
    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>footnote
    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>ins
    <span class="token comment"># - markdown-it-sub</span>
    <span class="token comment"># - markdown-it-sup</span>
    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>mathjax
    <span class="token comment"># - hexo-math</span>
  <span class="token comment"># 文中标题跳转的锚点设置</span>
  <span class="token key atrule">anchors</span><span class="token punctuation">:</span>
    <span class="token comment"># Minimum level for ID creation. (e.g. h2 to h6)</span>
    <span class="token key atrule">level</span><span class="token punctuation">:</span> <span class="token number">1</span>
    <span class="token comment"># A suffix that is prepended to the number given if the ID is repeated.</span>
    <span class="token key atrule">collisionSuffix</span><span class="token punctuation">:</span> <span class="token string">'_'</span>
    <span class="token comment"># If `true`, creates an anchor tag with a permalink besides the heading.</span>
    <span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment"># Class used for the permalink anchor tag.</span>
    <span class="token key atrule">permalinkClass</span><span class="token punctuation">:</span> header<span class="token punctuation">-</span>anchor
    <span class="token comment"># Set to 'right' to add permalink after heading</span>
    <span class="token key atrule">permalinkSide</span><span class="token punctuation">:</span> <span class="token string">'left'</span>
    <span class="token comment"># The symbol used to make the permalink 🔗  ¶ § ⦿ •</span>
    <span class="token key atrule">permalinkSymbol</span><span class="token punctuation">:</span> <span class="token string">''</span>
    <span class="token comment"># Transform anchor to (1) lower case; (2) upper case</span>
    <span class="token key atrule">case</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token comment"># Replace space with a character</span>
    <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="数学公式"><a class="header-anchor" href="#数学公式"></a>数学公式</h2>
<p>next&gt;=8 自带公式渲染器, 在 <code>_config.next.yml</code> 中如下配置, 无需安装任何公式渲染插件</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># Math Formulas Render Support</span>
<span class="token comment"># Warning: Please install / uninstall the relevant renderer according to the documentation.</span>
<span class="token comment"># See: https://theme-next.js.org/docs/third-party-services/math-equations</span>
<span class="token comment"># Server-side plugin: https://github.com/next-theme/hexo-filter-mathjax</span>
<span class="token key atrule">math</span><span class="token punctuation">:</span>
  <span class="token comment"># Default (false) will load mathjax / katex script on demand.</span>
  <span class="token comment"># That is it only render those page which has `mathjax: true` in front-matter.</span>
  <span class="token comment"># If you set it to true, it will load mathjax / katex srcipt EVERY PAGE.</span>
  <span class="token key atrule">every_page</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

  <span class="token key atrule">mathjax</span><span class="token punctuation">:</span>
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment"># Available values: none | ams | all, all 表示所有独行公式自动编号</span>
    <span class="token key atrule">tags</span><span class="token punctuation">:</span> all

  <span class="token key atrule">katex</span><span class="token punctuation">:</span>
    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span>
    <span class="token key atrule">copy_tex</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意, 在<code>_config.yml</code> 中, <code>hexo-renderer-markdown-it</code>  的配置不能开上标和下标</p>
<pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token comment"># Markdown-it config</span>
<span class="token comment"># hexo默认的渲染插件 hexo-renderer-marked 的替代插件</span>
<span class="token comment">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span>
<span class="token key atrule">markdown</span><span class="token punctuation">:</span>
  <span class="token comment"># 设置所需插件</span>
  <span class="token key atrule">plugins</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>abbr
    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>footnote
    <span class="token punctuation">-</span> markdown<span class="token punctuation">-</span>it<span class="token punctuation">-</span>ins
    <span class="token comment"># - markdown-it-sup # 不能开， 不然公式中若有 xxx^yyy^zzz, 会无法渲染成公式</span>
    <span class="token comment"># - markdown-it-sub # 不能开， 不然公式中若有 xxx_yyy_zzz, 会无法渲染成公式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用:</p>
<ul>
<li>
<p>行内公式<code>$</code>前后有空格也能渲染, 如<code>$ f(x)=\left \|\dfrac&#123;x^2&#125;&#123;y^2&#125;\right \| $</code>渲染成$ f(x)=\left |\dfrac{x^2}{y^2}\right | $</p>
</li>
<li>
<p>含有中文也能渲染, 如<code>$x_右$ </code>渲染成$x_右$</p>
</li>
<li>
<p><code>$\eqref&#123;eq:sample&#125;$</code> 能渲染成 “$\eqref{eq:sample}$&quot;.</p>
</li>
<li>
<p>独行公式自动有编号</p>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">$$
<span class="token equation-command regex">\int</span>_0^<span class="token equation-command regex">\infty</span> <span class="token equation-command regex">\frac</span>&#123;x^3&#125;&#123;e^x-1&#125; <span class="token equation-command regex">\text</span>&#123;d&#125;x = <span class="token equation-command regex">\frac</span>&#123;<span class="token equation-command regex">\pi</span>^4&#125;&#123;15&#125; <span class="token equation-command regex">\label</span>&#123;eq:sample&#125;
$$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>渲染为<br>
$$<br>
\int_0^\infty \frac{x^3}{e^x-1} \text{d}x = \frac{\pi^4}{15} \label{eq:sample}<br>
$$</p>
</li>
<li>
<p>独行公式取消编号需要加<code>\notag</code></p>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex"><span class="token equation string">$$
<span class="token equation-command regex">\int</span>_0^<span class="token equation-command regex">\infty</span> <span class="token equation-command regex">\frac</span>&#123;x^3&#125;&#123;e^x-1&#125; <span class="token equation-command regex">\text</span>&#123;d&#125;x = <span class="token equation-command regex">\frac</span>&#123;<span class="token equation-command regex">\pi</span>^4&#125;&#123;15&#125; <span class="token equation-command regex">\notag</span>
$$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>渲染为<br>
$$<br>
\int_0^\infty \frac{x^3}{e^x-1} \text{d}x = \frac{\pi^4}{15} \notag<br>
$$</p>
</li>
<li>
<p>我尝试过的第三方公式插件的问题</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 以下无法渲染:</span>
<span class="token function">npm</span> <span class="token function">install</span> @traptitech/markdown-it-katex --save
<span class="token comment"># 以下和next自带的公式渲染器等效:</span>
<span class="token function">npm</span> <span class="token function">install</span> markdown-it-katex --save
<span class="token function">npm</span> <span class="token function">install</span> markdown-it-mathjax --save
<span class="token function">npm</span> <span class="token function">install</span> markdown-it-mathjax-svg-next --save
<span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-kramed --save
<span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-pandoc --save <span class="token comment"># 渲染太慢</span>
<span class="token comment"># 公式的处理器, 但不渲染, 已经集成到hexo里, 无需安装:</span>
<span class="token function">npm</span> <span class="token function">install</span> hexo-math --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="自动生成文章链接"><a class="header-anchor" href="#自动生成文章链接"></a>自动生成文章链接</h2>
<p><a href="https://www.jianshu.com/p/c7de2ae59975">Hexo-abbrlink自动生成唯一永久文章链接</a></p>
<p>安装：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save
<span class="token function">npm</span> <span class="token function">install</span> https://github.com/hyliang96/hexo-asset-image --save  <span class="token comment"># 与hexo-abbrlink兼容，与hexo5兼容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>配置<code>config.yml</code>，推荐配置如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">permalink: posts/:abbrlink/ <span class="token comment"># 或 posts/:abbrlink/ 或 :abbrlink.html 或 :abbrlink/ ， 只要结尾是 :abbrlink.html 或 :abbrlink/， hyliang96/hexo-asset-image 皆支持</span>
abbrlink:
abbrlink:
    alg: crc32   <span class="token comment">#算法： crc16(default) and crc32</span>
    rep: hex     <span class="token comment">#进制： dec(default) and hex</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>生成的链接将会是这样的(官方样例)：</p>
<pre class="line-numbers language-none"><code class="language-none">crc16 &amp; hex
https:&#x2F;&#x2F;post.zz173.com&#x2F;posts&#x2F;66c8.html

crc16 &amp; dec
https:&#x2F;&#x2F;post.zz173.com&#x2F;posts&#x2F;65535.html

crc32 &amp; hex
https:&#x2F;&#x2F;post.zz173.com&#x2F;posts&#x2F;8ddf18fb.html

crc32 &amp; dec
https:&#x2F;&#x2F;post.zz173.com&#x2F;posts&#x2F;1690090958.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>生成完后，原<code>md</code>文件的Front-matter 内会增加<code>abbrlink</code> 字段，值为生成的ID 。这个字段确保了在我们修改了Front-matter 内的博客标题title或创建日期date字段之后而不会改变链接地址。</p>
<h2 id="浏览计数"><a class="header-anchor" href="#浏览计数"></a>浏览计数</h2>
<h3 id="整个网站的浏览人数和次数统计"><a class="header-anchor" href="#整个网站的浏览人数和次数统计"></a>整个网站的浏览人数和次数统计</h3>
<p>计数<code>busuanzi</code>工具已经预置在<code>next</code>主题内, 无需另外安装, 只需在<code>_config.next.yml</code>中如下配置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Show Views / Visitors of the website / page with busuanzi.</span>
<span class="token comment"># For more information: http://ibruce.info/2015/04/04/busuanzi/</span>
busuanzi_count:
  enable: <span class="token boolean">true</span>
  total_visitors: <span class="token boolean">true</span>
  total_visitors_icon: fa fa-user
  total_views: <span class="token boolean">true</span>
  total_views_icon: fa fa-eye
  post_views: <span class="token boolean">false</span>
  post_views_icon: far fa-eye<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中<code>post_views</code>填<code>false</code>, 即不使用<code>busuanzi</code>统计文章的浏览次数.</p>
<p>这是因为,  <code>busuanzi</code>会有三个问题, <a href="https://github.com/next-theme/hexo-theme-next/issues/142">参考</a>:</p>
<ul>
<li>在首页中无法显示各篇文章的浏览次数</li>
<li>因为safari若开启“阻止跨站”, <code>busuanzi</code>统计出的文章浏览次数直接与整个网站的浏览次数相同</li>
</ul>
<p><img data-src="/posts/b27b9f95/99628710-aaca7c80-2a71-11eb-9f9a-2b6ffef38704.png" alt="image"></p>
<ul>
<li>因为safari若开启“阻止跨站”, <code>busuanzi</code>统出的网站浏览人数(下图人头), 在每次刷新或站内切换网页后会加1, 这是按网站浏览次数(下图眼睛)的逻辑去更新了</li>
</ul>
<p><img data-src="/posts/b27b9f95/image-20211220201408902.png" alt="image-20211220201408902"></p>
<p><img data-src="/posts/b27b9f95/image-20211220193153301.png" alt="image-20211220193153301"></p>
<h3 id="每个文章的浏览次数统计"><a class="header-anchor" href="#每个文章的浏览次数统计"></a>每个文章的浏览次数统计</h3>
<p><a href="https://blog.csdn.net/lijing742180/article/details/87928554">参考本文</a>, 配置LeanClound 中的变量 <code>Counter</code>,  并如下在<code>_config.next.yml</code>填写<code>app_id</code>和<code>app_key</code>. 并设置<code>security: false</code>，以免安装<code>hexo-leancloud-counter-security</code> (安装很麻烦, <a href="https://www.dazhuanlan.com/codingmonkey/topics/1589913">详见</a>)</p>
<p>这个LeanClound账号和当中的应用实例, 可以和Vercel评论区所使用的共用, 因而<code>app_id</code>和<code>app_key</code>也与Vercel评论区的相同.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Show number of visitors of each article.</span>
<span class="token comment"># You can visit https://www.leancloud.cn to get AppID and AppKey.</span>
leancloud_visitors:
  enable: <span class="token boolean">true</span>
  app_id: 5JGxxxxxxI
  app_key: Jv9xxxxxxEq7
  <span class="token comment"># Required for apps from CN region</span>
  server_url: <span class="token comment"># &lt;your server url></span>
  <span class="token comment"># Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span>
  <span class="token comment"># If you don't care about security in leancloud counter and just want to use it directly</span>
  <span class="token comment"># (without hexo-leancloud-counter-security plugin), set `security` to `false`.</span>
  security: <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>记录文章访问量的唯一标识符是文章的发布日期和文章的标题，因此要确保这两个数值组合的唯一性，如果你更改了这两个数值，会造成文章阅读数值的清零重计。</p>
<p>相比于 <code>busuanzi</code>, 使用LeanCloud统计文章浏览次数, 有两个优点:</p>
<ul>
<li>可首页中无法显示各篇文章的浏览次数</li>
<li>使用safari访问, 每篇文章单独计数, 不会所有文章浏览次数和整个网站的浏览次数相同</li>
</ul>
<h1 id="报错"><a class="header-anchor" href="#报错"></a>报错</h1>
<h2 id="gyp-ERR-stack-Error-gyp-failed-with-exit-code-1"><a class="header-anchor" href="#gyp-ERR-stack-Error-gyp-failed-with-exit-code-1"></a>gyp ERR! stack Error: <code>gyp</code> failed with exit code: 1</h2>
<p>报错</p>
<pre class="line-numbers language-none"><code class="language-none">gyp ERR! configure error
gyp ERR! stack Error: &#96;gyp&#96; failed with exit code: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>解决方法</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">rm <span class="token operator">-</span>rf node_modules
rm <span class="token keyword">package</span><span class="token operator">-</span>lock<span class="token punctuation">.</span>json
npm update
npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ENOTEMPTY-directory-not-empty"><a class="header-anchor" href="#ENOTEMPTY-directory-not-empty"></a>ENOTEMPTY: directory not empty</h2>
<p><a href="https://chun-wen.github.io/hexo/20210322/1226560276/">来源参见</a></p>
<p>若在<code>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</code>时有如下报错，</p>
<pre class="line-numbers language-none"><code class="language-none">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hexo deploy &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
INFO  Validating config
INFO  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
  ███╗   ██╗███████╗██╗  ██╗████████╗
  ████╗  ██║██╔════╝╚██╗██╔╝╚══██╔══╝
  ██╔██╗ ██║█████╗   ╚███╔╝    ██║
  ██║╚██╗██║██╔══╝   ██╔██╗    ██║
  ██║ ╚████║███████╗██╔╝ ██╗   ██║
  ╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝   ╚═╝
&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
NexT version 8.8.2
Documentation: https:&#x2F;&#x2F;theme-next.js.org
&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;
INFO  Deploying: git
INFO  Clearing .deploy_git folder...
FATAL &#123;
  err: [Error: ENOTEMPTY: directory not empty, rmdir &#39;&#x2F;Users&#x2F;mac&#x2F;Documents&#x2F;blog&#x2F;my-blog&#x2F;.deploy_git&#x2F;about&#39;] &#123;
    errno: -66,
    code: &#39;ENOTEMPTY&#39;,
    syscall: &#39;rmdir&#39;,
    path: &#39;&#x2F;Users&#x2F;mac&#x2F;Documents&#x2F;blog&#x2F;my-blog&#x2F;.deploy_git&#x2F;about&#39;
  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这说明，用<code>hexo clean</code>打扫不干净<code>.deploy_git/about/</code>，只有在这个文件夹是空的时才能完成<code>hexo deploy</code>。</p>
<p>则只需删除根目录下的<code>.deploy_git/</code>文件夹，</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> -rf .deploy_git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后重新执行<code>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</code>即可重新生成<code>.deploy_git/</code>并完成deploy。</p>
]]></content>
      <categories>
        <category>器</category>
        <category>博客搭建</category>
      </categories>
  </entry>
  <entry>
    <title>github_pages绑定二级域名</title>
    <url>/posts/26c0d38/</url>
    <content><![CDATA[<p>参考: <a href="https://segmentfault.com/a/1190000005775893">GitHub Pages 绑定二级域名</a></p>
<p>已申请一级域名<code>hyliang.ml</code>, 欲给 <code>hyliang96.github.io</code> 绑定二级域名<code>blog.lianghy.ml</code>, 操作如下.</p>
<p>注意: 读者操作时<strong>切勿照抄</strong>上述url, <code>hyliang.ml</code>换成你注册的一级域名, <code>blog  </code>可随便写, <code>hyliang96.github.io</code>换成你的github page的url.</p>
<ol>
<li>创建<code>CNAME</code>文件</li>
</ol>
<ul>
<li>
<p>非Hexo建的GIthub Pages: 直接在 GitHub 项目里创建 <code>CNAME</code> 文件 (无后缀名), 写入全文如下.</p>
<pre class="line-numbers language-none"><code class="language-none">blog.lianghy.ml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>Hexo建的: 创建文件 <code>&lt;hexo项目目录&gt;/source/CNAME</code>, 写入全文如上.</p>
<p>然后编译并部署博客 <code>hexo g &amp;&amp; hexo d</code>, 这样所部署到的github pages的repo中, 总是有这个<code>CNAME</code>文件.</p>
</li>
</ul>
<p>设置作用: 访问 <code>hyliang96.github.io</code>  时, 浏览器的url栏显示为 <code>blog.lianghy.ml</code>.</p>
<ol start="2">
<li>在域名管理网站, 添加域名解析规则, 类型为 <code>CNAME</code> , 名为 <code>blog</code>,  目标 <code>hyliang96.github.io</code></li>
</ol>
<p><img data-src="/posts/26c0d38/image-20200123041020200.png" alt="image-20200123041020200"></p>
<p>此设置的功能为: 当访问<code>blog.lianghy.ml</code>, 会跳转到 <code>hyliang96.github.io</code> .</p>
<ol start="3">
<li>等待10分钟， 若出现以下效果, 证明绑定成功了
<ul>
<li>访问 <a href="https://hyliang96.github.io">https://hyliang96.github.io</a> 时, 页面内容照常显示, 而 url 栏显示为 <a href="https://blog.lianghy.ml">https://blog.lianghy.ml</a></li>
<li>访问 <a href="https://blog.lianghy.ml">https://blog.lianghy.ml</a> 就能看到 <a href="https://hyliang96.github.io">https://hyliang96.github.io</a> 一样的页面内容, 而 url 栏也显示为 <a href="https://blog.lianghy.ml">https://blog.lianghy.ml</a></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>器</category>
        <category>博客搭建</category>
      </categories>
  </entry>
  <entry>
    <title>Zotero安装与配置</title>
    <url>/posts/6349216c/</url>
    <content><![CDATA[<h1 id="我的配置"><a class="header-anchor" href="#我的配置"></a>我的配置</h1>
<h2 id="浏览器插件"><a class="header-anchor" href="#浏览器插件"></a>浏览器插件</h2>
<p>当Zotero.app打开时，可以在浏览器中添加条目到zotero，使用方法<a href="https://www.yangzhiping.com/tech/zotero1.html">详见</a></p>
<p>Safari&lt;=12: 安装<code>Zotero Connector</code>: 点<code>工具</code>-<code> 安装浏览器插件</code>，弹出网页点<code>install</code></p>
<p>Safari&gt;=13: <a href="https://www.zotero.org/support/kb/safari_compatibility">beta版Zotero Connector</a></p>
<h2 id="同步"><a class="header-anchor" href="#同步"></a>同步</h2>
<p>本段参考 <a href="https://github.com/specter119/RefTools/blob/master/zotero/sync.md">zotero跨平台使用教程：多种同步方案</a> 编写</p>
<h3 id="概念解释"><a class="header-anchor" href="#概念解释"></a>概念解释</h3>
<h4 id="条目的附件"><a class="header-anchor" href="#条目的附件"></a>条目的附件</h4>
<p>Zotero 附件类型包括</p>
<p><code>文件附件</code></p>
<ul>
<li>图标为系统默认图标或者 adobe 红</li>
<li>是 Zotero 默认的附件格式。当从finder拖拽文件至条目上，则复制文件副本创建<code>文件附件</code>。也可<code>选择条目-右键-附件-添加文件副本</code>创建</li>
<li>存放在<code>&lt;数据存储位置&gt;/storage/&lt;8位数字和字母编码&gt;/</code></li>
</ul>
<p><code>链接附件</code></p>
<ul>
<li>图标为白色 加小铁链</li>
<li>可<code>选择条目-右键-附件-添加文件链接</code>，或由 ZotFile 生成</li>
<li>实际保存在<code>&lt;链接附件的根目录&gt;</code>下</li>
</ul>
<p><code>url附件</code></p>
<ul>
<li>图标为蓝色 加小铁链</li>
<li>可<code>选择条目-右键-附件-添加url链接</code>创建</li>
<li>实际为文件的网址，联网时才能打开</li>
<li>保存在<code>&lt;数据存储位置&gt;/zotero.sqlite</code></li>
</ul>
<p>因此，本地只保存有<code>文件</code>与<code>文件链接</code>类型的附件。</p>
<h4 id="存储目录"><a class="header-anchor" href="#存储目录"></a>存储目录</h4>
<p><code>&lt;数据存储位置&gt;/</code> ：默认是<code>~/Zotero</code></p>
<p><code>&lt;数据存储位置&gt;/zotero.sqlite</code> 文件</p>
<ul>
<li>包含分类层级，条目的元数据、标签、分类等， <code>文件附件</code>的8位编码、<code>链接附件</code>的路径、<code>url附件</code>的url、笔记 等</li>
<li>只能用zotero官方服务来同步，<a href="https://blog.yesmryang.net/zotero-dropbox-sync/">采用第三方云盘同步会造成冲突</a></li>
</ul>
<p><code>&lt;数据存储位置&gt;/storage/</code></p>
<ul>
<li>
<p>其下均为名为 8位数字和字母的编码 的子文件夹，子文件夹内是一个<code>文件附件</code>的所有组成文件</p>
<p>组成文件：如pdf型<code>文件附件</code>，则是一个pdf文件；网页快照型<code>文件附件</code>，则是构成网页的所有文件</p>
</li>
<li>
<p>此文件夹可采用第三方云盘同步</p>
</li>
</ul>
<p><code>&lt;链接附件的根目录&gt;/</code></p>
<ul>
<li>包含<code>链接附件</code>·，可以自由组织其目录结构</li>
<li>此文件夹可采用第三方云盘同步</li>
</ul>
<h4 id="同步方式"><a class="header-anchor" href="#同步方式"></a>同步方式</h4>
<p>从附件类型上来看，Zotero 实现同步的方式不外乎两类：</p>
<ul>
<li>同步<code>文件附件</code>，包括：
<ul>
<li>Zotero 官网同步服务：同步<code>zotero.sqlite</code>和<code>&lt;数据存储位置&gt;/storage/</code> ，免费限300MB</li>
<li>Webdav 同步</li>
<li>软链接配合同步盘</li>
</ul>
</li>
<li>同步<code>链接附件</code>，包括：
<ul>
<li>ZotFile 配合同步盘</li>
</ul>
</li>
</ul>
<p>两类方法使用上的优劣：</p>
<ul>
<li>同步<code>文件附件</code>：
<ul>
<li>劣势：路径自定义程度低，<code>&lt;数据存储位置&gt;/storage</code>或<code>软链接</code>内8位数字和字母组成的子目录，不可读</li>
<li>优势：删除条目，附件随之删除</li>
</ul>
</li>
<li>同步<code>链接附件</code> (特指由 ZotFile 生成)
<ul>
<li>优势：路径自定义程度高、可读，便于在ipad上进入目录，用任意第三方标注软件阅读、批注文件</li>
<li>劣势：删除条目，附件不会随之删除，<code>链接附件的根目录</code>概念略费解。</li>
</ul>
</li>
</ul>
<h3 id="我的同步设置"><a class="header-anchor" href="#我的同步设置"></a>我的同步设置</h3>
<h4 id="同步策略"><a class="header-anchor" href="#同步策略"></a>同步策略</h4>
<table>
<thead>
<tr>
<th>附件类型</th>
<th>同步方法</th>
<th>依赖</th>
<th>支持平台</th>
<th>工作方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>单文件的附件(如pdf)</td>
<td>同步<code>链接附件</code></td>
<td>ZotFile 插件 + Dropbox</td>
<td>mac、win、Linux、iPad、iOS、android</td>
<td>在iPad上用任意软件阅读批注pdf</td>
</tr>
<tr>
<td>多文件的附件(如网页快照)</td>
<td>同步<code>文件附件</code></td>
<td>Dropbox</td>
<td>mac、win、Linux</td>
<td>在电脑上阅读</td>
</tr>
</tbody>
</table>
<p>同步到ipad的其他解决方案：<a href="https://taozhaojun.github.io/2017/08/02/ipad/">papership+Webdav</a></p>
<h4 id="设置方法"><a class="header-anchor" href="#设置方法"></a>设置方法</h4>
<ul>
<li>
<p>设置软连接</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /Users/mac/Dropbox/Zotero_sync/
<span class="token comment"># 创建 &lt;链接附件目录> 为 Zotero_sync/linked_files</span>
<span class="token function">mkdir</span> /Users/mac/Dropbox/Zotero_sync/linked_files
<span class="token comment"># &lt;数据存储位置>/storage  移动并链接到   Zotero_sync/storage</span>
<span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>数据存储位置<span class="token operator">></span>
<span class="token function">mv</span> storage /Users/mac/Dropbox/Zotero_sync/storage
<span class="token function">ln</span> -s /Users/mac/Dropbox/Zotero_sync/storage storage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>设置zotero存储目录</p>
<p>勾选<code>首选项</code>-<code>高级-</code>文件和文件夹`，填入以下两路径</p>
<p><img data-src="/posts/6349216c/ScreenShot%202019-12-10%2012.13.33.png" alt="ScreenShot 2019-12-10 12.13.33"></p>
</li>
<li>
<p>设置zotero官方同步</p>
<p>购买服务后，勾选<code>首选项</code>-<code>同步</code>-<code>设置</code>，设置成如下</p>
<p><img data-src="/posts/6349216c/ScreenShot%202019-12-10%2012.15.36.png" alt="ScreenShot 2019-12-10 12.15.36"></p>
</li>
<li>
<p>安装zotfile</p>
<p>在<a href="https://github.com/jlegewie/zotfile/releases/l">zotfile的github</a>下载最新的<code>zotfile-x.x.x--fx.xpi</code>, 下载后在 Zotero 中打开<code>工具</code>→<code>插件</code>，按右上角齿轮选择<code>Install Add-on Form Fil</code>，选中刚刚下载的 <code>zotfile-x.x.x-fx.xpi</code></p>
</li>
<li>
<p>设置zotfile存储目录</p>
<p><code>工具</code>-<code>Zotfile Preference</code>-<code>General Settings</code></p>
<p><img data-src="/posts/6349216c/ScreenShot%202019-12-10%2012.27.43.png" alt="ScreenShot 2019-12-10 12.27.43"></p>
<p>其中自定义附件所在子文件夹：写<code>/%c/&#123;</code> <code>%t&#125;&#123;-%y&#125;&#123;-%a&#125;</code>，意为：</p>
<p>条目<code>&lt;subfolder1&gt;/&lt;subfolder2&gt;/.../&lt;subfoldern&gt;/&lt;item&gt;</code> 的<code>链接附件</code>存放在<code>自定义目录</code>=</p>
<p><code>&lt;链接附件根目录&gt;/&lt;subfolder1&gt;/&lt;subfolder2&gt;/.../&lt;subfoldern&gt;/&lt;item的标题&gt;-&lt;年份&gt;-&lt;作者&gt;/</code> (若年份、作者没有 则略去)</p>
</li>
<li>
<p>设置用zotfile同步的文件格式</p>
<p><code>工具</code>-<code>Zotfile Preference</code>-<code>Advanced Settings</code>，填写下栏文件格式</p>
<p><img data-src="/posts/6349216c/ScreenShot%202019-12-10%2012.54.22.png" alt="ScreenShot 2019-12-10 12.54.22"></p>
</li>
<li>
<p>zotfile关闭重命名</p>
<p>效果：此设置后，用zotfile重命名附件时，<code>附件文件</code>的文件名不会改，仅移动它到上述<code>自定义目录</code>中</p>
<p>好处：当条目有多个<code>附件文件</code>时（如 正文.pdf, 翻译.pdf)，不会被zotfile自动重命名成 <code>&lt;item的标题&gt;-&lt;年份&gt;-&lt;作者&gt;n.pdf</code> (n=‘',2,3,4…)</p>
<p>勾选<code>首选项</code>→<code>高级</code>→<code>常规</code>，点<code>设置编辑器</code></p>
<p><img data-src="/posts/6349216c/ScreenShot%202019-12-10%2012.36.54.png" alt="ScreenShot 2019-12-10 12.36.54"></p>
<p>查找<code>extensions.zotfile.disable_renaming</code>，值改成<code>true</code></p>
<p><img data-src="/posts/6349216c/ScreenShot%202019-12-10%2012.38.28.png" alt="ScreenShot 2019-12-10 12.38.28"></p>
</li>
</ul>
<h4 id="移动附件"><a class="header-anchor" href="#移动附件"></a>移动附件</h4>
<ul>
<li>
<p>测试：完成上述配置后，先选中任意一个有pdf附件的条目，点<code>右键-Manage Attachments-Rename Attachments</code>，看看在<code>自定义目录</code>有无该附件、文件名是否未被改动，在zotero里点击该附件看看能否用pdf浏览器打开。若测试成功，则进行下一步。</p>
</li>
<li>
<p>移动所有附件到<code>自定义目录</code>：<code>我的文库</code>-<code>⌘A</code> 全选条目，点<code>右键-Manage Attachments-Rename Attachments</code>。</p>
</li>
</ul>
<h2 id="ipad阅读工作流程"><a class="header-anchor" href="#ipad阅读工作流程"></a>ipad阅读工作流程</h2>
<h3 id="手动选择待读文件"><a class="header-anchor" href="#手动选择待读文件"></a>手动选择待读文件</h3>
<ul>
<li>新建分类“待读”</li>
<li>选中待读条目，拖拽到“待读”，以使“待读”中也添加此条目</li>
<li>选刚才的条目，<code>右键</code>-<code>Manage Attachments</code>-<code>Rename Attachments</code>，弹出对话框问选择哪个分类作为<code>自定义路径</code>，选“待读”</li>
<li>在iPad上打开<code>Dropbox/Zotero_sync/linked_files/待读/&lt;item&gt;/附件名</code>，开始批注；亦可同时用mac来批注</li>
<li>当此文件读完，进入“待读”，选择此条目，<code>右键</code>-<code>Manage Attachments</code>-<code>Rename Attachments</code>，弹出对话框问选择哪个分类作为<code>自定义路径</code>，皆不选“待读”；然后选择此条目，<code>右键</code>-<code>从分类中移除条目</code></li>
</ul>
<p>优点：可以避免下述tablet的两个缺点</p>
<h3 id="其他方案：Zotfile-Tablet"><a class="header-anchor" href="#其他方案：Zotfile-Tablet"></a>其他方案：Zotfile - Tablet</h3>
<p>配置：<code>工具</code>-<code>Zotfile Preference</code>-<code>Tablet Settings</code>, 填写如下</p>
<p><img data-src="/posts/6349216c/ScreenShot%202019-12-10%2014.07.24.png" alt="ScreenShot 2019-12-10 14.07.24"></p>
<p>使用：</p>
<ul>
<li>
<p>选中待读的条目或附件，<code>右键</code>-<code>Manage Attachments</code>-<code>Send To Tablet</code></p>
<p>作用：在<code>Dropbox/Zotero_sync/tablet/</code> 下会添加此条目或附件，zotero的左栏中<code>Tablet Files</code>也会添加它</p>
</li>
<li>
<p>在iPad上从Dropbox点开此文件，阅读批注之。当批注后，左栏中<code>Tablet Files (modified)</code>也会添加它。</p>
</li>
<li>
<p>在左栏中<code>Tablet Files (modified)</code>选中批注完的文件，<code>右键</code>-<code>Manage Attachments</code>-<code>Get To Tablet</code></p>
<p>作用：从<code>Dropbox/Zotero_sync/tablet/</code>移动附件到文库中相应条目，覆盖原附件， <code>Tablet Files</code>、<code>Tablet Files (modified)</code>中删除它</p>
</li>
</ul>
<p>缺点：</p>
<ul>
<li>如果同时修改了tablet中的附件（用iPad）和 文库中对应的附件（用电脑），则<code>get from tablet</code>时会冲突，无法自动merge修改</li>
<li>get from tablet 后 <code>&lt;tablet&gt;</code>目录下会留下空的子文件夹</li>
</ul>
<h2 id="全文搜索"><a class="header-anchor" href="#全文搜索"></a>全文搜索</h2>
<p>Zotero可以搜索pdf中的英文，但不支持pdf中的中文</p>
<p>搜索栏输入<code>“搜索内容”</code>，表示严格匹配；<code>搜索内容</code> 表示非严格匹配</p>
<h2 id="设置默认阅读器"><a class="header-anchor" href="#设置默认阅读器"></a>设置默认阅读器</h2>
<p>在zotero的<code>设置</code>-<code>常规</code>-<code>Reader</code>里，把<code>打开pdf使用</code>设置为<code>系统默认</code>或<code>自定义</code>，这样双击条目/pdf附件时，就能用选中的阅读器打开。</p>
<p><img data-src="/posts/6349216c/iShot_2024-06-11_15.09.51.png" alt="iShot_2024-06-11_15.09.51"></p>
<h2 id="Zotero自带的pdf阅览器"><a class="header-anchor" href="#Zotero自带的pdf阅览器"></a>Zotero自带的pdf阅览器</h2>
<h3 id="pdf注释"><a class="header-anchor" href="#pdf注释"></a>pdf注释</h3>
<p>参考：<a href="https://www.zotero.org/support/kb/annotations_in_database">zotero官方说明：Why does Zotero store PDF annotations in its database instead of in the PDF file?</a></p>
<h3 id="两种pdf注释"><a class="header-anchor" href="#两种pdf注释"></a><strong>两种pdf注释</strong></h3>
<ul>
<li>内嵌注释：由非zotero的pdf阅读器（如mac自带的Preview.app）添加，内嵌在pdf文件内，用非zotero的pdf阅读器和zotero的pdf阅读器打开都可以看见注释。在zotero的pdf阅读器内，内嵌注释在左侧栏中带有🔒标记。</li>
<li>分离注释：Zotero&gt;=6.0增加了内置PDF阅读，同时实现了注释（annotation）和附件（如pdf文件）分离，<strong>注释存储在 Zotero 数据库</strong>、而非 PDF 文件内部，用非zotero的pdf阅读器打开附件是看不到注释，只有用pdf阅读器打开都才能看见注释。在zotero的pdf阅读器内，内嵌注释在左侧栏中不带有🔒标记。</li>
</ul>
<h3 id="转换两种注释的方式"><a class="header-anchor" href="#转换两种注释的方式"></a><strong>转换两种注释的方式</strong></h3>
<p>分离注释存储在本地 Zotero 的开放 SQLite 数据库，可使用标准开源工具提取， Zotero 内的插件和外部工具也可以通过 Zotero Web API 访问它们</p>
<h4 id="在zotero的pdf阅读器内转换"><a class="header-anchor" href="#在zotero的pdf阅读器内转换"></a>在zotero的pdf阅读器内转换</h4>
<p>在zotero的pdf阅读器打开附件（pdf文件）后，执行下图操作。</p>
<h5 id="内嵌注释转换为分离注释"><a class="header-anchor" href="#内嵌注释转换为分离注释"></a>内嵌注释转换为分离注释</h5>
<p>在转换后，条目附件（pdf文件）将失去内嵌注释，用非zotero的pdf阅读器打开看不见注释，用zotero的pdf阅读器打开能看见附件，且🔒标记消失。</p>
<p><img data-src="/posts/6349216c/image-20240611143812288.png" alt="image-20240611143812288"></p>
<h5 id="分离注释转换为内嵌注释"><a class="header-anchor" href="#分离注释转换为内嵌注释"></a>分离注释转换为内嵌注释</h5>
<p>点<code>文件</code>-<code>另存为</code>，即可在自己指定的目录另存一个内嵌注释的pdf文件；而非就地改写条目附件（pdf文件），使其注释都变成内嵌注释。</p>
<p><img data-src="/posts/6349216c/image-20240611144542387.png" alt="image-20240611144542387"></p>
<h4 id="批量导出带注释的pdf"><a class="header-anchor" href="#批量导出带注释的pdf"></a>批量导出带注释的pdf</h4>
<p><a href="https://blog.csdn.net/weixin_44786971/article/details/127705556">参考</a></p>
<p>选中需要导出的PDF的条目（可以批量选择），右键选择<code>导出条目</code>。</p>
<p><img data-src="/posts/6349216c/c75bca1d4adf6c7e34947fa97c97d6b9.png" alt="image-20221104174150365"></p>
<p>或在zotero内的条目分组浏览器中，选中<strong>一个分组</strong>（只能选中一个），然后点“导出分类”。</p>
<p><img data-src="/posts/6349216c/image-20240611150220138.png" alt="image-20240611150220138"></p>
<p>（2）勾选<code>导出文件</code>以及<code>包括注释</code>选项，点击右下角的<code>OK</code>按钮。</p>
<p><img data-src="/posts/6349216c/f9627142d8818467bb229067d77bf27c.png" alt="image-20221104174301036"></p>
<p>（3） 输入要保存的名字，以及需要导出的位置，点击<code>Save</code>导出。</p>
<p><img data-src="/posts/6349216c/1cc96c94d21b244a235a1aba6755a4fe.png" alt="image-20221104174429227"></p>
<p>（4） 然后打开文件夹，点击<code>file</code>文件。</p>
<p><img data-src="/posts/6349216c/ac8ada609dc2729dbd9e4c8424657927.png" alt="image-20221104175302624"></p>
<p>（5） 继续点击里边的子文件（如果批量导出的话，子文件有多个)。</p>
<p><img data-src="/posts/6349216c/aab34a6d2533c2f39613ff32f68a7ee7.png" alt="image-20221104175332362"></p>
<p>（6） 然后就能够看到导出的PDF文件了，用非zotero的pdf阅读器打开也能够看见在Zotero里的注释了。</p>
<p>但是，导出分组后的文件夹，将失去分组层级结构，变成下面这个样子：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;分组名称&gt;&#x2F;
    &lt;分组名称&gt;.rdf
    files&#x2F;
        &lt;四位数字编码&gt;&#x2F;一个内嵌了注释的pdf附件 或 一个html附件
        &lt;四位数字编码&gt;&#x2F;一个内嵌了注释的pdf附件 或 一个html附件
        &lt;四位数字编码&gt;&#x2F;...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>因此，用这种方法导出批注，不便于迁移。建议设置默认pdf阅读器为非zotero的pdf阅读器。</p>
<h4 id="将注释保存到附件（pdf文件）"><a class="header-anchor" href="#将注释保存到附件（pdf文件）"></a>将注释保存到附件（pdf文件）</h4>
<h5 id="使用Zotero阅读器内自带的转换功能"><a class="header-anchor" href="#使用Zotero阅读器内自带的转换功能"></a>使用<a href="#%E5%88%86%E7%A6%BB%E6%B3%A8%E9%87%8A%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%86%85%E5%B5%8C%E6%B3%A8%E9%87%8A">Zotero阅读器内自带的转换功能</a></h5>
<p>在文献库中打开文件，右键，点<code>show in folder</code>，</p>
<p><img data-src="/posts/6349216c/image-20240611154607939.png" alt="image-20240611154607939"></p>
<p>用zotero的pdf阅读器打开附件（pdf文件），点<code>文件</code>-<code>另存为</code>，会弹出一个文件浏览器选框，把前面Folder中的附件（pdf）拖入，即导出文件到附件的路径和名字，点<code>Save</code>，就能<strong>让附件（pdf文件）中的注释都变成内嵌注释</strong>。</p>
<h5 id="zotero-IF插件"><a class="header-anchor" href="#zotero-IF插件"></a>zotero IF插件</h5>
<p>说明：截止2024-6-11，Zotero IF插件对于Zotero7.0还没有开发<code>存储注释至PDF</code>功能，<a href="https://github.com/qnscholar/zotero-if/issues/5">参见</a>。</p>
<p><a href="https://blog.csdn.net/weixin_44786971/article/details/127705556">参考</a></p>
<p>（1） 下载并在Zotero里安装好<a href="https://github.com/qnscholar/zotero-if">Zotero IF</a>插件。</p>
<p><img data-src="/posts/6349216c/9506672eea714088cab7d79702ce5528.png" alt="image-20221105163512805"></p>
<p>（2） 打开一篇文献，点击<code>工具</code>，选择<code>存储注释至PDF</code>。</p>
<p><img data-src="/posts/6349216c/66c4b7137999001225938d7880d6e283.png" alt="image-20221105163728056"></p>
<p>（3） 点击<code>OK</code>。</p>
<p><img data-src="/posts/6349216c/7e27159d9c187be2e1e389df91462b0e.png" alt="image-20221105163818543"></p>
<p>（4） 回到首页选择刚才打开的文献，右键选择<code>打开文件位置</code>。</p>
<p><img data-src="/posts/6349216c/ff8ae0969594739af14a47948cb7166d.png" alt="img"></p>
<p>（5） 可以发现注释已经存进了PDF中。</p>
<p><img data-src="/posts/6349216c/487f94ce1d583ec6379e736bccb4b21c.png" alt="image-20221105164118086"></p>
<h1 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h1>
<p><a href="https://github.com/specter119/RefTools">各种文献管理软件使用教程</a></p>
<p><a href="https://github.com/specter119/RefTools/tree/master/zotero">zotero使用教程</a></p>
<p>[#分离注释转换为内嵌注释]:<br>
[# 分离注释转换为内嵌注释]:</p>
]]></content>
      <categories>
        <category>器</category>
        <category>文献管理</category>
      </categories>
  </entry>
  <entry>
    <title>关闭chrome自动升级</title>
    <url>/posts/554a3f45/</url>
    <content><![CDATA[<h1 id="关闭chrome自动升级"><a class="header-anchor" href="#关闭chrome自动升级"></a>关闭chrome自动升级</h1>
<p>请使用用下面两种方法中任意一种方法，关闭chrome自动升级</p>
<h2 id="方法1：删除GooglesoftwareUpdate文件夹"><a class="header-anchor" href="#方法1：删除GooglesoftwareUpdate文件夹"></a>方法1：删除GooglesoftwareUpdate文件夹</h2>
<p>我的mac已采用本方法。</p>
<p><a href="https://www.onctf.com/posts/66c10758.html#2%E3%80%81%E7%A6%81%E7%94%A8%E6%9B%B4%E6%96%B0">参考</a></p>
<p><strong>关闭chrome自动更新</strong></p>
<p>此操作建议在卸载完新版chrome并且还没有安装旧版chrome安装包的时候操作。</p>
<p>终端执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> -rf /Library/Google/GooglesoftwareUpdate
<span class="token function">sudo</span> <span class="token function">mkdir</span> /Library/Google/GooglesoftwareUpdate
<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">444</span> /Library/Google/GooglesoftwareUpdate
<span class="token function">sudo</span> <span class="token function">chown</span> root:wheel /Library/Google/GooglesoftwareUpdate

<span class="token function">sudo</span> <span class="token function">rm</span> -rf /Users/<span class="token environment constant">$USER</span>/Library/Google/GooglesoftwareUpdate
<span class="token function">sudo</span> <span class="token function">mkdir</span> /Users/<span class="token environment constant">$USER</span>/Library/Google/GooglesoftwareUpdate
<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">444</span> /Users/<span class="token environment constant">$USER</span>/Library/Google/GooglesoftwareUpdate
<span class="token function">sudo</span> <span class="token function">chown</span> root:wheel /Users/<span class="token environment constant">$USER</span>/Library/Google/GooglesoftwareUpdate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>原理：删除这两个非空的文件夹，创建只属于root且只读的空文件夹占用这个两个文件夹，以阻止chrome在这两个文件夹下自动创建文件内容，用它们来自动升级chrome。</p>
<p><strong>恢复chrome自动升级</strong></p>
<p>关闭chrome，</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> -rf /Library/Google/GooglesoftwareUpdate
<span class="token function">sudo</span> <span class="token function">rm</span> -rf /Users/<span class="token environment constant">$USER</span>/Library/Google/GooglesoftwareUpdate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>然后直接启动/重装并启动chrome，chrome会在这两个夹下创建文件，用以自动升级chrome。</p>
<h2 id="方法2：用com-google-Keystone-Agent设置"><a class="header-anchor" href="#方法2：用com-google-Keystone-Agent设置"></a>方法2：用com.google.Keystone.Agent设置</h2>
<p>我的mac未采用本方法。</p>
<p><a href="https://zhuanlan.zhihu.com/p/589712005">参考</a></p>
<p>终端执行：</p>
<p><strong>关闭chrome自动更新</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">defaults <span class="token function">write</span> com.google.Keystone.Agent checkInterval <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>之后，手动更新chrome（要使用本功能，就得保留<code>/Library/Google/GoogleSoftwareUpdate/</code>，不能执行<a href="#%E6%96%B9%E6%B3%951%EF%BC%9A%E5%88%A0%E9%99%A4GooglesoftwareUpdate%E6%96%87%E4%BB%B6%E5%A4%B9">方法1</a>）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">open</span> /Library/Google/GoogleSoftwareUpdate/GoogleSoftwareUpdate.bundle/Contents/Resources/CheckForUpdatesNow.command
<span class="token comment"># 或者在Finder中双击运行这个文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><strong>恢复chrome自动更新</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">defaults <span class="token function">write</span> com.google.Keystone.Agent checkInterval <span class="token number">18000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="检查是否关闭成功"><a class="header-anchor" href="#检查是否关闭成功"></a>检查是否关闭成功</h2>
<p>关闭成功前，打开chrome，右上角会显示下图。关闭成功后，就不再显示。</p>
<p><img data-src="/posts/554a3f45/image-20241008185244409.png" alt="image-20241008185244409"></p>
<p>关闭成功后，打开chrome后，在<code>关于Google Chrome</code>里会看见如下：</p>
<p><img data-src="/posts/554a3f45/image-20241008181650949.png" alt="image-20241008181650949"></p>
<h1 id="关闭chrome提示“若要接收后续-Google-Chrome-更新-您需使用-macOS-xx-或更高版本”"><a class="header-anchor" href="#关闭chrome提示“若要接收后续-Google-Chrome-更新-您需使用-macOS-xx-或更高版本”"></a>关闭chrome提示“若要接收后续 Google Chrome 更新, 您需使用 macOS xx 或更高版本”</h1>
<p>我的mac已采用本方法。</p>
<p>当最新版本的chrome不再支持你当前的操作系统时，打开Chrome时会弹出如下的提示：</p>
<p><img data-src="/posts/554a3f45/202212111670765306156917.png" alt="202212111670765306156917"></p>
<p><a href="https://blog.csdn.net/penntime/article/details/140508064">参考</a></p>
<p>如果不想升级操作系统，又想不看见这个提示，可以采取下面的操作：</p>
<p>终端执行：</p>
<p><strong>关闭提示</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">defaults <span class="token function">write</span> com.google.Chrome SuppressUnsupportedOSWarning -bool <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>恢复提示</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">defaults delete com.google.Chrome SuppressUnsupportedOSWarning<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="安装任意旧版本chrome"><a class="header-anchor" href="#安装任意旧版本chrome"></a>安装任意旧版本chrome</h1>
<p>chrome&gt;=129不再支持macOS Catalina，只支持macOS&gt;=11。chrome 128是最后一个支持macOS Catalina的版本。</p>
<p>在<a href="https://google-chrome.en.uptodown.com/mac/versions">这个网站</a>可以下载到旧版chrome。</p>
<p>我的我的mac已采样本方法，安装chrome 128。并用上面提到的方法，关闭了chrome自动升级，关闭了“若要接收后续 Google Chrome 更新, 您需使用 macOS xx 或更高版本”提示。</p>
]]></content>
      <categories>
        <category>器</category>
        <category>浏览器</category>
      </categories>
  </entry>
  <entry>
    <title>所见即所得的markdown编辑器</title>
    <url>/posts/d2e1cbe8/</url>
    <content><![CDATA[<h1 id="Markdown软件对比"><a class="header-anchor" href="#Markdown软件对比"></a>Markdown软件对比</h1>
<table>
<thead>
<tr>
<th>软件</th>
<th>Typora</th>
<th>MarkText</th>
<th>vscode插件<code>Office Viewer(Markdown Editor)</code></th>
<th>浏览器端markdown编辑器<code>vditor</code></th>
<th>Obsidian</th>
</tr>
</thead>
<tbody>
<tr>
<td>所见即所得</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>左代码右预览</td>
<td>不支持</td>
<td>不支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>第三方插件</td>
<td>支持(<a href="https://github.com/typora-community-plugin/typora-community-plugin">插件管理器的下载安装链接</a>，但插件管理器bug多，社区不成熟）</td>
<td><a href="https://github.com/marktext/marktext/issues/224#issuecomment-385655314">计划在 v1.0.0 发布之后添加插件机制，以及自定义主题</a></td>
<td>需要与其他vscode插件兼容</td>
<td>不支持</td>
<td>是</td>
</tr>
<tr>
<td>官方下载链接</td>
<td><a href="https://typora.io">https://typora.io</a></td>
<td><a href="https://www.marktext.cc">https://www.marktext.cc</a></td>
<td><a href="https://marketplace.visualstudio.com/items?itemName=cweijan.vscode-office">https://marketplace.visualstudio.com/items?itemName=cweijan.vscode-office</a></td>
<td>在线工具： <a href="https://vditor.vercel.app">https://vditor.vercel.app</a> ；支持本地部署，需要安装node</td>
<td><a href="https://obsidian.md/">https://obsidian.md/</a></td>
</tr>
<tr>
<td>操作系统</td>
<td>Mac、windows、Linux</td>
<td>Mac、windows、Linux</td>
<td>Mac、windows、Linux</td>
<td>所有操作系统</td>
<td>Mac、windows、Linux、iOS、安卓</td>
</tr>
<tr>
<td>开源否</td>
<td>2021年底前在beta版本期间开源、免费于https://github.com/typora；之后闭源、付费</td>
<td>开源  <a href="https://github.com/marktext/marktext">https://github.com/marktext/marktext</a></td>
<td>开源 <a href="https://github.com/cweijan/vscode-office">https://github.com/cweijan/vscode-office</a></td>
<td>开源 <a href="https://github.com/Vanessa219/vditor">https://github.com/Vanessa219/vditor</a></td>
<td>闭源</td>
</tr>
<tr>
<td>收费否</td>
<td>过往版本(&lt;=0.11.18版本)免费，之后版本付费，或去<a href="https://www.torrentmac.net">MacTorrents</a>下载破解版</td>
<td>免费</td>
<td>免费</td>
<td>下同<code>Office Viewer(Markdown Editor)</code>，因为其内核是<code>vditor</code></td>
<td>个人免费，商用组织收费</td>
</tr>
<tr>
<td>表格</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td></td>
<td>支持</td>
</tr>
<tr>
<td>图</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td></td>
<td>支持</td>
</tr>
<tr>
<td>公式</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td></td>
<td>支持</td>
</tr>
<tr>
<td>内嵌html</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td></td>
<td>支持</td>
</tr>
<tr>
<td>中文界面</td>
<td>支持</td>
<td>原版不支持。请往<a href="https://marktext.weero.net">汉化版官网</a>，但这个版本无法在打开文件夹时向当中的markdown文件内插图。</td>
<td>不支持</td>
<td></td>
<td>支持，但界面汉化不充分</td>
</tr>
<tr>
<td>流畅度</td>
<td>图/公式/字数多时卡顿</td>
<td>图/公式/字数多时流畅</td>
<td>图/公式/字数多时流畅</td>
<td></td>
<td></td>
</tr>
<tr>
<td>用 <code>\tag&#123;&#125;</code> 手动编号</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td></td>
<td>支持</td>
</tr>
<tr>
<td>公式块中align或equation环境自动编号</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td></td>
<td>不支持（除非安装下述插件，但不能设置只给equation和align环境自动编号）</td>
</tr>
<tr>
<td>公式块全部自动编号</td>
<td>支持，可在Typora设置里勾选</td>
<td><strong>不支持</strong></td>
<td><strong>不支持</strong></td>
<td></td>
<td>支持（但需要安装插件<code>MathLinks</code>和<code>LaTeX-like Theorem &amp; Equation Referencer</code>（<code>Mathlinks</code>是其依赖项），可以设置仅被引用的公式会自动编号、或任何公式都自动编号）</td>
</tr>
<tr>
<td>公式中使用<code>\label</code> <code>\eqref</code> <code>\ref</code></td>
<td>支持</td>
<td><strong>不支持，整个公式块无法渲染 并报错</strong></td>
<td><strong>不支持，整个公式块能渲染，但这几条命令处渲染错误并报错</strong></td>
<td></td>
<td><strong>不支持</strong>。偶尔能渲染正确，但一编辑公式，公式渲染和引用渲染就报错，<a href="https://forum-zh.obsidian.md/t/topic/10411">参见</a>。安装<code>MathLinks</code>和<code>LaTeX-like Theorem &amp; Equation Referencer</code>后，敲<code>\eqref</code>后就会弹出下拉菜单，可以选择需要引用的公式，但是使用的是markdown方言：在公式下方添加<code>^公式hash</code>，用<code>[[#^公式hash]]</code>引用公式。</td>
</tr>
<tr>
<td>公式是否支持诸如<code>\dd</code>这类的命令</td>
<td>支持</td>
<td>不支持。且无法像Obsidian那样<a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%AC%E5%BC%8F%E5%91%BD%E4%BB%A4">自定义公式命令</a></td>
<td>不支持。且无法像Obsidian那样<a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%AC%E5%BC%8F%E5%91%BD%E4%BB%A4">自定义公式命令</a>。但可以安装插件<code>*Markdown+Math</code>，在vscode的配置文件中，加入诸如下面的配置：<code>&quot;mdmath.macros&quot;: &#123;  &quot;\\dd&quot;: &quot;\\mathrm&#123;d&#125;&quot;, &quot;\\tr&quot;: &quot;\\mathrm&#123;tr&#125;&quot;&#125;</code>，这样就能支持。</td>
<td></td>
<td>不支持。Obsidian使用的公式引擎MathJax默认不支持这些命令。<strong>需要安装插件</strong><code>Extended MathJax</code>，并在仓库根目录自行创建 <code>preamble.sty</code>文件，然后用文本编辑器向其中<strong>写入需要加载的latex包，和自定义命令</strong>（诸如<code>\require&#123;包的名字&#125;</code> <code>\newcommand&#123;\dd&#125;&#123;\operatorname&#123;d&#125;&#125;</code>），然后重启Obsidian。</td>
</tr>
<tr>
<td>在文件夹内显示<code>*.textbundle</code></td>
<td><strong>不支持</strong></td>
<td>支持</td>
<td>支持</td>
<td></td>
<td>支持</td>
</tr>
<tr>
<td>直接打开<code>*.textbundle</code></td>
<td>支持（打开方式见下文说明）</td>
<td>支持（打开方式同Typora）</td>
<td>支持（无需额外设置）</td>
<td></td>
<td>支持，但必须在仓库内的才能打开。详见<a href="https://forum.obsidian.md/t/textbundle-support/3585">TextBundle support</a></td>
</tr>
<tr>
<td>通过拖拽/<code>⌘+V</code>向<code>*.textbundle/assets</code>插入图片</td>
<td>支持（需要配置插图自动复制到<code>./assets</code>）</td>
<td>支持不充分：<br>1. 原版：当设置插图路径为<code>assets</code>时：若打开一markdown文件，则把插图复制到此文件所在目录下的<code>assets</code>子文件夹内；但若打开一文件夹，则复制插图到文件夹根目录下的<code>assets</code>子文件夹内。详见 <a href="https://github.com/marktext/marktext/blob/develop/docs/IMAGES.md">官方说明</a>。<br>2.<a href="https://marktext.weero.net">汉化版</a>：不管如何设置插图路径，在打开文件夹时，都无法向当中的markdown文件内插图</td>
<td>支持（需要配置插图自动复制到<code>./assets</code>，即向vscode的用户配置文件添加：<code>&quot;vscode-office.pasterImgPath&quot;: &quot;$&#123;workspaceDir&#125;/assets/$&#123;now&#125;.png&quot;, &quot;vscode-office.workspacePathAsImageBasePath&quot;: true,</code>）</td>
<td></td>
<td>支持，但需要对<strong>每一个仓库</strong>都修改<code>Preference</code>如下<img data-src="/posts/d2e1cbe8/image-20240718144948659.png" alt="image-20240718144948659"><br><strong>文件与链接</strong>：<br>* 内部链接类型：基于当前笔记的相对路径<br>* 使用wiki链接：关闭<br>* 附件默认存放路径：当前文件所在文件夹下指定的子文件夹<br>* 子文件夹名称：<code>assets</code></td>
</tr>
<tr>
<td>在文件夹内搜索文本</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td></td>
<td></td>
</tr>
<tr>
<td>打开<code>.markdown</code> <code>.txt</code>文件</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td></td>
<td>支持（默认只能打开<code>md</code>文件；需要安装插件<code>Custom File Extensions</code>, 并设置<code>&#123; &quot;markdown&quot;: [ &quot;&quot;, &quot;md&quot;, &quot;markdown&quot;, &quot;txt&quot;, 等 ] &#125;</code> 表示这些后缀的文件都用markdown格式打开）</td>
</tr>
<tr>
<td>打开任何位置的文件</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td></td>
<td>不支持（除非安装<a href="https://gitlab.com/BvdG/obsidian-everywhere">脚本</a>）</td>
</tr>
<tr>
<td>sequence制图</td>
<td>支持</td>
<td>汉化版支持</td>
<td>不支持</td>
<td></td>
<td>不支持</td>
</tr>
<tr>
<td>flow制图</td>
<td>支持</td>
<td>汉化版不支持</td>
<td>不支持</td>
<td></td>
<td>不支持</td>
</tr>
<tr>
<td>mermaid制图</td>
<td>支持（但我的电脑上有bug，Typora 1.8.4，MacOS 10.15.7，会显示<code>Painting Diagram ...</code>）</td>
<td>汉化版支持</td>
<td>支持</td>
<td></td>
<td>支持</td>
</tr>
</tbody>
</table>
<p>说明：</p>
<ul>
<li>
<p><code>*.textbundle</code>的打开方式方式：</p>
<ul>
<li>
<p>Typora和MarkText打开<code>*.textbundle</code>的方式：</p>
<ul>
<li>
<p>在Typora和MarkText内，点<code>文件</code>-<code>打开</code>(不论是以文件还是文件夹)，无法打开<code>*.textbundle</code></p>
</li>
<li>
<p>在<code>Finder</code>-单击右键-<code>打开方式</code>-<code>其它</code>-选择用Typora或MarkText打开，可以打开。</p>
</li>
<li>
<p>在<code>Finder</code>-单击右键-<code>显示简介</code>-<code>打开方式</code>-设置用Typora或MarkText打开，然后双击<code>*.textbundle</code>，可以打开。</p>
</li>
<li>
<p>在终端，<code>open -a Typora或Marktext xxxx.textbundle</code>，可以打开。</p>
</li>
</ul>
</li>
<li>
<p>在vscode（使用插件<code>Office Viewer(Markdown Editor)</code>）中，上述方法都能打开<code>*.textbundle</code>。</p>
</li>
</ul>
</li>
<li>
<p>vscode插件<code>Office Viewer(Markdown Editor)</code>插件的内核和前身：</p>
<ul>
<li>
<p>vscode插件<code>Markdown Editor</code>  <a href="https://marketplace.visualstudio.com/items?itemName=zaaack.markdown-editor">https://marketplace.visualstudio.com/items?itemName=zaaack.markdown-editor</a> 在2021年后就不再更新发布了。不推荐使用。</p>
</li>
<li>
<p>vscode插件<code>Office Viewer(Markdown Editor)</code>集成了<code>Markdown Editor</code> 的功能，并且还支持office文档（ppt、word、excel）的预览。更新发布至今（2023年底）。推荐使用。</p>
</li>
<li>
<p><code>Markdown Editor</code>和<code>Office Viewer(Markdown Editor)</code>的内核都是 浏览器端markdown编辑器<code>vditor</code>。</p>
</li>
</ul>
</li>
</ul>
<h1 id="关于Obsidian的说明"><a class="header-anchor" href="#关于Obsidian的说明"></a>关于Obsidian的说明</h1>
<ul>
<li>
<p>Obsidian的Preference（<code>⌘+,</code>）都是对仓库而言的，每个仓库的Preference相互独立，每开一个新仓库都要从头设置.</p>
</li>
<li>
<p>MathJax支持的包：<a href="https://docs.mathjax.org/en/latest/input/tex/extensions/index.html">详见</a>。现在（2024年7月）已经默认支持<code>mhchem</code>了，因而Obsidian的公式也支持使用<code>mhchem</code>包了。</p>
</li>
<li>
<p>在Obsidian中，对单个md文件加载latex包/自定义公式命令的方法：在md文件开头，写形如下面的内容，就能让后面的公式使用这些包/命令。<a href="https://forum.obsidian.md/t/import-custom-latex-commands-to-notes/13561">详见</a><a name="自定义公式命令"></a></p>
  <pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">$\require&#123;需要加载的包&#125;$
$\newcommand&#123;\dd&#125;&#123;\operatorname&#123;d&#125;&#125;$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="我的配置思路"><a class="header-anchor" href="#我的配置思路"></a>我的配置思路</h2>
<ul>
<li>
<p>日常笔记需要手机上写，同步到电脑的，可以开一个仓库，用onedrive+remotely save实现同步，不安装支持公式和textbundle的脚本，笔记都用md文件，在本目录/assets/下保存图像</p>
</li>
<li>
<p>只在电脑上写的技术笔记，再开另一个仓库，安装支持公式和textbundle的脚本。</p>
</li>
</ul>
<h2 id="obsidian如何同步笔记"><a class="header-anchor" href="#obsidian如何同步笔记"></a>obsidian如何同步笔记</h2>
<ul>
<li>每次 iPhone 打开 Obsidian 都需要同步 iCloud，当 vault 较大时，时间会很久。这个说法<a href="https://zhuanlan.zhihu.com/p/531516583">来自</a>。</li>
</ul>
<p>我亲自试过在iphone上，把obsidian的仓库设置在iCloud中，每次开启手机上的Obsidian都需要等十多秒，让iCloud把仓库配置文件（在./obsidian里）重新下载下来。Obsidian官方说，这是因为iCloud会自动从本地删除./obsidian（我猜可能是因为它是隐藏文件才被删掉），而iCloud不提供阻止删除本地文件的设置，所以建议用其他云盘搞同步。现在我用了onedrive同步仓库，iphone上能够秒开Obsidian。</p>
<ul>
<li>
<p>obsidian官方的同步太贵，一个月：10美元（月付）/8美元（年付）。<a href="https://publish.obsidian.md/chinesehelp/06+ob%E5%AE%98%E6%96%B9%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%EF%BC%88%E8%8A%82%E9%80%89%EF%BC%89/Obsidian+%E5%90%8C%E6%AD%A5%E6%9C%8D%E5%8A%A1+by+ob%E5%AE%98%E6%96%B9">使用方法参见</a>。</p>
</li>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/531516583">用github同步</a></p>
</li>
<li>
<p>第三方云盘全平台同步方案 ：Remotely save，<a href="https://publish.obsidian.md/chinesehelp/03+%E6%95%99%E7%A8%8B/2022%E5%B9%B43%E6%9C%88%E5%A6%82%E4%BD%95%E5%90%8C%E6%AD%A5obsidian%E6%96%87%E4%BB%B6%EF%BC%88%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93%EF%BC%89">参见</a></p>
<p>支持的云盘：</p>
<ul>
<li>Amazon S3 or S3-compatible (Cloudflare R2 / BackBlaze B2 / MinIO / …)</li>
<li>Dropbox</li>
<li>OneDrive for personal (App Folder)</li>
<li>OneDrive for personal (Full) (PRO feature)</li>
<li>Webdav (NextCloud / InfiniCloud / Synology webdav server / seafile（<strong>好像是支持清华云盘的，等结束休学后试试</strong>）…)</li>
<li>Webdis</li>
<li>Google Drive (GDrive) (PRO feature)</li>
<li>Box (PRO feature)</li>
<li>pCloud (PRO feature)</li>
<li>Yandex Disk (PRO feature)</li>
<li>Koofr (PRO feature)</li>
<li>Azure Blob Storage (PRO feature)</li>
<li><a href="https://github.com/remotely-save/remotely-save/blob/master/docs/services_connectable_or_not.md">Here</a> shows more connectable (or not-connectable) services in details.</li>
</ul>
<p>教程：<a href="https://publish.obsidian.md/chinesehelp/01+2021%E6%96%B0%E6%95%99%E7%A8%8B/Remotely+save%EF%BC%88%E5%90%8C%E6%AD%A5%E6%8F%92%E4%BB%B6%EF%BC%89">Remotely save（同步插件）</a>是本周讨论最火的插件，教程中已经收录了许多内容：</p>
<ul>
<li><a href="https://publish.obsidian.md/chinesehelp/01+2021%E6%96%B0%E6%95%99%E7%A8%8B/Obsidian+%E5%90%8C%E6%AD%A5+Remotely+Save+S3+%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97+by+%E6%81%90%E5%92%96%E5%85%B5%E7%B3%96">Obsidian 同步 Remotely Save S3 配置指南 by 恐咖兵糖</a></li>
<li><a href="https://publish.obsidian.md/chinesehelp/01+2021%E6%96%B0%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%90%8C%E6%AD%A5%E6%8F%92%E4%BB%B6%EF%BC%88Remotely+save%E4%BB%8B%E7%BB%8D%EF%BC%89+by+%E8%BD%AF%E9%80%9A%E8%BE%BE">第三方同步插件（Remotely save介绍） by 软通达</a>:Dropbox</li>
<li><a href="https://publish.obsidian.md/chinesehelp/01+2021%E6%96%B0%E6%95%99%E7%A8%8B/Obsidian+Remotely+Save+%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0%E7%94%B5%E8%84%91%E5%92%8C%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%90%8C%E6%AD%A5+by+yaozhuwa">Obsidian Remotely Save 插件实现电脑和移动端同步 by yaozhuwa</a>:onedrive方式</li>
<li><a href="https://publish.obsidian.md/chinesehelp/01+2021%E6%96%B0%E6%95%99%E7%A8%8B/%E6%9C%80%E8%88%92%E6%9C%8D%E7%9A%84Obsidian%E7%AC%AC%E4%B8%89%E6%96%B9%E5%A4%9A%E7%AB%AF%E5%90%8C%E6%AD%A5+by+%E7%BB%B4%E5%AE%A2%E7%AC%94%E8%AE%B0">最舒服的Obsidian第三方多端同步 by 维客笔记</a>：Dropbox</li>
<li><a href="https://publish.obsidian.md/chinesehelp/01+2021%E6%96%B0%E6%95%99%E7%A8%8B/remotely%E6%8F%92%E4%BB%B6%E6%90%AD%E9%85%8D%E8%85%BE%E8%AE%AF%E4%BA%91cos%E6%95%99%E7%A8%8B+by+%E5%85%AB%E5%AE%9D%E5%91%A8">remotely插件搭配腾讯云cos教程 by 八宝周</a>：腾讯云，S3</li>
<li><a href="https://publish.obsidian.md/chinesehelp/01+2021%E6%96%B0%E6%95%99%E7%A8%8B/Obsidian%E9%80%9A%E8%BF%87Remotely+save%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%9D%9A%E6%9E%9C%E4%BA%91%E5%90%8C%E6%AD%A5+by+BCS">Obsidian通过Remotely save插件实现坚果云同步 by BCS</a>：坚果云，webdav</li>
<li><a href="https://publish.obsidian.md/chinesehelp/01+2021%E6%96%B0%E6%95%99%E7%A8%8B/Obsidian%E4%BD%BF%E7%94%A8Remotely+Save+%E5%92%8C%E9%98%BF%E9%87%8C%E4%BA%91+OSS+%E5%AE%9E%E7%8E%B0%E5%A4%9A%E5%B9%B3%E5%8F%B0%E5%90%8C%E6%AD%A5+by+zm">Obsidian使用Remotely Save 和阿里云 OSS 实现多平台同步 by zm</a>：阿里云oss，S3</li>
</ul>
<p>推荐使用阿里云或腾讯云的s3服务。</p>
</li>
</ul>
<h2 id="我采用的解法：Remotely-Save-OneDrive"><a class="header-anchor" href="#我采用的解法：Remotely-Save-OneDrive"></a>我采用的解法：Remotely Save+OneDrive</h2>
<p><a href="https://forum-zh.obsidian.md/t/topic/34268">Remotely Save+oneDrive</a></p>
<p>参考：<a href="https://forum-zh.obsidian.md/t/topic/5291">配置方法</a></p>
<p>Remotely Save插件可以访问OneDrive等云盘的api，无需安装OneDrive.app并将obsidian库直接放同步盘内，就实现库和OneDrive的同步。</p>
<p>方法一，电脑 OneDrive同步盘 + 手机 Remotely Save**（推荐）**，<strong>不同步配置</strong>：</p>
<ul>
<li>
<p>mac：安装OneDrive.app，obsidian库直接放在OneDrive在Mac的同步盘内，不安装Remotely Save（或安装了但不启用）。</p>
</li>
<li>
<p>iphone：不安装OneDrive.app，因为iphone上的obsidian库只能放在<code>iCloud/Obsidian</code>和<code>我的iphone/Obsidian</code>，不能放在OneDrive在iphone上的同步盘内，安装Remotely Save，并<strong>关闭</strong> <code>同步配置文件夹</code>（否则会把Remotely Save插件、Remotely Save需要同步到OneDrive的配置 给同步到mac上的OneDrive同步盘内，这样mac上使用obsidian时，就会同时通过Remotely Save和OneDrive.app两个软件同时去同步，造成额外的计算开销和能耗，且可能造成冲突）。</p>
</li>
</ul>
<p>法二，所有设备都安装Remotely Save，可以开同步配置，也可以关同步配置：</p>
<ul>
<li>如果所有设备的库没有放在OneDrive同步盘内，则需要所有设备都安装Remotely Save，可以设置开启/关闭 <code>同步配置文件夹</code>。</li>
<li>并不推荐直接同步配置文件，因为可能带来一些Obsidian设置的冲突。开启同步配置文件前，请做好备份。（<a href="https://forum-zh.obsidian.md/t/topic/34268/3">来源</a>）</li>
</ul>
<h2 id="自动下载图片"><a class="header-anchor" href="#自动下载图片"></a>自动下载图片</h2>
<p>然后现在我还有一个技术问题解决不了：没法在iphone从Safari自动下载图像到obsidian的笔记：</p>
<ul>
<li>如果是从浏览器把选中的图文，复制黏贴到obsidian里，图片的链接是<code>![xxx](https://图像的url)</code>，而不会自动下载到仓库里的assets/文件夹；需要等同步到电脑上，再用Local Image Plus插件来下载，这个插件不支持iOS。如果不及时下载图像，可能帖子被删，图像丢失。</li>
<li>如果是把选中图文从浏览器/ios的备忘录，拖拽到obsidian里，就会转换成 <code>![xxx](blob:capacitor://localhost/图像名称.扩展名)</code>，能正常渲染图像，但重启obsidian后，就无法渲染图像里，这个本地连接找不到了。</li>
</ul>
<p><a href="https://forum.obsidian.md/t/automatically-download-pictures-to-the-attachment-folder/12923">自动下载图片的方法</a></p>
<ul>
<li>法一：Obsidian安装Local Image Plus插件，但这个插件支持mac，不支持iOS，不晓得是否支持安卓</li>
<li>法二：浏览器安装插件：<a href="https://github.com/deathau/markdownload%EF%BC%8CFirefox">https://github.com/deathau/markdownload，Firefox</a>, Google Chrome, Microsoft Edge and Safari.都可用，但这个插件不支持iOS上的Safari，不晓得是否支持安卓上的Chrome浏览器</li>
</ul>
<h2 id="剪藏"><a class="header-anchor" href="#剪藏"></a>剪藏</h2>
<p>法一：</p>
<p><a href="https://immmmm.com/obsidian-clipper/">Obsidian 一键剪藏[WEB/iOS]</a></p>
<p>【Obsidian全文剪藏—利用ios快捷指令实现全文剪藏】 <a href="https://www.bilibili.com/video/BV1vT4y1U7Rv/">https://www.bilibili.com/video/BV1vT4y1U7Rv/</a></p>
<p>法二：</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=Mzg5Njk3MDUyMQ==&amp;mid=2247487371&amp;idx=1&amp;sn=8f53a612611904a5e2137346942e1f20&amp;source=41#wechat_redirect">利用ios指令提升移动端obsidian使用体验</a></p>
<ul>
<li>试了这个方法，在safari中对知乎帖子用<code>Ob全文剪藏</code>的快捷指令，会报错，在下载知乎网页时无法运行。不论知乎网页是允许转载还是禁止转载，都会这样。</li>
<li>试了这个方法，微信帖子能<code>全文剪藏</code>，但笔记里是<code>![xxx](https://图像的url)</code>形式，不会自动下载图像到仓库。</li>
</ul>
<p>法三：简悦：有obsidian配置懒人包</p>
<ul>
<li>github：<a href="https://github.com/Kenshin/simpread">https://github.com/Kenshin/simpread</a></li>
<li>官网：<a href="http://ksria.com/simpread/">http://ksria.com/simpread/</a></li>
<li>文档：<a href="http://ksria.com/simpread/docs/">http://ksria.com/simpread/docs/</a></li>
<li>简阅选择离线模式，会把图片下载下来，以base64格式保存，不太直观。详见：<a href="https://github.com/Kenshin/simpread/discussions/2221">https://github.com/Kenshin/simpread/discussions/2221</a></li>
</ul>
<p><a href="https://publish.obsidian.md/chinesehelp/07+%E4%BF%A1%E6%81%AF%E6%BA%90%E4%B8%8E%E8%B4%A1%E7%8C%AE%E8%80%85/%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E7%BD%91%E9%A1%B5%E5%89%AA%E8%97%8F%EF%BC%88MOC%EF%BC%89">其他剪藏方案汇总</a></p>
<h2 id="加密"><a class="header-anchor" href="#加密"></a>加密</h2>
<p>obsidian加密工具比较</p>
<table>
<thead>
<tr>
<th>插件名称</th>
<th>本地是否保存密码</th>
<th>加密对象</th>
<th>不加密的对象</th>
<th>加密算法</th>
<th>介绍</th>
<th>支持的OS</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Remotely Save</strong></td>
<td>是，密码以明文保存在本地配置中</td>
<td>在云上保存的整个仓库</td>
<td>本地的整个仓库</td>
<td>RClone Cryppt/OpenSSL enc</td>
<td>本地仓库内的文件以明文保存，云端的文件以密文保存，本地和云之间用密文通信。可以实现多台本地设备上仓库的同步，且网络流量、云文件都是加密的。</td>
<td>mac, iOS</td>
<td><strong>仓库内文件多时同步很慢</strong>。因为每次同步时，需要将本地和云上的所有文件的元数据（如时间戳）做对比，然后开始同步。<a href="https://github.com/remotely-save/remotely-save/issues/688#issuecomment-2143695087">详见</a>。<br><strong>改进思路</strong>：若一个文件夹在本地和云上的元数一致，则说明整个文件夹及其内文件都不需要同步。</td>
</tr>
<tr>
<td>Encryption</td>
<td></td>
<td>仓库内的选中的文件夹</td>
<td>仓库内其他文件夹，包括</td>
<td></td>
<td><a href="https://wenku.csdn.net/answer/28d21b0a2bd54327a0148f80f3272d52">https://wenku.csdn.net/answer/28d21b0a2bd54327a0148f80f3272d52</a></td>
<td>mac, iOS</td>
<td></td>
</tr>
<tr>
<td>Cryptsidian</td>
<td></td>
<td>整个仓库内所有文件，包括md和图像</td>
<td>文件名、文件夹名</td>
<td></td>
<td></td>
<td>mac, <s>iOS</s></td>
<td>1. 解码错误不报错，会直接充写文件，造成不可逆损坏 2. 加密后不能打开文件并保存，不然无法解密 3. 每次解密后重新加密需要重新输入密码 4. 解密需要两次输入密码核对一致</td>
</tr>
<tr>
<td><strong>Meld Encrypt</strong></td>
<td>超时前会记住密码</td>
<td>单个md文件、md内选中文本</td>
<td>仓库内其他文件，包括所有图像</td>
<td>AES256</td>
<td><a href="https://github.com/meld-cp/obsidian-encrypt">https://github.com/meld-cp/obsidian-encrypt</a></td>
<td>mac, iOS</td>
<td>1. 无法对整个文件夹加密，<a href="https://github.com/meld-cp/obsidian-encrypt/pull/100">详见</a> 2. 无法对笔记中的图像加密，3. 解密的md文件，无法进入编辑模式，只能进入预览模式（无法显示图像）、源码模式，只有将md文件解除加密才能解决这个问题，但之后要重新加密，4. 无法设置整个仓库用同一个密码，每次加密md笔记都要第二次输入密码（好在第一次输入的密码默认用上次用过的密码）</td>
</tr>
</tbody>
</table>
<p><a href="https://forum-zh.obsidian.md/t/topic/4660/8">文件系统加密软件比较</a></p>
<table>
<thead>
<tr>
<th>插件名称</th>
<th>本地是否保存密码</th>
<th>加密对象</th>
<th>不加密</th>
<th>加密算法</th>
<th>介绍</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>Cryptomator</td>
<td></td>
<td>整个仓库，选中的文件夹。加密后文件与解密文件一一对应，但文件名及文件夹结构也是加密的。</td>
<td></td>
<td></td>
<td></td>
<td>在iOS上无法把仓库选在Cryptomator加密的文件夹内 <a href="https://forum.obsidian.md/t/allow-custom-vault-in-mobile-app/60879">详见</a></td>
</tr>
<tr>
<td>veracrypt</td>
<td></td>
<td>开源免费加密工具，安全性高，但同步不很方面。加密后文件为一个单文件，解密为一个虚拟盘符。</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p><a href="https://forum-zh.obsidian.md/t/topic/3222/24">比较Cryptsidian, Cryptsidian,Cryptomator,veracrypt</a></p>
<p>本地使用推荐veracrypt、cryptomator，结合网盘使用推荐cryptomator。</p>
<h1 id="Typora卡顿"><a class="header-anchor" href="#Typora卡顿"></a>Typora卡顿</h1>
<p>解决Typora字数过多造成卡顿现象 <a href="https://blog.csdn.net/qq_46921028/article/details/131896316">https://blog.csdn.net/qq_46921028/article/details/131896316</a></p>
<p>win10上Typora卡顿的问题及其解决方案 <a href="https://blog.csdn.net/Mao_Jonah/article/details/120533879">https://blog.csdn.net/Mao_Jonah/article/details/120533879</a></p>
<h1 id="解决KaTex不支持-label-eqref-ref"><a class="header-anchor" href="#解决KaTex不支持-label-eqref-ref"></a>解决KaTex不支持<code>\label</code> <code>\eqref</code> <code>\ref</code></h1>
<ul>
<li>
<p>KaTex不打算官方支持<code>\label</code> <code>\eqref</code> <code>\ref</code></p>
</li>
<li>
<p>可以自行修改KaTex配置</p>
</li>
</ul>
<h2 id="本地html"><a class="header-anchor" href="#本地html"></a>本地html</h2>
<p>参照 <a href="https://github.com/KaTeX/KaTeX/issues/2003#issuecomment-843991794">#2033 (comment)</a>的思路 和 <a href="https://github.com/KaTeX/KaTeX/issues/2003#issuecomment-1236245418">样例配置</a>，有如下demo代码。新建文件<code>demo.html</code>，将下面代码复制进去，然后用浏览器打开，</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>KaTeX-DOM Eq. Ref Test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-g7c+Jr9ZivxKLnZTDUhnkOnsh30B4H0rpLUpJ4jAIKs4fnJI+sEnkvrMWph2EDg4<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/contrib/auto-render.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha384-mll67QQFJfxn0IYznZYonOWZ644AWYC+Pt2cHqMaRhXVrursRwvLnLaebdGIlYNa<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span>
          <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">renderMathInElement</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
            document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMContentLoaded"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">renderMathInElement</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
                    <span class="token comment">// auto-render specific keys</span>
                    delimiters<span class="token operator">:</span> <span class="token punctuation">[</span>
                        <span class="token punctuation">&#123;</span>left<span class="token operator">:</span> <span class="token string">'$$'</span><span class="token punctuation">,</span> right<span class="token operator">:</span> <span class="token string">'$$'</span><span class="token punctuation">,</span> display<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                        <span class="token punctuation">&#123;</span>left<span class="token operator">:</span> <span class="token string">'$'</span><span class="token punctuation">,</span> right<span class="token operator">:</span> <span class="token string">'$'</span><span class="token punctuation">,</span> display<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                        <span class="token punctuation">&#123;</span>left<span class="token operator">:</span> <span class="token string">'\\('</span><span class="token punctuation">,</span> right<span class="token operator">:</span> <span class="token string">'\\)'</span><span class="token punctuation">,</span> display<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                        <span class="token punctuation">&#123;</span>left<span class="token operator">:</span> <span class="token string">'\\['</span><span class="token punctuation">,</span> right<span class="token operator">:</span> <span class="token string">'\\]'</span><span class="token punctuation">,</span> display<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span>
                    <span class="token punctuation">]</span><span class="token punctuation">,</span>
                    <span class="token comment">// render equation with bug</span>
                    throwOnError <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token comment">// support eqref</span>
                    <span class="token function-variable function">trust</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string">'\\htmlId'</span><span class="token punctuation">,</span> <span class="token string">'\\href'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>command<span class="token punctuation">)</span><span class="token punctuation">,</span>
                    macros<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                        <span class="token string">"\\eqref"</span><span class="token operator">:</span> <span class="token string">"\\href&#123;###1&#125;&#123;(\\text&#123;#1&#125;)&#125;"</span><span class="token punctuation">,</span>
                        <span class="token string">"\\ref"</span><span class="token operator">:</span> <span class="token string">"\\href&#123;###1&#125;&#123;\\text&#123;#1&#125;&#125;"</span><span class="token punctuation">,</span>
                        <span class="token string">"\\label"</span><span class="token operator">:</span> <span class="token string">"\\htmlId&#123;#1&#125;&#123;&#125;"</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
        In Eq. $\eqref&#123;eq:1&#125;$ or $\ref&#123;eq:1&#125;$.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>

        $$
        \begin&#123;aligned&#125;
        \sin 2\theta = 2\sin \theta \cos \theta \\ = \cfrac&#123;2 \tan \theta&#125;&#123;1+\tan^2 \theta&#125;
        \end&#123;aligned&#125;
        \label&#123;eq:1&#125; \tag&#123;1&#125;
        $$
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>渲染结果如下：</p>
<p><img data-src="/posts/d2e1cbe8/image-20240126164406069.png" alt="image-20240126164406069"></p>
<p>但本法有个缺点： <code>$\ref&#123;eq:1&#125;$</code> <code>$\eqref&#123;eq:1&#125;$</code> 渲染为’eq:1’而非 ‘1’（即公式编号）。不知是否有方法修补此bug？或是否有其他支持\label \ref \eqref的方法可避免此bug?</p>
<h2 id="vscode插件Markdown-Math"><a class="header-anchor" href="#vscode插件Markdown-Math"></a>vscode插件Markdown+Math</h2>
<p><a href="https://github.com/goessner/mdmath/issues/116#issuecomment-1296210637">思路来源</a></p>
<p>安装vscode插件: <a href="https://github.com/goessner/mdmath">Markdown+Math</a></p>
<p>Reference: <a href="https://github.com/KaTeX/KaTeX/issues/2003#issuecomment-843991794">KaTeX/KaTeX#2003 (comment)</a></p>
<p>在vscode的配置文件中加入如下配置，则vscode的自带markdown分栏预览就能支持<code>\label</code> <code>\eqref</code> <code>\ref</code>，效果见下图</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"mdmath.katexoptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"trust"</span><span class="token operator">:</span> <span class="token string">"(context) => ['\\htmlId', '\\href'].includes(context.command)"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token property">"mdmath.macros"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"\\eqref"</span><span class="token operator">:</span> <span class="token string">"\\href&#123;###1&#125;&#123;(\\text&#123;#1&#125;)&#125;"</span><span class="token punctuation">,</span>
    <span class="token property">"\\ref"</span><span class="token operator">:</span> <span class="token string">"\\href&#123;###1&#125;&#123;\\text&#123;#1&#125;&#125;"</span><span class="token punctuation">,</span>
    <span class="token property">"\\label"</span><span class="token operator">:</span> <span class="token string">"\\htmlId&#123;#1&#125;&#123;&#125;"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img data-src="/posts/d2e1cbe8/image-20240126165126318.png" alt="image-20240126165126318"></p>
<p>相关讨论：</p>
<ul>
<li>
<p>KaTex issue: Support \eqref and \label  <a href="https://github.com/KaTeX/KaTeX/issues/2003">https://github.com/KaTeX/KaTeX/issues/2003</a></p>
</li>
<li>
<p>Referencing formula numbers in articles <a href="https://github.com/falgon/roki-web/issues/34">https://github.com/falgon/roki-web/issues/34</a></p>
</li>
<li>
<p>vscode-markdown公式引用：<a href="https://github.com/yzhang-gh/vscode-markdown/issues/985">https://github.com/yzhang-gh/vscode-markdown/issues/985</a></p>
</li>
<li>
<p><a href="https://github.com/yzhang-gh/vscode-markdown/issues/985#issuecomment-1108580333">https://github.com/yzhang-gh/vscode-markdown/issues/985#issuecomment-1108580333</a></p>
<p>由于这是非官方的做法，不太可能加入到正式支持之中，但是你可以自行修改插件的本地文件在 <code>$HOME/.vscode/extensions/yzhang.markdown-all-in-one-3.4.x/dist/extension.js</code> 中搜索 <code>l=&#123;throwOnError:!1&#125;</code> 并替换为 <code>l=&#123;throwOnError:!1, trust: true&#125;</code></p>
</li>
</ul>
<p>我的github评论：</p>
<ul>
<li>
<p>demo html:</p>
<ul>
<li><a href="https://github.com/KaTeX/KaTeX/issues/2003#issuecomment-1911672998">https://github.com/KaTeX/KaTeX/issues/2003#issuecomment-1911672998</a></li>
</ul>
</li>
<li>
<p>Markdown+Math配置：</p>
<ul>
<li><a href="https://github.com/falgon/roki-web/issues/34#issuecomment-1911694713">https://github.com/falgon/roki-web/issues/34#issuecomment-1911694713</a></li>
<li><a href="https://github.com/yzhang-gh/vscode-markdown/issues/985#issuecomment-1911700106">https://github.com/yzhang-gh/vscode-markdown/issues/985#issuecomment-1911700106</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>器</category>
        <category>文档编辑</category>
      </categories>
  </entry>
  <entry>
    <title>钥匙串</title>
    <url>/posts/d85f8f75/</url>
    <content><![CDATA[<h2 id="钥匙串"><a class="header-anchor" href="#钥匙串"></a>钥匙串</h2>
<p>钥匙串（SSH agent）是储存密钥的高速缓存。具体的可以参考 <a href="http://t.cn/zWlX7vR">SSH Keys</a>。</p>
<h3 id="建议"><a class="header-anchor" href="#建议"></a>建议</h3>
<p><strong>建议不要使用钥匙串，而是每次ssh登陆时，都手动指定密钥路径</strong>，方法详见<a href="#%E6%89%8B%E5%8A%A8%E6%8C%87%E5%AE%9A%E5%AF%86%E9%92%A5%E8%B7%AF%E5%BE%84">手动指定密钥路径</a>。这样能避免在使用钥匙串时，因钥匙串中密钥过多，ssh登陆时超过服务器到密钥数量限制，以至无法登陆。</p>
<h3 id="使用钥匙串"><a class="header-anchor" href="#使用钥匙串"></a>使用钥匙串</h3>
<ul>
<li>在ssh登陆时，<strong>如果没有指定密钥路径</strong>（不论是在<code>~/.ssh/config</code>里配置<code>IdentityFile &lt;密钥路径&gt;</code>，还是在<code>ssh</code>命令中加<code>-i &lt;密钥路径&gt;</code>参数），ssh会采用如下策略：
<ul>
<li>如果钥匙串是空的，就会使用默认密钥<code>~/.ssh/id_rsa</code></li>
<li>如果钥匙串非空，就会<strong>将钥匙串中的密钥逐一尝试</strong>，直到超过服务器允许登陆时使用的密钥数目的上限。</li>
</ul>
</li>
</ul>
<h3 id="向钥匙串添加密钥"><a class="header-anchor" href="#向钥匙串添加密钥"></a>向钥匙串添加密钥</h3>
<ul>
<li>使用时自动添加：每当使用密钥登陆服务器（比如执行<code>ssh</code>、<code>ssh-copy-id</code>等命令），就会将当前使用的密钥添加到钥匙串中。</li>
<li>手动添加：<code>ssh-add &lt;私钥路径&gt; </code></li>
<li>开机自动添加：见下文<a href="#Mac%E9%87%8D%E5%90%AF%E5%90%8E%E8%87%AA%E5%8A%A8ssh-add%E7%A7%81%E9%92%A5">Mac重启后自动ssh-add私钥</a> (不推荐使用，会造成钥匙串中密钥过多，ssh登陆时超过服务器到密钥数量限制)</li>
</ul>
<h3 id="清空钥匙串"><a class="header-anchor" href="#清空钥匙串"></a>清空钥匙串</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-add -D <span class="token comment"># 清空已有KeyChain</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="查看钥匙串中密钥"><a class="header-anchor" href="#查看钥匙串中密钥"></a>查看钥匙串中密钥</h3>
<p>使用命令<code>ssh-add -l</code>可以看到所有的密钥列表：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-add -l
<span class="token comment"># 2048 db:6a:da:46:6e:03:da:94:f0:2c:43:1d:91:8a:bd:67 yeungeek@gmail.com (RSA)</span>
<span class="token comment"># 2048 07:59:9f:93:d2:e3:80:e1:df:77:ed:c9:5d:2e:3d:04 yeungeek@gmail.com (RSA)</span>
<span class="token comment"># 2048 4f:ba:6c:00:12:41:0e:a8:50:be:f5:6e:2e:7a:10:91 yeungeek@gmail.com (RSA)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>ssh-add -L</code>可以查产到所有密钥的公钥：</p>
<pre class="line-numbers language-none"><code class="language-none">ssh-rsa wBz&#x2F;y9oybSLYNEVVzoi+HdcO4CCQ7k9MwBz&#x2F;y9oybSLYNEVVzoi+HdcO4CCQ7k9MwBz&#x2F;y9oybSLYNEVVzoi+HdcO4CCQ7k9MwBz&#x2F;y9oybSLYNEVVzoi+HdcO4CCQ7k9MwBz&#x2F;y9oybSLYNEVVzoi+HdcO4CCQ7k9MwBz&#x2F;y9oybSLYNEVVzoi+HdcO4CCQ7k9MwBz&#x2F;y9oybSLYNEVVzoi+HdcO4CCQ7k9MwBz&#x2F;y9oybSLYNEVVzoi+HdcO4CCQ7k9MwBz&#x2F;y9oybSLYNEVVzoi+HdcO4CCQ7k9MwBz&#x2F;y9oybSLYNEVVzoi+HdcO4CCQ7k9MwBz&#x2F;y9oybSLYNEVVzoi+HdcO4CCQ7k9MwBz&#x2F;y9oybSLYNEVVzoi+HdcO4CCQ7k9MwBz&#x2F;y9oybSLYNEVVzoi+HdcO4CCQ7k9MwBz&#x2F;y9oybSLYNEVVzoi+HdcO4CCQ7k9M mac@mac-MBP.local
ssh-rsa +y6CL2IeCuvZMOPKSBx6+gvGkr1TmBLo+y6CL2IeCuvZMOPKSBx6+gvGkr1TmBLo+y6CL2IeCuvZMOPKSBx6+gvGkr1TmBLo+y6CL2IeCuvZMOPKSBx6+gvGkr1TmBLo+y6CL2IeCuvZMOPKSBx6+gvGkr1TmBLo+y6CL2IeCuvZMOPKSBx6+gvGkr1TmBLo+y6CL2IeCuvZMOPKSBx6+gvGkr1TmBLo+y6CL2IeCuvZMOPKSBx6+gvGkr1TmBLo+y6CL2IeCuvZMOPKSBx6+gvGkr1TmBLo+y6CL2IeCuvZMOPKSBx6+gvGkr1TmBLo+y6CL2IeCuvZMOPKSBx6+gvGkr1TmBLo+y6CL2IeCuvZMOPKSBx6+gvGkr1TmBLo+y6CL2IeCuvZMOPKSBx6+gvGkr1TmBLo+y6CL2IeCuvZMOPKSBx6+gvGkr1TmBLo mac@mac-MBP.local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="关于钥匙串的报错"><a class="header-anchor" href="#关于钥匙串的报错"></a>关于钥匙串的报错</h2>
<h3 id="没有能登陆的密钥"><a class="header-anchor" href="#没有能登陆的密钥"></a>没有能登陆的密钥</h3>
<p>ssh登陆时，如果登陆失败，并出现如下报错，则说明本地钥匙串中没有能登陆服务器的密钥。</p>
<blockquote>
<p>Could not open a connection to your authentication agent</p>
</blockquote>
<p>可以尝试以下两种解决办法：</p>
<h4 id="向钥匙串中添加对应的密钥"><a class="header-anchor" href="#向钥匙串中添加对应的密钥"></a>向钥匙串中添加对应的密钥</h4>
<p>不推荐，因为会造成钥匙串中密钥过多，ssh登陆时超过服务器到密钥数量限制。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-agent <span class="token function">bash</span>
ssh-add ~/.ssh/<span class="token operator">&lt;</span>密钥名字<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="手动指定密钥路径"><a class="header-anchor" href="#手动指定密钥路径"></a>手动指定密钥路径</h4>
<p>推荐。</p>
<p>在<code>~/.ssh/config</code>里，配置如下，然后用<code>ssh &lt;服务器别名&gt;</code>登陆。</p>
<pre class="line-numbers language-none"><code class="language-none">Host &lt;服务器别名&gt;
     HostName &lt;服务器地址&gt;
     User &lt;用户名&gt;
     IdentityFile &lt;密钥路径&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>或者</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -i <span class="token operator">&lt;</span>密钥路径<span class="token operator">></span> <span class="token operator">&lt;</span>用户名<span class="token operator">></span>@<span class="token operator">&lt;</span>服务器地址<span class="token operator">></span>
<span class="token comment"># 或</span>
<span class="token function">ssh</span> -i <span class="token operator">&lt;</span>密钥路径<span class="token operator">></span> <span class="token operator">&lt;</span>服务器别名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="密钥数量过多"><a class="header-anchor" href="#密钥数量过多"></a>密钥数量过多</h3>
<p>ssh登陆或执行ssh-copy-id时，若出现报错</p>
<blockquote>
<p>Received disconnect from &lt;服务器地址&gt; port &lt;端口号&gt;:2: Too many authentication failures</p>
</blockquote>
<p>则说明钥匙串的ssh密钥太多了(<code>ssh-add -L</code>可以查看所有钥匙串里的密钥)，需要手动指定如何登陆：</p>
<h4 id="只用密码登陆"><a class="header-anchor" href="#只用密码登陆"></a>只用密码登陆</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -o <span class="token assign-left variable">PreferredAuthentications</span><span class="token operator">=</span>password -o <span class="token assign-left variable">PubkeyAuthentication</span><span class="token operator">=</span>no <span class="token operator">&lt;</span>用户名<span class="token operator">></span>@<span class="token operator">&lt;</span>服务器地址<span class="token operator">></span>
<span class="token comment"># 或</span>
<span class="token function">ssh</span> -o <span class="token assign-left variable">PreferredAuthentications</span><span class="token operator">=</span>password -o <span class="token assign-left variable">PubkeyAuthentication</span><span class="token operator">=</span>no <span class="token operator">&lt;</span>服务器别名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>上述参数同样适用于 <code>ssh-copy-id</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-copy-id -o <span class="token assign-left variable">PreferredAuthentications</span><span class="token operator">=</span>password -o <span class="token assign-left variable">PubkeyAuthentication</span><span class="token operator">=</span>no -i <span class="token operator">&lt;</span>密钥路径<span class="token operator">></span> <span class="token operator">&lt;</span>用户名<span class="token operator">></span>@<span class="token operator">&lt;</span>服务器地址<span class="token operator">></span>
<span class="token comment"># 或</span>
ssh-copy-id -o <span class="token assign-left variable">PreferredAuthentications</span><span class="token operator">=</span>password -o <span class="token assign-left variable">PubkeyAuthentication</span><span class="token operator">=</span>no -i <span class="token operator">&lt;</span>密钥路径<span class="token operator">></span> <span class="token operator">&lt;</span>服务器别名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="只用指定密钥登陆"><a class="header-anchor" href="#只用指定密钥登陆"></a>只用指定密钥登陆</h4>
<p>见<a href="#%E6%89%8B%E5%8A%A8%E6%8C%87%E5%AE%9A%E5%AF%86%E9%92%A5%E8%B7%AF%E5%BE%84">手动指定密钥路径</a></p>
<h2 id="Mac重启后自动ssh-add私钥"><a class="header-anchor" href="#Mac重启后自动ssh-add私钥"></a>Mac重启后自动ssh-add私钥</h2>
<p>以下<a href="https://mednoter.com/ssh-add-automatically.html">原文</a>在此备份一版本。该方法能实现mac永久添加私钥到钥匙串。</p>
<p>不推荐使用该方法，因为会造成钥匙串中密钥过多，ssh登陆时超过服务器到密钥数量限制。</p>
<blockquote>
<p>管理服务器有一些安全常识:</p>
<ul>
<li>禁止 root 远程登录</li>
<li>禁止密码登录</li>
<li>使用 priviate / public key 作为默认的登录方式。</li>
<li>修改 sshd 端口</li>
</ul>
<p>From Linode: <a href="https://www.linode.com/docs/security/securing-your-server">Securing your server</a></p>
<p>安全级别上去后，问题随之而来，有一堆的私钥需要管理。每次 Macbook 升级系统，需要一次次手工 ssh-add 私钥，特别心烦。</p>
<p>几年前有这种方法 <code>ssh-add -K privateKey</code> 可以一劳永逸的把私钥存到 keychain 中，重启后也不需要手动 ssh-add，非常方便。</p>
<p><strong>这种方式不管用了。</strong></p>
<p><img data-src="/posts/d85f8f75/2017-06-02-ssh-add.jpeg" alt="img"></p>
<h2 id="新的解决方法"><a class="header-anchor" href="#新的解决方法"></a>新的解决方法</h2>
<p><strong>创建 Automator 任务加载私钥，然后放到开机启动中。</strong></p>
<ol>
<li>创建一个 Automator task.<img data-src="/posts/d85f8f75/2017-06-02-step1.jpeg" alt="img"></li>
<li>在 task 中写一串 shell script<img data-src="/posts/d85f8f75/2017-06-02-step2.jpeg" alt="img"></li>
<li>把 task 添加到 login items 中，每次系统重启后会执行这个 Automator task，自动 ssh-add 所有的私钥。<img data-src="/posts/d85f8f75/2017-06-02-step3.jpeg" alt="img"><img data-src="/posts/d85f8f75/2017-06-02-step4.jpeg" alt="img"></li>
</ol>
<p>搞定！</p>
</blockquote>
]]></content>
      <categories>
        <category>器</category>
        <category>服务器连接</category>
      </categories>
  </entry>
  <entry>
    <title>rsync教程</title>
    <url>/posts/5a22a187/</url>
    <content><![CDATA[<h2 id="mac-升级-rsync"><a class="header-anchor" href="#mac-升级-rsync"></a>mac 升级 rsync</h2>
<p>mac自带rsync在<code>/usr/bin/rsync</code>，版本 <code>rsync  version 2.6.9  protocol version 29</code>太老，不支持用一条命令将多个远程文件传到本地，需要升级才支持。</p>
<p>升级方法：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">rsync</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装在<code>/usr/local/bin/rsync</code>，版本<code>rsync  version 3.1.3  protocol version 31</code></p>
<h2 id="用法"><a class="header-anchor" href="#用法"></a>用法</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rsync</span> <span class="token punctuation">(</span>参数<span class="token punctuation">)</span>  <span class="token operator">&lt;</span>源<span class="token operator">></span> <span class="token operator">&lt;</span>收<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="源-收路径写法"><a class="header-anchor" href="#源-收路径写法"></a>源/收路径写法</h3>
<table>
<thead>
<tr>
<th>源\得\收</th>
<th><code>已有文件夹(/)</code></th>
<th><code>已有文件夹/新建名</code><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></th>
<th><code>已有文件夹/新建名/</code></th>
<th><code>已有文件夹(/(新建文件夹(/))</code> 下有同名文件(夹)</th>
</tr>
</thead>
<tbody>
<tr>
<td>一个文件</td>
<td>已有文件夹/同名文件</td>
<td><code>已有文件夹/新建名</code> 文件重命名了</td>
<td>已有文件夹/新建名/同名文件</td>
<td>覆盖原同名文件</td>
</tr>
<tr>
<td>一个文件夹</td>
<td>已有文件夹/同名文件夹</td>
<td>已有文件夹/新建名/同名文件夹</td>
<td>同左</td>
<td>覆盖原同名文件</td>
</tr>
<tr>
<td>多个文件(夹)</td>
<td>已有文件夹/多个同名文件(夹)</td>
<td>已有文件夹/新建名/多个同名文件(夹)</td>
<td>同左</td>
<td>覆盖原同名文件</td>
</tr>
</tbody>
</table>
<p>源文件（夹）的特殊写法</p>
<ul>
<li><code>源文件夹</code> 则得到 <code>接收文件夹/源文件夹</code></li>
<li><code>源文件夹/</code> 则得到 <code>接收文件夹/源文件夹下所有的文件(包括隐藏文件)</code></li>
<li><code>源文件夹/*</code> 则得到 <code>接收文件夹/源文件夹下所有非隐藏文件</code></li>
</ul>
<p>远程文件的写法</p>
<ul>
<li><code>服务器</code> 单独写不可以，一定要有<code>:</code></li>
<li><code>服务器:(.(/))</code> 拷贝到 <code>服务器:/home/$USER</code></li>
<li><code>服务器:(./)路径</code> 拷贝到  <code>服务器:/home/$USER/路径</code></li>
</ul>
<p>多个远程文件</p>
<ul>
<li>多个远程文件(夹)传到本地：<code>rsync （参数） 服务器1:源1路径 :源2路径 服务器2:源3路径 本地接受目录</code>
<ul>
<li><code>服务器1:源1路径 :源2路径</code> 表示 <code>服务器1:源1路径 </code>与 <code>服务器1:源2路径</code></li>
<li><code>服务器:源路径</code>可以含有<code>&#123;xx,xx,xx&#125;</code>用以表示多个路径</li>
<li><code>本地接受目录</code>只能写一个</li>
</ul>
</li>
<li>本地文件(夹)传到多个远程文件(夹)：目前 rsync 不支持 (目前版本为<code>rsync  version 3.1.3  protocol version 31</code>)。<code>prsync</code> 支持这个，详见下<a href="#prsync">prsync</a>。</li>
</ul>
<h3 id="默认参数"><a class="header-anchor" href="#默认参数"></a>默认参数</h3>
<p><code>rsync</code> 会使用 <code>/etc/ssh/ssh_config</code>和<code>~/.ssh/config</code> ，支持ssh跳板机连接</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rsync</span> -aHhvzP 本地路径1 <span class="token punctuation">(</span>本地路径2 <span class="token punctuation">..</span>.<span class="token punctuation">)</span>  服务器别名:远程路径
<span class="token function">rsync</span> -aHhvzP 本地路径1 <span class="token punctuation">(</span>本地路径2 <span class="token punctuation">..</span>.<span class="token punctuation">)</span>  用户名@ip:远程路径 -e <span class="token string">'ssh -p 端口'</span>
<span class="token function">rsync</span> -aHhvzP 服务器别名:远程路径1 <span class="token punctuation">(</span>:远程路径2<span class="token punctuation">..</span>.<span class="token punctuation">)</span>  本地路径
<span class="token function">rsync</span> -aHhvzP -e <span class="token string">'ssh -p 端口'</span> 用户名@ip:远程路径1 <span class="token punctuation">(</span>:远程路径2<span class="token punctuation">..</span>.<span class="token punctuation">)</span>  本地路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">-a 					归档模式 &#x3D; -rlptgoD
    -r 				递归目录
    -l				保留软链接	   # scp 无论什么参数都做不到，所以不推荐用scp，而用rsync
    -p				保持文件权限
    -t				保持修改时间
    -g				保持文件属组信息
    -o				保持文件属主信息
    -D 				&#x3D; --devices --specials
    --devices  保留设备文件 (此命令需要sudu权限)
  --specials 保留特殊文件
-H 					保留硬链接
-h					kMG B计文件大小
-v          详细模式输出
-z 					压缩传输
-P          &#x3D; --partial --progress
    --partial   保留没传完的文件，支持断点续传
    --progress  进度条
--partial-dir&#x3D;何处保存没传完的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="封装成alias"><a class="header-anchor" href="#封装成alias"></a>封装成alias</h3>
<p>按如下方法封装，zsh下，输入<code>autots</code>函数、<code>ts</code>(alias)，按tab，能得到和<code>rsync</code>一样的本地目录和远程目录的自动补全</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 自动端点续传，传送失败后隔180秒自动重新连接</span>

<span class="token comment"># autots（alias）会被下面的autots函数覆盖，用来使得下面的autots函数能够和rsync一样自动补全本地和远程目录</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">autots</span><span class="token operator">=</span><span class="token string">'rsync'</span>
<span class="token keyword">function</span> <span class="token function-name function">autots</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">local</span> <span class="token assign-left variable">retry_time</span><span class="token operator">=</span><span class="token number">180</span> <span class="token comment"># second</span>
    <span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span>
    <span class="token keyword">do</span>
        <span class="token function">rsync</span> -aHhvzP <span class="token variable">$*</span>
        <span class="token comment"># command 调用系统的 rsync 命令，避免递归调用rsync</span>
        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$?</span>"</span> <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
            <span class="token builtin class-name">echo</span> <span class="token string">"rsync completed normally"</span>
            <span class="token builtin class-name">break</span>
        <span class="token keyword">else</span>
            <span class="token builtin class-name">echo</span> <span class="token string">"Rsync failure. Backing off and retrying in <span class="token variable">$retry_time</span> seconds..."</span>
            <span class="token function">sleep</span> <span class="token variable">$retry_time</span>
        <span class="token keyword">fi</span>
    <span class="token keyword">done</span>
<span class="token punctuation">&#125;</span>
<span class="token comment"># rsync 封装多种参数，但不支持断点续传; ts能够和rsync一样自动补全远程目录</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ts</span><span class="token operator">=</span><span class="token string">'rsync -aHhvz --progress'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="报错"><a class="header-anchor" href="#报错"></a>报错</h2>
<h3 id="protocol-version-mismatch"><a class="header-anchor" href="#protocol-version-mismatch"></a>protocol version mismatch</h3>
<p>若远程主机的登录文件( 如<code>.bash_profile</code>)中有stdout输出(即<code>echo &quot;xxxx&quot;</code>或 <code>echo &quot;xxx&quot; &gt;&amp;1</code>)，则在用rsync与远程主机传输文件(不论上传、下载)，均会报错如下，且无法传输文件。</p>
<pre class="line-numbers language-none"><code class="language-none">protocol version mismatch -- is your shell clean?
(see the rsync man page for an explanation)
rsync error: protocol incompatibility (code 2) at compat.c(185) [sender&#x3D;3.1.3]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>将stdout输出改为stderr输出(即<code>echo &quot;xxx&quot; &gt;&amp;2</code>)，则此报错消失</p>
<h1 id="参考阅读"><a class="header-anchor" href="#参考阅读"></a>参考阅读</h1>
<h2 id="zsh的自动补全"><a class="header-anchor" href="#zsh的自动补全"></a>zsh的自动补全</h2>
<p><a href="https://mads-hartmann.com/2017/08/06/writing-zsh-completion-scripts.html">https://mads-hartmann.com/2017/08/06/writing-zsh-completion-scripts.html</a></p>
<p><a href="https://github.com/zsh-users/zsh-completions/blob/master/zsh-completions-howto.org">https://github.com/zsh-users/zsh-completions/blob/master/zsh-completions-howto.org</a></p>
<p><a href="https://superuser.com/questions/420525/scp-with-zsh-no-matches-found">https://superuser.com/questions/420525/scp-with-zsh-no-matches-found</a></p>
<p><a href="https://www.zsh.org/mla/users/2009/msg00936.html">https://www.zsh.org/mla/users/2009/msg00936.html</a></p>
<p><a href="https://segmentfault.com/a/1190000002994217">https://segmentfault.com/a/1190000002994217</a></p>
<h2 id="rsync-部分参数的含义"><a class="header-anchor" href="#rsync-部分参数的含义"></a>rsync 部分参数的含义</h2>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">-</span>a<span class="token punctuation">,</span> <span class="token operator">--</span>archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于<span class="token operator">-</span>rlptgoD
<span class="token operator">-</span>v<span class="token punctuation">,</span> <span class="token operator">--</span>verbose 详细模式输出
<span class="token operator">-</span>p<span class="token punctuation">,</span> <span class="token operator">--</span>perms 保持文件权限
<span class="token operator">-</span>g<span class="token punctuation">,</span> <span class="token operator">--</span>group 保持文件属组信息
<span class="token operator">-</span>o<span class="token punctuation">,</span> <span class="token operator">--</span>owner 保持文件属主信息
<span class="token operator">-</span>r<span class="token punctuation">,</span> <span class="token operator">--</span>recursive 对子目录以递归模式处理。同步目录的时候要加上这个参数
<span class="token operator">-</span>l<span class="token punctuation">,</span> <span class="token operator">--</span>links 保留软链结，加上这个参数，同步过来的文件会保持之前的软链接属性不变
<span class="token operator">-</span><span class="token constant">H</span><span class="token punctuation">,</span> <span class="token operator">--</span>hard<span class="token operator">-</span>links 保留硬链结
<span class="token operator">-</span>e<span class="token punctuation">,</span> <span class="token operator">--</span>rsh<span class="token operator">=</span><span class="token constant">COMMAND</span> 指定使用rsh、ssh方式进行数据同步
<span class="token operator">-</span>z<span class="token punctuation">,</span> <span class="token operator">--</span>compress 对备份的文件在传输时进行压缩处理
<span class="token operator">--</span>stats 给出某些文件的传输状态
<span class="token operator">--</span>progress 打印同步的过程
<span class="token operator">--</span>timeout<span class="token operator">=</span><span class="token constant">TIME</span> 同步过程中，<span class="token constant">IP</span>超时时间，单位为秒
<span class="token operator">--</span><span class="token keyword">delete</span> 删除那些目标目录中有而源目录中没有的多余文件。这个是rsync做增量方式的全备份的最佳选择方案！！！！！！
<span class="token operator">--</span><span class="token keyword">delete</span><span class="token operator">-</span>before 接受者在输出之前进行删除操作。即先将目标目录中文件全部删除，再将源目录文件拷贝过去。这是rsync保持目标目录跟源目录一致的方案！！！
<span class="token operator">--</span><span class="token keyword">delete</span><span class="token operator">-</span>after 在同步操作之后做比较，删除那些目标目录中有而源目录中没有的多余文件
<span class="token operator">--</span><span class="token keyword">delete</span><span class="token operator">-</span>excluded 删除目标目录中那些被该选项指定排除的文件
<span class="token operator">--</span>ignore<span class="token operator">-</span>errors 即使出现<span class="token constant">IO</span>错误也进行删除，忽略错误
<span class="token operator">--</span>exclude <span class="token function">指定同步时需要过滤掉的文件或子目录</span><span class="token punctuation">(</span>即不需要同步过去的<span class="token punctuation">)</span><span class="token function">，后面直接跟不需要同步的单个文件名或子目录</span><span class="token punctuation">(</span>不需要跟路径<span class="token punctuation">)</span> ，过滤多个文件或子目录，就使用多个<span class="token operator">--</span>exclude
<span class="token operator">--</span>exclude<span class="token operator">-</span>from <span class="token function">指定同步时需要过滤掉的文件或子目录，后面跟文件</span><span class="token punctuation">(</span>比如<span class="token operator">/</span>root<span class="token operator">/</span>exclue<span class="token punctuation">.</span>txt<span class="token punctuation">)</span>，然后将不需要同步的文件和子目录放到<span class="token operator">/</span>root<span class="token operator">/</span>exclue<span class="token punctuation">.</span>txt下。
<span class="token operator">--</span>version 打印版本信息
<span class="token operator">--</span>port<span class="token operator">=</span><span class="token constant">PORT</span> 指定其他的rsync服务端口
<span class="token operator">--</span>log<span class="token operator">-</span>format<span class="token operator">=</span>formAT 指定日志文件格式
<span class="token operator">--</span>password<span class="token operator">-</span>file<span class="token operator">=</span><span class="token constant">FILE</span> 从<span class="token constant">FILE</span>中得到密码
<span class="token operator">--</span>bwlimit<span class="token operator">=</span><span class="token constant">KBPS</span> 限制<span class="token constant">I</span><span class="token operator">/</span><span class="token constant">O</span>带宽，KBytes per second<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="prsync"><a class="header-anchor" href="#prsync"></a>prsync</h2>
<p><code>prsync</code>可以并行发送文件到多台服务器</p>
<p><a href="https://www.tecmint.com/copy-files-to-multiple-linux-servers/">https://www.tecmint.com/copy-files-to-multiple-linux-servers/</a></p>
<p><a href="https://www.cnblogs.com/Peter2014/p/8251886.html">轻量级运维工具-pssh,pscp,prsync,pslurp,pnuke</a></p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>不可<code>已有文件夹/新建名/新建名</code>，新建&gt;=2层文件夹会报错 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>器</category>
        <category>服务器连接</category>
      </categories>
  </entry>
  <entry>
    <title>IPMI带外管理教程</title>
    <url>/posts/85a6419c/</url>
    <content><![CDATA[<p>参考：<a href="https://xiaoyeshiyu.github.io/linux/2017/12/11/IPMITool/">Ipmitool工具的使用方式</a> <a href="https://www.jianshu.com/p/50bec5e2f96e">ipmi带外管理</a></p>
<h2 id="IPMI介绍"><a class="header-anchor" href="#IPMI介绍"></a>IPMI介绍</h2>
<h3 id="需求"><a class="header-anchor" href="#需求"></a>需求</h3>
<p>有的时候，ssh无法连接到服务器，如</p>
<ul>
<li>死机，需要重启</li>
<li>服务器的临时路由表配错，造成ssh无法访问服务器，需要重启</li>
</ul>
<p>类似情况，为了能不亲自去机房就管理服务器，需要使用远程控制装置，也即带外管理，IPMI即是其中一种。</p>
<h3 id="带外管理"><a class="header-anchor" href="#带外管理"></a>带外管理</h3>
<ul>
<li>经过服务器所在的工作网络 来连接服务器（如通过ssh），此通道名曰数据通道。由数据通道理服务器，称带内管理。当服务器或工作网络出现物理故障时，就无法带内管理。</li>
<li>使用独立的管理通道连接服务器，不论开机与否，也不论工作网络是否正常，均可进行连接与控制。由管理通道管理服务器，称带外管理。</li>
</ul>
<h3 id="IPMI的原理"><a class="header-anchor" href="#IPMI的原理"></a>IPMI的原理</h3>
<p>IPMI 独立于 CPU BIOS 和 操作系统，故不论开机否，皆可监视控制服务器。ipmi 是一种规范的标准，其中最重要的物理部件就是 BMC (Baseboard Management Controller)，一种嵌入式管理微控制器，它相当于整个平台管理的“大脑”，通过它 ipmi 可以监控各个传感器的数据并记录各种事件的日志。</p>
<p>引自：<a href="https://xiaoyeshiyu.github.io/linux/2017/12/11/IPMITool/">Ipmitool工具的使用方式</a></p>
<h2 id="配置IPMI"><a class="header-anchor" href="#配置IPMI"></a>配置IPMI</h2>
<p>有两种方法配置IPMI：进入BIOS或使用impitool软件。进入BIOS配置IMPI，详见<a href="./IPMI%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D.docx">IPMI远程管理功能使用介绍.docx</a>。而impitool方法介绍如下，以下操作均在服务器上，用ssh连接之即可完成</p>
<h3 id="安装ipmitool"><a class="header-anchor" href="#安装ipmitool"></a>安装ipmitool</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ipmitool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="ipmi的网络配置"><a class="header-anchor" href="#ipmi的网络配置"></a>ipmi的网络配置</h3>
<p>显示ipmi的网络配置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ipmitool lan print <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回</p>
<pre class="line-numbers language-none"><code class="language-none">Set in Progress         : Set Complete
Auth Type Support       : NONE MD2 MD5 PASSWORD
Auth Type Enable        : Callback : MD2 MD5 PASSWORD
                        : User     : MD2 MD5 PASSWORD
                        : Operator : MD2 MD5 PASSWORD
                        : Admin    : MD2 MD5 PASSWORD
                        : OEM      : MD2 MD5 PASSWORD
IP Address Source       : Static Address
IP Address              : 192.168.245.33
Subnet Mask             : 255.255.255.0
MAC Address             : ac:1f:6b:a7:0b:39
SNMP Community String   : public
IP Header               : TTL&#x3D;0x00 Flags&#x3D;0x00 Precedence&#x3D;0x00 TOS&#x3D;0x00
BMC ARP Control         : ARP Responses Enabled, Gratuitous ARP Disabled
Default Gateway IP      : 192.168.245.97
Default Gateway MAC     : 00:00:00:00:00:00
Backup Gateway IP       : 0.0.0.0
Backup Gateway MAC      : 00:00:00:00:00:00
802.1q VLAN ID          : Disabled
802.1q VLAN Priority    : 0
RMCP+ Cipher Suites     : 1,2,3,6,7,8,11,12
Cipher Suite Priv Max   : XaaaXXaaaXXaaXX
                        :     X&#x3D;Cipher Suite Unused
                        :     c&#x3D;CALLBACK
                        :     u&#x3D;USER
                        :     o&#x3D;OPERATOR
                        :     a&#x3D;ADMIN
                        :     O&#x3D;OEM
Bad Password Threshold  : 0
Invalid password disable: no
Attempt Count Reset Int.: 0
User Lockout Interval   : 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>IPMI的网络有两模式：</p>
<ul>
<li>
<p>自动获取（dhcp），设置方法如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ipmitool lan <span class="token builtin class-name">set</span> <span class="token number">1</span> ipsrc dhcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>它会自动获取到ipmi的ip、掩码、网关</p>
</li>
<li>
<p>静态（static），设置方法如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ipmitool lan <span class="token builtin class-name">set</span> <span class="token number">1</span> ipsrc static<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>需要自己配ipmi的ip、掩码、网关</p>
</li>
<li>
<p>设置ipmi的ip</p>
</li>
</ul>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ipmitool lan <span class="token builtin class-name">set</span> <span class="token number">1</span> ipaddr <span class="token operator">&lt;</span>ipmi的ip<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>设置ipmi的掩码</li>
</ul>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ipmitool lan <span class="token builtin class-name">set</span> <span class="token number">1</span> netmask <span class="token operator">&lt;</span>ipmi的掩码<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>设置ipmi的网关</li>
</ul>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ipmitool lan <span class="token builtin class-name">set</span> <span class="token number">1</span> defgw ipaddr <span class="token operator">&lt;</span>ipmi的网关<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="配置imp账号"><a class="header-anchor" href="#配置imp账号"></a>配置imp账号</h3>
<ul>
<li>
<p>查看通道</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ipmitool channel info <span class="token punctuation">[</span><span class="token operator">&lt;</span>通道号<span class="token operator">>=</span><span class="token operator">=</span><span class="token number">0,1</span>,2,3<span class="token punctuation">..</span>.,12, 无13, <span class="token number">14,15</span><span class="token punctuation">;</span> 缺省<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>一般 15号通道返回, 表示支持网页图形界面控制, 此通道的用户需要开<code>ipmi=on</code>权限, 才能用网页远程控制</p>
<pre class="line-numbers language-none"><code class="language-none">Channel 0xf info:
  Channel Medium Type   : System Interface
  Channel Protocol Type : KCS
  Session Support       : session-less
  Active Session Count  : 0
  Protocol Vendor ID    : 7154<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>1号通道返回如下, 表示支持 ipmi 协议, 此通道的用户需要开<code>ipmi=on</code>权限, 才能用ipmi命令搞远程控制</p>
<pre class="line-numbers language-none"><code class="language-none">Channel 0x1 info:
  Channel Medium Type   : 802.3 LAN
  Channel Protocol Type : IPMB-1.0
  Session Support       : multi-session
  Active Session Count  : 0
  Protocol Vendor ID    : 7154
  Volatile(active) Settings
    Alerting            : enabled
    Per-message Auth    : enabled
    User Level Auth     : enabled
    Access Mode         : always available
  Non-Volatile Settings
    Alerting            : enabled
    Per-message Auth    : enabled
    User Level Auth     : enabled
    Access Mode         : always available<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>查看用户</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ipmitool user list <span class="token punctuation">[</span><span class="token operator">&lt;</span>通道号<span class="token operator">>=</span><span class="token operator">=</span><span class="token number">0,1</span>,2,3<span class="token punctuation">..</span>.,12, 无13, <span class="token number">14,15</span><span class="token punctuation">;</span> 缺省<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">ID  Name	     Callin  Link Auth	IPMI Msg   Channel Priv Limit
1                    true    false      false      Unknown (0x00)
2   ADMIN            true    false      false      Unknown (0x00)
3                    true    false      false      Unknown (0x00)
4                    true    false      false      Unknown (0x00)
5                    true    false      false      Unknown (0x00)
6                    true    false      false      Unknown (0x00)
7                    true    false      false      Unknown (0x00)
8                    true    false      false      Unknown (0x00)
9                    true    false      false      Unknown (0x00)
10                   true    false      false      Unknown (0x00)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>一般服务器出厂自带的用户名<code>ADMIN</code>，其出厂权限如下:</p>
<ul>
<li>15号通道, 即缺省通道</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ipmitool user list <span class="token comment"># 缺省channel号 是 15</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">ID  Name	         Callin  Link Auth	IPMI Msg   Channel Priv Limit
2   ADMIN            true    false      false      Unknown (0x00)
【下面的命令用此id&#x3D;2】【需callin&#x3D;true,浏览器才能登录】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>1号通道</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ipmitool user list <span class="token number">1</span> <span class="token comment"># 1 是channel 号, 一般不改</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回</p>
<pre class="line-numbers language-none"><code class="language-none">ID  Name	         Callin  Link Auth	IPMI Msg   Channel Priv Limit
2   ADMIN            false    false      true         ADMINISTRATOR (0x00)
【IPMI&#x3D;true才能使用ipmi的命令行登录】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>若返回如上, 则不需要改用户权限</p>
</li>
<li>
<p>若权限不对, 则执行以下命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ipmitool channel setaccess <span class="token number">15</span> <span class="token number">2</span> <span class="token assign-left variable">callin</span><span class="token operator">=</span>on <span class="token assign-left variable">link</span><span class="token operator">=</span>off <span class="token assign-left variable">ipmi</span><span class="token operator">=</span>on <span class="token assign-left variable">privilege</span><span class="token operator">=</span>0x0 <span class="token comment"># 缺省channel号 是 0</span>
<span class="token comment"># 和</span>
<span class="token function">sudo</span> ipmitool channel setaccess <span class="token number">1</span> <span class="token number">2</span> <span class="token assign-left variable">callin</span><span class="token operator">=</span>off <span class="token assign-left variable">link</span><span class="token operator">=</span>off <span class="token assign-left variable">ipmi</span><span class="token operator">=</span>on <span class="token assign-left variable">privilege</span><span class="token operator">=</span>0x4 <span class="token comment"># 1 是 channel 号</span>

<span class="token comment"># 2是用户号, 根据`sudo ipmitool user list [1]`返回的用户号来写</span>
<span class="token comment"># Privilege-level=Administrator</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Privilege levels <code>privilege</code> 的取值</p>
<ul>
<li>
<p><code>0x0</code> - Unknown [初始化为这个, 可以不改]</p>
</li>
<li>
<p><code>0x1</code> - Callbac</p>
</li>
<li>
<p><code>0x2</code> - User</p>
</li>
<li>
<p><code>0x3</code> - Operator</p>
</li>
<li>
<p><code>0x4</code> - Administrator [如果要改, 一般就设成这个]</p>
</li>
<li>
<p><code>0x5</code> - OEM Proprietary</p>
</li>
<li>
<p><code>0xF</code> - No Access</p>
</li>
</ul>
<p>得到上述所需权限</p>
</li>
<li>
<p>交互地修改密码: 对所有通道的第2号用户重设密码</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ipmitool user <span class="token builtin class-name">set</span> password <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后输入两边密码 <code>junipmi</code></p>
<p>或直接非交互地执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ipmitool user <span class="token builtin class-name">set</span> password <span class="token number">2</span> <span class="token operator">&lt;</span>密码<span class="token operator">></span>  <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">sed</span> -i <span class="token string">'$d'</span> /root/.zsh_history<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>删去最后1行 避免暴露密码</p>
</li>
</ul>
<h2 id="数据线路与管理线路"><a class="header-anchor" href="#数据线路与管理线路"></a>数据线路与管理线路</h2>
<h3 id="线路连接"><a class="header-anchor" href="#线路连接"></a>线路连接</h3>
<p>ipmi的网口接线有两种方法：</p>
<ul>
<li>独立线路：
<ul>
<li>管理线路：一根单独的网线，一段插在服务器上，另一端插在一个交换机上，然后通到外网。此线路仅供ipmi使用。</li>
<li>数据线路：另一单独的网线，一段插在服务器上，另一端插在另一交换机上，然后通到外网。此线路供ssh、http(s)等使用，ipmi不用。</li>
</ul>
</li>
<li>共用线路：上述两线路合并成一个。优点是可以节约一个服务器的网络插口，以及交换机；缺点是，当数据线路坏了，就得去机房修，ipmi用不了。<a href="https://serverfault.com/questions/259792/how-does-ipmi-sideband-share-the-ethernet-port-with-the-host">参考</a></li>
</ul>
<h3 id="ip设置"><a class="header-anchor" href="#ip设置"></a>ip设置</h3>
<p>不论哪种接线，服务器有以下两个IP（通常是局域网IP）：</p>
<ul>
<li><code>/etc/network/interfaces</code>之<code>eth0</code>（或<code>enp97s0f0</code>等) 的address（即ip）</li>
<li>上文设置的ipmi的ip</li>
</ul>
<p>此二IP必须不同。若是同一个IP，企图用端口区分——ipmi用特定的端口，而ssh、http(s)等用其他特定端口，则从无法连接到ipmi，例如，用浏览器访问此IP，则会显示的是服务器的http(s)的页面，而非ipmi管理页面。</p>
<h3 id="NAT"><a class="header-anchor" href="#NAT"></a>NAT</h3>
<p>为了能在外网用浏览器连接ipmi管理服务器，需要在ipmi的网关上，设置NAT，使得<code>&lt;ipmi的网关的外网ip&gt;:&lt;ipmi的NAT端口&gt;</code> 转发到 <code>&gt;ipmi的ip&gt;:443</code>。其中443是ipmi的https端口。</p>
<h3 id="ipmi各种连接端口"><a class="header-anchor" href="#ipmi各种连接端口"></a>ipmi各种连接端口</h3>
<p>以 Supermicro IPMI (firmware SMT_X9_218) 为例</p>
<table>
<thead>
<tr>
<th>端口</th>
<th>对应协议</th>
<th>协议版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>22/tcp</td>
<td>ssh</td>
<td>Dropbear sshd 2012.55 (protocol 2.0)</td>
</tr>
<tr>
<td>80/tcp</td>
<td>http</td>
<td>lighttpd</td>
</tr>
<tr>
<td>443/tcp</td>
<td>https</td>
<td>lighttpd</td>
</tr>
<tr>
<td>623/tcp</td>
<td>ipmi-rmcp</td>
<td>SuperMicro IPMI RMCP</td>
</tr>
<tr>
<td>623/udp</td>
<td>IPMI</td>
<td>?</td>
</tr>
<tr>
<td>1900/udp</td>
<td>UPnP SSDP</td>
<td>?</td>
</tr>
<tr>
<td>5900/tcp</td>
<td>vnc, ikvm (远程桌面重定向)</td>
<td>VNC (protocol 3.8)</td>
</tr>
<tr>
<td>5985/tcp</td>
<td>wsman</td>
<td>？</td>
</tr>
<tr>
<td>49152/tcp</td>
<td>upnp</td>
<td>ntel UPnP reference SDK 1.3.1 (Linux 2.6.17.WB_WPCM450.1.3; UPnP 1.0)</td>
</tr>
</tbody>
</table>
<p>详见:</p>
<ul>
<li><a href="https://blog.rapid7.com/2013/07/02/a-penetration-testers-guide-to-ipmi/">A Penetration Tester’s Guide to IPMI and BMCs - Network Services</a></li>
<li><a href="https://www.medo64.com/2018/07/supermicros-ipmi-firewall-rules/">Supermicro’s IPMI Firewall Rules</a></li>
</ul>
<h2 id="从外部连接ipmi"><a class="header-anchor" href="#从外部连接ipmi"></a>从外部连接ipmi</h2>
<p>有多种方法从其他机器连接ipmi来管理服务器：浏览器、命令行工具SMCIPMITool、专用GUI工具<a href="https://www.supermicro.com/en/solutions/management-software/ipmi-utilities">IPMIView</a>，详见<a href="https://www.supermicro.com/en/solutions/management-software/ipmi-utilities">简介</a>。一般用浏览器就好了。</p>
<h3 id="浏览器"><a class="header-anchor" href="#浏览器"></a>浏览器</h3>
<p>机房的局域网内，浏览器访问<code>https://&lt;ipmi的ip&gt;</code>；机房外的网络，浏览器访问<code>https://&lt;ipmi的网关的外网ip&gt;:&lt;ipmi的NAT端口&gt;</code></p>
<p>然后在如下界面中输入ipmi账号和密码</p>
<p><img data-src="/posts/85a6419c/ScreenShot%202019-12-19%2023.54.27.png" alt="ScreenShot 2019-12-19 23.54.27"></p>
<p>更多用法，详见<a href="./IPMI%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D.docx">IPMI远程管理功能使用介绍.docx</a>。</p>
<h3 id="桌面远程操控"><a class="header-anchor" href="#桌面远程操控"></a>桌面远程操控</h3>
<p>ipmi 支持基于 iKVM 技术, 将服务器的桌面图像发送到远端, 进行桌面远程控制. 有两种方法来实现, 分别是 浏览器中的<code>iKVM/HTML5</code> 和 本地程序<code>Java iKVM Viewer</code>.  此二方法等效.</p>
<h4 id="浏览器中iKVM-HTML5"><a class="header-anchor" href="#浏览器中iKVM-HTML5"></a>浏览器中<code>iKVM/HTML5</code></h4>
<p>本法可直接在浏览器中进行远程桌面控制, 本地程序<code>Java iKVM Viewer</code>比方便. 但老旧版本的服务器的ipmi不支持<code>iKVM/HTML5</code>功能, 在下图中找不到<code>iKVM/HTML5</code>按钮.</p>
<p>在浏览器中连上ipmi的控制页面 (如上文), 如下点击如下</p>
<p><img data-src="/posts/85a6419c/image-20200206175520485.png" alt="image-20200206175520485"></p>
<p>于是浏览器弹出另一个标签页, 内容如下, 在此可进行服务器桌面的远程操控.</p>
<p><img data-src="/posts/85a6419c/image-20200206175801169.png" alt="image-20200206175801169"></p>
<h4 id="使用Java-iKVM-Viewer"><a class="header-anchor" href="#使用Java-iKVM-Viewer"></a>使用<code>Java iKVM Viewer</code></h4>
<p>本法依赖于本地的Java, 用以运行 <code>jnlp </code>文件来加载 Java iKVM Viewer, 以进行远程桌面控制.</p>
<h5 id="获得jnlp文件"><a class="header-anchor" href="#获得jnlp文件"></a>获得jnlp文件</h5>
<p>在浏览器中连上ipmi的控制页面 (如上文), 然后如下点</p>
<p><img data-src="/posts/85a6419c/ScreenShot%202020-02-06%2018.22.03.png" alt="ScreenShot 2020-02-06 18.22.03"></p>
<p>或者点击如下</p>
<p><img data-src="/posts/85a6419c/image-20200206180245990.png" alt="image-20200206180245990"></p>
<p>浏览器会下载一个文件 <code>launch.jnlp</code>. 这个文件需要本地安装有Java才能运行.</p>
<h5 id="端口修改"><a class="header-anchor" href="#端口修改"></a>端口修改</h5>
<p>若你采用了 ssh的端口映射 来连接远程服务器, 则需要把  <code>launch.jnlp</code> 中的端口改成ssh映射到的本地端口.</p>
<p>例如, 若连接服务器采用命令为</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token operator">&lt;</span>用户名<span class="token operator">></span>@<span class="token operator">&lt;</span>跳板机<span class="token operator">></span> -L <span class="token operator">&lt;</span>ipmi-https-本地端口<span class="token operator">></span>:localhost:443 <span class="token punctuation">\</span>
<span class="token operator">&lt;</span>ipmi-ipmi命令行工具-本地端口<span class="token operator">></span>:localhost:623 <span class="token punctuation">\</span>
<span class="token operator">&lt;</span>ipmi-ikvm-本地端口<span class="token operator">></span>:localhost:5900<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>其中 <code>443</code> 是ipmi的https默认端口,  <code>623</code> 是ipmi的命令行工具默认端口,  <code>5900</code> 是ipmi的ikvm默认端口.</p>
<p>则需要把 <code>launch.jnlp</code> 文件第一行的 <code>443</code> 改为 <code>&lt;ipmi-https-本地端口&gt;</code>,</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jnlp</span> <span class="token attr-name">spec</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.0+<span class="token punctuation">"</span></span> <span class="token attr-name">codebase</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://localhost:443/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>文件结尾的  <code>5900</code> 改为 <code>&lt;ipmi-ipmi命令行工具-本地端口&gt;</code>, <code>5900</code> 改为 <code>&lt;ipmi-ikvm-本地端口&gt;</code>.</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application-desc</span> <span class="token attr-name">main-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tw.com.aten.ikvm.KVMMain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>argument</span><span class="token punctuation">></span></span>localhost<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>argument</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>argument</span><span class="token punctuation">></span></span>+0eyiVR7u06ENfW<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>argument</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>argument</span><span class="token punctuation">></span></span>2875U+A==<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>argument</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>argument</span><span class="token punctuation">></span></span>null<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>argument</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>argument</span><span class="token punctuation">></span></span>63630<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>argument</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>argument</span><span class="token punctuation">></span></span>5900<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>argument</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>argument</span><span class="token punctuation">></span></span>623<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>argument</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>argument</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>argument</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>argument</span><span class="token punctuation">></span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>argument</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application-desc</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jnlp</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="启动远程连接"><a class="header-anchor" href="#启动远程连接"></a>启动远程连接</h5>
<p>双击 <code>launch.jnlp</code> 文件, 然后会依次弹出窗口如下,</p>
<ul>
<li>点 <code>继续</code></li>
</ul>
<p><img data-src="/posts/85a6419c/image-20200206182014080.png" alt="image-20200206182014080"></p>
<ul>
<li>等完成<code>验证</code>, 啥也别点</li>
</ul>
<p><img data-src="/posts/85a6419c/ScreenShot%202020-02-06%2018.24.37.png" alt="ScreenShot 2020-02-06 18.24.37"></p>
<ul>
<li>点<code>运行</code></li>
</ul>
<p><img data-src="/posts/85a6419c/ScreenShot%202020-02-06%2018.24.40.png" alt="ScreenShot 2020-02-06 18.24.40"></p>
<ul>
<li>然后弹出<code>Java iKVM Viewer</code>窗口, 在其中可以进行远程桌面控制.</li>
</ul>
<p><img data-src="/posts/85a6419c/ScreenShot%202020-02-06%2018.25.07.png" alt="ScreenShot 2020-02-06 18.25.07"></p>
<h5 id="报错Authentication-failed"><a class="header-anchor" href="#报错Authentication-failed"></a>报错Authentication failed</h5>
<p>如果从一个服务器下载了 <code>launch.jnlp</code>，重启服务器或过了一段时间服务器端的ikvm登陆令牌就会变化，导致之前下载的 <code>launch.jnlp</code>文件结尾那段里写的令牌 <code>+0eyiVR7u06ENfW </code>和 <code>2875U+A==</code>失效，</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>application-desc main-class<span class="token operator">=</span><span class="token string">"tw.com.aten.ikvm.KVMMain"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>argument<span class="token operator">></span>localhost<span class="token operator">&lt;</span>/argument<span class="token operator">></span>
    <span class="token operator">&lt;</span>argument<span class="token operator">></span>+0eyiVR7u06ENfW<span class="token operator">&lt;</span>/argument<span class="token operator">></span>
    <span class="token operator">&lt;</span>argument<span class="token operator">></span>2875U+A<span class="token operator">==</span><span class="token operator">&lt;</span>/argument<span class="token operator">></span>
  <span class="token operator">&lt;</span>argument<span class="token operator">></span>null<span class="token operator">&lt;</span>/argument<span class="token operator">></span>
    <span class="token operator">&lt;</span>argument<span class="token operator">></span><span class="token number">6363</span><span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/argument<span class="token operator">></span>
    <span class="token operator">&lt;</span>argument<span class="token operator">></span><span class="token number">590</span><span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/argument<span class="token operator">></span>
    <span class="token operator">&lt;</span>argument<span class="token operator">></span><span class="token number">62</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>/argument<span class="token operator">></span>
    <span class="token operator">&lt;</span>argument<span class="token operator">></span><span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/argument<span class="token operator">></span>
    <span class="token operator">&lt;</span>argument<span class="token operator">></span><span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/argument<span class="token operator">></span>
  <span class="token operator">&lt;</span>/application-desc<span class="token operator">></span>
<span class="token operator">&lt;</span>/jnlp<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时运行 <code>launch.jnlp</code>会报错“Authentication failed”（如下图），无法连接远程桌面。</p>
<p><img data-src="/posts/85a6419c/image-20241029195346156.png" alt="image-20241029195346156"></p>
<p>解决办法：重新从ipmi控制网页下载<code>launch.jnlp</code>（其中的令牌更新了），然后运行<code>launch.jnlp</code>，才能连上远程桌面。</p>
<h3 id="终端"><a class="header-anchor" href="#终端"></a>终端</h3>
<h4 id="命令格式"><a class="header-anchor" href="#命令格式"></a>命令格式</h4>
<p>ipmitool除了可以直接在服务器上配置ipmi（见上文），还可以从另一台电脑的终端 远程地控制服务器的ipmi。格式：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ipmitool -H <span class="token operator">&lt;</span>远程ipmi的ip<span class="token operator">></span> -p <span class="token operator">&lt;</span>远程ipmi的端口<span class="token operator">></span>  -I lanplus -U <span class="token operator">&lt;</span>远程ipmi的用户名<span class="token operator">></span> <span class="token punctuation">[</span>-P <span class="token operator">&lt;</span>远程ipmi的密码<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>ipmi的命令<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>
<p><code>-p &lt;远程ipmi的端口&gt;</code> : 缺省为 <code>623</code>，即iipmi-rmcp协议的默认端口。当使用NAT，将  <code>服务器集群的ipmi的公网ip:ipmi的公网端口</code> NAT 成某服务器的 <code>ipmi的内网ip:ipmi的内网端口</code> ，则此参数写为 <code>-H &lt;服务器集群的ipmi的公网ip&gt; -p &lt;ipmi的公网端口&gt;</code></p>
</li>
<li>
<p><code>-P &lt;远程ipmi的密码&gt;</code> : 此参数若不加，则为交互式输入ipmi的密码，推荐之；否则加此参数，要输入密码明文（不建议）</p>
</li>
<li>
<p><code>&lt;ipmi的命令&gt;</code> : 相当于在服务器上执行了命令 <code>sudo ipmitool &lt;ipmi的命令&gt; </code> ，例如 <code>&lt;ipmi的命令&gt;</code> = <code>lan print 1 </code>，以显示远程服务器上显示ipmi的网络配置</p>
</li>
</ul>
<h4 id="常用的-ipmi的命令"><a class="header-anchor" href="#常用的-ipmi的命令"></a>常用的<code>&lt;ipmi的命令&gt;</code></h4>
<ul>
<li><code>chassis power status</code> ：查看远程服务器电源状态</li>
<li><code>chassis power reset</code> ：重启远程服务器, 相当于按重启机箱上的按键,  掉电后立即上电</li>
<li><code>chassis power reset</code> : 重启远程服务器, 从掉电到上电有１秒钟的间隔</li>
<li><code>chassis power off</code> ：关闭远程服务器电源</li>
<li><code>chassis power on</code> ：然后再开启远程服务器. 这样也相当于按重启机箱上的按键</li>
</ul>
<h2 id="服务器死机处置办法"><a class="header-anchor" href="#服务器死机处置办法"></a>服务器死机处置办法</h2>
<p>以下操作均等效于按机箱上的电源键. 不推荐用<code>power reset</code>, 而是先<code>power off</code>再<code>power on</code>, 因为直接 <code>power reset</code> 掉电后立即上电, 不知道是否关机成功, 而先 <code>power off</code> 再<code>power on</code> 则可根据返回判断是否关机成功.</p>
<h3 id="用浏览器重启"><a class="header-anchor" href="#用浏览器重启"></a>用浏览器重启</h3>
<p>首先考虑用浏览器连接ipmi:</p>
<ul>
<li>点<code>Power Down</code>, 看见 <code>Power On</code> 按钮从灰变亮, 则说明关电源成功.</li>
<li>此时再点 <code>Power On</code>, 看见 <code>Power On</code> 按钮从亮变灰, 且点 <code>Refresh Console Preview</code> 后显示开机界面, 则说明开机成功.</li>
</ul>
<p><img data-src="/posts/85a6419c/image-20200206211639722.png" alt="image-20200206211639722"></p>
<h3 id="用命令重启"><a class="header-anchor" href="#用命令重启"></a>用命令重启</h3>
<p>若用浏览器连ipmi重启服务器不成功, 则尝试用命令行重启服务器</p>
<ul>
<li>关机</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ipmitool -H <span class="token operator">&lt;</span>远程ipmi的ip<span class="token operator">></span> -p <span class="token operator">&lt;</span>远程ipmi的端口<span class="token operator">></span>  -I lanplus -U <span class="token operator">&lt;</span>远程ipmi的用户名<span class="token operator">></span> <span class="token punctuation">[</span>-P <span class="token operator">&lt;</span>远程ipmi的密码<span class="token operator">></span><span class="token punctuation">]</span> chassis power off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回如下则关机成功</p>
<pre class="line-numbers language-none"><code class="language-none">Chassis Power Control: Down&#x2F;Off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>开机</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ipmitool -H <span class="token operator">&lt;</span>远程ipmi的ip<span class="token operator">></span> -p <span class="token operator">&lt;</span>远程ipmi的端口<span class="token operator">></span>  -I lanplus -U <span class="token operator">&lt;</span>远程ipmi的用户名<span class="token operator">></span> <span class="token punctuation">[</span>-P <span class="token operator">&lt;</span>远程ipmi的密码<span class="token operator">></span><span class="token punctuation">]</span> chassis power on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回如下则开机成功</p>
<pre class="line-numbers language-none"><code class="language-none">Chassis Power Control: Up&#x2F;On<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回如下则是&lt;远程ipmi的密码&gt;输入错误</p>
<pre class="line-numbers language-none"><code class="language-none">Error: Unable to establish IPMI v2 &#x2F; RMCP+ session<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>浏览器上查看</li>
</ul>
<p>然后在浏览器上ipmi页面, 点 <code>Refresh Console Preview</code> 后显示开机界面, 则说明开机成功.</p>
<h3 id="远程控制开机界面"><a class="header-anchor" href="#远程控制开机界面"></a>远程控制开机界面</h3>
<p>若上面虽然重启成功, 但ssh仍然连不上去, 则说明操作系统启动失败. 此时需要用<a href="#%E6%A1%8C%E9%9D%A2%E8%BF%9C%E7%A8%8B%E6%93%8D%E6%8E%A7">桌面远程操控</a>来进入recovery模式, 进行修复. 操作方法详见 <a href="https://hyliang96.github.io/posts/d3d6ed05/">linux开机界面</a>.</p>
<h2 id="看门狗安装"><a class="header-anchor" href="#看门狗安装"></a>看门狗安装</h2>
<p><a href="https://github.com/miniwark/miniwark-howtos/blob/master/setup_the_hardware_watchdog_timer_on-ubuntu_12.04.md">参考1</a>   <a href="https://lesterlo.wordpress.com/2017/06/23/enable-ipmi-watchdog/">参考2</a></p>
<h3 id="看门狗原理"><a class="header-anchor" href="#看门狗原理"></a>看门狗原理</h3>
<p>BMC 上运行了一个计时器，称看门狗。操作性上运行了喂狗的守护进程，每隔几秒（如10秒）去重置 BMC 上的计时器，让它恢复起始计时（如300秒）。若因内内核死机（panic）、内存冻结等，没法及时喂狗，则计时器会持续倒计时。数到0秒时，“狗饿死咬人”，即 BMC 会执行预定操作，如让服务器重启、断电。注意，不是看门狗让系统死机，是若死机则看门狗让系统重启。</p>
<h3 id="安装配置方法-手动执行"><a class="header-anchor" href="#安装配置方法-手动执行"></a>安装配置方法 手动执行</h3>
<p><a href="http://www.crawford-space.co.uk/old_psc/watchdog/watchdog-configure.html">文档</a></p>
<ul>
<li>安装喂狗进程</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ipmitool <span class="token comment"># 安装ipmi的命令行工具</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> watchdog <span class="token comment"># 安装喂狗进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>配置喂狗进程：<code>sudo vim /etc/watchdog.conf</code>, 确认有以下几行，若被注释则解注释，若value不同则改之，若无此行则加此行</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">watchdog-device   <span class="token operator">=</span> /dev/watchdog   <span class="token comment"># 狗的驱动 在文件系统下显示为一个特殊文件 /dev/watchdog，喂狗即每几秒往当中写东西，若此文件不更新，则狗“饿死”（倒计时耗尽）“咬人”（执行action）</span>
watchdog-timeout  <span class="token operator">=</span> <span class="token number">300</span>             <span class="token comment"># 狗的倒计时秒数</span>
interval          <span class="token operator">=</span> <span class="token number">10</span>              <span class="token comment"># 喂狗的间隔秒数</span>
realtime         <span class="token operator">=</span> <span class="token function">yes</span>              <span class="token comment">#</span>
priority         <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>设置喂狗进程开机自启 <code>sudo vim /etc/modules</code>, 行尾添加</li>
</ul>
<pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">ipmi_watchdog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>设置action：以下是失败的探索</li>
</ul>
<p>设置计时到0后的操作默认为’reset’，即重启服务器，如需修改，则可尝试如下办法，<a href="https://wiki.archlinux.org/index.php/Kernel_module">来源</a>，但此方法【我实验过无效】：</p>
<p><code>sudo vim /etc/default/openipmi</code>， 确认有以下几行，若被注释则解注释，若value不同则改之，若无此行则加此行</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">IPMI_Watchdog</span><span class="token operator">=</span>yes
<span class="token assign-left variable">IPMI_WATCHDOG_OPTIONS</span><span class="token operator">=</span><span class="token string">"timeout=240 action=reset"</span> <span class="token comment"># action的其他选项  'none', 'power_cycle', 'power_off'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>
<p>重启服务器，以使上述配置生效。重启之后测试：</p>
<ul>
<li>开机自启</li>
</ul>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsmod <span class="token operator">|</span> <span class="token function">grep</span> ipmi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ipmi_devintf
ipmi_si
ipmi_watchdog   <span class="token comment"># 必需要有这个</span>
ipmi_msghandler<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>喂狗进程状态</li>
</ul>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> watchdog status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回中必需有如下字样，表面喂狗进程持续运行</p>
  <pre class="line-numbers language-none"><code class="language-none">active (running)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>查看看门狗状态：连续执行多次</li>
</ul>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ipmitool <span class="token function">mc</span> watchdog get<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回</p>
  <pre class="line-numbers language-none"><code class="language-none">Watchdog Timer Use:     SMS&#x2F;OS (0x44)
Watchdog Timer Is:      Started&#x2F;Running   # 需要是Started&#x2F;Running
Watchdog Timer Actions: Hard Reset (0x01) # 需要是Hard Reset
Pre-timeout interval:   0 seconds
Timer Expiration Flags: 0x10
Initial Countdown:      300 sec
Present Countdown:      292 sec  # 多执行几次 这个数不小于 300 - 10 （喂狗间隔）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>死机测试：当上述测试正常，且目前无要运行的用户任务，则可在服务器上，用下法人为制造死机（<a href="https://unix.stackexchange.com/questions/66197/how-to-cause-kernel-panic-with-a-single-command">来源</a>），看看300秒后能否自动重启。若可以，说明看门狗能正常工作。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span>
<span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">></span> /proc/sys/kernel/sysrq
<span class="token builtin class-name">echo</span> c <span class="token operator">></span> /proc/sysrq-trigger<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="安装与测试脚本"><a class="header-anchor" href="#安装与测试脚本"></a>安装与测试脚本</h3>
<p>安装脚本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ipmitool -y
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> watchdog -y

<span class="token function">sudo</span> <span class="token function">mv</span> /etc/watchdog.conf /etc/watchdog.conf_backup
<span class="token function">sudo</span> <span class="token function">cat</span> <span class="token operator">&lt;&lt;-</span> <span class="token string">EOM<span class="token bash punctuation"> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/watchdog.conf <span class="token operator">></span> /dev/null</span>
# ping           = 172.31.14.1
# ping           = 172.26.1.255
# interface      = eth0
# file           = /var/log/messages
# change         = 1407

# Uncomment to enable test. Setting one of these values to '0' disables it.
# These values will hopefully never reboot your machine during normal use
# (if your machine is really hung, the loadavg will go much higher than 25)
# max-load-1     = 24
# max-load-5     = 18
# max-load-15        = 12

# Note that this is the number of pages!
# To get the real size, check how large the pagesize is on your machine.
# min-memory     = 1
# allocatable-memory = 1

# repair-binary      = /usr/sbin/repair
# repair-timeout     = 60
# test-binary        =
# test-timeout       = 60

# The retry-timeout and repair limit are used to handle errors in a more robust
# manner. Errors must persist for longer than retry-timeout to action a repair
# or reboot, and if repair-maximum attempts are made without the test passing a
# reboot is initiated anyway.
# retry-timeout      = 60
# repair-maximum     = 1

watchdog-device = /dev/watchdog
watchdog-timeout  = 300

# Defaults compiled into the binary
# temperature-sensor =
# max-temperature    = 90

# Defaults compiled into the binary
# admin          = root
interval        = 10
# logtick   = 1
# log-dir        = /var/log/watchdog

# This greatly decreases the chance that watchdog won't be scheduled before
# your machine is really loaded
realtime        = yes
priority        = 1

# Check if rsyslogd is still running by enabling the following line
# pidfile        = /var/run/rsyslogd.pid
EOM</span>

<span class="token function">sudo</span> <span class="token builtin class-name">echo</span> ipmi_watchdog <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> -a /etc/modules <span class="token operator">></span> /dev/null

<span class="token comment"># 确认安装成功</span>
<span class="token builtin class-name">echo</span> <span class="token string">'---------------------------------------------------'</span>
<span class="token function">sudo</span> ipmitool <span class="token function">mc</span> watchdog get
<span class="token builtin class-name">echo</span> <span class="token string">'---------------------------------------------------'</span>
<span class="token function">cat</span> /etc/watchdog.conf
<span class="token builtin class-name">echo</span> <span class="token string">'---------------------------------------------------'</span>
<span class="token function">cat</span> /etc/modules<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>重启</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>测试脚本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsmod <span class="token operator">|</span> <span class="token function">grep</span>  ipmi_watchdog<span class="token punctuation">;</span> <span class="token builtin class-name">echo</span><span class="token punctuation">;</span>
<span class="token function">service</span> watchdog status<span class="token punctuation">;</span> <span class="token builtin class-name">echo</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">sudo</span> ipmitool <span class="token function">mc</span> watchdog get<span class="token punctuation">;</span> <span class="token builtin class-name">echo</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> -ne <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token function">sleep</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token keyword">fi</span><span class="token punctuation">;</span> <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>死机测试</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /proc/sys/kernel/sysrq
<span class="token builtin class-name">echo</span> c <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span>  /proc/sysrq-trigger<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="取消看门狗"><a class="header-anchor" href="#取消看门狗"></a>取消看门狗</h3>
<p>若要让之后每次开机, 看门狗都关着, 需要如下设置:</p>
<ul>
<li>
<p>从 <code>sudo vim /etc/modules</code> , 删去 <code>ipmi_watchdog</code></p>
</li>
<li>
<p>重启系统 <code>sudo reboot</code></p>
</li>
<li>
<p>再次开机后, 看门狗还是开着的, 会持续倒计时, 一直数到 0, 然后自动重启系统. 自动重启前, 看门狗的状态为:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> ipmitool <span class="token function">mc</span> watchdog get
Watchdog Timer Use:     SMS/OS <span class="token punctuation">(</span>0x44<span class="token punctuation">)</span>
Watchdog Timer Is:      Started/Running <span class="token comment"># 看门狗是开着的</span>
Watchdog Timer Actions: Hard Reset <span class="token punctuation">(</span>0x01<span class="token punctuation">)</span> <span class="token comment"># 到 0 重启系统</span>
Pre-timeout interval:   <span class="token number">0</span> seconds
Timer Expiration Flags: 0x10
Initial Countdown:      <span class="token number">600</span> sec
Present Countdown:      <span class="token number">230</span> sec <span class="token comment"># 持续减少, 到 0 重启系统</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>自动重启后, 看门狗变成了 stopped, 此后每次重启系统都是这样的:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> ipmitool <span class="token function">mc</span> watchdog get
Watchdog Timer Use:     SMS/OS <span class="token punctuation">(</span>0x04<span class="token punctuation">)</span>
Watchdog Timer Is:      Stopped <span class="token comment"># 变成stop了</span>
Watchdog Timer Actions: Hard Reset <span class="token punctuation">(</span>0x01<span class="token punctuation">)</span>
Pre-timeout interval:   <span class="token number">0</span> seconds
Timer Expiration Flags: 0x10
Initial Countdown:      <span class="token number">600</span> sec
Present Countdown:      <span class="token number">0</span> sec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="没有reset持续倒计时-抢救方法"><a class="header-anchor" href="#没有reset持续倒计时-抢救方法"></a>没有reset持续倒计时 - 抢救方法</h3>
<p>若 <code>ipmi_watchdog</code> 模块之前一直在用，之后首次开机没有加载 <code>ipmi_watchdog</code> 模块（可能情况如:上文<a href="#%E5%8F%96%E6%B6%88%E7%9C%8B%E9%97%A8%E7%8B%97">取消看门狗</a>初次重启后，或 <code>ipmi_watchdog</code> 模块开机加载失败 ，等等原因），就会出现如下情况：</p>
<p>看见 <code>sudo ipmitool mc watchdog get</code> 返回</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Watchdog Timer Use:     SMS/OS <span class="token punctuation">(</span>0x44<span class="token punctuation">)</span>
Watchdog Timer Is:      Started/Running
Watchdog Timer Actions: Hard Reset <span class="token punctuation">(</span>0x01<span class="token punctuation">)</span> <span class="token comment"># 只要不是none</span>
Pre-timeout interval:   <span class="token number">0</span> seconds
Timer Expiration Flags: 0x10
Initial Countdown:      <span class="token number">300</span> sec
Present Countdown:      <span class="token number">292</span> sec <span class="token comment"># 在不断减小，不reset</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这表明电脑将很快执行重启、断点等action。故请立即执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ipmitool <span class="token function">mc</span> watchdog off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如此，倒计时关了，不再用担心被关机。</p>
<p>而后执行如下命令，以设置action=none。此设置立即生效，且只要开机不加载 <code>ipmi_watchdog</code> 模块，此设置在之后开机后依然有效，<a href="https://fossies.org/linux/watchdog/README.watchdog.ipmi">参考</a>。若开机加载 <code>ipmi_watchdog</code> 模块，则实际执行的是 <code>/etc/watchdog.conf </code> 设置，而非如下设置。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ipmitool raw 0x06 0x24 0x04 0x00 0x00 0x10 0xb8 0x0b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如此，会得到action=none, timeout=<code>0xb8 0x0b</code>= 300 s</p>
<pre class="line-numbers language-none"><code class="language-none">$ sudo ipmitool mc watchdog get
Watchdog Timer Use:     SMS&#x2F;OS (0x44)
Watchdog Timer Is:      Started&#x2F;Running
Watchdog Timer Actions: No action (0x00)
Pre-timeout interval:   0 seconds
Timer Expiration Flags: 0x00
Initial Countdown:      300 sec
Present Countdown:      288 sec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="看门狗的开关"><a class="header-anchor" href="#看门狗的开关"></a>看门狗的开关</h3>
<ul>
<li>查看看门狗配置</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ipmitool <span class="token function">mc</span> watchdog get<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>关看门狗，不再倒计时</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ipmitool <span class="token function">mc</span> watchdog off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>依照最新的看门狗行为设置 启动看门狗</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ipmitool <span class="token function">mc</span> watchdog reset<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="看门狗行为设置"><a class="header-anchor" href="#看门狗行为设置"></a>看门狗行为设置</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ipmitool raw      0x06 0x24   0x04 0x<span class="token operator">&lt;</span>XX<span class="token operator">></span> 0x00 0x10 0x<span class="token operator">&lt;</span>YY<span class="token operator">></span> 0x<span class="token operator">&lt;</span>ZZ<span class="token operator">></span>
<span class="token comment"># sudo ipmitool raw  | 0x06 0x24 | 0x04 0x&lt;XX> 0x00 0x10 0x&lt;YY> 0x&lt;ZZ></span>
<span class="token comment">#                    |所设是看门狗 | 设置参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><code>0x06 0x24</code>：所设置是看门狗</p>
<ul>
<li>第一段 netfn： <code>0x06</code> = &quot;App Application Requests”</li>
<li>第二段 cmd：<code>0x24</code> = &quot;Set Watchdog Timer”</li>
</ul>
<p><code>0x04 0x&lt;XX&gt; 0x00 0x10 0x&lt;YY&gt; 0x&lt;ZZ&gt;</code> ：看门狗的设置参数，<a href="https://sourceforge.net/p/ipmitool/mailman/ipmitool-devel/thread/4380D254.90908@eurus.dti.ne.jp/">详见</a>。以下只讲解action和实践，<a href="https://advantech-ncg.zendesk.com/hc/en-us/articles/360028285872-How-to-use-ipmitool-command-to-set-BMC-watchdog-timer-">来源</a> ：</p>
<ul>
<li>action：<code> 0x&lt;XX&gt;</code></li>
</ul>
<p><img data-src="/posts/85a6419c/mceclip1.png" alt="mceclip1.png"></p>
<ul>
<li>倒计时时长：范围 0.1(0X0001) ~6553.5(0XFFFF) seconds</li>
</ul>
<p><img data-src="/posts/85a6419c/mceclip2.png" alt="mceclip2.png"></p>
<p>例如</p>
<p><code>0xc8 0x00</code> = <code> 0x00c8</code> x 100ms = 20,000 ms =20 s</p>
<p><code>0x00 0x0c</code>= <code>0x0c00</code> x 100ms =  307 s</p>
<p><code>0xb8 0x0b</code> = <code>0x0bb8</code> x 100ms = 300 s</p>
<h2 id="https不安全-SSL证书过期"><a class="header-anchor" href="#https不安全-SSL证书过期"></a>https不安全-SSL证书过期</h2>
<h3 id="服务器端添加自签名证书"><a class="header-anchor" href="#服务器端添加自签名证书"></a>服务器端添加自签名证书</h3>
<p><a href="https://www.bytesizedalex.com/supermicro-ipmi-ssl-tls-certificate-replacement/">参考</a></p>
<p><a href="http://pkolesni.blogspot.com/2018/02/how-to-replace-supermicro-ipmi-ssl-tls.html">有效教程</a></p>
<p>创私钥  <code>ipmi.pem</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl genrsa -out ipmi.pem <span class="token number">2048</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>用私钥 <code>ipmi.pem</code> 制备证书  <code>ipmi.cert </code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl req -new -key ipmi.pem -out ipmi.cert<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>交互输入如下</p>
<pre class="line-numbers language-none"><code class="language-none">You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &#39;.&#39;, the field will be left blank.
-----
Country Name (2 letter code) [AU]:CN
State or Province Name (full name) [Some-State]:Beijing
Locality Name (eg, city) []:Beijing
Organization Name (eg, company) [Internet Widgits Pty Ltd]:THU
Organizational Unit Name (eg, section) []:XXX-Lab
        # 也可不填
Common Name (e.g. server FQDN or YOUR name) []:localhost
        # 其他的项目可以乱填，但这个必须写【localhost】，才能用ssh -L端口映射ipmi到localhost后，能安全地连接ipmi
Email Address []:aaaa@xxx.yyyy.cn
        # 邮箱随便填

Please enter the following &#39;extra&#39; attributes
to be sent with your certificate request
A challenge password []:
    # 可不填, 直接回车
An optional company name []:
    # 可不填, 直接回车<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>用私钥 <code>ipmi.pem</code> 签证书 <code>ipmi.cert </code>, 有效820天 (tls服务器证书有效期必需&lt;=825天 <a href="https://segmentfault.com/q/1010000020699053">出处</a>)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl x509 -req -days <span class="token number">820</span> -in ipmi.cert  -signkey ipmi.pem -out ipmi.cert<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后将  <code>ipmi.cert</code> 上传到 <code>New SSL Certificate</code>,  <code>ipmi.pem </code> 上传到 <code>New Private Key</code>, 再点 <code>Update</code>.</p>
<p><img data-src="/posts/85a6419c/Configuration-SSL-Certification-Menu.png" alt="img"></p>
<p>若显示提交成功, 则会重启ipmi设备 (不是操作系统重启), 一分钟后重新登录此页面, 则有了一个自签名的SSL证书.</p>
<h3 id="浏览器端设置"><a class="header-anchor" href="#浏览器端设置"></a>浏览器端设置</h3>
<h4 id="把刚才的证书添加到本地的钥匙串"><a class="header-anchor" href="#把刚才的证书添加到本地的钥匙串"></a>把刚才的证书添加到本地的钥匙串</h4>
<ul>
<li>mac:</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 若仅为当前用户添加, catalina系统还允许如此操作</span>
security <span class="token function">import</span> ipmi.pem  -k ~/Library/Keychains/login.keychain
<span class="token comment"># 若需为所有用户添加, 但catalina系统不允许如此操作了</span>
<span class="token function">sudo</span> security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain ipmi.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="设置浏览器允许访问不安全的localhost"><a class="header-anchor" href="#设置浏览器允许访问不安全的localhost"></a>设置浏览器允许访问不安全的localhost</h4>
<ul>
<li>chrome 浏览器 访问如下url</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">chrome:&#x2F;&#x2F;flags&#x2F;#allow-insecure-localhost<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img data-src="/posts/85a6419c/image-20201119231400452.png" alt="image-20201119231400452" style="zoom:50%;">
<p>此项改成enable, 即可访问 <code>https://127.0.0.1:&lt;端口&gt;</code></p>
<ul>
<li>firefox: 无需设置即可访问 <code>https://127.0.0.1:&lt;端口&gt;</code></li>
<li>safari: 可直接访问<code>https://localhost:&lt;端口&gt;</code>; 若无法访问之, 可访问 <code>https://127.0.0.1:&lt;端口&gt;</code>; 欲修复<code>https://localhost:&lt;端口&gt;</code>的访问, 需</li>
</ul>
<h1 id="其他参考资料"><a class="header-anchor" href="#其他参考资料"></a>其他参考资料</h1>
<p><a href="https://blog.csdn.net/whatday/article/details/88016972">看门狗的原理</a></p>
<p><a href="https://github.com/erik-smit/oohhh-what-does-this-ipmi-doooo-no-deedee-nooooo/blob/master/1-discovering/snippets/Computercheese/IPMI-BMC%20Watchdog%20Timer%20Commands.txt">ipmitool watchdog 使用示例</a></p>
<p><a href="https://support.huawei.com/enterprise/zh/doc/EDOC1000061915/528f51d3/configuring-the-ibmc-by-using-the-ipmitool">ipmitool命令文档</a></p>
<p><a href="https://community.pivotal.io/s/article/How-to-work-on-IPMI-and-IPMITOOL">ipmitool常用命令指南</a></p>
<p><a href="https://www.jianshu.com/p/ad9590ca225b">ipmitool常用命令</a></p>
<p><a href="https://blog.pcfe.net/hugo/posts/2018-08-23-ipmi-watchdog/">IPMI hardware watchdog with RHEL 7 / CentOS 7设置方法</a></p>
<p><a href="https://serverfault.com/questions/638064/watchdog-service-is-not-working-because-dev-watchdog-does-not-exist">/dev/watchdog文件不存在</a></p>
]]></content>
      <categories>
        <category>器</category>
        <category>服务器连接</category>
      </categories>
  </entry>
  <entry>
    <title>sshfs</title>
    <url>/posts/bdb5144f/</url>
    <content><![CDATA[<h1 id="sshfs教程"><a class="header-anchor" href="#sshfs教程"></a>sshfs教程</h1>
<p>在linux或mac上，加载远程Linux服务器上的文件目录</p>
<p>[TOC]</p>
<h2 id="安装"><a class="header-anchor" href="#安装"></a>安装</h2>
<p>需依次安装以下三软件</p>
<h3 id="macfuse"><a class="header-anchor" href="#macfuse"></a>macfuse</h3>
<p>功能：使mac可用读取linux、windows的文件系统，应用于：</p>
<ul>
<li>mac读写它们的U盘/移动硬盘</li>
<li>mac加载服务器上文件目录</li>
</ul>
<p><a href="https://osxfuse.github.io">官网</a>     <a href="https://github.com/osxfuse/osxfuse/releases">下载</a></p>
<h3 id="sshfs"><a class="header-anchor" href="#sshfs"></a>sshfs</h3>
<p>功能：从Mac加载Linux服务器上的文件目录</p>
<ul>
<li>依赖于macfuse</li>
<li>只有命令行</li>
</ul>
<p><a href="https://github.com/osxfuse/osxfuse/wiki/SSHFS">官网</a>    <a href="https://github.com/osxfuse/sshfs/releases">下载</a></p>
<h3 id="macfusion"><a class="header-anchor" href="#macfusion"></a>macfusion</h3>
<p>功能：sshfs的图形界面</p>
<p><a href="http://macfusionapp.org">官网</a>已不再维护该软件，其版本不支持OSX Serria及以上系统</p>
<p><a href="https://github.com/macfusion-ng/macfusion2/releases">可用的fork版本</a>: 我已验证，其<code>Sierra Pre-release 3</code>版本，OSX Serria和OSX Hgih Serria可用</p>
<h2 id="更新"><a class="header-anchor" href="#更新"></a>更新</h2>
<h3 id="升级Mojave后使用sshfs要求升级FUSE"><a class="header-anchor" href="#升级Mojave后使用sshfs要求升级FUSE"></a>升级Mojave后使用sshfs要求升级FUSE</h3>
<p>编辑文章</p>
<p>升级Mojave后，使用sshfs挂载远程目录失败，弹出对话框显示报错</p>
<blockquote>
<p>Unsupported macOS Version FuseThe installed version of FUSE is too old for the operating system. Please upgrade your FUSE installation to one that is compatible with the currently running version of macOS.</p>
</blockquote>
<h4 id="尝试在系统偏好设置中升级FUSE"><a class="header-anchor" href="#尝试在系统偏好设置中升级FUSE"></a>尝试在系统偏好设置中升级FUSE</h4>
<p>打开<code>系统偏好设置</code>，点<code>FUSE</code></p>
<p><img data-src="/posts/bdb5144f/1.png" alt="1"></p>
<p><img data-src="/posts/bdb5144f/2.png" alt="2"></p>
<p>提示无可用更新，更新失败。</p>
<h4 id="前往osxfuse-github-io下载"><a class="header-anchor" href="#前往osxfuse-github-io下载"></a>前往osxfuse.github.io下载</h4>
<p>前往<a href="https://osxfuse.github.io/">https://osxfuse.github.io</a>，下载<code>Stable Releases</code>中的<code>FUSE for macOS 3.8.2</code>，安装之</p>
<p>而后sshfs可用使用了。</p>
<h2 id="使用"><a class="header-anchor" href="#使用"></a>使用</h2>
<h3 id="ui用法"><a class="header-anchor" href="#ui用法"></a><a href="https://meiriyitie.com/2015/05/29/using-sshfs-on-linux-and-macos-x/">ui用法</a></h3>
<h3 id="sshfs命令行用法"><a class="header-anchor" href="#sshfs命令行用法"></a><a href="https://www.jianshu.com/p/31205b26deff">sshfs命令行用法</a></h3>
<p>优点：使用此方法挂载后，从一处把笔记本带到另一处，连到另一个网后，挂载依然不断</p>
<h4 id="挂载"><a class="header-anchor" href="#挂载"></a>挂载</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sshfs <span class="token operator">&lt;</span>user<span class="token operator">></span>@<span class="token operator">&lt;</span>host<span class="token operator">></span>:<span class="token operator">&lt;</span>path<span class="token operator">></span> <span class="token operator">&lt;</span>mount_path<span class="token operator">></span> -o <span class="token assign-left variable">volname</span><span class="token operator">=</span><span class="token operator">&lt;</span>volume_name<span class="token operator">></span> -C -o reconnect -o transform_symlinks -o follow_symlinks <span class="token comment">#  -o local</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>-C：压缩，即-o compression=yes<br>
-o reconnect：自动重连<br>
-o transform_symlinks：表示转换绝对链接符号为相对链接符号<br>
-o follow_symlinks：沿用服务器上的链接符号</p>
<p>-o local：视为本地磁盘，会在Finder/侧栏/设备 和 桌面 下出现图标名为volume_name</p>
</blockquote>
<ul>
<li><code>&lt;user&gt;@&lt;host&gt;</code> 可以用~/.ssh/config中的服务器别名</li>
<li>需先创建空文件夹<code>&lt;mount_path&gt;</code>
<ul>
<li>若无此文件夹，则不会自动创建，mount失败</li>
<li>若非空，mount期间，文件夹中原有的东西看不见了，但umount后又能看见</li>
</ul>
</li>
<li><code>&lt;mount_path&gt;</code>与<code>&lt;volume_name&gt;</code>可以同名</li>
</ul>
<h4 id="卸挂（二者等效）"><a class="header-anchor" href="#卸挂（二者等效）"></a>卸挂（二者等效）</h4>
<h5 id="法一-用图像界面推出"><a class="header-anchor" href="#法一-用图像界面推出"></a>法一 用图像界面推出</h5>
<p>在Finder中，戳到<code>&lt;mount_path&gt;/..</code>或<code>MacBook Air</code>下，右键<code>&lt;mount_path&gt;</code>，点“推出”</p>
<p>若设了<code>-o local</code>，还可</p>
<ul>
<li>
<p>或在Finder/侧栏/设备/&lt;volume_name&gt; 的右侧有个向上箭头，是推出按钮，按之即推出（推荐）</p>
</li>
<li>
<p>或从桌面/&lt;volume_name&gt;，右键<code>&lt;mount_path&gt;</code>，点“推出”</p>
</li>
</ul>
<h5 id="法二-命令推出"><a class="header-anchor" href="#法二-命令推出"></a>法二 命令推出</h5>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">umount</span> <span class="token operator">&lt;</span>mount_path<span class="token operator">></span>
<span class="token comment"># 等效于</span>
fusermount -u <span class="token operator">&lt;</span>mount_path<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>在mac是<code>&lt;fusermount&gt;</code>命令找不到，但<code>umount</code>可以用</li>
<li>在服务器上，<code>umount</code>需要sudo，但<code>fusermount -u</code>可以用</li>
<li>注意不是<code>unmount</code></li>
</ul>
<h4 id="免密"><a class="header-anchor" href="#免密"></a>免密</h4>
<p>这样子每次挂载的时候，都需要输入密码，可以设置成免密码登录：<br>
<a href="https://www.jianshu.com/p/31cbbbc5f9fa/">将公钥追加到远程服务器：</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> .ssh/id_rsa.pub <span class="token operator">|</span> <span class="token function">ssh</span> username@server <span class="token string">"cat - >>.ssh/authorized_keys"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>登录：</p>
<pre class="line-numbers language-none"><code class="language-none">sshfs username@server:path local_path
umount mount_path<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="sshfs的bug处理"><a class="header-anchor" href="#sshfs的bug处理"></a>sshfs的bug处理</h2>
<p><a href="https://www.jianshu.com/p/8723ba79f35a">参考</a></p>
<h3 id="服务器断连-–-“保存路径不存在”-无法ls-Input-output-error-无法-rm-Operation-not-permitted"><a class="header-anchor" href="#服务器断连-–-“保存路径不存在”-无法ls-Input-output-error-无法-rm-Operation-not-permitted"></a>服务器断连 – “保存路径不存在” / 无法ls (Input/output error) /无法 rm (Operation not permitted)</h3>
<p><strong>症状</strong> 当 mac 休眠、重启、换了个网络环境，可能与服务器断连（也可能保持连接）</p>
<ul>
<li>在软件（如sublime）里，之前打开的所mount目录下的文件，此时保存文件，会显示“保存路径不存在”</li>
<li><code>ls</code> mac上用于mount的文件夹（如<code>/Users/$USER/Desktop/mount/mounted_server</code>）会报错</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> /Users/<span class="token environment constant">$USER</span>/Desktop/mount
<span class="token comment"># 或</span>
<span class="token function">ls</span> /Users/<span class="token environment constant">$USER</span>/Desktop/mount/mounted_server
<span class="token comment"># 返回 ls: cannot access '/Users/$USER/Desktop/mount/mounted_server': Input/output error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>rm</code> mac上用于mount的文件夹，会报错</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> /Users/<span class="token environment constant">$USER</span>/Desktop/mount/mounted_server -rf
<span class="token comment"># 返回 rm: cannot remove '/Users/$USER/Desktop/mount/mounted_server': Operation not permitted</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>以上症状出现任意一个，说明已经与远处服务器断开连接，但本地未umount</p>
<p><strong>对策</strong> 依次做如下操作</p>
<ul>
<li>检查mac的网络连接</li>
<li>关掉所有在用mount目录下文件的软件</li>
<li><code>umount  &lt;mount_path&gt;</code></li>
<li>再重新<code>sshfs &lt;user&gt;@&lt;host&gt;:&lt;path&gt; &lt;mount_path&gt;</code></li>
</ul>
<h3 id="有文件在用-–-无法umount-Resource-busy"><a class="header-anchor" href="#有文件在用-–-无法umount-Resource-busy"></a>有文件在用 – 无法umount (Resource busy)</h3>
<p>若显示</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">umount</span> <span class="token operator">&lt;</span>mount_path<span class="token operator">></span>
或
fusemount -u <span class="token operator">&lt;</span>mount_path<span class="token operator">></span>
<span class="token comment"># 返回 umount(&lt;mount_path>): Resource busy -- try 'diskutil unmount'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>则说明此时mac上仍有软件在打开了所mount的文件夹下的文件</p>
<ul>
<li>
<p>法一：关闭软件再安全卸载</p>
<ul>
<li>
<p>实时监测哪些进程占用了<code>&lt;mount_path&gt;</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">watch</span> -n <span class="token number">0.1</span> <span class="token function">lsof</span> <span class="token operator">&lt;</span>mount_path<span class="token operator">></span>   <span class="token comment"># 按 ctrl+c 结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>需在那个软件中，在使用mount的文件夹下的文件的窗口内，<code>⌘+W</code>关闭窗口，再</p>
  <pre class="line-numbers language-none"><code class="language-none">umount &lt;mount_path&gt;
或
fusemount -u &lt;mount_path&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>可成功</p>
</li>
<li>
<p>若还不行，<code>⌘+Q</code>退出整个软件，再<code>umont  &lt;mount_path&gt;</code>或<code>fusemount -u &lt;mount_path&gt;</code></p>
</li>
</ul>
</li>
<li>
<p>法二：强制卸载</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">umount</span> -l <span class="token operator">&lt;</span>mount_path<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>umount -h:</p>
<p>-l, --lazy              detach the filesystem now, clean up things later</p>
</blockquote>
</li>
</ul>
<h3 id="此路径没挂载-–-无法umount-not-currently-mounted"><a class="header-anchor" href="#此路径没挂载-–-无法umount-not-currently-mounted"></a>此路径没挂载 – 无法umount (not currently mounted)</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">umount</span> <span class="token operator">&lt;</span>mount_path<span class="token operator">></span> <span class="token comment"># 返回 umount: local_dir: not currently mounted</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>说明没有sshfs进程从&lt;mount_path&gt; 挂载。要想在&lt;mount_path&gt; 挂载，直接<code>sshfs &lt;user&gt;@&lt;host&gt;:&lt;path&gt; &lt;mount_path&gt; </code>即可</p>
<h3 id="此路径已挂载-–-无法mount-is-itself-on-a-OSXFUSE-volume"><a class="header-anchor" href="#此路径已挂载-–-无法mount-is-itself-on-a-OSXFUSE-volume"></a>此路径已挂载 – 无法mount(is itself on a OSXFUSE volume)</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sshfs <span class="token operator">&lt;</span>user<span class="token operator">></span>@<span class="token operator">&lt;</span>host<span class="token operator">></span>:<span class="token operator">&lt;</span>path<span class="token operator">></span> <span class="token operator">&lt;</span>mount_path<span class="token operator">></span>
<span class="token comment"># 返回 mount_osxfuse: mount point &lt;mount_path> is itself on a OSXFUSE volume</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>说明此时已有mount进程使用了&lt;mount_path&gt; ，&lt;mount_path&gt; 成为了挂载磁盘</p>
<p>可列出所有在sshfs进程</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pgrep -lf sshfs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="ls-rm-挂空了的路径-–-（Device-not-configured）"><a class="header-anchor" href="#ls-rm-挂空了的路径-–-（Device-not-configured）"></a>ls/rm 挂空了的路径 – （Device not configured）</h3>
<p>若先前执行了</p>
<pre class="line-numbers language-none"><code class="language-none">sshfs &lt;mount_path&gt; :.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后ctrl-c或进程自动结束，则此时&lt;mount_path&gt;依旧sshfs被占用，称&lt;mount_path&gt;“挂空”</p>
<p>此时<code>ls(或rm) &lt;mount_path&gt;(及其下的路径)</code>，会返回</p>
<pre class="line-numbers language-none"><code class="language-none">ls(或rm): cannot open directory &#39;&#x2F;Users&#x2F;$USER&#x2F;Desktop&#x2F;mount&#x2F;&#39;: Device not configured<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>需要<code>umount &lt;mount_path&gt;</code>，解除sshfs对&lt;mount_path&gt;的占用</p>
<p>而后<code>ls(或rm) &lt;mount_path&gt;</code>正常返回</p>
<h3 id="需手动杀进程"><a class="header-anchor" href="#需手动杀进程"></a>需手动杀进程</h3>
<p>以上操作均解决不了，则需手动杀sshfs进程</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pgrep -lf sshfs
<span class="token comment"># 会显示你sshfs时的命令，如</span>
<span class="token comment"># 38371 sshfs -o transform_symlinks -o follow_symlinks &lt;hostname>:/ /Users/$USER/Desktop/mount/mounted_server -o volname=&lt;hostname> -o reconnect -o local</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>然后杀掉相应的挂载进程</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">kill</span> -9 <span class="token operator">&lt;</span>相应的pid <span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>之后重新挂载响应的目录即可</p>
<h2 id="Macfusion的bug处理"><a class="header-anchor" href="#Macfusion的bug处理"></a>Macfusion的bug处理</h2>
<h3 id="Macfusion显示Failed-to-Mount"><a class="header-anchor" href="#Macfusion显示Failed-to-Mount"></a>Macfusion显示<code>Failed to Mount</code></h3>
<ul>
<li>检测本机已经联网</li>
<li>检查本机mount路径，知否有与所mount盘同名的文件夹（可能是mount该盘，从mac打开其中文件，断开连接后，又保存该文件，从而创建同名文件夹），请将此文件夹改名，再次mount即可成功</li>
<li>如仍不行，或见所mount的磁盘图标变成蓝+灰色，而非绿色，则关闭sshfs程序mount此服务器的进程</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token operator">&lt;</span>该服务器在Macfision工具栏中的名字<span class="token operator">></span>（如cpu4） 或 <span class="token operator">&lt;</span>usr@server_address<span class="token operator">></span>（如someone@some.place.com）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mac   <span class="token number">24715</span>   <span class="token number">0.6</span>  <span class="token number">0.0</span>  <span class="token number">4267752</span>    <span class="token number">876</span> s004  S+    <span class="token number">9</span>:08下午   <span class="token number">0</span>:00.01 <span class="token function">grep</span> --color cpu4
mac   <span class="token number">24093</span>   <span class="token number">0.0</span>  <span class="token number">0.0</span>   <span class="token number">729280</span>   <span class="token number">1516</span>   ??  S     <span class="token number">8</span>:54下午   <span class="token number">0</span>:00.08 /Applications/Macfusion.app/Contents/PlugIns/sshfs.mfplugin/Contents/Resources/sshfs-static someone@some.place.com: /Users/<span class="token environment constant">$USER</span>/Desktop/mount/cpu4 -p4514 -oNumberOfPasswordPrompts<span class="token operator">=</span><span class="token number">1</span> -ocompression<span class="token operator">=</span>yes -ofollow_symlinks -odefer_permissions -oauto_cache -f -ovolname<span class="token operator">=</span>cpu4 -ovolicon<span class="token operator">=</span>/Applications/Macfusion.app/Contents/PlugIns/sshfs.mfplugin/Contents/Resources/sshfs_icon.icns<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>输入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">kill</span> -9 <span class="token number">24093</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在Macfusion中重新mount该服务器</p>
<h3 id="Macfusion列表全白"><a class="header-anchor" href="#Macfusion列表全白"></a>Macfusion列表全白</h3>
<p>需要重启Macfusion——<code>command+Q</code> 只能关闭Macfusiion的前台，无法关闭其后台。重启后台需如下操作：</p>
<ul>
<li>法一 （等效于法二）</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">killall</span> macfusionAgent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>法二</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">ps aux | grep macfusion<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回</p>
<pre class="line-numbers language-none"><code class="language-none">USER PID     %CPU %MEM     VSZ    RSS   TT  STAT  STARTED      TIME COMMAND
mac  24105   0.0  0.0  4277992    916 s004  S+    8:54下午   0:00.01 grep --color macfusion
mac  24090   0.0  0.4  4345112  14996   ??  S     8:54下午   0:00.21 &#x2F;Applications&#x2F;Macfusion.app&#x2F;Contents&#x2F;Resources&#x2F;macfusionAgent.app&#x2F;Contents&#x2F;MacOS&#x2F;macfusionAgent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>输入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">kill</span> -9 <span class="token number">24105</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>重新点开Macfusion的图标</p>
<h3 id="若再次进入目录仍报错、或卸挂失败，需杀掉sshfs之进程："><a class="header-anchor" href="#若再次进入目录仍报错、或卸挂失败，需杀掉sshfs之进程："></a>若再次进入目录仍报错、或卸挂失败，需杀掉sshfs之进程：</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pgrep -lf sshfs <span class="token comment"># 列出</span>
<span class="token function">pkill</span> -9 sshfs  <span class="token comment"># 杀死</span>
pgrep -lf sshfs <span class="token comment"># 再列出，若空则杀尽</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>再重新挂载。</p>
<h3 id="如仍不行"><a class="header-anchor" href="#如仍不行"></a>如仍不行</h3>
<p>重启mac</p>
<h3 id="为解决的bug"><a class="header-anchor" href="#为解决的bug"></a>为解决的bug</h3>
<ul>
<li>
<p>显示</p>
<p>点<code>Mount</code>后，弹出对话框显示</p>
<pre class="line-numbers language-none"><code class="language-none">Could not mount filesystem: Mount process has terminated unexpectedly.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>Macfusion主界面显示</p>
<p><code>gpu7 (Failed to Mount)</code>                             <code>Edit</code>  <code>Mount</code></p>
<p>自检：</p>
<p>本机原来gpu7处，没有名为gpu7/的（可见或隐藏）文件夹或磁盘图标</p>
<p><code>ps aux | grep gpu7</code> <code>ps aux | grep &lt;server_url&gt;</code> 都显示空</p>
<p><code>killall macfusionAgent </code>后，从图标重启macfusionAgent.app，然后再mount gpu7，依然上述报错</p>
</li>
</ul>
]]></content>
      <categories>
        <category>器</category>
        <category>服务器连接</category>
      </categories>
  </entry>
  <entry>
    <title>vnc安装方法</title>
    <url>/posts/de6bda9/</url>
    <content><![CDATA[<h1 id="vnc安装方法"><a class="header-anchor" href="#vnc安装方法"></a>vnc安装方法</h1>
<h2 id="安装配置VNC"><a class="header-anchor" href="#安装配置VNC"></a>安装配置VNC</h2>
<h3 id="服务器"><a class="header-anchor" href="#服务器"></a>服务器</h3>
<h4 id="依赖安装"><a class="header-anchor" href="#依赖安装"></a>依赖安装</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> tightvncserver xfce4 xfce4-goodies powerline fonts-powerline ttf-wqy-zenhei  autocutsel fcitx-googlepinyin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>
<p>详解</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> tightvncserver      <span class="token comment"># 桌面转发服务端</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> xfce4 xfce4-goodies <span class="token comment"># 桌面及桌面程序</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> powerline fonts-powerline <span class="token comment"># powerline字体，以便终端下显示</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ttf-wqy-zenhei <span class="token comment"># 中文字体</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> autocutsel <span class="token comment"># 客户端和服务器的复制黏贴同步</span>
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> fcitx-googlepinyin <span class="token comment"># 中文输入法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h4 id="配置"><a class="header-anchor" href="#配置"></a>配置</h4>
<p>将以下alias添加到<code>~/.bashrc</code>之类的文件，然后source之</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">vncs</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> -eq <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"start"</span> <span class="token punctuation">]</span>
    <span class="token keyword">then</span>
        vncserver :1 -geometry 1366x768
    <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"stop"</span> <span class="token punctuation">]</span>
    <span class="token keyword">then</span>
        vncserver -kill :1
    <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"restart"</span> <span class="token punctuation">]</span>
    <span class="token keyword">then</span>
        vncserver -kill :1
        vncserver :1 -geometry 1366x768
    <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"passwd"</span> <span class="token punctuation">]</span>
    <span class="token keyword">then</span>
        vncpasswd
    <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"config"</span> <span class="token punctuation">]</span>
    <span class="token keyword">then</span>
        <span class="token function">vim</span> ~/.vnc/xstartup
    <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"help"</span> <span class="token punctuation">]</span>
    <span class="token keyword">then</span>
        <span class="token builtin class-name">echo</span> <span class="token string">'Usage: vnc [ start(default)) | stop | restart | passwd | config | help ]'</span>
    <span class="token keyword">else</span>
        <span class="token builtin class-name">echo</span> <span class="token string">'Usage: vnc [ start(default)) | stop | restart | passwd | config | help ]'</span>
    <span class="token keyword">fi</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>设置密码：<code>vncs passwd</code> 即 <code>vncpasswd</code>，然后在交互提示下设置密码，可选择设置只读密码</p>
<p>配置vnc server的启动项：<code>vncs config</code> 即 <code>vim ~/.vnc/xstartup</code>，替换全文为</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>

<span class="token builtin class-name">unset</span> <span class="token environment constant">SESSION_MANAGER</span>
<span class="token builtin class-name">unset</span> <span class="token environment constant">DBUS_SESSION_BUS_ADDRESS</span>
dbus-launch /usr/bin/startxfce4 <span class="token operator">&amp;</span>

autocutsel -f <span class="token comment"># 共享剪切板，在vnc viewer里，ctrl+shift+c/v 复制/黏贴</span>

<span class="token comment"># 输入法</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>zh_CN.UTF-8 <span class="token comment"># 启用中文环境</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANGUAGE</span></span><span class="token operator">=</span>zh_CN:en_US
<span class="token builtin class-name">export</span> <span class="token assign-left variable">LC_CTYPE</span><span class="token operator">=</span>en_US.UTF-8

<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">XMODIFIERS</span></span><span class="token operator">=</span><span class="token string">"@im=fcitx"</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">GTK_IM_MODULE</span><span class="token operator">=</span>fcitx
<span class="token builtin class-name">export</span> <span class="token assign-left variable">QT_IM_MODULE</span><span class="token operator">=</span>fcitx
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">XMODIFIERS</span></span><span class="token operator">=</span>@im<span class="token operator">=</span>fcitx
fcitx <span class="token operator">&amp;</span>

<span class="token punctuation">[</span> -x /etc/vnc/xstartup <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">exec</span> /etc/vnc/xstartup
<span class="token punctuation">[</span> -r <span class="token environment constant">$HOME</span>/.Xresources <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> xrdb <span class="token environment constant">$HOME</span>/.Xresources
xsetroot -solid grey
vncconfig -iconic <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>每次更改配置文件，输入<code>vnc resatrt</code>以重启vnc server</p>
<h3 id="客户端-笔记本-安装"><a class="header-anchor" href="#客户端-笔记本-安装"></a>客户端(笔记本)安装</h3>
<p>mac随有系统自带的vnc客户端，<code>⌃space</code>搜索 <code>屏幕共享.app</code>，然后填入<code>ip:端口号</code>，即可连接，但它拖动远程桌面中的窗口有残影，不推荐使用</p>
<p>推荐另外安装<code>vnc viewer</code>，<a href="https://www.realvnc.com/en/connect/download/viewer/macos/">官方下载链接</a>，个人版免费但不支持文件传输，<a href="https://www.realvnc.com/en/connect/docs/file-transfer.html">专业版、企业版支持文件传输</a></p>
<h3 id="连接方法"><a class="header-anchor" href="#连接方法"></a>连接方法</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">vncv</span><span class="token operator">=</span><span class="token string">'ssh -L 5901:127.0.0.1:5901 -C -N'</span>
<span class="token comment"># -C: require compresion for all data(including stdin, stdout, stderr, and data for forwarded X11, TCP and UNIX-domain connections).</span>
<span class="token comment"># -N: Do not execute a remote command.  This is useful for just forwarding ports.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vncv  服务器名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后打开<code>vnc viewer.app</code>，点 <code>File-NewConnection</code>， 弹出窗口里输入</p>
<p><img data-src="/posts/de6bda9/2019-04-19_21.59.00.png" alt></p>
<p>双击连接</p>
<p><img data-src="/posts/de6bda9/2019-04-19_22.01.38.png" alt></p>
<p>首次连接需要输入vnc server的密码</p>
<p><img data-src="/posts/de6bda9/2019-04-19_21.59.36.png" alt></p>
<p>然后会显示对面的桌面</p>
<p><img data-src="/posts/de6bda9/2019-04-19_22.03.41.png" alt></p>
<h3 id="输入法配置"><a class="header-anchor" href="#输入法配置"></a>输入法配置</h3>
<p>用<code>vnc viewer</code>连上服务器，显示后桌面后</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">im-config <span class="token comment"># 弹出对话框，一路选确定，然后选fcitx作为默认是输入法</span>
fcitx-config-gtk3 <span class="token comment"># 弹出对话框，添加googlepinyin输入法；在Addon中，选中advance，然后勾除Kimpanel</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>在可以输入的地方（如终端），<code>⌃+space</code>切换输入法，或单击右上方键盘图标切换输入法</p>
<p>右上角出现<code>g</code>字样的logo，代表现在在googlepinyin输入法</p>
<p><img data-src="/posts/de6bda9/2019-04-19_22.14.13.png" alt></p>
<p><img data-src="/posts/de6bda9/2019-04-19_22.14.23.png" alt></p>
<h2 id="其他设置"><a class="header-anchor" href="#其他设置"></a>其他设置</h2>
<h3 id="更换终端"><a class="header-anchor" href="#更换终端"></a>更换终端</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> update-alternatives --config x-terminal-emulator<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>出现交互界面</p>
<pre class="line-numbers language-none"><code class="language-none">[sudo] password for $USER:
There are 7 choices for the alternative x-terminal-emulator (providing &#x2F;usr&#x2F;bin&#x2F;x-terminal-emulator).

  Selection    Path                             Priority   Status
------------------------------------------------------------
* 0            &#x2F;usr&#x2F;bin&#x2F;konsole                  40        auto mode
  1            &#x2F;usr&#x2F;bin&#x2F;koi8rxterm               20        manual mode
  2            &#x2F;usr&#x2F;bin&#x2F;konsole                  40        manual mode
  3            &#x2F;usr&#x2F;bin&#x2F;lxterm                   30        manual mode
  4            &#x2F;usr&#x2F;bin&#x2F;uxterm                   20        manual mode
  5            &#x2F;usr&#x2F;bin&#x2F;xfce4-terminal.wrapper   40        manual mode
  6            &#x2F;usr&#x2F;bin&#x2F;xterm                    20        manual mode
  7            &#x2F;usr&#x2F;bin&#x2F;xvt                      10        manual mode

Press &lt;enter&gt; to keep the current choice[*], or type selection number: 5
update-alternatives: using &#x2F;usr&#x2F;bin&#x2F;xfce4-terminal.wrapper to provide &#x2F;usr&#x2F;bin&#x2F;x-terminal-emulator (x-terminal-emulator) in manual mode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中  <code>/usr/bin/xfce4-terminal.wrapper </code> 是 <code>xfce4</code> 自带的终端模拟器</p>
<h1 id="卸载方法"><a class="header-anchor" href="#卸载方法"></a>卸载方法</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> remove --purge tightvncserver xfce4* xfce4-goodies powerline fonts-powerline ttf-wqy-zenhei  autocutsel *fcitx* fcitx-googlepinyin libgooglepinyin*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>请勿</strong>运行<code>apt autoremove</code>，它可能会把除了上述包相关的包也卸载了。用上面的匹配就能卸干净</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> /tmp/.X11-unix/X1 /tmp/.X1-lock ~/.vnc/<span class="token punctuation">&#123;</span>*.log,*.pid<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>器</category>
        <category>服务器连接</category>
      </categories>
  </entry>
  <entry>
    <title>ssh配置</title>
    <url>/posts/2e77fc3e/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="ssh只使用密码登陆"><a class="header-anchor" href="#ssh只使用密码登陆"></a>ssh只使用密码登陆</h1>
<p>若直接执行下面的命令，</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token operator">&lt;</span>用户名<span class="token operator">></span>@<span class="token operator">&lt;</span>服务器地址<span class="token operator">></span>
<span class="token comment"># 或</span>
<span class="token function">ssh</span> <span class="token operator">&lt;</span>服务器别名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>出现报错</p>
<blockquote>
<p>Received disconnect from &lt;服务器地址&gt; port &lt;端口号&gt;:2: Too many authentication failures</p>
</blockquote>
<p>则说明你的添加到钥匙串的ssh密钥太多了(<code>ssh-add -L</code>可以查看所有钥匙串里的密钥)，需要手动指定必须只用密码登陆，方法如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -o <span class="token assign-left variable">PreferredAuthentications</span><span class="token operator">=</span>password -o <span class="token assign-left variable">PubkeyAuthentication</span><span class="token operator">=</span>no <span class="token operator">&lt;</span>用户名<span class="token operator">></span>@<span class="token operator">&lt;</span>服务器地址<span class="token operator">></span>
<span class="token comment"># 或</span>
<span class="token function">ssh</span> -o <span class="token assign-left variable">PreferredAuthentications</span><span class="token operator">=</span>password -o <span class="token assign-left variable">PubkeyAuthentication</span><span class="token operator">=</span>no <span class="token operator">&lt;</span>服务器别名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>上述参数同样适用于 <code>ssh-copy-id</code>。</p>
<h1 id="ssh别名、免密登录"><a class="header-anchor" href="#ssh别名、免密登录"></a>ssh别名、免密登录</h1>
<h2 id="别名登陆"><a class="header-anchor" href="#别名登陆"></a>别名登陆</h2>
<p><a href="http://www.ttlsa.com/linux/ssh-config-aliases-server-access-tricks/">参考1</a>, <a href="https://www.jianshu.com/p/5729d5e61c72">参考2</a></p>
<p>本地电脑上，打开<code>~/.ssh/config</code>文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.ssh/config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>编写格式如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Host 服务器别名1
    HostName 服务器ip或网址1
    Port 端口号1
    User 用户名1
    IdentityFile ~/.ssh/id_rsa

Host 服务器别名2
    HostName 服务器ip或网址2
    Port 端口号2
    User 用户名2
    IdentityFile ~/.ssh/id_rsa

<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>~/.ssh/id_rsa</code>即为本地私钥</p>
<p>例如</p>
<pre class="line-numbers language-none"><code class="language-none">Host myserver
    HostName some.place.com
    Port 4123
    User pitter
    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="免密登录"><a class="header-anchor" href="#免密登录"></a>免密登录</h2>
<p><a href="https://blog.csdn.net/m0_38003171/article/details/80625821">参考</a></p>
<p>本地电脑上</p>
<h3 id="生成密钥"><a class="header-anchor" href="#生成密钥"></a>生成密钥</h3>
<ul>
<li>交互模式</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后不断回车确认，<code>~/.ssh</code>下会生成两个文件：<code>id_rsa</code>（私钥）和<code>id_rsa.pub</code>（公钥）</p>
<p>若显示已有密钥，问你要不要覆盖，则选不要</p>
<ul>
<li>非交互模式</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -P <span class="token string">""</span> -f ~/.ssh/id_rsa -q <span class="token comment"># -b 2048 -C "注释"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在<code>~/.ssh/id_rsa</code>不存在时，运行这个不会产生输出。</p>
<p>在<code>~/.ssh/id_rsa</code>存在时，运行这不会产生输出</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;home&#x2F;用户名&#x2F;.ssh&#x2F;id_rsa already exists.
Overwrite (y&#x2F;n)?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</blockquote>
<p>参数说明：</p>
<ul>
<li>
<p><code>-P &quot;&quot; </code>密码为空</p>
</li>
<li>
<p><code>-f id_rsa </code>是指保存文件为<code>~/.ssh/id_rsa</code> 和<code>~/.ssh/id_rsa.pub</code></p>
</li>
<li>
<p><code>-q</code> 静默模式，即不产生如下输出，除非报错</p>
<blockquote>
<pre class="line-numbers language-test" data-language="test"><code class="language-test">Generating public&#x2F;private rsa key pair.
Your identification has been saved in &#x2F;home&#x2F;用户名&#x2F;.ssh&#x2F;id_rsa.
Your public key has been saved in &#x2F;home&#x2F;用户名&#x2F;.ssh&#x2F;id_rsa.pub.
The key fingerprint is:
SHA256:DasvExxxxxxK&#x2F;&#x2F;JIqsxxxxxxxxxn4AdbabU 用户名@服务器
The key&#39;s randomart image is:
+---[RSA 2048]----+
| .. xxxxx    xx  |
|... xxxxx xx     |
|&#x3D; xxxxx    xx    |
|ooxx .xxxxxxxxx  |
|.  xxxxx    xx . |
|. xxxxx    x  E  |
|..o xxxxx    +   |
|  xxxxx    xx    |
|+ sssddx   .     |
+----[SHA256]-----+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
</li>
<li>
<p><code>-b 位数</code>  默认是 2048，可以指定 1024 等</p>
</li>
<li>
<p><code>-C 注释</code>  默认为<code>&quot;$USER@$(hostname)&quot;</code>提供一个新注释，</p>
</li>
</ul>
<h3 id="发送公钥到目标机器"><a class="header-anchor" href="#发送公钥到目标机器"></a>发送公钥到目标机器</h3>
<p>凡可免密访此服务器之私钥，其对应公钥皆保存在<code>~/.ssh/authorized_keys</code>中。</p>
<p>以下命令可将本地公钥追加到服务器的<code>~/.ssh/authorized_keys</code>结尾：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-copy-id -o <span class="token assign-left variable">PreferredAuthentications</span><span class="token operator">=</span>password -o <span class="token assign-left variable">PubkeyAuthentication</span><span class="token operator">=</span>no <span class="token punctuation">[</span>-i <span class="token operator">&lt;</span>公钥或对应私钥路径<span class="token operator">></span><span class="token punctuation">]</span>  <span class="token punctuation">[</span>-p 端口号<span class="token punctuation">]</span> 用户名@服务器<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或使用别名发送</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-copy-id -o <span class="token assign-left variable">PreferredAuthentications</span><span class="token operator">=</span>password -o <span class="token assign-left variable">PubkeyAuthentication</span><span class="token operator">=</span>no <span class="token punctuation">[</span>-i <span class="token operator">&lt;</span>公钥或对应私钥路径<span class="token operator">></span><span class="token punctuation">]</span> 服务器别名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若<code>&lt;公钥或对应私钥路径&gt;</code>指定，则将本地公钥<code>公钥路径</code> 全文复制，粘贴进服务器的<code>~/.ssh/authorized_keys</code>文件中。</p>
<p>若<code>&lt;公钥或对应私钥路径&gt;</code>缺省：</p>
<ul>
<li>若钥匙串为空（即<code>ssh-add -L</code>返回为空白），则将<code>~/.ssh/id_rsa.pub</code>全文黏贴到服务器的<code>~/.ssh/authorized_keys</code>文件中。</li>
<li>若钥匙串不空（即<code>ssh-add -L</code>返回有至少一条公钥）则将本地钥匙串中<strong>所有公钥</strong>的全文（即<code>ssh-add -L</code>所返回的），都黏贴到服务器的<code>~/.ssh/authorized_keys</code>文件中。</li>
</ul>
<p>因此，尽可能手动指定<code>-i &lt;公钥或对应私钥路径&gt;</code>。</p>
<h3 id="免密登录-_2"><a class="header-anchor" href="#免密登录-_2"></a>免密登录</h3>
<p>本地电脑</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token punctuation">[</span>-p <span class="token operator">&lt;</span>端口号<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>用户名<span class="token operator">></span>@<span class="token operator">&lt;</span>服务器<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token operator">&lt;</span>服务器别名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>皆可不用输入密码，直接登录</p>
<h3 id="bug"><a class="header-anchor" href="#bug"></a>bug</h3>
<h4 id="Bad-owner-or-permissions"><a class="header-anchor" href="#Bad-owner-or-permissions"></a>Bad owner or permissions</h4>
<p>在执行ssh登录的时候，出现以下错误：</p>
<pre class="line-numbers language-none"><code class="language-none">Bad owner or permissions on &#x2F;home&#x2F;haowt&#x2F;.ssh&#x2F;config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>此时只需在<code>~/.ssh/</code>下执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">600</span> config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>给<code>config</code>文件以“600”权限，则可ssh登录</p>
<h2 id="能读取-ssh-config的软件"><a class="header-anchor" href="#能读取-ssh-config的软件"></a>能读取<code>~/.ssh/config</code>的软件</h2>
<ul>
<li>
<p>能读取<code>~/.ssh/config</code>的软件</p>
<p><code>ssh</code>，<code>sshfs</code>，<code>scp</code>，<code>sftp</code>，<code>rsync</code>，在iTerm2上对着远程的文件右键下载文件</p>
</li>
<li>
<p>不能读取<code>~/.ssh/config</code>的软件</p>
<p>待补充</p>
</li>
</ul>
<h2 id="端口转发"><a class="header-anchor" href="#端口转发"></a>端口转发</h2>
<table>
<thead>
<tr>
<th></th>
<th>LocalForward</th>
<th>RemoteForward</th>
</tr>
</thead>
<tbody>
<tr>
<td>功能</td>
<td>把本地请求转发到远程</td>
<td>为把远程请求转发到本地</td>
</tr>
<tr>
<td>服务进程(多为守护进程)</td>
<td>在远程</td>
<td>在本地</td>
</tr>
<tr>
<td>访问进程(如浏览器)</td>
<td>在本地</td>
<td>在远程</td>
</tr>
<tr>
<td>例如</td>
<td>本地访问远程的jupiter notebook</td>
<td>远程用nc发送消息到本地的监听进程</td>
</tr>
<tr>
<td><code>ssh config</code>的写法<code>xxxForward 请求端口 ip:接受端口</code></td>
<td><code>LocalForward 本地端口 localhost:远程端口</code></td>
<td><code>RemoteForward 服务器端口 localhost:本机端口</code></td>
</tr>
<tr>
<td><code>ssh</code>命令的参数</td>
<td><code>-L 本地端口:localhost:远程端口</code></td>
<td><code>-R 服务器端口:localhost:本机端口</code></td>
</tr>
</tbody>
</table>
<h2 id="跳板连接"><a class="header-anchor" href="#跳板连接"></a>跳板连接</h2>
<p><a href="https://zhuanlan.zhihu.com/p/74193910">参考</a></p>
<p>以<code>&lt;跳板&gt;</code>机器为跳板，连接<code>&lt;目标&gt;</code>机器，需在<code>~/.ssh/config</code>配置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Host <span class="token operator">&lt;</span>目标<span class="token operator">></span>
    HostName <span class="token operator">&lt;</span>从跳板机访问目标机器用的ip<span class="token operator">></span>
    User <span class="token operator">&lt;</span>目标机用户名<span class="token operator">></span>
    <span class="token comment"># 登陆目标机永用的私钥所在位置</span>
    IdentityFile ~/.ssh/id_rsa
    <span class="token comment"># 允许跳板机用本机私钥登录目标机器</span>
    ForwardAgent <span class="token function">yes</span>

    <span class="token comment"># 法一: OpenSSH 版本>= 7.3; 或 autossh</span>
    ProxyJump <span class="token operator">&lt;</span>跳板<span class="token operator">></span>

    <span class="token comment"># 法二: OpenSSH 版本&lt; 7.3, 不支持以使用ProxyJump, 可使用ProxyCommand; 但autossh不支持用ProxyCommand</span>
    <span class="token comment"># ProxyCommand ssh -q -W %h:%p &lt;跳板></span>

Host <span class="token operator">&lt;</span>跳板<span class="token operator">></span>
  HostName <span class="token operator">&lt;</span>从本地访问跳板机用的ip<span class="token operator">></span>
    User <span class="token operator">&lt;</span>跳板机用户名<span class="token operator">></span>
    <span class="token comment"># 登陆跳板机的私钥所在位置</span>
    IdentityFile ~/.ssh/id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样设置后，以下软件的用法和直接连接目标机器一样</p>
<p><code>ssh</code>（包括端口转发功能），<code>sshfs</code>，<code>scp</code>，<code>sftp</code>，<code>rsync</code>，在iTerm2上对着远程的文件右键下载文件</p>
<h1 id="ssh-重启"><a class="header-anchor" href="#ssh-重启"></a>ssh 重启</h1>
<h2 id="linux"><a class="header-anchor" href="#linux"></a>linux</h2>
<h3 id="重启ssh启服务端"><a class="header-anchor" href="#重启ssh启服务端"></a>重启ssh启服务端</h3>
<p>每当修改完ssh服务端的设置文件 <code>/etc/ssh/sshd_config</code> 需要重启ssh服务端服务（即<code>sshd</code>）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> sshd restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart sshd.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>注：<code>systemctl</code> 兼容了 <code>service</code>， <a href="https://www.cnblogs.com/shijingjing07/p/9301590.html">详见</a></p>
<h2 id="mac"><a class="header-anchor" href="#mac"></a>mac</h2>
<h3 id="启动ssh服务端"><a class="header-anchor" href="#启动ssh服务端"></a><a href="https://www.feng.com/iPhone/news/2016-08-18/Mac-novice-skills-how-to-through-the-terminal-openingclosing-SSH_654852.shtml">启动ssh服务端</a></h3>
<p>的较新 Mac 设备都会默认预装 SSH，不过 SSH 守护进程是默认禁用的。今天我们就来一起学习如何通过终端指令来开启和关闭 SSH。</p>
<ul>
<li>是否开启ssh服务端</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemsetup -getremotelogin
<span class="token comment"># 如果已经开启的话，指令会显示 “Remote Login: On” ，反之就会显示“Remote Login: Off”。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>开启</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemsetup -setremotelogin on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>关闭</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemsetup -setremotelogin off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="开机自启ssh服务端"><a class="header-anchor" href="#开机自启ssh服务端"></a><a href="https://www.cnblogs.com/liyuanhong/articles/6540106.html">开机自启ssh服务端</a></h3>
<p>mac本身安装了ssh服务，默认情况下不会开机自启</p>
<ul>
<li>开机自启sshd服务：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> launchctl load -w /System/Library/LaunchDaemons/ssh.plist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>开机不自启sshd服务：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> launchctl unload -w /System/Library/LaunchDaemons/ssh.plist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>查看是否开机自启：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> launchctl list <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">ssh</span>
<span class="token comment"># 如果看到下面的输出表示成功启动了</span>
<span class="token comment"># - 0 com.openssh.sshd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>器</category>
        <category>服务器连接</category>
      </categories>
  </entry>
  <entry>
    <title>teamviewer-检测为商业用途</title>
    <url>/posts/17f6ba77/</url>
    <content><![CDATA[<h2 id="简介"><a class="header-anchor" href="#简介"></a>简介</h2>
<p>参考：<a href="https://zhuanlan.zhihu.com/p/46180174">teamviewer检测为商业用途-mac</a></p>
<blockquote>
<p>Teamviewer会根据一套算法检测当前是否用于商业用途，可能根据在线时间，是否跨网段远程访问，当前操作系统是否为专业或企业版，以及其他因素进行检测，具体算法不得而知，不过有时明明只是个人非盈利目的使用，却弹出下面的对话框，在1到5分钟后就会自动断开，然后就连不上了，触发重新运行Teamviewer。</p>
<p><img data-src="/posts/17f6ba77/v2-744c2c4b42bfd0cb956a8fe1b19867eb_hd.jpg" alt="img"></p>
</blockquote>
<p>以下给出在mac和windows上的解决方法</p>
<h2 id="MAC"><a class="header-anchor" href="#MAC"></a>MAC</h2>
<p>运行python脚本修改Teamviewer ID, 并重启电脑. 详细步骤如下:</p>
<ul>
<li>
<p>关闭Teamviewer</p>
</li>
<li>
<p>创建一个python脚本 <code>reset_teamviewer-id.py</code>,  内容如下</p>
</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span>

<span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> os
<span class="token keyword">import</span> glob
<span class="token keyword">import</span> platform
<span class="token keyword">import</span> re
<span class="token keyword">import</span> random
<span class="token keyword">import</span> string

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''
--------------------------------
TeamViewer ID Changer for MAC OS
--------------------------------
'''</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> platform<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'Darwin'</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This script can be run only on MAC OS.'</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> os<span class="token punctuation">.</span>geteuid<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'This script must be run form root.'</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>has_key<span class="token punctuation">(</span><span class="token string">'SUDO_USER'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    USERNAME <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">'SUDO_USER'</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> USERNAME <span class="token operator">==</span> <span class="token string">'root'</span><span class="token punctuation">:</span>
       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Can not find user name. Run this script via sudo from regular user'</span><span class="token punctuation">)</span>
       sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Can not find user name. Run this script via sudo from regular user'</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

HOMEDIRLIB <span class="token operator">=</span> <span class="token string">'/Users/'</span> <span class="token operator">+</span> USERNAME  <span class="token operator">+</span> <span class="token string">'/Library/Preferences/'</span>
GLOBALLIB  <span class="token operator">=</span>  <span class="token string">'/Library/Preferences/'</span>

CONFIGS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token comment"># Find config files</span>

<span class="token keyword">def</span> <span class="token function">listdir_fullpath</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>d<span class="token punctuation">,</span> f<span class="token punctuation">)</span> <span class="token keyword">for</span> f <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> listdir_fullpath<span class="token punctuation">(</span>HOMEDIRLIB<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token string">'teamviewer'</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">file</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        CONFIGS<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token keyword">not</span> CONFIGS<span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token triple-quoted-string string">'''
There is no TemViewer configs found.
Maybe you have deleted it manualy or never run TeamViewer after installation.
Nothing to delete.
'''</span><span class="token punctuation">)</span>
<span class="token comment"># Delete config files</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Configs found:\n"</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> CONFIGS<span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token builtin">file</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''
This files will be DELETED permanently.
All TeamViewer settings will be lost
'''</span><span class="token punctuation">)</span>
    <span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token string">"Press Enter to continue or CTR+C to abort..."</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> CONFIGS<span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Cannot delete config files. Permission denied?"</span><span class="token punctuation">)</span>
            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Done."</span><span class="token punctuation">)</span>

<span class="token comment"># Find binaryes</span>

TMBINARYES <span class="token operator">=</span> <span class="token punctuation">[</span>
<span class="token string">'/Applications/TeamViewer.app/Contents/MacOS/TeamViewer'</span><span class="token punctuation">,</span>
<span class="token string">'/Applications/TeamViewer.app/Contents/MacOS/TeamViewer_Service'</span><span class="token punctuation">,</span>
<span class="token string">'/Applications/TeamViewer.app/Contents/MacOS/TeamViewer_Desktop'</span><span class="token punctuation">,</span>  <span class="token comment"># for Teamviewer 15.x.xxxx</span>
<span class="token punctuation">]</span>

<span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> TMBINARYES<span class="token punctuation">:</span>
    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"File not found: "</span> <span class="token operator">+</span> <span class="token builtin">file</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Install TeamViewer correctly"</span><span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment"># Patch files</span>

<span class="token keyword">def</span> <span class="token function">idpatch</span><span class="token punctuation">(</span>fpath<span class="token punctuation">,</span>platf<span class="token punctuation">,</span>serial<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>fpath<span class="token punctuation">,</span> <span class="token string">'r+b'</span><span class="token punctuation">)</span>
    binary <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    PlatformPattern <span class="token operator">=</span> <span class="token string">"IOPlatformExpert.&#123;6&#125;"</span>
    SerialPattern <span class="token operator">=</span>  <span class="token string">"IOPlatformSerialNumber%s%s%sUUID"</span>

    binary <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>PlatformPattern<span class="token punctuation">,</span> platf<span class="token punctuation">,</span> binary<span class="token punctuation">)</span>
    binary <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>SerialPattern <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"[0-9a-zA-Z]&#123;8,8&#125;"</span><span class="token punctuation">,</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> SerialPattern<span class="token operator">%</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> serial<span class="token punctuation">,</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> binary<span class="token punctuation">)</span>

    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>fpath<span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>binary<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">True</span>

<span class="token keyword">def</span> <span class="token function">random_generator</span><span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> chars<span class="token operator">=</span>string<span class="token punctuation">.</span>ascii_uppercase <span class="token operator">+</span> string<span class="token punctuation">.</span>digits<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>chars<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>

RANDOMSERIAL <span class="token operator">=</span> random_generator<span class="token punctuation">(</span><span class="token punctuation">)</span>
RANDOMPLATFORM <span class="token operator">=</span> <span class="token string">"IOPlatformExpert"</span> <span class="token operator">+</span> random_generator<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>


<span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> TMBINARYES<span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            idpatch<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span>RANDOMPLATFORM<span class="token punctuation">,</span>RANDOMSERIAL<span class="token punctuation">)</span>
        <span class="token keyword">except</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span> <span class="token string">"Error: can not patch file "</span> <span class="token operator">+</span> <span class="token builtin">file</span>
            <span class="token keyword">print</span> <span class="token string">"Wrong version?"</span>
            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">print</span> <span class="token string">"PlatformDevice: "</span> <span class="token operator">+</span> RANDOMPLATFORM
<span class="token keyword">print</span> <span class="token string">"PlatformSerial: "</span> <span class="token operator">+</span> RANDOMSERIAL

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''
ID changed sucessfully.
!!! Restart computer before using TeamViewer !!!!
'''</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>检查 <code>TeamViewer_Desktop</code> 的路径在上述脚本填写正确: 不同版本的Teamviewer, 此路径不同. 可在终端执行如下命令, 寻找此路径:</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /Applications/TeamViewer.app
<span class="token function">find</span> <span class="token builtin class-name">.</span> -name TeamViewer_Desktop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>Teamviewer 15 版本, 会返回</li>
</ul>
<pre><code><pre class="line-numbers language-none"><code class="language-none">.&#x2F;MacOS&#x2F;TeamViewer_Desktop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

则在上述脚本中, 将 `TMBINARYES` 数组的最后一项改成

<pre class="line-numbers language-none"><code class="language-none">&quot;&#x2F;Applications&#x2F;TeamViewer.app&#x2F;Contents&#x2F;MacOS&#x2F;TeamViewer_Desktop&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</code></pre>
<ul>
<li>Teamviewer 13 版本, 会返回</li>
</ul>
<pre><code> <pre class="line-numbers language-none"><code class="language-none">.&#x2F;Helpers&#x2F;TeamViewer_Desktop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

则在上述脚本中, 将 `TMBINARYES` 数组的最后一项改成

<pre class="line-numbers language-none"><code class="language-none">&quot;&#x2F;Applications&#x2F;TeamViewer.app&#x2F;Contents&#x2F;Helpers&#x2F;TeamViewer_Desktop&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</code></pre>
<ul>
<li>
<p>其余版本的T eamviewer 我虽未尝试, 不知其具体返回, 但您可依上法自行确定 <code>TeamViewer_Desktop</code> 的路径, 并修改 <code>TMBINARYES</code> 数组的最后一项.</p>
</li>
<li>
<p>用<code>python2</code>运行上述脚本</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> /usr/bin/python reset_teamviewer-id.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若返回下图(<a href="https://www.jianshu.com/p/c1a77c351283">出处</a>)</p>
<p><img data-src="/posts/17f6ba77/1174.png" alt="img"></p>
<p>则  <strong>切勿立即开Teamviewer</strong> ,  需要先重启电脑</p>
</li>
<li>
<p>电脑重启后, 关掉任何网络代理, 再次开启teamviewer, 会显示一个新的Teamviewer ID. 此时需要重新登录teamviewer账号, 输入原来teamviewer邮箱和密码, 此邮箱会受到确认信, 需确认才能完成登录.</p>
</li>
<li>
<p>而后可以正常连接远程电脑的teamviewer, 不再会显示商业用途.</p>
</li>
</ul>
<h2 id="windows"><a class="header-anchor" href="#windows"></a>windows</h2>
<p>卸载teamviewer, 修改MAC地址, 重装teamviwer, 以便让teamviewer看见未见过的mac地址, 以为这是新的设备, 故而给其分配一个新teamviwer ID. 如果过段时间再被误认为商业用途，需要重复这一过程.</p>
<p>以下操作较为麻烦, 可以找找网上的脚本来修改ID.</p>
<p><a href="https://blog.csdn.net/m0_38072683/article/details/83046992">参考</a></p>
<ul>
<li>
<p>关闭Teamviewer</p>
</li>
<li>
<p>卸载Teamviewer</p>
</li>
<li>
<p>从注册表删Teamviewer:</p>
<ul>
<li><code>win+R</code>, 输入 <code>regedit</code> 打开注册表</li>
<li>找到H<code>KEY_LOCAL_MACHINE</code>下的<code>SOFTWARE</code>下的<code>Wow6432Node</code>下的<code>Teamviewer</code></li>
<li>把<code>Teamviewer</code>这项删除</li>
</ul>
</li>
<li>
<p>删除下面2个目录</p>
<pre class="line-numbers language-none"><code class="language-none">C:\Program Files (x86)\TeamViewer
C:\Users\Administrator\AppData\Roaming\TeamViewer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>改MAC地址:</p>
<ul>
<li><code>win</code>键, 搜索栏输入”控制面板”,  打开 <code>控制面板</code>, 找到 <code>网络和共享中心</code></li>
</ul>
<pre><code>![草图](assets/%E8%8D%89%E5%9B%BE.png)
</code></pre>
<ul>
<li>
<p>点 <code>更改适配器设置</code></p>
<p><img data-src="/posts/17f6ba77/%E8%8D%89%E5%9B%BE1%20(2)_LI.jpg" alt="草图"></p>
</li>
<li>
<p>点 <code>以太网</code> (或者别的你要改MAC地址的网)</p>
<p><img data-src="/posts/17f6ba77/%E8%8D%89%E5%9B%BE-8387651.png" alt="草图"></p>
</li>
<li>
<p>查看当前 MAC 地址: 点 <code>详细信息</code>, 找到 <code>物理地址</code>, 记下之, 以便与更改后的比较, 确认是否更改成功</p>
<p><img data-src="/posts/17f6ba77/%E8%8D%89%E5%9B%BE-8388252.png" alt="草图"></p>
</li>
<li>
<p>点<code>属性</code></p>
<p><img data-src="/posts/17f6ba77/70.png" alt="在这里插入图片描述"></p>
</li>
<li>
<p>点 <code>配置</code></p>
<p><img data-src="/posts/17f6ba77/70-20200107170711501.png" alt="在这里插入图片描述"></p>
</li>
<li>
<p>点 <code>高级</code> , 找到<code>网络地址</code>, 勾选<code>值</code>, 任意输入长为12的十六进制数串, 然后点 <code>确定</code>. 注意: 中间不要加横线 <code>-</code> . 如输入 <code>1A093EB29D28</code> 正确, 而输入 <code>1A-09-3E-B2-9D-28</code> 则不正确.</p>
<p><img data-src="/posts/17f6ba77/70-20200107170705415.png" alt="在这里插入图片描述"></p>
</li>
</ul>
</li>
<li>
<p>查看是否修改成功: 查看当前 MAC 地址: 点 <code>详细信息</code>, 找到 <code>物理地址</code>, 看看与之前记下的修改前的MAC地址是否不同, 若不同, 则修改成功.</p>
</li>
</ul>
<pre><code> ![草图](assets/%E8%8D%89%E5%9B%BE-8388252.png)
</code></pre>
<ul>
<li>重新安装Teamviewer,  关掉任何网络代理, 开启teamviewer, 会显示一个新的Teamviewer ID. 此时需要重新登录teamviewer账号, 输入原来teamviewer邮箱和密码, 此邮箱会受到确认信, 需确认才能完成登录.</li>
</ul>
]]></content>
      <categories>
        <category>器</category>
        <category>服务器连接</category>
      </categories>
  </entry>
  <entry>
    <title>用sshpass自动使用密码登陆ssh</title>
    <url>/posts/40390e52/</url>
    <content><![CDATA[<p>有的服务器设置了<strong>ssh登录时必须使用密码</strong>（要么是既要使用密钥又要输入密码，要么是禁止使用密钥只能输入密码），此时，每次在终端ssh登陆、以及使用vscode的remote ssh功能连接服务器时，都要输入密码，很麻烦。用sshpass可以实现自动密码登陆远程ssh，能够解决这一问题。</p>
<blockquote>
<p>[!CAUTION]</p>
<p>使用sshpass登陆服务器，需要在本地明文保存密码，会降低安全性。因此建议只在网络环境和使用者权限都安全的本地设备，上使用sshpass。如，不开放网络访问权限、设置了登录密码的个人电脑可以用sshpass，服务器上不建议使用sshpass。</p>
</blockquote>
<p>参考：<a href="https://www.11meigui.com/2024/install-sshpass-on-mac.html">如何在mac上安装sshpass?</a></p>
<h2 id="安装方法（用Homebrew）"><a class="header-anchor" href="#安装方法（用Homebrew）"></a>安装方法（用Homebrew）</h2>
<h3 id="mac"><a class="header-anchor" href="#mac"></a>mac</h3>
<p>mac上安装了Homebrew之后，可以用它来安装sshpass。</p>
<p>终端输入以下命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew search sshpass
brew info sshpass
brew <span class="token function">install</span> sshpass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果按照上述操作，没有找到可安装的sshpass，或者找到了却无法安装, 可以使用下面的方法安装：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew tap esolitos/ipa
brew <span class="token function">install</span> esolitos/ipa/sshpass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>验证SSHpass安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sshpass <span class="token comment"># 查看帮助信息</span>
sshpass -V <span class="token comment"># 查看版本信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>如果看到了SSHpass的帮助信息和版本信息，那么就说明sshpass已经成功安装。</p>
<h3 id="Ubuntu"><a class="header-anchor" href="#Ubuntu"></a>Ubuntu</h3>
<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">apt<span class="token operator">-</span><span class="token keyword">get</span>  install sshpass<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="centos"><a class="header-anchor" href="#centos"></a>centos</h3>
<pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">yum  -y install sshpass<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="源码包安装"><a class="header-anchor" href="#源码包安装"></a>源码包安装</h3>
<p>上https://sourceforge.net/projects/sshpass/files/sshpass/ 找最新版本的源码下载链接</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://sourceforge.net/projects/sshpass/files/sshpass/1.05/sshpass-1.05.tar.gz <span class="token comment"># 换成最新版本的下载链接</span>
<span class="token function">tar</span> xvzf sshpass-1.05.tar.gz
<span class="token builtin class-name">cd</span> sshpass-1.05.tar.gz
./configure
<span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="使用方法"><a class="header-anchor" href="#使用方法"></a>使用方法</h2>
<h3 id="用密码登陆"><a class="header-anchor" href="#用密码登陆"></a>用密码登陆</h3>
<p>不建议用此法，容易泄漏秘密</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sshpass -f <span class="token operator">&lt;</span>密码<span class="token operator">></span> <span class="token function">ssh</span> <span class="token operator">&lt;</span>host名<span class="token operator">></span>
<span class="token comment"># 或</span>
sshpass -p <span class="token operator">&lt;</span>密码<span class="token operator">></span> <span class="token function">ssh</span> <span class="token operator">&lt;</span>username<span class="token operator">></span>@<span class="token operator">&lt;</span>ip<span class="token operator">></span> -p <span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="用存放密码的文件登陆"><a class="header-anchor" href="#用存放密码的文件登陆"></a>用存放密码的文件登陆</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sshpass -f <span class="token operator">&lt;</span>存放密码的文件的路径<span class="token operator">></span> <span class="token function">ssh</span> <span class="token operator">&lt;</span>host名<span class="token operator">></span>
<span class="token comment"># 或</span>
sshpass -f <span class="token operator">&lt;</span>存放密码的文件的路径<span class="token operator">></span> <span class="token function">ssh</span> <span class="token operator">&lt;</span>username<span class="token operator">></span>@<span class="token operator">&lt;</span>ip<span class="token operator">></span> -p <span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><code>&lt;存放密码的文件的路径&gt;</code>中只写一行内容，就是密码的明文。</p>
<p>为安全起见，建议设置改文件为只有自己可读写：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">600</span> ~/.ssh/password-file<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="免密登陆配置"><a class="header-anchor" href="#免密登陆配置"></a>免密登陆配置</h2>
<p>为了能够<code>ssh &lt;host别名&gt;</code>自动使用密码登陆服务器，以及vscode的remote ssh功能能够自动加载<code>~/.ssh/config</code>并自动使用密码登陆服务器，需要把sshpass登陆服务器配置到<code>~/.ssh/config</code>里面。</p>
<p>首先，创建用来保存密码的文件<code>~/.ssh/password-file</code>，在其中只写一行内容，就是密码。然后设置其为只有自己可读写：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">600</span> ~/.ssh/password-file<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="免密登陆向公网开放的服务器"><a class="header-anchor" href="#免密登陆向公网开放的服务器"></a>免密登陆向公网开放的服务器</h3>
<p>若某服务器host1向<strong>公网开放</strong>。</p>
<ul>
<li>
<p>从外网登陆host1，既要使用密钥又<strong>要输入密码</strong>，或者禁止使用密钥只能输入密码。</p>
</li>
<li>
<p>从内网登陆host1时，只需密钥，无需密码。</p>
</li>
</ul>
<p>要想登陆免密登陆host1，可以在本地的<code>~/.ssh/config</code>配置：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先用sshpass免密登陆host0（和host1实际是同一台机器），再以此为跳板登陆host1</span>

<span class="token comment"># host0用作跳板</span>
Host host0
    HostName <span class="token operator">&lt;</span>服务器的公网ip<span class="token operator">></span>
    User <span class="token operator">&lt;</span>用户名<span class="token operator">></span>
    <span class="token comment"># 如果需要使用密钥，才使用下面这行</span>
    IdentityFile ~/.ssh/id_rsa

<span class="token comment"># 从跳板host0登陆它自己</span>
Host host1
    HostName localhost
    <span class="token comment"># 或写成</span>
    <span class="token comment"># HostName &lt;服务器的内网ip></span>
    User <span class="token operator">&lt;</span>用户名<span class="token operator">></span>
    IdentityFile ~/.ssh/id_rsa
    ProxyCommand sshpass -f ~/.ssh/password-file <span class="token function">ssh</span> host0 -W %h:%p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样，就可以登陆host1时无需输入密码了</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> host1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>vscode的remote ssh功能连接服务器时，选择host1，也不用输入密码。</p>
<h3 id="免密登陆跳板机再登陆内网服务器"><a class="header-anchor" href="#免密登陆跳板机再登陆内网服务器"></a>免密登陆跳板机再登陆内网服务器</h3>
<p>若某服务器host2<strong>不向公网开放</strong>，需要<strong>先登陆host0进入内网</strong>，才能登陆host2。</p>
<ul>
<li>
<p>从内网登陆host2时，只需密钥，无需密码。</p>
</li>
<li>
<p>从外网登陆host0时，既要使用密钥又要<strong>输入密码</strong>，或者禁止使用密钥只能输入密码。</p>
</li>
</ul>
<p>那么，要想登陆免密登陆host2，可以在本地的<code>~/.ssh/config</code>配置：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先用sshpass免密登陆host0，再以此为跳板登陆host2。</span>

<span class="token comment"># 用作跳板</span>
Host host0
    HostName <span class="token operator">&lt;</span>跳板机的公网ip<span class="token operator">></span>
    User <span class="token operator">&lt;</span>用户名<span class="token operator">></span>
    <span class="token comment"># 如果需要使用密钥，才使用下面这行</span>
    IdentityFile ~/.ssh/id_rsa

<span class="token comment"># 从跳板登陆其他服务器</span>
Host host2
    HostName <span class="token operator">&lt;</span>其他服务器的内网ip<span class="token operator">></span>
    User <span class="token operator">&lt;</span>用户名<span class="token operator">></span>
    IdentityFile ~/.ssh/id_rsa
    ProxyCommand sshpass -f ~/.ssh/password-file <span class="token function">ssh</span> host0 -W %h:%p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样，就可以经由host0登陆host2时，就无需输入host0的密码了</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> host2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>vscode的remote ssh功能连接服务器时，选择host2，也不用输入密码。</p>
]]></content>
      <categories>
        <category>器</category>
        <category>服务器连接</category>
      </categories>
  </entry>
  <entry>
    <title>安装配置VNC——debug的日志</title>
    <url>/posts/253eafd2/</url>
    <content><![CDATA[<h1 id="安装配置VNC——debug的日志"><a class="header-anchor" href="#安装配置VNC——debug的日志"></a>安装配置VNC——debug的日志</h1>
<h2 id="安装sogou输入法报错-xxx-is-not-installed"><a class="header-anchor" href="#安装sogou输入法报错-xxx-is-not-installed"></a>安装sogou输入法报错 <code>xxx is not installed.</code></h2>
<pre class="line-numbers language-none"><code class="language-none">sudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb # ??sogou???
Selecting previously unselected package sogoupinyin.
(Reading database ... 264452 files and directories currently installed.)
Preparing to unpack sogoupinyin_2.2.0.0108_amd64.deb ...
Unpacking sogoupinyin (2.2.0.0108) ...
dpkg: dependency problems prevent configuration of sogoupinyin:
 sogoupinyin depends on libopencc2 | libopencc1; however:
  Package libopencc2 is not installed.
  Package libopencc1 is not installed.
 sogoupinyin depends on fcitx-libs (&gt;&#x3D; 4.2.7); however:
  Package fcitx-libs is not installed.
 sogoupinyin depends on libqtwebkit4 (&gt;&#x3D; 2.1.0~2011week13); however:
  Package libqtwebkit4 is not installed.

dpkg: error processing package sogoupinyin (--install):
 dependency problems - leaving unconfigured
Processing triggers for mime-support (3.59ubuntu1) ...
Processing triggers for libglib2.0-0:amd64 (2.48.2-0ubuntu4.1) ...
No such key &#39;Gtk&#x2F;IMModule&#39; in schema &#39;org.gnome.settings-daemon.plugins.xsettings&#39; as specified in override file &#39;&#x2F;usr&#x2F;share&#x2F;glib-2.0&#x2F;schemas&#x2F;50_sogoupinyin.gschema.override&#39;; ignoring override for this key.
Processing triggers for desktop-file-utils (0.22-1ubuntu5.2) ...
Processing triggers for gnome-menus (3.13.3-6ubuntu3.1) ...
Processing triggers for shared-mime-info (1.5-2ubuntu0.2) ...

Processing triggers for hicolor-icon-theme (0.15-0ubuntu1.1) ...
Errors were encountered while processing:
 sogoupinyin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span>  libopencc1 fcitx-libs libqtwebkit4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>libopencc2 libopencc1二者装一个就好</p>
<p>然后重新</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg -i sogoupinyin_2.2.0.0108_amd64.deb <span class="token comment"># 安装sogou输入法</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>得到</p>
<pre class="line-numbers language-none"><code class="language-none">(Reading database ... 264867 files and directories currently installed.)
Preparing to unpack sogoupinyin_2.2.0.0108_amd64.deb ...
Unpacking sogoupinyin (2.2.0.0108) over (2.2.0.0108) ...
Setting up sogoupinyin (2.2.0.0108) ...
Processing triggers for mime-support (3.59ubuntu1) ...
Processing triggers for libglib2.0-0:amd64 (2.48.2-0ubuntu4.1) ...
No such key &#39;Gtk&#x2F;IMModule&#39; in schema &#39;org.gnome.settings-daemon.plugins.xsettings&#39; as specified in override file &#39;&#x2F;usr&#x2F;share&#x2F;glib-2.0&#x2F;schemas&#x2F;50_sogoupinyin.gschema.override&#39;; ignoring override for this key.
Processing triggers for desktop-file-utils (0.22-1ubuntu5.2) ...
Processing triggers for gnome-menus (3.13.3-6ubuntu3.1) ...
Processing triggers for shared-mime-info (1.5-2ubuntu0.2) ...

Processing triggers for hicolor-icon-theme (0.15-0ubuntu1.1) ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中<code>No such key 'Gtk/IMModule'</code>不影响</p>
<p>此后能显示这个，但不现实候选汉字</p>
<h2 id="sogou输入法-新出现的候选框没有内容问题"><a class="header-anchor" href="#sogou输入法-新出现的候选框没有内容问题"></a>sogou输入法 新出现的候选框没有内容问题</h2>
<p><a href="https://www.findhao.net/res/786#i-2">https://www.findhao.net/res/786#i-2</a></p>
<p>删除~/.config目录下的SogouPY、SogouPY.users、sogou-qimpanel三个文件夹即可恢复正常</p>
<h2 id="Install-VNC-on-Ubuntu-16-04"><a class="header-anchor" href="#Install-VNC-on-Ubuntu-16-04"></a><a href="https://www.linode.com/docs/applications/remote-desktop/install-vnc-on-ubuntu-16-04/">Install VNC on Ubuntu 16.04</a></h2>
<ul>
<li>实现Ubuntu的桌面GUI转发</li>
</ul>
<p>Ubuntu has several desktop environments available in its repositories. The following command installs the default desktop, <a href="https://unity.ubuntu.com/">Unity</a>, as well as the dependencies that are required for the graphical interface to work properly:</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get install ubuntu-desktop gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>Note</p>
<p>This will install the full Ubuntu desktop environment, including office and web browsing tools. To install the desktop without these packages, run:</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get install --no-install-recommends ubuntu-desktop gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<ul>
<li><a href="https://github.com/TigerVNC/tigervnc/issues/592">https://github.com/TigerVNC/tigervnc/issues/592</a></li>
</ul>
<p>It works for me, when I start XFCE with this command:</p>
<pre class="line-numbers language-none"><code class="language-none">dbus-launch &#x2F;usr&#x2F;bin&#x2F;startxfce4 &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>in <code>.vnc/xstartup</code> of the user which starts <code>vncserver</code>.</p>
<ul>
<li>
<p>GUI的建议至少1GB内存，不然带不动</p>
</li>
<li>
<p><a href="https://askubuntu.com/questions/763597/x2go-with-ubuntu-mate-xfce-16-04-fails-to-start">https://askubuntu.com/questions/763597/x2go-with-ubuntu-mate-xfce-16-04-fails-to-start</a></p>
</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">export GSETTINGS_SCHEMA_DIR&#x3D;&#x2F;usr&#x2F;share&#x2F;mate:&#x2F;usr&#x2F;share&#x2F;mate:&#x2F;usr&#x2F;local&#x2F;share&#x2F;:&#x2F;usr&#x2F;share&#x2F;:&#x2F;var&#x2F;lib&#x2F;snapd&#x2F;desktop

export XDG_DATA_DIRS&#x3D;&#x2F;usr&#x2F;share&#x2F;mate:&#x2F;usr&#x2F;share&#x2F;mate:&#x2F;usr&#x2F;local&#x2F;share&#x2F;:&#x2F;usr&#x2F;share&#x2F;:&#x2F;var&#x2F;lib&#x2F;snapd&#x2F;desktop
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="安装方法"><a class="header-anchor" href="#安装方法"></a>安装方法</h3>
<ul>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-vnc-on-ubuntu-18-04">https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-vnc-on-ubuntu-18-04</a></li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">sudo apt install xfce4 xfce4-goodies<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>vncserver</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">sudo apt install tightvncserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>支持powerline字体</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">sudo apt install powerline fonts-powerline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="中文支持"><a class="header-anchor" href="#中文支持"></a>中文支持</h3>
<p><a href="https://zhuanlan.zhihu.com/p/26843097">https://zhuanlan.zhihu.com/p/26843097</a></p>
<ul>
<li>当vnc客户端连接服务器时显示的界面是英文的，主要是中文环境还没有装入，而且没有中文输入法。</li>
</ul>
<p><code>~/.vnc/xstartup</code>中写</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>zh_CN.UTF-8 <span class="token comment"># 启用中文环境</span>
scim –d  <span class="token comment"># 加载scim输入法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ttf-wqy-zenhei  <span class="token comment"># 字体</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> scim-pinyin  <span class="token comment"># 输入法</span>
<span class="token comment"># sudo apt-get install scim-gtk2-immodule im-switch scim-uim scim-chinese scim-modules-table scim-tables-zh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="输入法安装"><a class="header-anchor" href="#输入法安装"></a>输入法安装</h2>
<p><a href="https://wiki.archlinux.org/index.php/Localization/Simplified_Chinese_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/index.php/Localization/Simplified_Chinese_(简体中文)</a></p>
<p>常用的中文输入法平台有<a href="https://wiki.archlinux.org/index.php/IBus_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">IBus</a>、<a href="https://wiki.archlinux.org/index.php/Fcitx_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">fcitx</a>和<a href="https://wiki.archlinux.org/index.php/Smart_Common_Input_Method_platform_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">scim</a>。具体安装配置参见各自条目。</p>
<p><strong>注意:</strong> scim现在维护滞后，不推荐使用。</p>
<p>安装fcitx输入法框架</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get install fcitx  fcitx-config-gtk &#x2F;&#x2F; 根据提示安装
sudo  apt-get install -f     &#x2F;&#x2F; 安装依赖包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">sudo add-apt-repository ppa:giuspen&#x2F;ppa #添加源
sudo apt-get install fcitx fcitx-googlepinyin sogoupinyin #安装 fcitx 和搜狗拼音<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://cdn2.ime.sogou.com/dl/index/1524572264/sogoupinyin_2.2.0.0108_amd64.deb?st<span class="token operator">=</span>oiAxBlWmfJYk6NfXpKmPfg<span class="token operator">&amp;</span><span class="token assign-left variable">e</span><span class="token operator">=</span><span class="token number">1555408685</span><span class="token operator">&amp;</span><span class="token assign-left variable">fn</span><span class="token operator">=</span>sogoupinyin_2.2.0.0108_amd64.deb
<span class="token function">sudo</span> dpkg -i sogoupinyin_2.2.0.0108_amd64.deb <span class="token comment"># 安装sogou输入法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">sudo add-apt-repository --remove ppa:giuspen&#x2F;ppa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="复制黏贴"><a class="header-anchor" href="#复制黏贴"></a>复制黏贴</h3>
<ul>
<li><a href="https://blog.csdn.net/qq_25737169/article/details/81284682">https://blog.csdn.net/qq_25737169/article/details/81284682</a> 有效</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">sudo apt install autocutsel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>~/.vnc/xstartup</code>中写</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">autocutsel -f <span class="token comment"># -f表示后台运行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><a href="https://blog.csdn.net/yz18931904/article/details/81844013">https://blog.csdn.net/yz18931904/article/details/81844013</a> 无效</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">vncconfig -nowin &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">im-switch -s fcitx <span class="token comment">#配置默认输入法为 fcitx ,注意无须加 sudo</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="从远程复制中文，粘在本地是乱码"><a class="header-anchor" href="#从远程复制中文，粘在本地是乱码"></a>从远程复制中文，粘在本地是乱码</h3>
<p><a href="http://www.voidcn.com/article/p-wnbyufun-bgv.html">http://www.voidcn.com/article/p-wnbyufun-bgv.html</a></p>
<p><a href="http://www.voidcn.com/article/p-keiwdqln-bgv.html">http://www.voidcn.com/article/p-keiwdqln-bgv.html</a></p>
<p><a href="http://ask.zol.com.cn/x/4652161.html">http://ask.zol.com.cn/x/4652161.html</a></p>
<p><a href="https://cloud.tencent.com/developer/ask/23121">https://cloud.tencent.com/developer/ask/23121</a></p>
<p><a href="https://changkun.us/archives/2016/08/209/">https://changkun.us/archives/2016/08/209/</a></p>
<h2 id="文件传输"><a class="header-anchor" href="#文件传输"></a>文件传输</h2>
<p><a href="https://www.realvnc.com/connect/docs/file-transfer.html">https://www.realvnc.com/connect/docs/file-transfer.html</a></p>
<h2 id="输入法设置"><a class="header-anchor" href="#输入法设置"></a>输入法设置</h2>
<p><a href="https://xunyunliu.github.io/post/install_sogou/">https://xunyunliu.github.io/post/install_sogou/</a></p>
<h2 id="修改系统语言"><a class="header-anchor" href="#修改系统语言"></a>修改系统语言</h2>
<p><a href="https://blog.csdn.net/f156207495/article/details/80795722">https://blog.csdn.net/f156207495/article/details/80795722</a></p>
<p>安装中文语言包</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get install  language-pack-zh-han*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装gnome包</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get install   language-pack-gnome-zh-han*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装kde包</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get install   language-pack-kde-zh-han*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>最后运行语言支持检查</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt install $(check-language-support)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="ubuntu-16-04-输入法候选框不显示"><a class="header-anchor" href="#ubuntu-16-04-输入法候选框不显示"></a>ubuntu 16.04 输入法候选框不显示:</h2>
<ul>
<li><a href="https://blog.csdn.net/qq_21397217/article/details/52447263">https://blog.csdn.net/qq_21397217/article/details/52447263</a></li>
</ul>
<p>sougou输入法安装需要 <code>fcitx-module-kimpanel</code>，请勿apt remove 它</p>
<ul>
<li><a href="http://www.54it.top/archives/8103.html">http://www.54it.top/archives/8103.html</a></li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get remove fcitx-ui-qimpanel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用经典UI界面。除了此方法以外还可以通过设置Fcitx的Addon选项来解决该问题即禁止Fcitx中Kimpanel的支持,如下</p>
<p>去掉Kimpanel前面的选中选项,重新启动后切换到中文就可以看到候选框了。</p>
<ul>
<li><a href="https://www.qin.ee/2018/05/28/ubuntu-18-04-fcitx-%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95%E5%A4%87%E9%80%89%E8%AF%8D%E6%A1%86%E6%B6%88%E5%A4%B1/">https://www.qin.ee/2018/05/28/ubuntu-18-04-fcitx-中文输入法备选词框消失/</a></li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">rm -r ~&#x2F;.config&#x2F;fcitx
sudo apt-get purge fcitx*
sudo apt-get install fcitx-googlepinyin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li><a href="https://groups.google.com/forum/#!topic/fcitx/95gqtF90Zro">https://groups.google.com/forum/#!topic/fcitx/95gqtF90Zro</a></li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> fcitx-ui-classic
fcitx -r <span class="token comment"># restart</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="How-to-Install-KDE-Environment-and-VNC-remote-desktop-connection-to-Ubuntu-14-04-Linux-server"><a class="header-anchor" href="#How-to-Install-KDE-Environment-and-VNC-remote-desktop-connection-to-Ubuntu-14-04-Linux-server"></a>How to Install KDE Environment and VNC remote desktop connection to Ubuntu 14.04 Linux server</h2>
<p><a href="https://siterobot.io/en/blog/how-to-install-kde-environment-and-vnc-remote-desktop-connection-to-ubuntu-1404-linux-server-24">https://siterobot.io/en/blog/how-to-install-kde-environment-and-vnc-remote-desktop-connection-to-ubuntu-1404-linux-server-24</a></p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get update
sudo apt-get install -y kubuntu-desktop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><a href="https://blog.51cto.com/2955941/647369">https://blog.51cto.com/2955941/647369</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># dbus-launch /usr/bin/startxfce4 &amp;</span>
<span class="token comment"># startkde</span>
<span class="token builtin class-name">exec</span> /usr/bin/startkde <span class="token comment"># startkde</span>
<span class="token comment"># exec gnome-session</span>
<span class="token comment"># exec /usr/bin/startlxde</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><a href="https://wiki.archlinux.org/index.php/KDE_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E5%AD%97%E4%BD%93%E6%84%9F%E8%A7%89%E6%A8%A1%E7%B3%8A">https://wiki.archlinux.org/index.php/KDE_(简体中文)#字体感觉模糊</a></p>
<ul>
<li>建议安装<code>plasma-widgets-kimpanel</code>，未安装成</li>
</ul>
<h2 id="卸载方法"><a class="header-anchor" href="#卸载方法"></a>卸载方法</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> remove --purge tightvncserver xfce4* xfce4-goodies powerline fonts-powerline ttf-wqy-zenhei  autocutsel fcitx-googlepinyin  libgooglepinyin* <span class="token punctuation">\</span>
kubuntu-desktop  <span class="token punctuation">\</span>
ubuntu-desktop *gnome* gnome-panel gnome-settings-daemon metacity* nautilus gnome-terminal <span class="token punctuation">\</span>
fcitx-ui-classic *fcitx*  sogoupinyin fcitx-googlepinyin scim-pinyin scim <span class="token punctuation">\</span>
plasma-widgets-kimpanel vnc4server <span class="token punctuation">\</span>
fcitx-libs libqtwebkit4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>请勿</strong>运行<code>apt autoremove</code>，它可能会把除了上述包相关的包也卸载了。用上面的匹配就能卸干净</p>
<p>要达到效果</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> list <span class="token operator">|</span> <span class="token function">grep</span> -E <span class="token string">'xfce4|fcitx|gnome|ubuntu-desktop|kubuntu-desktop|vnc4server|sogoupinyin|googlepinyin|scim|autocutselpowerline|ttf-wqy-zenhei|libqtwebkit4|metacity*|nautilus|plasma-widgets-kimpanel'</span> <span class="token operator">|</span> <span class="token function">grep</span> -E <span class="token string">'residual-config|installed'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>是空的，即没有<code>residual-config</code>，也没有<code>installed</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">which</span> startxfce4
<span class="token function">which</span> fcitx
<span class="token function">which</span> /etc/vnc/xstartup
<span class="token function">which</span> vncconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> /tmp/.X11-unix/X1 /tmp/.X1-lock ~/.vnc/<span class="token punctuation">&#123;</span>*.log,*.pid<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>也都是<code>not found</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> vim-gnome<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>器</category>
        <category>服务器连接</category>
      </categories>
  </entry>
  <entry>
    <title>TensorboardX：在pytorch上用Tensorboard</title>
    <url>/posts/218adcf6/</url>
    <content><![CDATA[<p>自2019年5月后，pytorch官方支持了Tensorboard，可千万pytorch官网查询Tensorboard的文档</p>
<h1 id="TensorboardX"><a class="header-anchor" href="#TensorboardX"></a>TensorboardX</h1>
<h2 id="简介"><a class="header-anchor" href="#简介"></a>简介</h2>
<h4 id="GitHub来源"><a class="header-anchor" href="#GitHub来源"></a><a href="https://github.com/lanpa/tensorboard-pytorch">GitHub来源</a></h4>
<h4 id="原理"><a class="header-anchor" href="#原理"></a>原理</h4>
<p>调用TensorFlow的tensorboard，接口封装成pytorch的格式</p>
<h2 id="安装"><a class="header-anchor" href="#安装"></a>安装</h2>
<h4 id="安装依赖包"><a class="header-anchor" href="#安装依赖包"></a>安装依赖包</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> tensorflow<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="安装方法"><a class="header-anchor" href="#安装方法"></a>安装方法</h4>
<p>由于pip install tensorboardX安装的版本比该法低，许多功能不支持，故<br>
请使用下法安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> git+https://github.com/lanpa/tensorboard-pytorch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="使用"><a class="header-anchor" href="#使用"></a>使用</h2>
<h4 id="创建demo-py"><a class="header-anchor" href="#创建demo-py"></a><a href="http://xn--demo-pj9fv59d.py">创建demo.py</a></h4>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>utils <span class="token keyword">as</span> vutils
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>models <span class="token keyword">as</span> models
<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> datasets
<span class="token keyword">from</span> tensorboardX <span class="token keyword">import</span> SummaryWriter

resnet18 <span class="token operator">=</span> models<span class="token punctuation">.</span>resnet18<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>
writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token punctuation">)</span>
sample_rate <span class="token operator">=</span> <span class="token number">44100</span>
freqs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">262</span><span class="token punctuation">,</span> <span class="token number">294</span><span class="token punctuation">,</span> <span class="token number">330</span><span class="token punctuation">,</span> <span class="token number">349</span><span class="token punctuation">,</span> <span class="token number">392</span><span class="token punctuation">,</span> <span class="token number">440</span><span class="token punctuation">,</span> <span class="token number">440</span><span class="token punctuation">,</span> <span class="token number">440</span><span class="token punctuation">,</span> <span class="token number">440</span><span class="token punctuation">,</span> <span class="token number">440</span><span class="token punctuation">,</span> <span class="token number">440</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> n_iter <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    s1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># value to keep</span>
    s2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">'data/scalar1'</span><span class="token punctuation">,</span> s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n_iter<span class="token punctuation">)</span> <span class="token comment">#data grouping by `slash`</span>
    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">'data/scalar2'</span><span class="token punctuation">,</span> s2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n_iter<span class="token punctuation">)</span>
    writer<span class="token punctuation">.</span>add_scalars<span class="token punctuation">(</span><span class="token string">'data/scalar_group'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"xsinx"</span><span class="token punctuation">:</span>n_iter<span class="token operator">*</span>np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>n_iter<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                             <span class="token string">"xcosx"</span><span class="token punctuation">:</span>n_iter<span class="token operator">*</span>np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>n_iter<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                             <span class="token string">"arctanx"</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>arctan<span class="token punctuation">(</span>n_iter<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> n_iter<span class="token punctuation">)</span>
    x <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token comment"># output from network</span>
    <span class="token keyword">if</span> n_iter<span class="token operator">%</span><span class="token number">10</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> vutils<span class="token punctuation">.</span>make_grid<span class="token punctuation">(</span>x<span class="token punctuation">,</span> normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> scale_each<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">'Image'</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> n_iter<span class="token punctuation">)</span>
        x <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>sample_rate<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>freqs<span class="token punctuation">[</span>n_iter<span class="token operator">//</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">*</span>np<span class="token punctuation">.</span>pi<span class="token operator">*</span><span class="token builtin">float</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">/</span><span class="token builtin">float</span><span class="token punctuation">(</span>sample_rate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># sound amplitude should in [-1, 1]</span>
        writer<span class="token punctuation">.</span>add_audio<span class="token punctuation">(</span><span class="token string">'myAudio'</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> n_iter<span class="token punctuation">,</span> sample_rate<span class="token operator">=</span>sample_rate<span class="token punctuation">)</span>
        writer<span class="token punctuation">.</span>add_text<span class="token punctuation">(</span><span class="token string">'Text'</span><span class="token punctuation">,</span> <span class="token string">'text logged at step:'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>n_iter<span class="token punctuation">)</span><span class="token punctuation">,</span> n_iter<span class="token punctuation">)</span>
        <span class="token keyword">for</span> name<span class="token punctuation">,</span> param <span class="token keyword">in</span> resnet18<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            writer<span class="token punctuation">.</span>add_histogram<span class="token punctuation">(</span>name<span class="token punctuation">,</span> param<span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n_iter<span class="token punctuation">)</span>
        writer<span class="token punctuation">.</span>add_pr_curve<span class="token punctuation">(</span><span class="token string">'xoxo'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n_iter<span class="token punctuation">)</span> <span class="token comment">#needs tensorboard 0.4RC or later</span>
dataset <span class="token operator">=</span> datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span><span class="token string">'mnist'</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
images <span class="token operator">=</span> dataset<span class="token punctuation">.</span>test_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
label <span class="token operator">=</span> dataset<span class="token punctuation">.</span>test_labels<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">]</span>
features <span class="token operator">=</span> images<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">784</span><span class="token punctuation">)</span>
writer<span class="token punctuation">.</span>add_embedding<span class="token punctuation">(</span>features<span class="token punctuation">,</span> metadata<span class="token operator">=</span>label<span class="token punctuation">,</span> label_img<span class="token operator">=</span>images<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># export scalar data to JSON for external processing</span>
writer<span class="token punctuation">.</span>export_scalars_to_json<span class="token punctuation">(</span><span class="token string">"./all_scalars.json"</span><span class="token punctuation">)</span>

writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="执行目标文件"><a class="header-anchor" href="#执行目标文件"></a>执行目标文件</h4>
<p><code>python demo.py</code></p>
<h4 id="打开TensorBoard"><a class="header-anchor" href="#打开TensorBoard"></a>打开TensorBoard</h4>
<p><code>tensorboard --logdir runs --port=6006</code></p>
<p>默认端口6006，可更改</p>
<h4 id="本地访问TensorBoard"><a class="header-anchor" href="#本地访问TensorBoard"></a>本地访问TensorBoard</h4>
<p><code>tb 4 6006</code></p>
<ul>
<li>
<p>4是gpu服务器的编号</p>
</li>
<li>
<p>6006是tensorboard占用的服务器端口，需保持和上面的一致</p>
</li>
</ul>
<h2 id="API"><a class="header-anchor" href="#API"></a>API</h2>
<p><a href="http://tensorboard-pytorch.readthedocs.io/en/latest/tensorboard.html">文档</a></p>
]]></content>
      <categories>
        <category>器</category>
        <category>炼丹框架</category>
      </categories>
  </entry>
  <entry>
    <title>固态硬盘的TRIM、性能测试、磁盘备份</title>
    <url>/posts/501f8c5c/</url>
    <content><![CDATA[<h2 id="TRIM原理"><a class="header-anchor" href="#TRIM原理"></a><a href="https://www.bilibili.com/video/BV1SJ41137PJ/?spm_id_from=333.788&amp;vd_source=1293090d1a39c4163894e04f11db5045">TRIM原理</a></h2>
<p>文件系统会用文件表记录每个文件存放在磁盘上的物理地址。</p>
<p>在机械硬盘上，文件被删除后，仅仅删除其对应的文件表，使得文件系统上不再显示此文件，但不会将磁盘上文件所在处的数据擦除，因而，被误删的文件往往能够找回，即通过磁盘上的详细数据推断出被删文件的文件表。机械硬盘在已有数据的位置，可以直接写入新数据，而无需先擦除，因此，删文件仅删文件表不擦数据，<strong>并不会影响机械硬盘的表现</strong>。</p>
<p>若固态硬盘<strong>不开TRIM</strong>，则被删除的文件仅仅删除其对应的文件表，而不将磁盘上文件所在处的数据擦除。不同于机械硬盘，固态硬盘在已有数据的位置，必须先擦出原数据才能写入新数据，因此，若关闭TRIM，当空白磁盘被用尽，文件系统就开始向被删文件残余数据处写入数据，这就要浪费大量的时间去擦原数据，因而从这开始，**固态硬盘写入速度断崖下跌。**但和机械硬盘一样，被误删的文件往往能够找回。</p>
<p>若固态硬盘<strong>开TRIM</strong>，删除一个文件，首先会删除其对应的文件表，然后在磁盘闲置时，自动擦除对应的数据，以便之后在此处写入数据时，可以直接写入。**这样就避免了固态硬盘越用越慢点问题。**但代价就是，往往当你发现自己误删文件时，<strong>TRIM机制已经擦除数据了，因而无法恢复数据</strong>；除非高价找恢复数据的公司，不保证一定能成功。</p>
<p>合理的建议是，备份是数据防丢失的最佳选择，而不是使用固态硬盘关TRIM、或机械硬盘都。不论用机械硬盘还是固态硬盘，如果数据很重要，不能丢失，就应使用多块硬盘或云盘，定期备份固态硬盘上的数据，而不要指望数据丢失后恢复数据。只要有数据备份，使用固态硬盘时，要开启TRIM，来优化写入效率，而不是关闭TRIM，牺牲写入效率。选择机械硬盘，从来不是追求其数据误删后可恢复，而是追求便宜；选择固态硬盘，是追求读写快和在颠簸中数据不受损，既然已经追求读写快了，就不应为此关闭TRIM牺牲写入效率。</p>
<h2 id="磁盘备份：FreeFileSync-软件"><a class="header-anchor" href="#磁盘备份：FreeFileSync-软件"></a>磁盘备份：<a href="https://freefilesync.org">FreeFileSync 软件</a></h2>
<p>可以同步两个磁盘、或两个文件夹。</p>
<p>免费开源软件。支持mac、linux、windows。</p>
<p>会按照两个软件，FreeFileSync负责手动同步，RealTimeSync负责自动同步。</p>
<h2 id="固态硬盘Trim命令的使用方法"><a class="header-anchor" href="#固态硬盘Trim命令的使用方法"></a><a href="https://www.zhihu.com/tardis/zm/art/370770594?source_id=1003">固态硬盘Trim命令的使用方法</a></h2>
<p><code>disabledeletenotify=0</code> : 说明固态硬盘TRIM功能开启</p>
<p><code>disabledeletenotify=1</code> :  说明固态硬盘TRIM功能关闭</p>
<h2 id="佳翼硬盘盒开启TRIM指令工具-打包下载-发表于-2022-11-6"><a class="header-anchor" href="#佳翼硬盘盒开启TRIM指令工具-打包下载-发表于-2022-11-6"></a><a href="http://jeyi.net/forum.php?mod=viewthread&amp;tid=2010">佳翼硬盘盒开启TRIM指令工具 打包下载 <em>发表于 2022-11-6</em></a></h2>
<p>有Trim开启，Trim关闭，Trim状态，Trim测试四个exe文件，需在windos上运行</p>
<h2 id="金百达KP230-Pro，2TB固态硬盘评测，长江存储-联芸主控"><a class="header-anchor" href="#金百达KP230-Pro，2TB固态硬盘评测，长江存储-联芸主控"></a><a href="https://zhuanlan.zhihu.com/p/586983006">金百达KP230 Pro，2TB固态硬盘评测，长江存储+联芸主控</a></h2>
<p>使用了以下五个只能在windows上运行的硬盘测试软件</p>
<ol>
<li>Crystal Disk Info</li>
<li>Crystal Disk Mark</li>
<li>AS SSD Benchmark</li>
<li>HD Tune</li>
<li>ATTO测试</li>
</ol>
]]></content>
      <categories>
        <category>器</category>
        <category>硬件</category>
      </categories>
  </entry>
  <entry>
    <title>tensorboard-PermissionError-13</title>
    <url>/posts/306d2d2/</url>
    <content><![CDATA[<h2 id="症状"><a class="header-anchor" href="#症状"></a>症状</h2>
<p>运行 <code>tensorboard --logdir .</code></p>
<p>报错</p>
<pre class="line-numbers language-none"><code class="language-none">tensorboard 8 &lt;module&gt;
sys.exit(run_main())

main.py 75 run_main
app.run(tensorboard.main, flags_parser&#x3D;tensorboard.configure)

app.py 299 run
_run_main(main, args)

app.py 250 _run_main
sys.exit(main(argv))

program.py 290 main
return runner(self.flags) or 0

program.py 308 _run_serve_subcommand
self._register_info(server)

program.py 356 _register_info
manager.write_info_file(info)

manager.py 262 write_info_file
with open(_get_info_file_path(), &quot;w&quot;) as outfile:

PermissionError:
13
Permission denied<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="原因"><a class="header-anchor" href="#原因"></a>原因</h2>
<p>当前用户没有<code>/tmp/.tensorboard-info</code>的读写权限, 故而tensorborad无法写入临时目录</p>
<h2 id="对策"><a class="header-anchor" href="#对策"></a>对策</h2>
<ul>
<li>
<p>若有root权限</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">777</span> /tmp/.tensorboard-info
<span class="token function">sudo</span> <span class="token function">chown</span> root:root /tmp/.tensorboard-info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>然后运行<code>tensorboard --logdir .</code></p>
</li>
<li>
<p>若无root权限</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 申明环境变量</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">TMPDIR</span><span class="token operator">=</span>/tmp/<span class="token environment constant">$USER</span><span class="token punctuation">;</span>
<span class="token comment"># 创建目录</span>
<span class="token function">mkdir</span> -p <span class="token variable">$TMPDIR</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后运行<code>tensorboard --logdir .</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>器</category>
        <category>炼丹框架</category>
      </categories>
  </entry>
  <entry>
    <title>pytorch多卡训练</title>
    <url>/posts/72581c6a/</url>
    <content><![CDATA[<h1 id="pytorch：-一机多卡训练的尝试"><a class="header-anchor" href="#pytorch：-一机多卡训练的尝试"></a>pytorch： 一机多卡训练的尝试</h1>
<p><a href="https://www.jianshu.com/p/221d9298808e">参考</a></p>
<p><a href="https://pytorch.org/tutorials/beginner/saving_loading_models.html?highlight=dataparallel">https://pytorch.org/tutorials/beginner/saving_loading_models.html?highlight=dataparallel</a></p>
<p><a href="https://pytorch.org/tutorials/beginner/former_torchies/parallelism_tutorial.html?highlight=dataparallel">https://pytorch.org/tutorials/beginner/former_torchies/parallelism_tutorial.html?highlight=dataparallel</a></p>
]]></content>
      <categories>
        <category>器</category>
        <category>炼丹框架</category>
      </categories>
  </entry>
  <entry>
    <title>服务器上安装pytorch</title>
    <url>/posts/cdbb6a98/</url>
    <content><![CDATA[<h2 id="服务器上安装pytorch"><a class="header-anchor" href="#服务器上安装pytorch"></a>服务器上安装pytorch</h2>
<ul>
<li>
<p>进入虚拟python环境（以下均在虚拟环境）</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> bin/activate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>查看记录cuda版本</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvcc -V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>当执行<code>nvcc --version</code>，显示</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">The program &#39;nvcc&#39; is currently not installed. To run &#39;nvcc&#39; please ask your administrator to install the package &#39;nvidia-cuda-toolkit&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p>时，则</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> /usr/local/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若见有如下文件</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">cuda-8.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p>则cuda是8.0版本的</p>
</li>
<li>
<p>查看记录python版本</p>
   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>升级pip到最新</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> -U pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>查看pip版本</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip -V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>登录pytorch官网 <a href="http://pytorch.org">http://pytorch.org</a></p>
<p>选择linux下用pip，python、cuda选对应版本</p>
<p>将网页上的命令复制到虚拟环境里的命令行（逐行输入）</p>
</li>
<li>
<p>python安装包</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> 包<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>测试安装成功否</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>在python中</p>
<ul>
<li>cuda测试</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">import torch
torch.cuda.is_available()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>若返回True，则cuda可用</p>
<ul>
<li>求导</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch <span class="token keyword">import</span> Tensor <span class="token keyword">as</span> T
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable <span class="token keyword">as</span> V
a<span class="token operator">=</span>V<span class="token punctuation">(</span>T<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>require_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
b<span class="token operator">=</span>a<span class="token operator">*</span>a
c<span class="token operator">=</span>b<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>
c<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
a<span class="token punctuation">.</span>grad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>返回若为</p>
<blockquote>
<pre><code>Variable containing:
 0.5000  1.0000
 1.5000  2.0000
[torch.FloatTensor of size 2x2]
</code></pre>
</blockquote>
<p>则正确</p>
</li>
</ul>
<h2 id="安装过程中的bug"><a class="header-anchor" href="#安装过程中的bug"></a>安装过程中的bug</h2>
<h3 id="torchvision-报错-ZN2at7getTypeERKNS-6TensorE"><a class="header-anchor" href="#torchvision-报错-ZN2at7getTypeERKNS-6TensorE"></a>torchvision 报错 <code>_ZN2at7getTypeERKNS_6TensorE</code></h3>
<p>运行含有torchvision的代码，会报错</p>
<pre class="line-numbers language-none"><code class="language-none">Traceback (most recent call last):
  File &quot;main.py&quot;, line 9, in &lt;module&gt;
    from get_data import get_data
  File &quot;&#x2F;mfs&#x2F;haoyu&#x2F;project&#x2F;pytorch_learn&#x2F;my_template&#x2F;code&#x2F;get_data.py&quot;, line 2, in &lt;module&gt;
    from torchvision import datasets, transforms
  File &quot;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;torchvision&#x2F;__init__.py&quot;, line 1, in &lt;module&gt;
    from torchvision import models
  File &quot;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;torchvision&#x2F;models&#x2F;__init__.py&quot;, line 11, in &lt;module&gt;
    from . import detection
  File &quot;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;torchvision&#x2F;models&#x2F;detection&#x2F;__init__.py&quot;, line 1, in &lt;module&gt;
    from .faster_rcnn import *
  File &quot;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;torchvision&#x2F;models&#x2F;detection&#x2F;faster_rcnn.py&quot;, line 7, in &lt;module&gt;
    from torchvision.ops import misc as misc_nn_ops
  File &quot;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;torchvision&#x2F;ops&#x2F;__init__.py&quot;, line 1, in &lt;module&gt;
    from .boxes import nms, box_iou
  File &quot;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;torchvision&#x2F;ops&#x2F;boxes.py&quot;, line 2, in &lt;module&gt;
    from torchvision import _C
ImportError: &#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;torchvision&#x2F;_C.cpython-37m-x86_64-linux-gnu.so: undefined symbol: _ZN2at7getTypeERKNS_6TensorE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这是因为torchvision未安装，或安装的版本不对</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip list <span class="token operator">|</span> <span class="token function">grep</span> torch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">torch                  1.2.0
torchfile              0.1.0
torchnet               0.0.4
torchvision            0.3.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>版本不对，torch1.2.0应当和torchvision0.4.0配套，故需要升级torchvision。可采用以下方法升级：</p>
<p>首先尝试自动升级</p>
<pre class="line-numbers language-none"><code class="language-none">pip install -U torchvision<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若未能升级到对应的torchvision版本，则需要手动指定版本，如</p>
<pre class="line-numbers language-none"><code class="language-none">pip install torchvision&#x3D;&#x3D;0.4.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若依旧未能升级到对应的torchvision版本，说明pip的安装包源没有及时更新，需要手动指定官网安装包：前往pytorch官网，寻找<a href="https://pytorch.org/get-started/previous-versions/#via-pip">历史torch版本（已build）-pip安装</a>，选择相应的cuda版本，如前往<a href="https://download.pytorch.org/whl/cu100/torch_stable.html">cuda10的pytorch下载网页</a>，寻找对应版本的torchvision，复制这个<a href="https://download.pytorch.org/whl/cu100/torchvision-0.4.0-cp37-cp37m-manylinux1_x86_64.whl">安装包下载链接</a></p>
<ul>
<li>
<p>版本号的含义</p>
<p><code>torchvision-0.4.0（torchvsion的版本）-cp37（python3.7）-cp37m-manylinux1_x86_64（linux64位）.whl</code></p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token punctuation">[</span>安装包下载链接<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>器</category>
        <category>炼丹框架</category>
      </categories>
  </entry>
  <entry>
    <title>iterm2配置与使用</title>
    <url>/posts/e9538bec/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="iterm2快捷键"><a class="header-anchor" href="#iterm2快捷键"></a>iterm2快捷键</h2>
<p><strong>Mac按键符号</strong></p>
<p><code>⇧</code>: shift     <code>⌃</code> : control     <code>⌥</code> : option/alt    <code>⌘ </code>: command   <code>↩</code>: return    <code>⌅</code>: enter</p>
<h3 id="快捷键"><a class="header-anchor" href="#快捷键"></a>快捷键</h3>
<h4 id="窗口（window）"><a class="header-anchor" href="#窗口（window）"></a>窗口（window）</h4>
<p><code>⌘N</code> : 新建窗口</p>
<p><code>⌘⇧w</code> : 关闭当前窗口</p>
<p><code>⌘↩</code>/自定义<code>⌘⌃F</code> : 切换全屏, 自定义动作名为 <code>Toggle Full Screen</code></p>
<h4 id="标签页（tab）"><a class="header-anchor" href="#标签页（tab）"></a>标签页（tab）</h4>
<p><code>⌘t</code> : 新建标签页</p>
<p><code>⌘⌥w</code> : 关闭当标签页</p>
<p><code>⌘⌥e</code>：全屏展示所有窗口的所有 tab，可在所有tab中搜索</p>
<p><code>⌘⇧[/]</code> / 自定义 <code>⌘⇧←/→</code> : 按方向切换标签页 (<code>⌘←/→</code>被光标移动到行首/未用了) , 自定义动作名为 <code>Previous/Next Tab</code></p>
<p>自定义  <code>⌘Fn←/→</code> :, 按方向移动标签页 (<code>⌘⇧←/→</code>被 按方向切换标签页 用了) , 自定义动作名为 <code>Move Tab Left/Right</code></p>
<p><code>⌘</code> + <code>&lt;数字&gt;</code>: 切换标签页</p>
<h4 id="分屏（panel）"><a class="header-anchor" href="#分屏（panel）"></a>分屏（panel）</h4>
<p><code>⌘(⇧)d</code>: 垂直(水平)分屏</p>
<p><code>⌘w</code> : 关闭当前分屏</p>
<p><code>⌘⇧↩</code>: 最大化当前分屏/解除此最大化</p>
<p><code>⌘[/]</code>: 跳转到（按使用历史）前/后一个分屏</p>
<p><code>⌘⌥←/→/↑/↓</code>: （按位置）跳转分屏</p>
<p><code>⌘⌃←/→/↑/↓</code>:  （按位置）平移分屏界</p>
<p>鼠标操作：</p>
<ul>
<li>拖动分屏眉换位置</li>
<li>拖动分屏界</li>
</ul>
<h4 id="分屏内"><a class="header-anchor" href="#分屏内"></a>分屏内</h4>
<p><code>⌘k</code>: 清空屏幕，之后仍无法上翻到屏幕历史</p>
<p><code>⌘r</code> =linux快捷键<code>⌃l</code> =shell命令 <code>clear</code>:（reflash之意）下翻屏幕至全空，之后仍可上翻屏幕</p>
<p><code>⌘f</code>: 查找，支持正则</p>
<p><code>⌘/</code>: 高亮当前鼠标的位置</p>
<p><code>⌘Fn ↑/↓</code>: 上翻/下翻一页</p>
<p><code>⌘Fn ←/→</code>/ 自定义 <code>⌘⇧FN↑/↓</code>: 上翻/下翻到顶, 自定义动作名为 <code>Scroll To Top/End</code></p>
<h4 id="补全"><a class="header-anchor" href="#补全"></a>补全</h4>
<p><code>⌘;</code>: 自动补全历史命令</p>
<p><code>⌘⇧h</code>: 显示所有历史命令及其时间，非补全</p>
<p><code>⌘⌥/</code>: 显示所有补全历史用过的路径，按使用频率显示，非补全</p>
<h4 id="在命令行快速移动"><a class="header-anchor" href="#在命令行快速移动"></a>在命令行快速移动</h4>
<p><code>⌥ </code>   +<code>←/→</code>：左/右移一词                    <code>⌥ </code>   +<code>Del/FnDel</code>: 左/右删一词</p>
<p><code>⌘</code>+<code>←/→</code>，或<code>Fn</code>+<code>←/→</code>：左/右移动到行尽头        <code>⌘</code>+<code>Del/FnDel</code>: 左/右删到行尽头</p>
<p><strong>上述快捷键，与linux快捷键的映射关系</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>前/首</th>
<th>后/尾</th>
</tr>
</thead>
<tbody>
<tr>
<td>光标移一词</td>
<td><code>Esc+b</code> (NE <code>⌥←</code>=escape seq b)</td>
<td><code>Esc+f</code> (NE  <code>⌥→</code>=escape seq f)</td>
</tr>
<tr>
<td>移到行之</td>
<td><code>⌃a</code> （自设<code>⌘←</code>=hex  0x01）或 <code>Home</code>=<code>Fn←</code>=escape seq [1~</td>
<td><code>⌃e</code>（自设<code>⌘→</code>=hex  0x05）或 <code>End</code>=<code>Fn→</code>=escape seq [4~</td>
</tr>
<tr>
<td>删一词</td>
<td><code>⌃w</code>（自设 <code>⌥Del</code>=hex  0x17) =<code>⌃[</code>松手+<code>Del</code>（Del即Backspace） (NE<code>⌥Del</code>=  hex 0x1b 0x7f）</td>
<td><code>Esc+d</code>（NE <code>⌥FnDel</code>=escape seq d）</td>
</tr>
<tr>
<td>删光标前/后的全部</td>
<td><code>⌃u</code> （ 自设<code>⌘Del</code>=hex  0x15, 再去掉NE的 <code>⌘Del</code>=hex  0x15）</td>
<td><code>⌃k</code>（自设<code>⌘FnDel</code>=hex 0x0b）</td>
</tr>
<tr>
<td>删除整行</td>
<td><code>⌃e⌃u</code> (<code>^e</code>移到行尾，<code>^u</code>删除光标到行首) （自设<code>⇧Del</code>=hex  0x05 0x15）</td>
<td>–</td>
</tr>
</tbody>
</table>
<ul>
<li>表格含义：<code>linux下的快捷键</code>（预设/自设 <code>iterm2快捷键</code>=<code>自设快捷键的指令</code>）</li>
<li>NE（快捷键预设）：nutral editing，选择预设方法详见<a href="#%E8%87%AA%E8%AE%BE%E5%BF%AB%E6%8D%B7%E9%94%AE">下文之 自设快捷键</a></li>
<li>自设：用户自己添加的快捷键，法详见<a href="#%E8%87%AA%E8%AE%BE%E5%BF%AB%E6%8D%B7%E9%94%AE">下文之 自设快捷键</a></li>
</ul>
<h3 id="自设快捷键"><a class="header-anchor" href="#自设快捷键"></a>自设快捷键</h3>
<p>（本文参考<a href="http://aaronmoment.cn/iterm2/">自定义快捷键</a>  ）</p>
<p>在iterm2软件中，<code>iterm2/preferences</code>（即<code>⌘,</code>），然后依次</p>
<ul>
<li>
<p>选择预设快捷键，见下图2.5</p>
</li>
<li>
<p>添加自定义快捷键，方法例如下</p>
</li>
</ul>
<p><img data-src="/posts/e9538bec/1.png" alt></p>
<p><img data-src="/posts/e9538bec/2.png" alt></p>
<ul>
<li>
<p>自设快捷键的指令的写法</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>action</th>
<th>action下一栏</th>
<th>又记作</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Esc+一些按键</code>(要按的足够快)</td>
<td>send escape sequence</td>
<td><code>一些按键</code></td>
<td><code>^[一些按键</code></td>
</tr>
<tr>
<td><code>⌃键</code></td>
<td>send hex code</td>
<td><code>0x十六进制数</code>（参见 <a href="http://www.physics.udel.edu/~watson/scen103/ascii.html">按键的十六进制码</a>）</td>
<td>例如<code>\x09\x9f</code></td>
</tr>
</tbody>
</table>
</li>
<li>
<p>然后删掉预设<code>natural editing</code>自带的 <code>→Del</code>=<code>Send hex Codes: 0x4</code>（即ctrl+d，linux命令行自带的删除右侧一个字符）</p>
</li>
<li>
<p>然后加上<code>Home</code>=<code>escape seq [1~</code>, <code>End</code>=<code>escape seq [4~</code>，这是因为tmux下，不接受预设快捷键默认<code>Home</code>,<code>End</code>的键值（keycode），但接受^[[1~, ^[[4~</p>
</li>
</ul>
<h2 id="集成tmux"><a class="header-anchor" href="#集成tmux"></a>集成tmux</h2>
<p><a href="https://www.jianshu.com/p/f2e585453196">参考</a></p>
<p><a href="https://toutiao.io/posts/q86tnu/preview">tmux自动开启的设置方法</a></p>
<p>iTerm2可与本机或ssh远程的tmux关联，用iterm操作tmux</p>
<ul>
<li>tmux的session映射iterm2的window</li>
<li>tmux的window映射iterm2的tab</li>
<li>tmux的panel映射iTerm2的panel</li>
</ul>
<p>适用版本：tmux版本&gt;=1.8, iterm2&gt;=2.9</p>
<h3 id="启动tmux-client"><a class="header-anchor" href="#启动tmux-client"></a>启动tmux client</h3>
<p>启动tmux client，以使iterm2关联tmux  : <code>tmux -CC </code></p>
<ul>
<li><code>tmux -CC new -s 新session名</code> : 新iterm2窗口新建tmux session （<strong>推荐</strong>）</li>
<li><code>tmux -CC attach -t session名</code> : 新iterm2窗口连指定tmux session （<strong>推荐</strong>）</li>
<li><code>tmux -CC attach</code> : 新窗口连接最近的在tmux dashboard里的tmux session（<strong>推荐</strong>）</li>
</ul>
<p>连接后：tmux的一切快捷键前缀会被覆盖掉</p>
<h3 id="开闭"><a class="header-anchor" href="#开闭"></a>开闭</h3>
<p><strong>新建</strong></p>
<ul>
<li><code> ⌘⇧⌃t</code>：新建 tmux session 为 标签页（<strong>推荐</strong>）</li>
<li><code> ⌘⇧⌃n</code>：新建 tmux session 为 窗口</li>
</ul>
<p><strong>关闭窗口</strong></p>
<p>导致tmux session将关闭，然后弹出对话框点</p>
<ul>
<li><code>hide</code> : 隐藏当前所有tmux window</li>
<li><code>detach</code>：detach当前tmux session</li>
<li><code>kill</code>：kill当前tmux session</li>
</ul>
<p>关闭tmux client，并detach 当前 tmux session</p>
<ul>
<li>
<p>在tmux session的页面 <code> ⌘⇧⌃d</code>（<strong>推荐</strong>）</p>
</li>
<li>
<p>在在运行tmux client的页面 <code>esc</code>（<strong>推荐</strong>）</p>
</li>
</ul>
<p><strong>关闭标签页</strong></p>
<p>导致tmux window将关闭，然后弹出对话框点</p>
<ul>
<li><code>hide</code> : 隐藏当前tmux window</li>
<li><code>kill</code>：kill当前tmux window</li>
</ul>
<h3 id="tmux-dashboard-仪表盘"><a class="header-anchor" href="#tmux-dashboard-仪表盘"></a>tmux dashboard (仪表盘)</h3>
<p>需要有tmux -CC开启的session处在attach时，dashboard才能启动</p>
<p><code> ⌘⇧⌃↩</code>：打开dashboard。进入dashboard后，（<strong>推荐</strong>）</p>
<p><img data-src="/posts/e9538bec/4.png" alt></p>
<ul>
<li>
<p>选中tmux session/window，再点击其名字，即可更名（<strong>推荐</strong>）</p>
</li>
<li>
<p>选中一或多个tmux window，点<code>hide</code> ，则该标签页藏起来</p>
</li>
<li>
<p>选中多个tmux window，点<code>Open in Tabs</code>， 同一个窗口打开为多个标签页</p>
</li>
<li>
<p><code>attach</code>/<code>detach</code> tmux session</p>
</li>
<li>
<p>选中tmux session/window，点<code>-</code>kill之（<strong>推荐</strong>）</p>
</li>
<li>
<p><code>+</code>，新建tmux session/window，打开为现有窗口的新标签页，其设置方法如下<br>
<img data-src="/posts/e9538bec/5.png" alt></p>
</li>
<li>
<p><code>⌘w</code>=点红叉叉，退出dashboard（<strong>推荐</strong>）</p>
</li>
</ul>
<h3 id="标签页标题"><a class="header-anchor" href="#标签页标题"></a>标签页标题</h3>
<ul>
<li>[ ↣ xxx xxx] ：在运行tmux client</li>
<li>↣ xxx：tmux的windows</li>
<li>xxx：非tmux的页标题</li>
</ul>
<p><img data-src="/posts/e9538bec/3.png" alt></p>
<h3 id="让tmux加载默认profile"><a class="header-anchor" href="#让tmux加载默认profile"></a>让tmux加载默认profile</h3>
<p>初次使用<code>tmux -CC</code>时，会将默认profile自动复制一份成<code>tmux</code>的profile。在<code>tmux -CC</code>时，只加载名为”tmux“的profile。为方便统一在tmux内外的快捷键和配色等设置，需让tmux加载默认profile</p>
<h4 id="法一：将其他profile设置成功tmux所加载的profile（推荐）"><a class="header-anchor" href="#法一：将其他profile设置成功tmux所加载的profile（推荐）"></a>法一：将其他profile设置成功tmux所加载的profile（推荐）</h4>
<p>如需要将已经配置好的profile（如上图中的``Default<code>）**设置成tmux所加载的profile**，只需要删除</code>tmux<code> profile，并将</code>Default <code>profile重命名为</code>tmux`即可，然后将它设置为默认（标星）。</p>
<p><img data-src="/posts/e9538bec/image-20241022113806207.png" alt="image-20241022113806207"></p>
<h4 id="法二：将tmux-profile设置为默认profile"><a class="header-anchor" href="#法二：将tmux-profile设置为默认profile"></a>法二：将tmux profile设置为默认profile</h4>
<ul>
<li>设<code>tmux</code>profile 为默认，被视为默认的profile前会标★</li>
</ul>
<p><img data-src="/posts/e9538bec/6.png" alt></p>
<ul>
<li>删除<code>Default</code>profile</li>
</ul>
<p><img data-src="/posts/e9538bec/7.png" alt></p>
<p>则之后，不论戳iterm2图标，或<code>tmux -CC</code>，开的页面皆使用<code>tmux</code> profile。</p>
<h2 id="shell-integration：远程tmux映射成本地GUI窗口"><a class="header-anchor" href="#shell-integration：远程tmux映射成本地GUI窗口"></a>shell integration：远程tmux映射成本地GUI窗口</h2>
<h4 id="安装shell-integration-的-utility"><a class="header-anchor" href="#安装shell-integration-的-utility"></a>安装shell integration  的 utility</h4>
<p>在本地分别运行</p>
<pre class="line-numbers language-ba'sh" data-language="ba'sh"><code class="language-ba'sh">curl -L https:&#x2F;&#x2F;iterm2.com&#x2F;shell_integration&#x2F;install_shell_integration_and_utilities.sh | bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>即安装完成</p>
<h4 id="单文件上传与下载"><a class="header-anchor" href="#单文件上传与下载"></a>单文件上传与下载</h4>
<p>shell integration仅支持单文件的上传与下载, 多文件(如文件夹)则不支持.</p>
<h5 id="配置"><a class="header-anchor" href="#配置"></a>配置</h5>
<p>仅支持下载: 仅在本地运行如下命令</p>
<p>支持下载与上传: 在本地与远程都运行如下命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -L https://iterm2.com/shell_integration/install_shell_integration_and_utilities.sh <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>而后会出现 <code>~/.iterm2_shell_integration.zsh</code> 文件, 而<code>~/.zshrc</code>里会自动添加如下一行</p>
<pre class="line-numbers language-zsh" data-language="zsh"><code class="language-zsh">test -e &quot;$&#123;HOME&#125;&#x2F;.iterm2_shell_integration.zsh&quot; &amp;&amp; source &quot;$&#123;HOME&#125;&#x2F;.iterm2_shell_integration.zsh&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h5 id="用法"><a class="header-anchor" href="#用法"></a>用法</h5>
<p>ssh登录远程主机, 然后</p>
<ul>
<li>下载单文件: <code>⌘</code>+左键单击文件</li>
<li>上传单文件: 从finder里拖拽文件到iterm中, 按着 <code>⌥</code> 松开鼠标</li>
</ul>
<h4 id="从融合的远程tmux中闪退"><a class="header-anchor" href="#从融合的远程tmux中闪退"></a>从融合的远程tmux中闪退</h4>
<p>ssh连接到远程服务器，并执行<code>tmux -CC</code>，进入融合tmux。有时会从融合的远程tmux窗口中闪退，并报错</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">** tmux mode started **

Command Menu
----------------------------
esc    Detach cleanly.
  X    Force-quit tmux mode.
  L    Toggle logging.
  C    Run tmux command.
Unrecognized command from tmux. Did your ssh session die? The command was:
channel 9: open failed: connect failed: Connection refused
Detached
channel 9: open failed: connect failed: Connection refused
channel 9: open failed: connect failed: Connection refused
channel 9: open failed: connect failed: Connection refused
%exit
** tmux mode started **

Command Menu
----------------------------
esc    Detach cleanly.
  X    Force-quit tmux mode.
  L    Toggle logging.
  C    Run tmux command.
tmux failed with error: “duplicate session: pytorch_template”
Detached<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>原因分析：</p>
<ul>
<li>
<p>本地<code>ssh</code>连接远程时加了<code>-L</code>参数，然而远程映射端口上没开网络服务器进程，此时本地若访问本地映射端口，则本地<code>ssh</code>进程会报ERROR曰</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">channel 数字: open failed: connect failed: Connection refused<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p>没开tmux时，此报错会直接输出在屏幕上；用<code>tmux</code>不加<code>-CC</code>进入tmux，此报错会直接输出在tmux中你当前所在的分屏上。这两者情况都不会闪退。</p>
</li>
<li>
<p>然而若用<code>tmux -CC</code>进入tmux，shell integration以为这是tmux发出的，且是未见命令，故退出集成tmux窗口并报错</p>
  <pre class="line-numbers language-none"><code class="language-none">Unrecognized command from tmux. Did your ssh session die? The command was:
channel 9: open failed: connect failed: Connection refused
Detached<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p>解决办法：</p>
<ul>
<li>
<p>法一：让ssh不要输出报ERROR<code>channel 数字: open failed: connect failed: Connection refused</code>：</p>
<ul>
<li>​	在本地<code>~/.ssh/config</code>中加上</li>
</ul>
  <pre class="line-numbers language-none"><code class="language-none">Host &lt;服务器名&gt;
    LogLevel QUIET<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这样ERROR就不会输出到屏幕了。</p>
<ul>
<li>或使用<code>ssh -q 其余参数</code>连接服务器</li>
</ul>
<p>缺点：ssh连接异常时不利于debug</p>
</li>
<li>
<p>法二：设置iTerm2，让它收到tmux发出的未见命令时不要退出集成tmux窗口</p>
<p>iTerm2中，<code>Preferences</code>-<code>Advanced</code>-搜索框输入&quot;tolerate&quot;-&quot;tolerate unrecognized commands from tmux&quot;选<code>off</code></p>
<p>缺点：这样就无法检测到死掉的tmux session并自动detach</p>
</li>
</ul>
<h4 id="报错This-instance-of-iTerm2-is-already-attached-to-this-session"><a class="header-anchor" href="#报错This-instance-of-iTerm2-is-already-attached-to-this-session"></a>报错<code>This instance of iTerm2 is already attached to this session</code></h4>
<p>当使用iterm2，ssh到远程主机，用<code>tmux -CC</code>开启远程的tmux session（如名为<code>&lt;current-session-name&gt;</code>），映射为本地iterm2的窗口。若此时本地电脑断网，再次联网，则映射窗口会卡死。</p>
<p>在卡死的窗口中，按<code>cmd+w</code>、<code>cmd+ctrl+shitf+d</code>均不会有反应。</p>
<ul>
<li>
<p>此时若想恢复连接，正确的操作应该是：</p>
<p><code>cmd+n</code>开启一个新iterm2窗口，ssh连接远程主机，<code>tmux -CC attach  -t &lt;current-session-name&gt;</code>，弹出</p>
<blockquote>
<p>Could not attach to session</p>
<p>This instance of iTerm2 is already attached to this session</p>
<p><code>Reveal</code> <code>Ok</code></p>
</blockquote>
<p>点<code>Reveal</code>，则之前卡死的窗口会恢复连接，现在可以在其中操作了。</p>
</li>
<li>
<p>此时若如下误操作则会出现bug：按窗口左上角的红<code>x</code>，则会弹出对话框</p>
<blockquote>
<p><strong>Close Window #1?</strong></p>
<p>This window will be closed.</p>
<p><code>cancel</code> <code>ok</code></p>
</blockquote>
<p>点<code>OK</code>，然后又弹出对话框，</p>
<blockquote>
<p><strong>Warning</strong></p>
<p>Kill window and its jobs, hide window from view, or detach from tmux session?</p>
<p>Hidden windows may be restored from the tmux dashboard.</p>
<p><code>Kill</code> <code>Detach tmux session</code> <code>Hide</code></p>
</blockquote>
<p>一般不想<code>Kill</code>，故选<code>Detach tmux session</code>或者<code>Hide</code>，而后在<code>cmd+n</code>开启另一个iterm2窗口，重新ssh远程主机，然后<code>tmux -CC attach  -t &lt;current-session-name&gt;</code>，则会弹出对话框报错如下</p>
<blockquote>
<p>Could not attach to session</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>This instance of iTerm2 is already attached to this session</p>
<p><code>Reveal</code> <code>Ok</code></p>
</blockquote>
<pre><code>不论点那个都无法打开`&lt;current-session-name&gt;`窗口

点`Reveal`会开启tmux Dashboard，在其中仍无法detach或开启 `&lt;current-session-name&gt;`；点Ok会直接输出

&gt; ** tmux mode started **
&gt;
&gt; Command Menu
&gt; /----------------------------
&gt; esc    Detach cleanly.
&gt;   X    Force-quit tmux mode.
&gt;   L    Toggle logging.
&gt;   C    Run tmux command.
&gt; Detached
&gt; %output %34 \015\015\033[0m\033[27m\033[24m\033[J\033[39m\033[0m\033[49m\033[42m\033[30m haoyu@jungpu3 \033[44m\033[32m\033[30m /home/haoyu/mfs/project/pytorch_learn/my_template/code \033[43m\033[34m\033[30m  dev ● \033[49m\033[33m\033[39m \033[K
&gt; %begin 1571724889 24 1
&gt; %end 1571724889 24 1
&gt; %exit

但是

* `tmux attach  -t &lt;current-session-name&gt;`则可打开，没有映射成本地窗口
* `tmux attach  -t &lt;other-session-name&gt;`也可打开，且能映射成本地窗口

解决方法：`cmd+Q`退出iterm2.app，然后重启iterm.app，再ssh远程服务器，`tmux -CC attach  -t &lt;current-session-name&gt;`，则可打开并映射成本地窗口。
</code></pre>
<h2 id="如何让iterm2-在任何界面呼入呼出？"><a class="header-anchor" href="#如何让iterm2-在任何界面呼入呼出？"></a>如何让iterm2 在任何界面呼入呼出？</h2>
<p><a href="https://www.zhihu.com/question/51622732">教程</a></p>
]]></content>
      <categories>
        <category>器</category>
        <category>终端</category>
      </categories>
  </entry>
  <entry>
    <title>Pycharm安装配置教程</title>
    <url>/posts/983e68f/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="Pycharm教程"><a class="header-anchor" href="#Pycharm教程"></a>Pycharm教程</h1>
<h2 id="汉化pycharm"><a class="header-anchor" href="#汉化pycharm"></a>汉化pycharm</h2>
<p>链接：<a href="https://www.jianshu.com/p/8ec84bd7d3d6">https://www.jianshu.com/p/8ec84bd7d3d6</a></p>
<h3 id="首先下载汉化包"><a class="header-anchor" href="#首先下载汉化包"></a>首先下载汉化包</h3>
<pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;ewen0930&#x2F;PyCharm-Chinese<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="然后生成resources-zh-jar"><a class="header-anchor" href="#然后生成resources-zh-jar"></a>然后生成resources_zh.jar</h3>
<pre class="line-numbers language-none"><code class="language-none">bash package.cmd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="替换文件"><a class="header-anchor" href="#替换文件"></a>替换文件</h3>
<p>把生成的resources_zh.jar放在安装目录lib文件夹下就好了</p>
<p>mac的路径是<code>/Applications/PyCharm CE.app/Contents/lib</code></p>
<h2 id="教育账号申请"><a class="header-anchor" href="#教育账号申请"></a>教育账号申请</h2>
<h3 id="操作"><a class="header-anchor" href="#操作"></a>操作</h3>
<p><a href="https://www.jetbrains.com/student/">链接</a> - <code>How do I apply?</code> - <code>Apply Now</code></p>
<p>填入姓名 学校信息 教育邮箱（.edu.cn 可用），然后提交</p>
<p>等五分钟左右，教育邮箱才会收到激活邮件，点其中链接</p>
<p>填入Jet Brains的账号邮箱（可以是其他邮箱）和密码，没有账号可申请一个，提交</p>
<p>等五分钟左右，账号邮箱才会收到激活邮件，点其中链接，会显示一个激活码，是教育账号的</p>
<p>此激活码填入Jet Brains所有软件（如pycharm）的账号激活中，即激活成功</p>
<h3 id="注意"><a class="header-anchor" href="#注意"></a>注意</h3>
<ul>
<li>教育账号有效期一年，一年后若仍是学生或老师，还可用原教育邮箱在此激活</li>
<li>教育账号可激活多台机器上的pycahrm，但只能同时用一台上的</li>
</ul>
<h2 id="远程"><a class="header-anchor" href="#远程"></a>远程</h2>
<h3 id="添加远程解释器、同步远程项目文件夹"><a class="header-anchor" href="#添加远程解释器、同步远程项目文件夹"></a>添加远程解释器、同步远程项目文件夹</h3>
<p><a href="https://www.jianshu.com/p/9b362cdee2ab">参见</a></p>
<h3 id="浏览远程目录"><a class="header-anchor" href="#浏览远程目录"></a>浏览远程目录</h3>
<p><a href="https://www.jetbrains.com/help/pycharm/remote-host-tool-window.html">参见</a></p>
<p>最终效果：远程浏览栏在右，可见整个服务器；本地浏览栏在左，只见项目目录</p>
<p><img data-src="/posts/983e68f/%E8%BF%9C%E7%A8%8B%E6%9C%AC%E5%9C%B0%E6%B5%8F%E8%A7%88.png" alt></p>
<h3 id="几种用法"><a class="header-anchor" href="#几种用法"></a>几种用法</h3>
<ul>
<li>用远程解释器、debug或运行本地代码
<ul>
<li>只需添加远侧解释器，同步远程项目文件夹，即可调用远程资源运行、debug本地代码，结果返回到pycharm中的下栏</li>
</ul>
</li>
<li>编辑远程代码
<ul>
<li>同步远程项目文件夹到本地随便一个文件夹</li>
<li>若不添加远程解释器，则只可在ssh中运行</li>
<li>若添加远程解释器，则可用远程解释器、debug</li>
</ul>
</li>
<li>在pycharm中查看远程、编辑文件（不论文本还是图片）
<ul>
<li>在远程浏览栏中，服务器上所有的（不仅仅是同步的文件夹中的）文件（夹），可在pycharm内增删改重命名</li>
<li>但是不能打开远程文件夹到pycharm，如有此需要，需新建远程项目文件夹同步</li>
</ul>
</li>
<li>传输文件
<ul>
<li>将文件（夹）（们），拖入(移动)/<code>⌘V</code>(复制) 到本地浏览栏，会自动同步到远程项目文件夹</li>
<li>拖入(移动)/<code>⌘V</code>(复制) 到远程浏览栏无效</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>器</category>
        <category>编辑器IDE</category>
      </categories>
  </entry>
  <entry>
    <title>tmux配置与使用</title>
    <url>/posts/1d810cbf/</url>
    <content><![CDATA[<h2 id="tmux-使用"><a class="header-anchor" href="#tmux-使用"></a>tmux 使用</h2>
<ul>
<li>
<ul>
<li>窗口进程管理<br>
即使终端关闭（<code>cmd+Q/W</code>），tmux的窗口依旧运行<br>
打开一个tmux窗口</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">tmux new -s 窗口名字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>将该tmux窗口放入后台</p>
<pre class="line-numbers language-none"><code class="language-none">ctrl+b d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查看所有tmux窗口的方法</p>
<pre class="line-numbers language-none"><code class="language-none">tmux ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>唤出（使后台的窗口显示）tmux窗口</p>
<pre class="line-numbers language-none"><code class="language-none">tmux a -t 窗口名字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>显示最后放入后台的窗口</p>
<pre class="line-numbers language-none"><code class="language-none">tmux a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>杀死tmux窗口的方法</p>
<pre class="line-numbers language-none"><code class="language-none">tmux kill-session -t 窗口名字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>杀死当前窗口</p>
<pre class="line-numbers language-none"><code class="language-none">ctrl+b &amp;
选择y （yes）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>窗口分区管理</p>
</li>
<li>
<p>页面<br>
单个程序只给一屏用于输出，超出此范围，要翻页查看：<br>
<code>ctrl+b [   fn+↑/↓  esc</code><br>
进入拷贝模式：拷贝模式中，新输出的文字不会显示<br>
<code>ctrl+b [</code>	：进入拷贝模式<br>
<code>fn+上/下键</code>	：翻页<br>
<code>esc</code>			：退出拷贝模式<br>
进入黏贴模式<br>
<code>ctrl+b ]</code></p>
</li>
</ul>
<h2 id="tmux配置"><a class="header-anchor" href="#tmux配置"></a>tmux配置</h2>
<p>我的<code>~/.tmux.conf</code>文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># --- base --- #</span>
<span class="token builtin class-name">set</span> -g default-terminal <span class="token string">"screen-256color"</span>
<span class="token builtin class-name">set</span> -g display-time <span class="token number">3000</span>
<span class="token builtin class-name">set</span> -g history-limit <span class="token number">10000</span>
<span class="token builtin class-name">set</span> -g base-index <span class="token number">1</span>
<span class="token builtin class-name">set</span> -g pane-base-index <span class="token number">1</span>
<span class="token builtin class-name">set</span> -s escape-time <span class="token number">0</span>
<span class="token comment"># set -g mouse on # 打开以下各个鼠标功能</span>

<span class="token comment"># set -g mode-mouse on # 支持鼠标选取文本等</span>
<span class="token comment"># set -g mouse-resize-pane on # 支持鼠标拖动调整面板的大小(通过拖动面板间的分割线)</span>
<span class="token comment"># set -g mouse-select-pane on # 支持鼠标选中并切换面板</span>
<span class="token comment"># set -g mouse-select-window on # 支持鼠标选中并切换窗口(通过点击状态栏窗口名称)</span>
<span class="token comment"># 允许用鼠标（含触控板）翻页，但会把vim的鼠标翻页给劫持走</span>

<span class="token comment"># 复制黏贴</span>
<span class="token comment"># set-option -g default-command "reattach-to-user-namespace -l bash"</span>
<span class="token comment"># setw -g mode-keys vi</span>
<span class="token comment"># bind-key -t vi-copy v begin-selection</span>
<span class="token comment"># bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"</span>

<span class="token comment"># ctrl-a [ 进入 vi 模式</span>
<span class="token comment"># q：退出vi模式</span>
<span class="token comment"># 使用 hjkl，wb 等 vi 快捷键移动到目标位置</span>
<span class="token comment"># v ：进入 Visual模式(即选词模式) ，开始选择内容</span>
<span class="token comment"># 使用 vi 快捷键移动，直到要复制的内容被选中</span>
<span class="token comment"># y：复制操作系统的粘贴板</span>
<span class="token comment"># 粘贴：tmux内ctrl+]，在操作系统内Cmd-V</span>

<span class="token comment"># ctrl+r : reload my change in this file (~/.tmux.conf)</span>
<span class="token builtin class-name">bind</span> r source-file ~/.tmux.conf <span class="token punctuation">\</span><span class="token punctuation">;</span> display <span class="token string">"Reloaded!"</span>

<span class="token comment"># 分割窗口</span>
<span class="token builtin class-name">bind</span> <span class="token punctuation">\</span> split-window -h <span class="token comment"># prefix+\ : 竖分</span>
unbind %
<span class="token builtin class-name">bind</span> - split-window -v <span class="token comment"># prefix+-横分</span>
unbind <span class="token string">'"'</span>

<span class="token comment"># 窗口间移动</span>
<span class="token builtin class-name">bind</span> h select-pane -L
<span class="token builtin class-name">bind</span> j select-pane -D
<span class="token builtin class-name">bind</span> k select-pane -U
<span class="token builtin class-name">bind</span> l select-pane -R

<span class="token comment"># 窗口改大小</span>
<span class="token builtin class-name">bind</span> -r ^k resizep -U <span class="token number">5</span> <span class="token comment"># upward (prefix Ctrl+k)</span>
<span class="token builtin class-name">bind</span> -r ^j resizep -D <span class="token number">5</span> <span class="token comment"># downward (prefix Ctrl+j)</span>
<span class="token builtin class-name">bind</span> -r ^h resizep -L <span class="token number">5</span> <span class="token comment"># to the left (prefix Ctrl+h)</span>
<span class="token builtin class-name">bind</span> -r ^l resizep -R <span class="token number">5</span> <span class="token comment"># to the right (prefix Ctrl+l)</span>

<span class="token builtin class-name">bind</span> -r e lastp <span class="token comment"># 选择最后一个面板</span>
<span class="token builtin class-name">bind</span> -r ^e last <span class="token comment"># 选择最后一个窗口</span>

<span class="token builtin class-name">bind</span> -r ^<span class="token punctuation">[</span> swapp -U <span class="token comment"># 与前一个面板交换位置: ctrl+a+[(ctrl不松手)</span>
<span class="token builtin class-name">bind</span> -r ^<span class="token punctuation">]</span> swapp -D <span class="token comment"># 与后一个面板交换位置：ctrl+a+](ctrl不松手)</span>

<span class="token comment"># select the last pane (prefix e)</span>
<span class="token builtin class-name">bind</span> e lastp
<span class="token comment"># select the last window (prefix Ctrl+e)</span>
<span class="token builtin class-name">bind</span> ^e last

<span class="token comment"># kill pane (prefix q)</span>
<span class="token builtin class-name">bind</span> q killp
<span class="token comment"># kill window (prefix Ctrl+q)</span>
<span class="token builtin class-name">bind</span> -r ^q killw
<span class="token builtin class-name">bind</span> Q kill-session

<span class="token comment"># 显示会话列表</span>
unbind w
<span class="token builtin class-name">bind</span> w display-panes
unbind s
unbind ^s
unbind S
<span class="token builtin class-name">bind</span> s choose-window
<span class="token builtin class-name">bind</span> -r ^s choose-session
<span class="token builtin class-name">bind</span> S choose-tree
<span class="token comment"># list-windows -a</span>

<span class="token comment"># 显示窗口列表</span>

<span class="token comment"># 修改进入命令模式按键</span>
<span class="token comment"># remap prefix to Control + a</span>
<span class="token builtin class-name">set</span> -g prefix C-a
unbind C-b
<span class="token builtin class-name">bind</span> C-a send-prefix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>器</category>
        <category>终端</category>
      </categories>
  </entry>
  <entry>
    <title>Sublime安装配置使用教程</title>
    <url>/posts/680b6b42/</url>
    <content><![CDATA[<h1 id="Sublime教程"><a class="header-anchor" href="#Sublime教程"></a>Sublime教程</h1>
<p>[TOC]</p>
<p>参考：<a href="http://lucida.me/blog/sublime-text-complete-guide/">Sublime Text 全程指南</a></p>
<h2 id="安装"><a class="header-anchor" href="#安装"></a>安装</h2>
<p><a href="https://www.sublimetext.com/3">官网下载</a></p>
<h2 id="配置"><a class="header-anchor" href="#配置"></a>配置</h2>
<p><a href="https://www.jianshu.com/p/a5559083c666">原文参考</a></p>
<h3 id="安装package-control"><a class="header-anchor" href="#安装package-control"></a>安装package control</h3>
<p>这是sublime官方的包管理软件，可以安装、卸载包。</p>
<h4 id="直接安装"><a class="header-anchor" href="#直接安装"></a>直接安装</h4>
<p>sublime Text 版本&gt;3.1，则可：<code>cmd+shift+P</code>，弹出下拉菜单，输入<code>package control</code>，选择<code>Install Package Control </code></p>
<h4 id="控制台安装"><a class="header-anchor" href="#控制台安装"></a>控制台安装</h4>
<p>若上法无效，按<code>ctrl+` </code>调出控制台，参见<a href="https://packagecontrol.io/installation">package control官网</a>，输入如下代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">,</span>os<span class="token punctuation">,</span>hashlib<span class="token punctuation">;</span> h <span class="token operator">=</span> <span class="token string">'df21e130d211cfc94d9b0905775a7c0f'</span> <span class="token operator">+</span> <span class="token string">'1e3d39e33b79698005270310898eea76'</span><span class="token punctuation">;</span> pf <span class="token operator">=</span> <span class="token string">'Package Control.sublime-package'</span><span class="token punctuation">;</span> ipp <span class="token operator">=</span> sublime<span class="token punctuation">.</span>installed_packages_path<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>install_opener<span class="token punctuation">(</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>ProxyHandler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> by <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span> <span class="token string">'http://packagecontrol.io/'</span> <span class="token operator">+</span> pf<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'%20'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> dh <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>by<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error validating download (got %s instead of %s), please try manual install'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>dh<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> dh <span class="token operator">!=</span> h <span class="token keyword">else</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span> ipp<span class="token punctuation">,</span> pf<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'wb'</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>by<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="手动安装"><a class="header-anchor" href="#手动安装"></a>手动安装</h4>
<p>若上法无效，参见<a href="https://packagecontrol.io/installation">package control官网</a>，下载安装包，放到指定的路径</p>
<h4 id="用户设置"><a class="header-anchor" href="#用户设置"></a>用户设置</h4>
<p>点<code>首选项</code>-<code>Package Settings</code>-<code>Package Control</code>-<code>Setting - User </code>，写</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"bootstrapped"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// A list of URLs that each contain a JSON file with a list of repositories.</span>
    <span class="token comment">// The repositories from these channels are placed in order after the</span>
    <span class="token comment">// repositories from the "repositories" setting</span>
    <span class="token property">"channels"</span><span class="token operator">:</span>
    <span class="token punctuation">[</span>
        <span class="token string">"http://static.zybuluo.com/parkinwu/x5xsu1vjaob4hmktfexncfbz/channel_v3.json"</span>
        <span class="token comment">// 用于重载 default setting中的 "https://packagecontrol.io/channel_v3.json"</span>
        <span class="token comment">// 避免 "https://packagecontrol.io/channel_v3.json" 失效时，package control无法联网</span>
        <span class="token comment">// 参见：https://www.bbsmax.com/A/ZOJPKDy2zv/</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="安装必要的包"><a class="header-anchor" href="#安装必要的包"></a>安装必要的包</h3>
<p><code>cmd+shift+P</code>，弹出下拉菜单，输入<code>package control</code>，选择<code>Package Control: Install Package</code>，弹出下来菜单，输入包的名字（如下），选择之，等待页底“[ = ]”等待提示消失，变成“loaded”，即安装加载完此包</p>
<p><strong>以下为建议安装的包</strong>：</p>
<p><code>ChineseLocalizations</code>：汉化包</p>
<p><code>ConvertToUTF8</code>：utf-8编码</p>
<p><code>Monokai Extended</code>：配色方案。在<code>首选项</code>-<code>配色方案</code>-<code>Monokai Extended</code>里面选择相关主题</p>
<p><code>Theme - SodaReloaded</code>：主题。在用户配置文件里添加<code>&quot;theme&quot;: &quot;SoDaReloaded Dark.sublime-theme&quot;,</code></p>
<p><code>SideBarEnhancements</code>：侧边栏增强</p>
<p><code>HostsEdit</code>：hosts的语法高亮</p>
<p><code>SSH Config</code>: ~/.ssh/config的语法高亮和自动补全，输入&quot;host&quot;即产生一个Host的模板</p>
<p><code>Anaconda</code>：Python代码自动补全、PEP8格式化等</p>
<ul>
<li>配置Anaconda用户设置：</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token comment">//忽略各种空格不对, 超过80字, import的函数没有使用的提醒</span>
    <span class="token property">"pep8_ignore"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"E501"</span><span class="token punctuation">,</span> <span class="token string">"W292"</span><span class="token punctuation">,</span> <span class="token string">"E303"</span><span class="token punctuation">,</span> <span class="token string">"W391"</span><span class="token punctuation">,</span> <span class="token string">"E225"</span><span class="token punctuation">,</span> <span class="token string">"E302"</span><span class="token punctuation">,</span> <span class="token string">"W293"</span><span class="token punctuation">,</span> <span class="token string">"E402"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"pyflakes_explicit_ignore"</span><span class="token operator">:</span>
    <span class="token punctuation">[</span>
        <span class="token string">"UnusedImport"</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">//保存文件后自动pep8格式化</span>
    <span class="token property">"auto_formatting"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">//库函数的提示</span>
    <span class="token property">"enable_signatures_tooltip"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"merge_signatures_and_doc"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">//禁止代码分析检查</span>
    <span class="token property">"anaconda_linting"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>SublimeREPL</code>：代码交互式解释器</p>
<ul>
<li>SublimeREPL的Python快捷键设定：点击<code>首选项</code>-<code>快捷键设置</code>(不是<code>首选项</code>-<code>Package Setting</code>-<code>SublimeREPL</code>-<code>Setting User</code>)，输入如下代码：</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"add_current_time"</span><span class="token punctuation">,</span>
        <span class="token property">"keys"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"ctrl+shift+."</span><span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//按F5执行Python编译</span>
        <span class="token property">"keys"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"f5"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">"caption"</span><span class="token operator">:</span> <span class="token string">"SublimeREPL: Python - RUN current file"</span><span class="token punctuation">,</span>
        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"run_existing_window_command"</span><span class="token punctuation">,</span> <span class="token property">"args"</span><span class="token operator">:</span>
        <span class="token punctuation">&#123;</span>
            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"repl_python_run"</span><span class="token punctuation">,</span>
            <span class="token property">"file"</span><span class="token operator">:</span> <span class="token string">"config/Python/Main.sublime-menu"</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//按F6打开Python交互式窗口</span>
        <span class="token property">"keys"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"f6"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">"caption"</span><span class="token operator">:</span> <span class="token string">"SublimeREPL: Python"</span><span class="token punctuation">,</span>
        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"run_existing_window_command"</span><span class="token punctuation">,</span> <span class="token property">"args"</span><span class="token operator">:</span>
        <span class="token punctuation">&#123;</span>
            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"repl_python"</span><span class="token punctuation">,</span>
            <span class="token property">"file"</span><span class="token operator">:</span> <span class="token string">"config/Python/Main.sublime-menu"</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//按F7执行所选Python代码片段编译</span>
        <span class="token property">"keys"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"f7"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">"caption"</span><span class="token operator">:</span> <span class="token string">"SublimeREPL: Python - PDB current file"</span><span class="token punctuation">,</span>
        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"run_existing_window_command"</span><span class="token punctuation">,</span> <span class="token property">"args"</span><span class="token operator">:</span>
        <span class="token punctuation">&#123;</span>
            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"repl_python_pdb"</span><span class="token punctuation">,</span>
            <span class="token property">"file"</span><span class="token operator">:</span> <span class="token string">"config/Python/Main.sublime-menu"</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

    <span class="token punctuation">&#123;</span>
        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"python_virtualenv_repl"</span><span class="token punctuation">,</span>
        <span class="token property">"caption"</span><span class="token operator">:</span> <span class="token string">"SublimeREPL: Python - virtualenv"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
        <span class="token property">"caption"</span><span class="token operator">:</span> <span class="token string">"SublimeREPL: Python - IPython"</span><span class="token punctuation">,</span>
        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"run_existing_window_command"</span><span class="token punctuation">,</span> <span class="token property">"args"</span><span class="token operator">:</span>
        <span class="token punctuation">&#123;</span>
            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"repl_python_ipython"</span><span class="token punctuation">,</span>
            <span class="token property">"file"</span><span class="token operator">:</span> <span class="token string">"config/Python/Main.sublime-menu"</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>REPL和Editor各占一个标签，为了方便查看，可点击<code>视图</code>-<code>布局</code>-<code>行：2</code>即可，拖动分割线可调整窗口大小。</li>
</ul>
<p><code>emmet</code>：快速编写HTML和CSS代码</p>
<ul>
<li>说明：emmet语法输入后应该按下tab键方可出现效果</li>
<li><a href="https://link.jianshu.com/?t=http://bubkoo.com/2014/01/04/emmet-a-toolkit-for-improving-html-css-workflow/">参考：HTML/CSS 速写神器：Emmet</a></li>
</ul>
<p><code>OmniMarkupPreviewer</code>：标记语言渲染插件</p>
<ul>
<li>可将标记语言文件渲染为 HTML 并在浏览器上实时预览，同时支持导出 HTML 源码文件</li>
<li>配置OmniMarkupPreviewer用户设置：</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"mathjax_enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"renderer_options-MarkdownRenderer"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"extensions"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"abbr"</span><span class="token punctuation">,</span> <span class="token string">"attr_list"</span><span class="token punctuation">,</span> <span class="token string">"def_list"</span><span class="token punctuation">,</span> <span class="token string">"footnotes"</span><span class="token punctuation">,</span> <span class="token string">"meta"</span><span class="token punctuation">,</span> <span class="token string">"toc"</span><span class="token punctuation">,</span> <span class="token string">"tables"</span><span class="token punctuation">,</span> <span class="token string">"fenced_code"</span><span class="token punctuation">,</span> <span class="token string">"codehilite"</span><span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="配置用户设置"><a class="header-anchor" href="#配置用户设置"></a>配置用户设置</h3>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"color_scheme"</span><span class="token operator">:</span> <span class="token string">"Packages/Monokai Extended/Monokai Extended Bright.tmTheme"</span><span class="token punctuation">,</span>
    <span class="token property">"theme"</span><span class="token operator">:</span> <span class="token string">"SoDaReloaded Dark.sublime-theme"</span><span class="token punctuation">,</span>
    <span class="token comment">// 侧边栏文件夹显示加粗，区别于文件</span>
    <span class="token property">"bold_folder_labels"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"default_encoding"</span><span class="token operator">:</span> <span class="token string">"UTF-8"</span><span class="token punctuation">,</span>
    <span class="token property">"draw_white_space"</span><span class="token operator">:</span> <span class="token string">"all"</span><span class="token punctuation">,</span>
    <span class="token comment">// 保证在文件保存时，在结尾插入一个换行符。</span>
    <span class="token comment">// 这样 git 提交时不会生产额外的 diff</span>
    <span class="token property">"ensure_newline_at_eof_on_save"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"font_size"</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>
    <span class="token property">"highlight_line"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">//忽略VIM模式</span>
    <span class="token property">"ignored_packages"</span><span class="token operator">:</span>
    <span class="token punctuation">[</span>
        <span class="token string">"Vintage"</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// 窗口失焦立即保存文件</span>
    <span class="token property">"save_on_focus_lost"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"soda_classic_tabs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"tab_size"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
    <span class="token property">"translate_tabs_to_spaces"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// 自动移除行尾多余空格</span>
    <span class="token property">"trim_trailing_white_space_on_save"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"trim_automatic_white_space"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="设置ctrl-b自动打开Chrome编译HTML"><a class="header-anchor" href="#设置ctrl-b自动打开Chrome编译HTML"></a>设置<code>ctrl</code>+<code>b</code>自动打开Chrome编译HTML</h3>
<p>点击<code>工具/编译系统/建编译系统</code>，输入：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"cmd"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"C:\/Program Files (x86)\/Google\/Chrome\/Application\/chrome.exe"</span><span class="token punctuation">,</span><span class="token string">"$file"</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>然后保存为名为<strong>Chrome.sublime-build</strong>的文件，放置于SublimeText3\Data\Packages\User\里面。</p>
<h3 id="加alias"><a class="header-anchor" href="#加alias"></a>加alias</h3>
<p>~/.bash_aliases中加入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">sub</span><span class="token operator">=</span><span class="token string">'open -a "/Applications/Sublime Text.app"'</span> <span class="token comment"># sub 文件名</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="Mac上快捷键"><a class="header-anchor" href="#Mac上快捷键"></a>Mac上快捷键</h2>
<p><a href="https://www.jianshu.com/p/a5559083c666">参考</a> <a href="https://www.jianshu.com/p/6185dc5eb507">参考</a></p>
<h3 id="开关"><a class="header-anchor" href="#开关"></a>开关</h3>
<p><code>⌘(⇧)N</code>  创建一个标签页/(新sublime窗口)</p>
<p><code>⌘(⇧)W</code>  关闭一个标签页/(新sublime窗口)</p>
<p><code>⌘Q</code>  关闭sublime及其所有窗口</p>
<p><code>⌘⇧T</code> 恢复刚刚关闭的标签页</p>
<p><code>⌘KB</code>  开关侧栏</p>
<p><code>⌃` </code>  开关控制台</p>
<p><strong><code>⌘⇧P</code></strong>  <strong>命令提示</strong>，之后可输入“install package”等</p>
<h3 id="分屏"><a class="header-anchor" href="#分屏"></a>分屏</h3>
<p>层次关系：sublime窗口 - 分屏 - 标签页（与文件一一对应）</p>
<p><code>⌘⌥[1-4] </code> 几列分屏</p>
<p><code>⌘⌥5 </code>             网格（二行二列）</p>
<p><code>⌃[1-4] </code>      光标移动到相应的组（分屏编号）</p>
<p><code>⌃⇧[1-4] </code>  将当前文件移动到相应的组（分屏编号</p>
<p><code>⌘[1-4] </code>     选择相应的标签页</p>
<h3 id="前往"><a class="header-anchor" href="#前往"></a>前往</h3>
<p><code>⌘P </code>    前往文件、前往项目、命令提示、前往method等等（Goto anything）</p>
<p><code>⌘⌃P</code>  前往项目</p>
<p><code>⌘T </code>    前往文件</p>
<p><code>⌘R </code>    前往method</p>
<h3 id="移动选择"><a class="header-anchor" href="#移动选择"></a>移动选择</h3>
<p><code>⌃(⇧)-</code>  光标跳回上/下一个位置</p>
<p><code>⌃G</code>  前往行</p>
<p><code>⇧←/→</code>  选择左/右延一字</p>
<p><code>⇧↑/↓</code>  选择下/上延一行</p>
<p><code>⌃/⌥ </code>+ <code>(⇧)</code>+<code>←/→</code> 进行逐词移动/(选择)</p>
<p><code>⌘ (⇧)←/→</code> 进行逐词选择/(选择)</p>
<p><code>⌘(⇧)↑/↓</code> 选择/(选择)到文件头/尾巴</p>
<p><code>⌘⌃↑/↓</code>  光标所在行/选中区域上/下移一行</p>
<p><code>⌘A</code>文件中全选</p>
<h4 id="行"><a class="header-anchor" href="#行"></a>行</h4>
<p><code>⌘L</code>  选择行；重复按下将下一行加入选择</p>
<p><code>⌘⇧L</code>  将选区转换成多个单行选区</p>
<h4 id="括号"><a class="header-anchor" href="#括号"></a>括号</h4>
<p><code>⌃M</code>  跳转至对应的括号</p>
<p><code>⌃⇧M</code>  选择最内一层大中小括号的内容，每按一次外扩一层括号</p>
<h3 id="查找选择"><a class="header-anchor" href="#查找选择"></a>查找选择</h3>
<p><code>⌘</code>+  鼠标选中：多选</p>
<p><code>⌘D</code> 选择光标所在词；重复按，把下一个与所选重复的加入选择<br>
​	<code>⌘KD</code>  跳过当前目标<br>
​	<code>⌘U</code>  回退一个目标<br>
​	<code>Esc</code> 退出多选模式</p>
<p><code>⌘⌥(⇧)g</code>  跳转到(上)/下一个与所选重复的</p>
<p><code>⌘⌃g</code>   选中所有与所选重复的</p>
<h3 id="查找替换"><a class="header-anchor" href="#查找替换"></a>查找替换</h3>
<p><code>⌘F</code>  查找</p>
<p><code>⌘⌥F</code>  查找并替换</p>
<p><code>⌘⇧F</code>  在所有打开的文件中进行查找</p>
<h3 id="删除"><a class="header-anchor" href="#删除"></a>删除</h3>
<p><code>⌘(⇧)↩</code>  在光标上/下插入新行</p>
<p><code>⌘⌫</code>  清空行</p>
<p><code>⌃⇧K</code>  删除行（下一行上移）</p>
<p><code>⌘KK</code>  从光标处删除至行尾</p>
<p><code>⌘K⌫</code>  从光标处删除至行首</p>
<p><code>⌘J</code>  合并行（删除光标、选中区所在行尾的换行符）</p>
<h3 id="复制黏贴"><a class="header-anchor" href="#复制黏贴"></a>复制黏贴</h3>
<p><code>⌘C</code>  复制</p>
<p><code>⌘X</code>  剪切</p>
<p><code>⌘V</code>  粘贴</p>
<p><code>⌘⇧V</code>  粘贴并自动缩进</p>
<p><code>⌘⌥V</code>  从历史中选择粘贴</p>
<p><code>⌘⇧D</code>  就地复制选中内容到选区后光标后</p>
<h3 id="撤销"><a class="header-anchor" href="#撤销"></a>撤销</h3>
<p><code>⌘Y</code> =  <code>⌘⇧Z</code>  重做</p>
<p><code>⌘(⇧)Z</code>  撤销/(重做) – 不含光标移动</p>
<p><code>⌘(⇧)U</code>  软撤销/(重做) --含光标移动</p>
<h3 id="格式"><a class="header-anchor" href="#格式"></a>格式</h3>
<p><code>⌘KU/L</code> 改为大/小写</p>
<p><code>⌘[/]</code>  向左右/缩进</p>
<p><code>⌘(⌥)/</code>  (块)注释</p>
<h3 id="保存"><a class="header-anchor" href="#保存"></a>保存</h3>
<p><code>⌘(⌥)S</code>  保存当前/(所有)文件</p>
<h2 id="编辑远程文件"><a class="header-anchor" href="#编辑远程文件"></a>编辑远程文件</h2>
<p><a href="https://stackoverflow.com/questions/37458814/how-to-open-remote-files-in-sublime-text-3">参考</a></p>
<h3 id="法一-rsub"><a class="header-anchor" href="#法一-rsub"></a>法一 rsub</h3>
<p>只能编辑文件，不能编辑文件夹</p>
<h4 id="服务器"><a class="header-anchor" href="#服务器"></a>服务器</h4>
<ul>
<li>安装rsub</li>
</ul>
<pre class="line-numbers language-ba'sh" data-language="ba'sh"><code class="language-ba'sh">wget -O &lt;安装路径&gt;&#x2F;bin&#x2F;rsub \https:&#x2F;&#x2F;raw.github.com&#x2F;aurora&#x2F;rmate&#x2F;master&#x2F;rmate
chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;rsub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="本地"><a class="header-anchor" href="#本地"></a>本地</h4>
<ul>
<li>
<p>安装<code>rsub</code>  Sublime3 插件</p>
<p>Sublime Text 3中，开package control (<code>⌘⇧P</code>, 输入“Install Package”)，搜索<code>rsub</code> 安装之</p>
</li>
<li>
<p>链接服务器加&quot;-R 转发&quot;</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -R <span class="token number">52698</span>:localhost:52698 server_user@server_address<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><strong>本地先打开sublime</strong>，然后在服务器上输入</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rsub 文件1 <span class="token punctuation">[</span>文件2 <span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>本地会用sublime编辑上述文件</strong></p>
<p>若本地sublime未先打开，则本地无进程侦听会52698端口，服务器会报错</p>
<pre class="line-numbers language-none"><code class="language-none">Warning: remote port forwarding failed for listen port 52698<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="法二-sftp插件"><a class="header-anchor" href="#法二-sftp插件"></a>法二 sftp插件</h3>
<h4 id="安装-_2"><a class="header-anchor" href="#安装-_2"></a>安装</h4>
<p><code>⌘⇧P</code>，下拉菜单输入“Package Control: Install Package”选之，新下拉菜单输入“sftp”，安装此插件</p>
<h4 id="破解"><a class="header-anchor" href="#破解"></a>破解</h4>
<p>打开本文件夹下<code>private/sftp svn 插件注册机/svn-sftp-keygen.app</code>，输入邮箱，点击生成验证码，将邮箱与验证码复制出来。</p>
<p>再在下图处，打开sftp的用户设置<img data-src="/posts/680b6b42/sftp%E6%8F%92%E4%BB%B6%E6%B3%A8%E5%86%8C.png" alt="sftp插件注册"></p>
<p>输入上述邮箱与验证码</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>
    <span class="token string">"email"</span><span class="token builtin class-name">:</span><span class="token string">"邮箱"</span>,
    <span class="token string">"product_key"</span><span class="token builtin class-name">:</span><span class="token string">"验证码"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后重启sublime ，即不弹出对话框“sftp插件要收费”，则说明注册成功</p>
<h4 id="使用"><a class="header-anchor" href="#使用"></a>使用</h4>
<p><a href="https://wbond.net/sublime_packages/sftp/usage">官网文档</a></p>
<p>sftp插件有两种模式</p>
<ul>
<li>远程模式：本地文件夹同步与文件夹用sftp同步，sublime可打开远程文件</li>
<li>服务器模式：本地sublime可浏览远程目录，增删改远程文件和文件夹，但只能开文件，不能开文件夹</li>
</ul>
<h5 id="远程模式"><a class="header-anchor" href="#远程模式"></a>远程模式</h5>
<p>在本地文件夹下，添加<code>sftp-config.json</code>文件，内写本文件夹的sftp配置，即与何服务器上何文件夹如何同步。</p>
<p>配置方法，左栏中，右键本地文件夹，弹出菜单中如下点击</p>
<p><img data-src="/posts/680b6b42/sftp%E9%85%8D%E7%BD%AE1.png" alt="sftp配置1"></p>
<p>而后，弹出下图配置文件，需自行修改</p>
<p><img data-src="/posts/680b6b42/sftp%E9%85%8D%E7%BD%AE2.png" alt="sftp配置2"></p>
<p>建议修改为如下模板</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>
    // The tab key will cycle through the settings when first created
    // Visit http://wbond.net/sublime_packages/sftp/settings <span class="token keyword">for</span> <span class="token builtin class-name">help</span>

    // sftp, <span class="token function">ftp</span> or ftps
    <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token string">"sftp"</span>,

    <span class="token string">"save_before_upload"</span><span class="token builtin class-name">:</span> true,
    <span class="token string">"upload_on_save"</span><span class="token builtin class-name">:</span> true, // 保存即上传
    <span class="token string">"sync_down_on_open"</span><span class="token builtin class-name">:</span> false,
    <span class="token string">"sync_skip_deletes"</span><span class="token builtin class-name">:</span> false,
    <span class="token string">"sync_same_age"</span><span class="token builtin class-name">:</span> true,
    <span class="token string">"confirm_downloads"</span><span class="token builtin class-name">:</span> false,
    <span class="token string">"confirm_sync"</span><span class="token builtin class-name">:</span> true,
    <span class="token string">"confirm_overwrite_newer"</span><span class="token builtin class-name">:</span> false,

    <span class="token string">"host"</span><span class="token builtin class-name">:</span> <span class="token string">"&lt;服务器网址>"</span>,
    <span class="token string">"user"</span><span class="token builtin class-name">:</span> <span class="token string">"&lt;用户名>"</span>,
    <span class="token string">"password"</span><span class="token builtin class-name">:</span> <span class="token string">"&lt;密码>"</span>,
    <span class="token string">"port"</span><span class="token builtin class-name">:</span> <span class="token string">"&lt;端口>"</span>,
    <span class="token string">"remote_path"</span><span class="token builtin class-name">:</span> <span class="token string">"&lt;远程文件夹路径>"</span>,

    <span class="token string">"ignore_regexes"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
        <span class="token string">"<span class="token entity" title="\\">\\</span>.sublime-(project|workspace)"</span>, <span class="token string">"sftp-config(-alt<span class="token entity" title="\\">\\</span>d?)?<span class="token entity" title="\\">\\</span>.json"</span>,
        <span class="token string">"sftp-settings<span class="token entity" title="\\">\\</span>.json"</span>, <span class="token string">"/venv/"</span>, <span class="token string">"<span class="token entity" title="\\">\\</span>.svn/"</span>, <span class="token string">"<span class="token entity" title="\\">\\</span>.hg/"</span>, <span class="token string">"<span class="token entity" title="\\">\\</span>.git/"</span>,
        <span class="token string">"<span class="token entity" title="\\">\\</span>.bzr"</span>, <span class="token string">"_darcs"</span>, <span class="token string">"CVS"</span>, <span class="token string">"<span class="token entity" title="\\">\\</span>.DS_Store"</span>, <span class="token string">"._<span class="token entity" title="\\">\\</span>"</span>, <span class="token string">"Thumbs<span class="token entity" title="\\">\\</span>.db"</span>, <span class="token string">"desktop<span class="token entity" title="\\">\\</span>.ini"</span>
    <span class="token punctuation">]</span>,
    //<span class="token string">"file_permissions"</span><span class="token builtin class-name">:</span> <span class="token string">"664"</span>,
    //<span class="token string">"dir_permissions"</span><span class="token builtin class-name">:</span> <span class="token string">"775"</span>,

    //<span class="token string">"extra_list_connections"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,

    <span class="token string">"connect_timeout"</span><span class="token builtin class-name">:</span> <span class="token number">30</span>,
    //<span class="token string">"keepalive"</span><span class="token builtin class-name">:</span> <span class="token number">120</span>,
    //<span class="token string">"ftp_passive_mode"</span><span class="token builtin class-name">:</span> true,
    //<span class="token string">"ftp_obey_passive_host"</span><span class="token builtin class-name">:</span> false,
    // <span class="token string">"ssh_key_file"</span><span class="token builtin class-name">:</span> <span class="token string">"~/.ssh/id_rsa"</span>,
    // <span class="token string">"sftp_flags"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"-F"</span>, <span class="token string">"~/.ssh/config"</span><span class="token punctuation">]</span>,

    //<span class="token string">"preserve_modification_times"</span><span class="token builtin class-name">:</span> false,
    //<span class="token string">"remote_time_offset_in_hours"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,
    <span class="token string">"remote_encoding"</span><span class="token builtin class-name">:</span> <span class="token string">"utf-8"</span>,
    //<span class="token string">"remote_locale"</span><span class="token builtin class-name">:</span> <span class="token string">"C"</span>,
    //<span class="token string">"allow_config_upload"</span><span class="token builtin class-name">:</span> false,
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>而后保存此sftp配置文件，到上述本地文件夹。sftp配置文件必需名为``sftp-config.json`，不然插件不会加载之。</p>
<p>之后的sftp操作有</p>
<p><img data-src="/posts/680b6b42/sftp%E5%90%8C%E6%AD%A5.png" alt="sftp同步"></p>
<table>
<thead>
<tr>
<th>操作</th>
<th>传送内容</th>
<th>不上传的内容</th>
<th>原理</th>
</tr>
</thead>
<tbody>
<tr>
<td>Upload、<strong>Download</strong></td>
<td>全文件夹</td>
<td>无</td>
<td>凡此有之文件即传至彼（不论彼有无之，不论谁新谁旧），但不删除此无彼有的文件（夹）</td>
</tr>
<tr>
<td>保存文件（若<code>&quot;upload_on_save&quot;: true</code>）</td>
<td>被保存的文件（就、新文件）</td>
<td>文件增（除非打开改文件再按保存）、删、改名</td>
<td>之上传被保存的文件</td>
</tr>
<tr>
<td>Sync Local -&gt; Remote</td>
<td>文件（夹）增、删、编、改名，可非sublime里做的</td>
<td>无</td>
<td>比较两边的文件树及文件编辑时间，令远端的与本地的树一致，故远有本无之文件（夹）则远删之，本有远无、本新远旧者则上传之</td>
</tr>
<tr>
<td>Sync Remote  -&gt; Local</td>
<td>恰与上反向</td>
<td>无不下传</td>
<td>恰与上反向</td>
</tr>
<tr>
<td>Sync Both Directions</td>
<td>文件增、<s>删</s>、编、改名，可非sublime里做的</td>
<td>文件（夹）删除、改名、移动</td>
<td>比较两边的文件树及文件编辑时间，只传不删，此有彼无、此新彼旧者则传此端该文件（夹）至彼</td>
</tr>
</tbody>
</table>
<p>建议用法：</p>
<ul>
<li>为避免下载数据，代码文件夹下不存数据、结果、模型分离，只存其文件夹的链接，指向数据、结果、模型的文件夹</li>
<li>新建本地空同步文件夹，或在终端ssh 删、改名、移动文件（夹）、编辑后 （尽量避免），要立即**Sync Remote  -&gt; Local **</li>
<li>新建远程空同步文件夹，或在本地 删、改名、移动文件（夹）、编辑后，要立即<strong>Sync Local -&gt; Remote</strong></li>
<li>每次按保存自动上传保存的文件</li>
</ul>
<p>注意：</p>
<ul>
<li><strong>Sync Remote  -&gt; Local ** 和</strong>Sync Local -&gt; Remote ** 的快捷键 <code>⌘⌃U+S/D</code>，并不能删除此有彼无的文件，是个bug，<strong>不建议用</strong>；从左栏右键单击项目文件，点<code>SFTP/FTP</code>-<code>Sync Remote  -&gt; Local</code>、<code>Sync Local -&gt; Remote</code>才可以做到。</li>
</ul>
<h5 id="服务器模式"><a class="header-anchor" href="#服务器模式"></a>服务器模式</h5>
<p>配置:</p>
<p><img data-src="/posts/680b6b42/servermode1.png" alt="servermode1"></p>
<ul>
<li>弹出</li>
</ul>
<p><img data-src="/posts/680b6b42/servermode2.png" alt="servermode2"></p>
<ul>
<li>写入</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token comment">// The tab key will cycle through the settings when first created</span>
    <span class="token comment">// Visit http://wbond.net/sublime_packages/sftp/settings for help</span>

    <span class="token comment">// sftp, ftp or ftps</span>
    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"sftp"</span><span class="token punctuation">,</span>

    <span class="token property">"sync_down_on_open"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"sync_same_age"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>

    <span class="token property">"host"</span><span class="token operator">:</span> <span class="token string">"&lt;网址>"</span><span class="token punctuation">,</span>
    <span class="token property">"user"</span><span class="token operator">:</span> <span class="token string">"&lt;用户名>"</span><span class="token punctuation">,</span>
    <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"&lt;密码>"</span><span class="token punctuation">,</span>
    <span class="token property">"port"</span><span class="token operator">:</span> <span class="token string">"&lt;端口>"</span><span class="token punctuation">,</span>

    <span class="token property">"remote_path"</span><span class="token operator">:</span> <span class="token string">"&lt;路径>"</span><span class="token punctuation">,</span>
    <span class="token comment">//"file_permissions": "664",</span>
    <span class="token comment">//"dir_permissions": "775",</span>

    <span class="token comment">//"extra_list_connections": 0,</span>

    <span class="token property">"connect_timeout"</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
    <span class="token comment">//"keepalive": 120,</span>
    <span class="token comment">//"ftp_passive_mode": true,</span>
    <span class="token comment">//"ftp_obey_passive_host": false,</span>
    <span class="token comment">//"ssh_key_file": "~/.ssh/id_rsa",</span>
    <span class="token comment">//"sftp_flags": ["-F", "/path/to/ssh_config"],</span>

    <span class="token comment">//"preserve_modification_times": false,</span>
    <span class="token comment">//"remote_time_offset_in_hours": 0,</span>
    <span class="token comment">//"remote_encoding": "utf-8",</span>
    <span class="token comment">//"remote_locale": "C",</span>
    <span class="token comment">//"allow_config_upload": false,</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>保存到<code>/Users/&lt;用户名&gt;/Library/Application Support/Sublime Text 3/Packages/User/sftp_servers/&lt;任意文件名表示一个服务器，或一个远程项目&gt;</code></li>
</ul>
<p><img data-src="/posts/680b6b42/servermode3.png" alt="servermode3"></p>
<p>使用：</p>
<p><img data-src="/posts/680b6b42/servermode6.png" alt="servermode6"></p>
<ul>
<li>弹出下拉菜单，选一个远程</li>
</ul>
<p><img data-src="/posts/680b6b42/servermode4.png" alt="servermode4"></p>
<ul>
<li>然后可以进出文件夹，并增删编改名文件（夹），但<strong>无法用sublime打开一整个文件夹</strong></li>
</ul>
<p><img data-src="/posts/680b6b42/servermode5.png" alt="servermode5"></p>
<h4 id="在iterm2下远程开sublime-sftp"><a class="header-anchor" href="#在iterm2下远程开sublime-sftp"></a>在iterm2下远程开sublime sftp</h4>
<p>为了在ssh后，可以<code> sub [文件或文件夹 [文件或文件夹 [...]]]</code>打开本地的sublime</p>
<h5 id="流程"><a class="header-anchor" href="#流程"></a>流程</h5>
<pre class="line-numbers language-flow" data-language="flow"><code class="language-flow">st<span class="token operator">=></span>start<span class="token operator">:</span> 远程输入命令<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">sub</span><span class="token template-punctuation string">`</span></span>
cond<span class="token operator">=></span>condition<span class="token operator">:</span> 单个文件<span class="token operator">?</span>
file<span class="token operator">=></span>operation<span class="token operator">:</span> 在iterm2中输出“open sublime on mac client”，开启服务器端的rsub
dirs<span class="token operator">=></span>operation<span class="token operator">:</span> 在iterm2中输出“用户名 服务器别名 文件夹绝对路径”
op1<span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">=></span>operation<span class="token operator">:</span> iterm的trigger检测之，开本地sublime
op1<span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">=></span>operation<span class="token operator">:</span> 由rsub开文件
op2<span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">=></span>operation<span class="token operator">:</span> iterm的trigger检测之
op2<span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">=></span>operation<span class="token operator">:</span> 本地脚本解析<span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>config，得到服<span class="token operator">*</span>务器别名<span class="token operator">*</span>对应的登录信息
op2<span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">=></span>operation<span class="token operator">:</span> 本地脚本生成本地的同步文件夹，自动填写其下sftp<span class="token operator">-</span>config<span class="token punctuation">.</span>json，并打开项目文件夹
end<span class="token operator">=></span>end<span class="token operator">:</span> 跳转到sublime界面
st<span class="token operator">-</span><span class="token operator">></span>cond
<span class="token function">cond</span><span class="token punctuation">(</span>yes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>file<span class="token operator">-</span><span class="token operator">></span>op1<span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span>op1<span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span>end
<span class="token function">cond</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>dirs<span class="token operator">-</span><span class="token operator">></span>op2<span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span>op2<span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span>op2<span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">-</span><span class="token operator">></span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="远程脚本"><a class="header-anchor" href="#远程脚本"></a>远程脚本</h5>
<p>写在<code>~/.bash_aliases_share</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># sublime的别名</span>
<span class="token function-name function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> -d /Applications/Sublime<span class="token punctuation">\</span> Text.app <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token comment"># 本地是Mac，且有sublime</span>
        <span class="token function">open</span> -a <span class="token string">"/Applications/Sublime Text.app"</span> <span class="token variable">$*</span>
    <span class="token keyword">else</span>
    <span class="token comment"># 由iterm2打开本地（mac）上的sublime</span>
        <span class="token builtin class-name">echo</span> <span class="token function">open</span> sublime on mac client
        <span class="token function">sleep</span> <span class="token number">0.1</span>
    <span class="token comment"># 本地非mac，或无sublime</span>
        <span class="token assign-left variable">dirs</span><span class="token operator">=</span><span class="token string">""</span>
        <span class="token keyword">for</span> <span class="token for-or-select variable">arg</span> <span class="token keyword">in</span> <span class="token variable">$@</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
            <span class="token keyword">if</span> <span class="token punctuation">[</span> -f <span class="token variable">$arg</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
                <span class="token comment"># echo "用笔记本上的sublime开文件 $arg"</span>
                rsub <span class="token variable">$arg</span>
            <span class="token keyword">elif</span> <span class="token punctuation">[</span> -d <span class="token variable">$arg</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
                <span class="token comment"># echo "用笔记本上的sublime开文件夹: $arg"</span>
                <span class="token assign-left variable">dirs</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$dirs</span> <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">cd</span> $arg<span class="token punctuation">;</span> <span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>"</span>
            <span class="token keyword">else</span>
                <span class="token builtin class-name">echo</span> no directory or <span class="token function">file</span> <span class="token variable">$arg</span>
            <span class="token keyword">fi</span>
        <span class="token keyword">done</span>
        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$dirs</span>"</span> <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token comment"># 以备iterm2抓取用户、服务器、文件夹路径，从而用远程的sublime sftp开</span>
            <span class="token builtin class-name">echo</span> <span class="token string">"user: <span class="token environment constant">$USER</span>; hostname: <span class="token variable"><span class="token variable">`</span><span class="token function">hostname</span><span class="token variable">`</span></span>; path: '<span class="token variable">$dirs</span>'"</span>
        <span class="token keyword">fi</span>
    <span class="token keyword">fi</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="iterm2触发器"><a class="header-anchor" href="#iterm2触发器"></a>iterm2触发器</h5>
<p>在iterm2的preference中，</p>
<p><img data-src="/posts/680b6b42/trigger1.png" alt="trigger1"></p>
<p><img data-src="/posts/680b6b42/trigger2.png" alt="trigger2"></p>
<table>
<thead>
<tr>
<th>Regular Expression</th>
<th>Action</th>
<th>Parameters</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>user: ([\w]+); hostname: ([\w.\-]+); path: '([^\n]+)'</code></td>
<td>Run Silent Coprocess</td>
<td><code>python /Users/mac/macENV/sublime_open_remote_dir.py \1 \2 '\3'</code></td>
</tr>
<tr>
<td><code>open sublime on mac client</code></td>
<td>Run Silent Coprocess</td>
<td><code>open -a &quot;/Applications/Sublime Text.app&quot;</code></td>
</tr>
</tbody>
</table>
<h5 id="本地脚本"><a class="header-anchor" href="#本地脚本"></a>本地脚本</h5>
<p>然后写<code>sublime_open_remote_dir.py</code>，用于在<code>/Users/mac/Desktop/remote_code/ </code>生成项目文件夹，在其下添加配置<code>sftp-config.json</code>，配置中的服务器信息，从<code>~/.ssh/config</code>解析得到。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys
<span class="token keyword">from</span> parse_sshconfig <span class="token keyword">import</span> load_sshconfig
<span class="token keyword">import</span> os


local_root_path <span class="token operator">=</span> <span class="token string">"/Users/mac/Desktop/remote_code"</span>
ssh_config <span class="token operator">=</span> <span class="token string">"/Users/mac/.ssh/config"</span>
SshConfig <span class="token operator">=</span> load_sshconfig<span class="token punctuation">(</span>ssh_config<span class="token punctuation">)</span>


user<span class="token punctuation">,</span> host_alias<span class="token punctuation">,</span> remote_paths <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">if</span> <span class="token keyword">not</span> host_alias <span class="token keyword">in</span> SshConfig<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>host_alias<span class="token punctuation">,</span> <span class="token string">"is not a `Host` in"</span><span class="token punctuation">,</span> ssh_config<span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
host <span class="token operator">=</span> SshConfig<span class="token punctuation">[</span>host_alias<span class="token punctuation">]</span>

remote_paths <span class="token operator">=</span> <span class="token punctuation">[</span>e <span class="token keyword">for</span> e <span class="token keyword">in</span> remote_paths<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span> <span class="token keyword">if</span> e <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> remote_path <span class="token keyword">in</span> remote_paths<span class="token punctuation">:</span>
    dir_name <span class="token operator">=</span> remote_path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

    host_info <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'\n    "host": "%s",'</span> <span class="token operator">%</span> host<span class="token punctuation">[</span><span class="token string">"hostname"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> \
        <span class="token punctuation">(</span><span class="token string">'\n    "user": "%s",'</span> <span class="token operator">%</span> host<span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> \
        <span class="token punctuation">(</span><span class="token string">'\n    "password": "%s",'</span> <span class="token operator">%</span> host<span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> \
        <span class="token punctuation">(</span><span class="token string">'\n    "port": "%s",'</span> <span class="token operator">%</span> host<span class="token punctuation">[</span><span class="token string">"port"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> \
        <span class="token punctuation">(</span><span class="token string">'\n    "remote_path": "%s",'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>remote_path<span class="token punctuation">)</span><span class="token punctuation">)</span>

    sftp_config <span class="token operator">=</span> <span class="token triple-quoted-string string">r'''&#123;
    // The tab key will cycle through the settings when first created
    // Visit http://wbond.net/sublime_packages/sftp/settings for help

    // sftp, ftp or ftps
    "type": "sftp",

    "save_before_upload": true,
    "upload_on_save": true,
    "sync_down_on_open": false,
    "sync_skip_deletes": false,
    "sync_same_age": true,
    "confirm_downloads": false,
    "confirm_sync": true,
    "confirm_overwrite_newer": false,

    "ignore_regexes": [
        "\\.sublime-(project|workspace)", "sftp-config(-alt\\d?)?\\.json",
        "sftp-settings\\.json", "/venv/", "\\.svn/", "\\.hg/", "\\.git/",
        "\\.bzr", "_darcs", "CVS", "\\.DS_Store", "._\\", "Thumbs\\.db", "desktop\\.ini"
    ],
    //"file_permissions": "664",
    //"dir_permissions": "775",

    //"extra_list_connections": 0,

    "connect_timeout": 30,
    //"keepalive": 120,
    //"ftp_passive_mode": true,
    //"ftp_obey_passive_host": false,
    // "ssh_key_file": "~/.ssh/id_rsa",
    // "sftp_flags": ["-F", "~/.ssh/config"],

    //"preserve_modification_times": false,
    //"remote_time_offset_in_hours": 0,
    "remote_encoding": "utf-8",
    //"remote_locale": "C",
    //"allow_config_upload": false,
'''</span> <span class="token operator">+</span> \
        host_info <span class="token operator">+</span> \
        <span class="token triple-quoted-string string">'''
&#125;'''</span>

    local_path <span class="token operator">=</span> local_root_path <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> dir_name
    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'mkdir -p '</span> <span class="token operator">+</span> local_path<span class="token punctuation">)</span>

    sftp_config_path <span class="token operator">=</span> local_path <span class="token operator">+</span> <span class="token string">'/sftp-config.json'</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>sftp_config_path<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>sftp_config<span class="token punctuation">)</span>

    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'open -a "/Applications/Sublime Text.app" '</span> <span class="token operator">+</span> local_path<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>parse_sshconfig.py</code>，用于解析<code>~/.ssh/config</code>，可根据别名获得服务器网址、端口、用户名、密码</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># encoding: UTF-8</span>
<span class="token keyword">import</span> re

<span class="token comment"># 将正则表达式编译成Pattern对象</span>

<span class="token keyword">def</span> <span class="token function">getkey</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># pattern = re.compile()</span>
    match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">r' [\w\.\:\- ]+'</span><span class="token punctuation">,</span> string<span class="token punctuation">)</span>
    <span class="token keyword">if</span> match<span class="token punctuation">:</span>
        substr <span class="token operator">=</span> match<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
        remove_head <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">r"[ ]+"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> substr<span class="token punctuation">)</span>
        <span class="token keyword">return</span> remove_head
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">""</span>


<span class="token keyword">def</span> <span class="token function">load_sshconfig</span><span class="token punctuation">(</span>ssh_config<span class="token punctuation">)</span><span class="token punctuation">:</span>
    HostConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>ssh_config<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        config <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
        hosts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Host "</span> <span class="token operator">+</span> host <span class="token keyword">for</span> host <span class="token keyword">in</span> config<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"Host "</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

        <span class="token keyword">for</span> host_config <span class="token keyword">in</span> hosts<span class="token punctuation">:</span>
            hostaliases <span class="token operator">=</span> getkey<span class="token punctuation">(</span>host_config<span class="token punctuation">,</span> <span class="token string">"Host"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> hostaliases <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                <span class="token keyword">continue</span>

            hostname <span class="token operator">=</span> getkey<span class="token punctuation">(</span>host_config<span class="token punctuation">,</span> <span class="token string">"HostName"</span><span class="token punctuation">)</span>
            port <span class="token operator">=</span> getkey<span class="token punctuation">(</span>host_config<span class="token punctuation">,</span> <span class="token string">"Port"</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> port <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>
                port <span class="token operator">=</span> <span class="token string">"22"</span>
            user <span class="token operator">=</span> getkey<span class="token punctuation">(</span>host_config<span class="token punctuation">,</span> <span class="token string">"User"</span><span class="token punctuation">)</span>
            password <span class="token operator">=</span> getkey<span class="token punctuation">(</span>host_config<span class="token punctuation">,</span> <span class="token string">r"#[ ]*Password"</span><span class="token punctuation">)</span>

            <span class="token keyword">for</span> alias <span class="token keyword">in</span> hostaliases<span class="token punctuation">:</span>
                HostConfig<span class="token punctuation">[</span>alias<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
                    <span class="token string">"hostname"</span><span class="token punctuation">:</span> hostname<span class="token punctuation">,</span>
                    <span class="token string">"port"</span><span class="token punctuation">:</span> port<span class="token punctuation">,</span>
                    <span class="token string">"user"</span><span class="token punctuation">:</span> user<span class="token punctuation">,</span>
                    <span class="token string">"password"</span><span class="token punctuation">:</span> password<span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> HostConfig
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>器</category>
        <category>编辑器IDE</category>
      </categories>
  </entry>
  <entry>
    <title>vim-搜索替换插件</title>
    <url>/posts/5e7a227e/</url>
    <content><![CDATA[<h2 id="待定"><a class="header-anchor" href="#待定"></a>待定</h2>
<p><a href="https://github.com/dyng/ctrlsf.vim:">https://github.com/dyng/ctrlsf.vim:</a> 多文件替换需要使用多光标, 麻烦了</p>
<ul>
<li>bug: 宽字符预览上色出错</li>
</ul>
<p>默认用vimgrep, 很慢</p>
<ul>
<li>
<p>大小写</p>
<p><code>:F(ar) \Cxxxx xxx xxx </code>: 大小写敏感</p>
<p><code>:F(ar) \cxxxx xxx xxx </code>: 大小写不敏感</p>
<p><code>:F(ar) xxxx xxx xxx </code>: 默认大小写不敏感</p>
</li>
<li>
<p>正则:</p>
<ul>
<li>默认是正则表达式, 取消正则 <code>:F(ar) 	\Vxxx</code></li>
</ul>
<p><a href="https://stackoverflow.com/questions/1550734/exact-string-match-in-vim-like-regex-off-mode-in-less">https://stackoverflow.com/questions/1550734/exact-string-match-in-vim-like-regex-off-mode-in-less</a></p>
<pre class="line-numbers language-none"><code class="language-none">command! -nargs&#x3D;1 S let @&#x2F; &#x3D; escape(&#39;&lt;args&gt;&#39;, &#39;\&#39;)
nmap &lt;Leader&gt;S :execute(&quot;:S &quot; . input(&#39;Regex-off: &#x2F;&#39;))&lt;CR&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>整词: <code>\&lt;xxxx\&gt;</code></p>
</li>
</ul>
<p><a href="http://xahlee.info/comp/unicode_index.html">http://xahlee.info/comp/unicode_index.html</a></p>
<p>设计: 🔎 Ϙ⊕ ⊗⛒⦿⨁⨂ ⨷㉧🄋ⒻⓄ◯⨀ +⃝ ⏍ ⤭  ⇄ ⟲ ⟳ ↺ ↻  ⇲ ➲ 🔁 🔂 🔃 🔄 ➡ ⬇  ⎋Ⓡ Ⓢ ⧬</p>
<p>◌̸</p>
<p>⃝</p>
<p>⃞</p>
<p>⃣</p>
<p>⃠</p>
<p>⃢</p>
<p><code>|.*|Aa|“”|+⃝ |</code><br>
<code>|.*|Aa|“”|Ⓞ|</code></p>
<p><code>[.*] [Aa] [“”] Ⓞ</code></p>
<p><code>|.*| |Aa| |“”| Ⓞ</code></p>
<p><code>|.*|Aa|“”|⬇|</code></p>
<p><a href="https://shapeshed.com/vim-statuslines/">https://shapeshed.com/vim-statuslines/</a>, <a href="https://jdhao.github.io/2019/11/03/vim_custom_statusline/">https://jdhao.github.io/2019/11/03/vim_custom_statusline/</a></p>
<p>rg的整词匹配: <a href="https://github.com/BurntSushi/ripgrep/issues/389">https://github.com/BurntSushi/ripgrep/issues/389</a></p>
<p><a href="https://github.com/brooth/far.vim">https://github.com/brooth/far.vim</a></p>
<p><a href="https://github.com/hwrod/interactive-replace">https://github.com/hwrod/interactive-replace</a></p>
<p><a href="https://github.com/mreinhardt/greplace.vim">https://github.com/mreinhardt/greplace.vim</a></p>
<h2 id="各种搜索后端"><a class="header-anchor" href="#各种搜索后端"></a>各种搜索后端</h2>
<pre class="line-numbers language-none"><code class="language-none">ag --nogroup --column --nocolor --silent --max-count&#x3D;1000  --vimgrep gmg --file-search-regex&#x3D;branch.sh [-o]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">rg --no-heading --column --no-messages --max-count&#x3D;1000 --glob&#x3D;branch.sh &#39;gmg[a-z]*&#39; --vimgrep  [-o]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><a href="https://github.com/beyondgrep/ack3/">https://github.com/beyondgrep/ack3/</a></p>
<pre class="line-numbers language-none"><code class="language-none">ack --nogroup --column --nocolor --max-count&#x3D;1000  --type-set&#x3D;farft:match:--wtf --type-add&#x3D;wtf:is:branch.sh  gmg
[-o]
# --smart-case --ignore-case --farft --no-recurse


ack --nogroup --output&#x3D;&#39;$&amp;:$_&#39; --max-count&#x3D;1000 --type-set&#x3D;farft:match:--wtf --type-add&#x3D;wtf:is:branch.sh gmg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="首先排除"><a class="header-anchor" href="#首先排除"></a>首先排除</h2>
<p><a href="https://github.com/svermeulen/vim-subversive:">https://github.com/svermeulen/vim-subversive:</a> 类似多光标, 而只有替换功能, 只能单文件</p>
<p><a href="https://github.com/andy-kwei/vim-easy-replace:">https://github.com/andy-kwei/vim-easy-replace:</a> 类似多光标, 而只有替换功能, 只能单文件</p>
<p><a href="https://github.com/movitto/vim-vsearch:">https://github.com/movitto/vim-vsearch:</a> 类far.vim而不如</p>
<p><a href="https://github.com/yegappan/greplace:">https://github.com/yegappan/greplace:</a> 文档一句话; -&gt; mreinhardt/greplace.vim</p>
<p><a href="https://github.com/rzwierz/vim-guidgen:">https://github.com/rzwierz/vim-guidgen:</a> 只能linux的vim用</p>
<p><a href="https://github.com/pallavagarwal07/AutoRun:">https://github.com/pallavagarwal07/AutoRun:</a> 文档一句话, 只是提供预览搜索/替换结果</p>
<p><a href="https://github.com/pieterhuibers/findreplace:">https://github.com/pieterhuibers/findreplace:</a> 空项目</p>
<p><a href="https://github.com/bloc40/vim-replace:">https://github.com/bloc40/vim-replace:</a> 一句话文档; 支持多文件</p>
]]></content>
      <categories>
        <category>器</category>
        <category>编辑器IDE</category>
      </categories>
  </entry>
  <entry>
    <title>vim配置</title>
    <url>/posts/dba3bb35/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="在服务器和本机上通用的Vim配置"><a class="header-anchor" href="#在服务器和本机上通用的Vim配置"></a>在服务器和本机上通用的Vim配置</h1>
<p>先安装依赖配置，以下依赖文件可直接复制到<code>~/.vimrc</code>文件（若无该文件，则<code>vim ~/.vimrc</code>创建该文件）</p>
<p>不用激活该文件，直接打开vi或vim，设置即可生效</p>
<h2 id="vimrc文件示例"><a class="header-anchor" href="#vimrc文件示例"></a>.vimrc文件示例</h2>
<p>当前在用的是<code>模板.vim/, .vimrc进入查看隐藏文件</code>/{<code>.vim/</code>,<code>.vimrc</code>}，适用于linux服务器和macvim</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"=========================================================================
"</span> DesCRiption: 适合自己使用的vimrc文件，for Linux/Windows, GUI/Console
<span class="token string">" Last Change: 2010年08月02日 15时13分
"</span> Version:     <span class="token number">1.80</span>
<span class="token string">" Source: http://www.cnblogs.com/zourrou/archive/2011/04/16/2018493.html
"</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span class="token builtin class-name">set</span> nocompatible            <span class="token string">" 关闭 vi 兼容模式
syntax on                   "</span> 自动语法高亮
colorscheme molokai         <span class="token string">" 设定配色方案
"</span> <span class="token builtin class-name">set</span> number                  <span class="token string">" 显示行号
set cursorline              "</span> 突出显示当前行
<span class="token builtin class-name">set</span> ruler                   <span class="token string">" 打开状态栏标尺
set shiftwidth=4            "</span> 设定 <span class="token operator">&lt;&lt;</span> 和 <span class="token operator">>></span> 命令移动时的宽度为 <span class="token number">4</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">softtabstop</span><span class="token operator">=</span><span class="token number">4</span>           <span class="token string">" 使得按退格键时可以一次删掉 4 个空格
set tabstop=4               "</span> 设定 tab 长度为 <span class="token number">4</span>
<span class="token builtin class-name">set</span> nobackup                <span class="token string">" 覆盖文件时不备份
set autochdir               "</span> 自动切换当前目录为当前文件所在的目录
filetype plugin indent on   <span class="token string">" 开启插件
set backupcopy=yes          "</span> 设置备份时的行为为覆盖
<span class="token builtin class-name">set</span> ignorecase smartcase    <span class="token string">" 搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感
set nowrapscan              "</span> 禁止在搜索到文件两端时重新搜索
<span class="token builtin class-name">set</span> incsearch               <span class="token string">" 输入搜索内容时就显示搜索结果
set hlsearch                "</span> 搜索时高亮显示被找到的文本
<span class="token builtin class-name">set</span> noerrorbells            <span class="token string">" 关闭错误信息响铃
set novisualbell            "</span> 关闭使用可视响铃代替呼叫
<span class="token builtin class-name">set</span> <span class="token assign-left variable">t_vb</span><span class="token operator">=</span>                   <span class="token string">" 置空错误铃声的终端代码
"</span> <span class="token builtin class-name">set</span> showmatch               <span class="token string">" 插入括号时，短暂地跳转到匹配的对应括号
"</span> <span class="token builtin class-name">set</span> <span class="token assign-left variable">matchtime</span><span class="token operator">=</span><span class="token number">2</span>             <span class="token string">" 短暂跳转到匹配括号的时间
set magic                   "</span> 设置魔术
<span class="token builtin class-name">set</span> hidden                  <span class="token string">" 允许在有未保存的修改时切换缓冲区，此时的修改由 vim 负责保存
set guioptions-=T           "</span> 隐藏工具栏
<span class="token builtin class-name">set</span> guioptions-<span class="token operator">=</span>m           <span class="token string">" 隐藏菜单栏
set smartindent             "</span> 开启新行时使用智能自动缩进
<span class="token builtin class-name">set</span> <span class="token assign-left variable">backspace</span><span class="token operator">=</span>indent,eol,start
                            <span class="token string">" 不设定在插入状态无法用退格键和 Delete 键删除回车符
set cmdheight=1             "</span> 设定命令行的行数为 <span class="token number">1</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">laststatus</span><span class="token operator">=</span><span class="token number">2</span>            <span class="token string">" 显示状态栏 (默认值为 1, 无法显示状态栏)
set statusline=\ %&lt;%F[%1*%M%*%n%R%H]%=\ %y\ %0(%&#123;&amp;fileformat&#125;\ %&#123;&amp;encoding&#125;\ %c:%l/%L%)\
                            "</span> 设置在状态行显示的信息
<span class="token builtin class-name">set</span> foldenable              <span class="token string">" 开始折叠
set foldmethod=syntax       "</span> 设置语法折叠
<span class="token builtin class-name">set</span> <span class="token assign-left variable">foldcolumn</span><span class="token operator">=</span><span class="token number">0</span>            <span class="token string">" 设置折叠区域的宽度
setlocal foldlevel=1        "</span> 设置折叠层数为
<span class="token string">" set foldclose=all           "</span> 设置为自动关闭折叠
<span class="token string">" nnoremap &lt;space> @=<span class="token variable"><span class="token punctuation">((</span>foldclosed<span class="token punctuation">(</span>line<span class="token punctuation">(</span>'.'<span class="token punctuation">))</span></span> &lt; 0) ? 'zc' : 'zo')&lt;CR>
                            "</span> 用空格键来开关折叠
<span class="token string">" return OS type, eg: windows, or linux, mac, et.st..
function! MySys()
    if has("</span>win16<span class="token string">") || has("</span>win32<span class="token string">") || has("</span>win64<span class="token string">") || has("</span>win95<span class="token string">")
        return "</span>windows<span class="token string">"
    elseif has("</span>unix<span class="token string">")
        return "</span>linux<span class="token string">"
    endif
endfunction
"</span> 用户目录变量<span class="token variable">$VIMFILES</span>
<span class="token keyword">if</span> MySys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"windows"</span>
    <span class="token builtin class-name">let</span> <span class="token variable">$VIMFILES</span> <span class="token operator">=</span> <span class="token variable">$VIM</span><span class="token builtin class-name">.</span><span class="token string">'/vimfiles'</span>
elseif MySys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"linux"</span>
    <span class="token builtin class-name">let</span> <span class="token variable">$VIMFILES</span> <span class="token operator">=</span> <span class="token environment constant">$HOME</span><span class="token builtin class-name">.</span><span class="token string">'/.vim'</span>
endif
<span class="token string">" 设定doc文档目录
let helptags=<span class="token variable">$VIMFILES</span>.'/doc'
"</span> 设置字体 以及中文支持
<span class="token keyword">if</span> has<span class="token punctuation">(</span><span class="token string">"win32"</span><span class="token punctuation">)</span>
    <span class="token builtin class-name">set</span> <span class="token assign-left variable">guifont</span><span class="token operator">=</span>Inconsolata:h12:cANSI
endif
<span class="token string">" 配置多语言环境
if has("</span>multi_byte<span class="token string">")
    "</span> UTF-8 编码
    <span class="token builtin class-name">set</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span>utf-8
    <span class="token builtin class-name">set</span> <span class="token assign-left variable">termencoding</span><span class="token operator">=</span>utf-8
    <span class="token builtin class-name">set</span> <span class="token assign-left variable">formatoptions</span><span class="token operator">+=</span>mM
    <span class="token builtin class-name">set</span> <span class="token assign-left variable">fencs</span><span class="token operator">=</span>utf-8,gbk
    <span class="token keyword">if</span> v:lang <span class="token operator">=~</span>? <span class="token string">'^\(zh\)\|\(ja\)\|\(ko\)'</span>
        <span class="token builtin class-name">set</span> <span class="token assign-left variable">ambiwidth</span><span class="token operator">=</span>double
    endif
    <span class="token keyword">if</span> has<span class="token punctuation">(</span><span class="token string">"win32"</span><span class="token punctuation">)</span>
        <span class="token builtin class-name">source</span> <span class="token variable">$VIMRUNTIME</span>/delmenu.vim
        <span class="token builtin class-name">source</span> <span class="token variable">$VIMRUNTIME</span>/menu.vim
        language messages zh_CN.utf-8
    endif
<span class="token keyword">else</span>
    echoerr <span class="token string">"Sorry, this version of (g)vim was not compiled with +multi_byte"</span>
endif
<span class="token string">" Buffers操作快捷方式!
nnoremap &lt;C-RETURN> :bnext&lt;CR>
nnoremap &lt;C-S-RETURN> :bprevious&lt;CR>
"</span> Tab操作快捷方式<span class="token operator">!</span>
nnoremap <span class="token operator">&lt;</span>C-TAB<span class="token operator">></span> :tabnext<span class="token operator">&lt;</span>CR<span class="token operator">></span>
nnoremap <span class="token operator">&lt;</span>C-S-TAB<span class="token operator">></span> :tabprev<span class="token operator">&lt;</span>CR<span class="token operator">></span>
<span class="token string">"关于tab的快捷键
"</span> map tn :tabnext<span class="token operator">&lt;</span>cr<span class="token operator">></span>
<span class="token string">" map tp :tabprevious&lt;cr>
"</span> map td :tabnew .<span class="token operator">&lt;</span>cr<span class="token operator">></span>
<span class="token string">" map te :tabedit
"</span> map tc :tabclose<span class="token operator">&lt;</span>cr<span class="token operator">></span>
<span class="token string">"窗口分割时,进行切换的按键热键需要连接两次,比如从下方窗口移动
"</span>光标到上方窗口,需要<span class="token operator">&lt;</span>c-w<span class="token operator">></span><span class="token operator">&lt;</span>c-w<span class="token operator">></span>k,非常麻烦,现在重映射为<span class="token operator">&lt;</span>c-k<span class="token operator">></span>,切换的
<span class="token string">"时候会变得非常方便.
nnoremap &lt;C-h> &lt;C-w>h
nnoremap &lt;C-j> &lt;C-w>j
nnoremap &lt;C-k> &lt;C-w>k
nnoremap &lt;C-l> &lt;C-w>l
"</span>一些不错的映射转换语法（如果在一个文件中混合了不同语言时有用）
nnoremap <span class="token operator">&lt;</span>leader<span class="token operator">></span><span class="token number">1</span> :set <span class="token assign-left variable">filetype</span><span class="token operator">=</span>xhtml<span class="token operator">&lt;</span>CR<span class="token operator">></span>
nnoremap <span class="token operator">&lt;</span>leader<span class="token operator">></span><span class="token number">2</span> :set <span class="token assign-left variable">filetype</span><span class="token operator">=</span>css<span class="token operator">&lt;</span>CR<span class="token operator">></span>
nnoremap <span class="token operator">&lt;</span>leader<span class="token operator">></span><span class="token number">3</span> :set <span class="token assign-left variable">filetype</span><span class="token operator">=</span>javascript<span class="token operator">&lt;</span>CR<span class="token operator">></span>
nnoremap <span class="token operator">&lt;</span>leader<span class="token operator">></span><span class="token number">4</span> :set <span class="token assign-left variable">filetype</span><span class="token operator">=</span>php<span class="token operator">&lt;</span>CR<span class="token operator">></span>
<span class="token string">" set fileformats=unix,dos,mac
"</span> nmap <span class="token operator">&lt;</span>leader<span class="token operator">></span>fd :se <span class="token assign-left variable">fileformat</span><span class="token operator">=</span>dos<span class="token operator">&lt;</span>CR<span class="token operator">></span>
<span class="token string">" nmap &lt;leader>fu :se fileformat=unix&lt;CR>
"</span> use Ctrl+<span class="token punctuation">[</span>l<span class="token operator">|</span>n<span class="token operator">|</span>p<span class="token operator">|</span>cc<span class="token punctuation">]</span> to list<span class="token operator">|</span>next<span class="token operator">|</span>previous<span class="token operator">|</span>jump to count the result
<span class="token string">" map &lt;C-x>l &lt;ESC>:cl&lt;CR>
"</span> map <span class="token operator">&lt;</span>C-x<span class="token operator">></span>n <span class="token operator">&lt;</span>ESC<span class="token operator">></span>:cn<span class="token operator">&lt;</span>CR<span class="token operator">></span>
<span class="token string">" map &lt;C-x>p &lt;ESC>:cp&lt;CR>
"</span> map <span class="token operator">&lt;</span>C-x<span class="token operator">></span>c <span class="token operator">&lt;</span>ESC<span class="token operator">></span>:cc<span class="token operator">&lt;</span>CR<span class="token operator">></span>
<span class="token string">" 让 Tohtml 产生有 CSS 语法的 html
"</span> syntax/2html.vim，可以用:runtime<span class="token operator">!</span> syntax/2html.vim
<span class="token builtin class-name">let</span> <span class="token assign-left variable">html_use_css</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token string">" Python 文件的一般设置，比如不要 tab 等
autocmd FileType python set tabstop=4 shiftwidth=4 expandtab
autocmd FileType python map &lt;F12> :!python %&lt;CR>
"</span> 选中状态下 Ctrl+c 复制
vmap <span class="token operator">&lt;</span>C-c<span class="token operator">></span> <span class="token string">"+y
"</span> 打开javascript折叠
<span class="token builtin class-name">let</span> b:javascript_fold<span class="token operator">=</span><span class="token number">1</span>
<span class="token string">" 打开javascript对dom、html和css的支持
let javascript_enable_domhtmlcss=1
"</span> 设置字典 ~/.vim/dict/文件的路径
autocmd filetype javascript <span class="token builtin class-name">set</span> <span class="token assign-left variable">dictionary</span><span class="token operator">=</span><span class="token variable">$VIMFILES</span>/dict/javascript.dict
autocmd filetype css <span class="token builtin class-name">set</span> <span class="token assign-left variable">dictionary</span><span class="token operator">=</span><span class="token variable">$VIMFILES</span>/dict/css.dict
autocmd filetype php <span class="token builtin class-name">set</span> <span class="token assign-left variable">dictionary</span><span class="token operator">=</span><span class="token variable">$VIMFILES</span>/dict/php.dict
<span class="token string">"-----------------------------------------------------------------
"</span> plugin - bufexplorer.vim Buffers切换
<span class="token string">" <span class="token entity" title="\b">\b</span>e 全屏方式查看全部打开的文件列表
"</span> <span class="token punctuation">\</span>bv 左右方式查看   <span class="token punctuation">\</span>bs 上下方式查看
<span class="token string">"-----------------------------------------------------------------
"</span>-----------------------------------------------------------------
<span class="token string">" plugin - taglist.vim  查看函数列表，需要ctags程序
"</span> F4 打开隐藏taglist窗口
<span class="token string">"-----------------------------------------------------------------
if MySys() == "</span>windows<span class="token string">"                "</span> 设定windows系统中ctags程序的位置
    <span class="token builtin class-name">let</span> Tlist_Ctags_Cmd <span class="token operator">=</span> <span class="token string">'"'</span><span class="token builtin class-name">.</span><span class="token variable">$VIMRUNTIME</span><span class="token builtin class-name">.</span><span class="token string">'/ctags.exe"'</span>
elseif MySys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"linux"</span>              <span class="token string">" 设定windows系统中ctags程序的位置
    let Tlist_Ctags_Cmd = '/usr/bin/ctags'
endif
nnoremap &lt;silent>&lt;F4> :TlistToggle&lt;CR>
let Tlist_Show_One_File = 1            "</span> 不同时显示多个文件的tag，只显示当前文件的
<span class="token builtin class-name">let</span> Tlist_Exit_OnlyWindow <span class="token operator">=</span> <span class="token number">1</span>          <span class="token string">" 如果taglist窗口是最后一个窗口，则退出vim
let Tlist_Use_Right_Window = 1         "</span> 在右侧窗口中显示taglist窗口
<span class="token builtin class-name">let</span> <span class="token assign-left variable">Tlist_File_Fold_Auto_Close</span><span class="token operator">=</span><span class="token number">1</span>       <span class="token string">" 自动折叠当前非编辑文件的方法列表
let Tlist_Auto_Open = 0
let Tlist_Auto_Update = 1
let Tlist_Hightlight_Tag_On_BufEnter = 1
let Tlist_Enable_Fold_Column = 0
let Tlist_Process_File_Always = 1
let Tlist_Display_Prototype = 0
let Tlist_Compact_Format = 1
"</span>-----------------------------------------------------------------
<span class="token string">" plugin - mark.vim 给各种tags标记不同的颜色，便于观看调式的插件。
"</span> <span class="token punctuation">\</span>m  mark or unmark the word under <span class="token punctuation">(</span>or before<span class="token punctuation">)</span> the cursor
<span class="token string">" <span class="token entity" title="\r">\r</span>  manually input a regular expression. 用于搜索.
"</span> <span class="token punctuation">\</span>n  <span class="token function">clear</span> this mark <span class="token punctuation">(</span>i.e. the mark under the cursor<span class="token punctuation">)</span>, or <span class="token function">clear</span> all highlighted marks <span class="token builtin class-name">.</span>
<span class="token string">" \*  当前MarkWord的下一个     \#  当前MarkWord的上一个
"</span> <span class="token punctuation">\</span>/  所有MarkWords的下一个    <span class="token punctuation">\</span>?  所有MarkWords的上一个
<span class="token string">"-----------------------------------------------------------------
"</span>-----------------------------------------------------------------
<span class="token string">" plugin - NERD_tree.vim 以树状方式浏览系统中的文件和目录
"</span> :ERDtree 打开NERD_tree         :NERDtreeClose    关闭NERD_tree
<span class="token string">" o 打开关闭文件或者目录         t 在标签页中打开
"</span> T 在后台标签页中打开           <span class="token operator">!</span> 执行此文件
<span class="token string">" p 到上层目录                   P 到根目录
"</span> K 到第一个节点                 J 到最后一个节点
<span class="token string">" u 打开上层目录                 m 显示文件系统菜单（添加、删除、移动操作）
"</span> r 递归刷新当前目录             R 递归刷新当前根目录
<span class="token string">"-----------------------------------------------------------------
"</span> F3 NERDTree 切换
map <span class="token operator">&lt;</span>F<span class="token operator"><span class="token file-descriptor important">3</span>></span> :NERDTreeToggle<span class="token operator">&lt;</span>CR<span class="token operator">></span>
imap <span class="token operator">&lt;</span>F<span class="token operator"><span class="token file-descriptor important">3</span>></span> <span class="token operator">&lt;</span>ESC<span class="token operator">></span>:NERDTreeToggle<span class="token operator">&lt;</span>CR<span class="token operator">></span>
<span class="token string">"-----------------------------------------------------------------
"</span> plugin - NERD_commenter.vim   注释代码用的，
<span class="token string">" [count],cc 光标以下count行逐行添加注释(7,cc)
"</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span>,cu 光标以下count行逐行取消注释<span class="token punctuation">(</span><span class="token number">7</span>,cu<span class="token punctuation">)</span>
<span class="token string">" [count],cm 光标以下count行尝试添加块注释(7,cm)
"</span> ,cA 在行尾插入 /* */,并且进入插入模式。 这个命令方便写注释。
<span class="token string">" 注：count参数可选，无则默认为选中行或当前行
"</span>-----------------------------------------------------------------
<span class="token builtin class-name">let</span> <span class="token assign-left variable">NERDSpaceDelims</span><span class="token operator">=</span><span class="token number">1</span>       <span class="token string">" 让注释符与语句之间留一个空格
let NERDCompactSexyComs=1   "</span> 多行注释时样子更好看
<span class="token string">"-----------------------------------------------------------------
"</span> plugin - DoxygenToolkit.vim  由注释生成文档，并且能够快速生成函数标准注释
<span class="token string">"-----------------------------------------------------------------
let g:DoxygenToolkit_authorName="</span>Asins - asinsimple AT gmail DOT com<span class="token string">"
let g:DoxygenToolkit_briefTag_funcName="</span><span class="token function">yes</span><span class="token string">"
map &lt;leader>da :DoxAuthor&lt;CR>
map &lt;leader>df :Dox&lt;CR>
map &lt;leader>db :DoxBlock&lt;CR>
map &lt;leader>dc a /*  */&lt;LEFT>&lt;LEFT>&lt;LEFT>
"</span>-----------------------------------------------------------------
<span class="token string">" plugin – ZenCoding.vim 很酷的插件，HTML代码生成
"</span> 插件最新版：http://github.com/mattn/zencoding-vim
<span class="token string">" 常用命令可看：http://nootn.com/blog/Tool/23/
"</span>-----------------------------------------------------------------
<span class="token string">"-----------------------------------------------------------------
"</span> plugin – checksyntax.vim    JavaScript常见语法错误检查
<span class="token string">" 默认快捷方式为 F5
"</span>-----------------------------------------------------------------
<span class="token builtin class-name">let</span> g:checksyntax_auto <span class="token operator">=</span> <span class="token number">0</span> <span class="token string">" 不自动检查
"</span>-----------------------------------------------------------------
<span class="token string">" plugin - NeoComplCache.vim    自动补全插件
"</span>-----------------------------------------------------------------
<span class="token builtin class-name">let</span> g:AutoComplPop_NotEnableAtStartup <span class="token operator">=</span> <span class="token number">1</span>
<span class="token builtin class-name">let</span> g:NeoComplCache_EnableAtStartup <span class="token operator">=</span> <span class="token number">1</span>
<span class="token builtin class-name">let</span> g:NeoComplCache_SmartCase <span class="token operator">=</span> <span class="token number">1</span>
<span class="token builtin class-name">let</span> g:NeoComplCache_TagsAutoUpdate <span class="token operator">=</span> <span class="token number">1</span>
<span class="token builtin class-name">let</span> g:NeoComplCache_EnableInfo <span class="token operator">=</span> <span class="token number">1</span>
<span class="token builtin class-name">let</span> g:NeoComplCache_EnableCamelCaseCompletion <span class="token operator">=</span> <span class="token number">1</span>
<span class="token builtin class-name">let</span> g:NeoComplCache_MinSyntaxLength <span class="token operator">=</span> <span class="token number">3</span>
<span class="token builtin class-name">let</span> g:NeoComplCache_EnableSkipCompletion <span class="token operator">=</span> <span class="token number">1</span>
<span class="token builtin class-name">let</span> g:NeoComplCache_SkipInputTime <span class="token operator">=</span> <span class="token string">'0.5'</span>
<span class="token builtin class-name">let</span> g:NeoComplCache_SnippetsDir <span class="token operator">=</span> <span class="token variable">$VIMFILES</span><span class="token builtin class-name">.</span><span class="token string">'/snippets'</span>
<span class="token string">" &lt;TAB> completion.
inoremap &lt;expr>&lt;TAB> pumvisible() ? "</span><span class="token punctuation">\</span><span class="token operator">&lt;</span>C-n<span class="token operator">></span><span class="token string">" : "</span><span class="token punctuation">\</span><span class="token operator">&lt;</span>TAB<span class="token operator">></span><span class="token string">"
"</span> snippets <span class="token function">expand</span> key
imap <span class="token operator">&lt;</span>silent<span class="token operator">></span> <span class="token operator">&lt;</span>C-e<span class="token operator">></span> <span class="token operator">&lt;</span>Plug<span class="token operator">></span><span class="token punctuation">(</span>neocomplcache_snippets_expand<span class="token punctuation">)</span>
smap <span class="token operator">&lt;</span>silent<span class="token operator">></span> <span class="token operator">&lt;</span>C-e<span class="token operator">></span> <span class="token operator">&lt;</span>Plug<span class="token operator">></span><span class="token punctuation">(</span>neocomplcache_snippets_expand<span class="token punctuation">)</span>
<span class="token string">"-----------------------------------------------------------------
"</span> plugin - matchit.vim   对%命令进行扩展使得能在嵌套标签和语句之间跳转
<span class="token string">" % 正向匹配      g% 反向匹配
"</span> <span class="token punctuation">[</span>% 定位块首     <span class="token punctuation">]</span>% 定位块尾
<span class="token string">"-----------------------------------------------------------------
"</span>-----------------------------------------------------------------
<span class="token string">" plugin - vcscommand.vim   对%命令进行扩展使得能在嵌套标签和语句之间跳转
"</span> SVN/git管理工具
<span class="token string">"-----------------------------------------------------------------
"</span>-----------------------------------------------------------------
<span class="token string">" plugin – a.vim
"</span>-----------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>另一套.vimrc <a href="https://github.com/bjjvvv/vim/blob/master/.vimrc">https://github.com/bjjvvv/vim/blob/master/.vimrc</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> nocp <span class="token string">" 非vi

let mapleader = "</span><span class="token punctuation">\</span><span class="token punctuation">\</span>"
lef g:mapleader <span class="token operator">=</span> <span class="token string">"<span class="token entity" title="\\">\\</span>"</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">t_Co</span><span class="token operator">=</span><span class="token number">256</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">path</span><span class="token operator">=</span>.,/usr/include,**

<span class="token string">"解决编码问题
if has("</span>multi_byte<span class="token string">")
    "</span> UTF-8 编码
    <span class="token builtin class-name">set</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span>utf-8
    <span class="token builtin class-name">set</span> <span class="token assign-left variable">termencoding</span><span class="token operator">=</span>utf-8
    <span class="token builtin class-name">set</span> <span class="token assign-left variable">fileencodings</span><span class="token operator">=</span>ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1 <span class="token string">" 编码
    if v:lang =~? '^/(zh/)/|/(ja/)/|/(ko/)'
        set ambiwidth=double
    endif
    if has("</span>win32<span class="token string">")
        source <span class="token variable">$VIMRUNTIME</span>/delmenu.vim
        source <span class="token variable">$VIMRUNTIME</span>/menu.vim
        language messages zh_CN.utf-8
    else
        "</span>Ubuntu <span class="token number">14.04</span>下GVIM的字体间距过宽
        <span class="token builtin class-name">set</span> <span class="token assign-left variable">guifont</span><span class="token operator">=</span>Meslo<span class="token punctuation">\</span> LG<span class="token punctuation">\</span> S<span class="token punctuation">\</span> DZ<span class="token punctuation">\</span> for<span class="token punctuation">\</span> Powerline<span class="token punctuation">\</span> <span class="token number">12</span>
    endif
<span class="token keyword">else</span>
    echoerr <span class="token string">"Sorry, this version of (g)vim was not compiled with +multi_byte"</span>
endif


<span class="token string">"----------------------------------------Voudle
if filereadable(expand("</span>~/.vim/.vimrc.bundles<span class="token string">"))
source ~/.vim/.vimrc.bundles
endif
"</span>----------------------------------------Voudle

<span class="token string">"-------------------------------语法
syntax enable
syntax enable "</span> 开启
syntax on <span class="token string">" 语法高亮
"</span>---------------------------------------

<span class="token string">"----------------------------------------显示
colorscheme solarized "</span> 设置主题
<span class="token builtin class-name">set</span> <span class="token assign-left variable">background</span><span class="token operator">=</span>dark
<span class="token builtin class-name">set</span> cursorcolumn
<span class="token builtin class-name">set</span> cursorline
<span class="token builtin class-name">set</span> hls <span class="token string">" 匹配高亮
set incsearch "</span> 增量搜索（实时匹配）
<span class="token builtin class-name">set</span> <span class="token assign-left variable">laststatus</span><span class="token operator">=</span><span class="token number">2</span> <span class="token string">" 状态栏
set number "</span> 行号
<span class="token builtin class-name">set</span> number <span class="token string">" 行号
"</span><span class="token builtin class-name">set</span> relativenumber
<span class="token builtin class-name">set</span> ruler <span class="token string">" 标尺
set showcmd "</span> 显示当前输入命令
<span class="token string">" set scrolloff=8 "</span> 屏幕上下保留
<span class="token string">" 清屏同时清除高亮
nnoremap &lt;silent> &lt;C-l>  :&lt;C-u>nohlsearch&lt;Cr>&lt;C-l>
"</span>------------------------------------

<span class="token string">"----------------------------------------缩进
filetype plugin indent on
set sw=4 "</span> 缩进4个空格
<span class="token builtin class-name">set</span> <span class="token assign-left variable">ts</span><span class="token operator">=</span><span class="token number">4</span> <span class="token string">" tab为4个字符
set et "</span> tab替换为空格
<span class="token builtin class-name">set</span> smarttab <span class="token string">" 删除tab的4个空格
set nospell "</span> 拼写检查
<span class="token builtin class-name">set</span> wrap
<span class="token builtin class-name">set</span> nolbr
<span class="token string">" set tw=78 "</span> 设置光标超过78的时候折行
<span class="token string">" set lbr "</span> 不在单词中间折断
<span class="token string">" set fo+=mB "</span> 汉字断行处理
<span class="token builtin class-name">set</span> <span class="token assign-left variable">backspace</span><span class="token operator">=</span>start,eol,indent<span class="token string">" 删除行尾，回车，缩进
set whichwrap=b,s,h,l,&lt;,>,[,] "</span> 支持左右跨行移动
<span class="token string">" set sm "</span> 括号配对
<span class="token builtin class-name">set</span> cin <span class="token string">" 打开c/c++自动缩进
"</span> <span class="token builtin class-name">set</span> ai <span class="token string">" 自动缩进
"</span> 基于缩进或语法进行代码折叠
<span class="token builtin class-name">set</span> <span class="token assign-left variable">foldmethod</span><span class="token operator">=</span>indent
<span class="token string">"set foldmethod=syntax
"</span> 启动 <span class="token function">vim</span> 时关闭折叠代码
<span class="token builtin class-name">set</span> nofoldenable
<span class="token string">"---------------------------------------


"</span>---------------------------------------map
<span class="token string">" 用空格来当mapleader
map &lt;Space> &lt;Leader>
"</span> quick switch background color between dark and light
map  <span class="token operator">&lt;</span>silent<span class="token operator">></span> <span class="token operator">&lt;</span>Leader<span class="token operator">></span>bg :let <span class="token operator">&amp;</span>background <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token operator">&amp;</span>background <span class="token operator">==</span> <span class="token string">"dark"</span>? <span class="token string">"light"</span> <span class="token builtin class-name">:</span> <span class="token string">"dark"</span> <span class="token punctuation">)</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>
<span class="token string">" 使 &lt;C-p> &lt;C-n> 支持历史过滤
cnoremap &lt;C-p> &lt;Up>
cnoremap &lt;C-n> &lt;Down>
"</span> ex命令中%%转换为当前缓存文件目录路径
cnoremap <span class="token operator">&lt;</span>expr<span class="token operator">></span> %% getcmdtype<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">':'</span> ? expand<span class="token punctuation">(</span><span class="token string">'%:h'</span><span class="token punctuation">)</span>.<span class="token string">'/'</span> <span class="token builtin class-name">:</span> <span class="token string">'%%'</span>
nnoremap  <span class="token operator">&lt;</span>leader<span class="token operator">></span>cn  :<span class="token operator">&lt;</span>C-u<span class="token operator">></span>cnext<span class="token operator">&lt;</span>Cr<span class="token operator">></span> <span class="token string">" quicklist next
nnoremap  &lt;leader>cp  :&lt;C-u>cprevious&lt;Cr> "</span> quicklist previous
<span class="token string">"---------------------------


"</span>-------------------------------实用
<span class="token builtin class-name">set</span> <span class="token assign-left variable">pastetoggle</span><span class="token operator">=</span><span class="token operator">&lt;</span>F<span class="token operator"><span class="token file-descriptor important">5</span>></span>
<span class="token builtin class-name">set</span> ignorecase <span class="token string">" 忽略忽略大小写
set smartcase "</span> 和 ignorecase 一起智能
<span class="token builtin class-name">set</span> <span class="token assign-left variable">history</span><span class="token operator">=</span><span class="token number">200</span>
<span class="token builtin class-name">set</span> <span class="token assign-left variable">wildignore</span><span class="token operator">+=</span>*/tmp/*,*.so,*.swp,*.zip,*.py<span class="token punctuation">[</span>oc<span class="token punctuation">]</span>     <span class="token string">" MacOSX/Linux
"</span>-------------------------------------

<span class="token string">"-------------------autocmd
"</span> Delete trailing white space on save, useful <span class="token keyword">for</span> Python and CoffeeScript <span class="token punctuation">;</span><span class="token punctuation">)</span>
func<span class="token operator">!</span> DeleteTrailingWS<span class="token punctuation">(</span><span class="token punctuation">)</span>
  exe <span class="token string">"normal mz"</span>
  %s/<span class="token punctuation">\</span>s<span class="token punctuation">\</span>+$//ge
  exe "normal `z<span class="token string">"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()
"</span>-------------------------------------

<span class="token string">"------------------------来自《Vim 实用技巧》
"</span>runtime macros/matchit.vim
<span class="token builtin class-name">set</span> hidden <span class="token string">" 缓存切换位保存不提醒
if has("</span>autocmd<span class="token string">")
    autocmd FileType ruby setlocal ts=2 sts=2 sw=2 expandtab
endif
"</span> :Qargs 将quickfix 列表中的文件加入 args 列表中
command<span class="token operator">!</span> -nargs<span class="token operator">=</span><span class="token number">0</span> -bar Qargs execute <span class="token string">'args'</span> QuickfixFilenames<span class="token punctuation">(</span><span class="token punctuation">)</span>
function<span class="token operator">!</span> QuickfixFilenames<span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token string">" Building a hash ensures we get each buffer only once
  let buffer_numbers = &#123;&#125;
  for quickfix_item in getqflist()
    let bufnr = quickfix_item['bufnr']
    "</span> Lines without files will appear as <span class="token assign-left variable">bufnr</span><span class="token operator">=</span><span class="token number">0</span>
    <span class="token keyword">if</span> bufnr <span class="token operator">></span> <span class="token number">0</span>
      <span class="token builtin class-name">let</span> buffer_numbers<span class="token punctuation">[</span>bufnr<span class="token punctuation">]</span> <span class="token operator">=</span> bufname<span class="token punctuation">(</span>bufnr<span class="token punctuation">)</span>
    endif
  endfor
  <span class="token builtin class-name">return</span> join<span class="token punctuation">(</span>map<span class="token punctuation">(</span>values<span class="token punctuation">(</span>buffer_numbers<span class="token punctuation">)</span>, <span class="token string">'fnameescape(v:val)'</span><span class="token punctuation">))</span>
endfunction

<span class="token string">" makes * and # work on visual mode too.
function! s:VSetSearch(cmdtype)
  let temp = @s
  norm! gv"</span>sy
  <span class="token builtin class-name">let</span> @/ <span class="token operator">=</span> <span class="token string">'\V'</span> <span class="token builtin class-name">.</span> substitute<span class="token punctuation">(</span>escape<span class="token punctuation">(</span>@s, a:cmdtype.<span class="token string">'\'</span><span class="token punctuation">)</span>, <span class="token string">'\n'</span>, <span class="token string">'\\n'</span>, <span class="token string">'g'</span><span class="token punctuation">)</span>
  <span class="token builtin class-name">let</span> @s <span class="token operator">=</span> temp
endfunction

xnoremap * :<span class="token operator">&lt;</span>C-u<span class="token operator">></span>call <span class="token operator">&lt;</span>SID<span class="token operator">></span>VSetSearch<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>CR<span class="token operator">></span>/<span class="token operator">&lt;</span>C-R<span class="token operator">>=</span>@/<span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token operator">&lt;</span>CR<span class="token operator">></span>
xnoremap <span class="token comment"># :&lt;C-u>call &lt;SID>VSetSearch('?')&lt;CR>?&lt;C-R>=@/&lt;CR>&lt;CR></span>

<span class="token string">" recursively vimgrep for word under cursor or selection if you hit leader-star
nmap &lt;leader>* :execute 'noautocmd vimgrep /\V' . substitute(escape(expand("</span><span class="token operator">&lt;</span>cword<span class="token operator">></span><span class="token string">"), '\'), '<span class="token entity" title="\n">\n</span>', '<span class="token entity" title="\\">\\</span>n', 'g') . '/ **'&lt;CR>
vmap &lt;leader>* :&lt;C-u>call &lt;SID>VSetSearch('/')&lt;CR>:execute 'noautocmd vimgrep /' . @/ . '/ **'&lt;CR>

"</span>-------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="依赖配置"><a class="header-anchor" href="#依赖配置"></a>依赖配置</h2>
<h3 id="Vim使用molokai配色"><a class="header-anchor" href="#Vim使用molokai配色"></a><a href="http://www.jianshu.com/p/418ec70e7aed">Vim使用molokai配色</a></h3>
<ul>
<li>复制以下全部命令，到命令行执行</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载molokai主题(https://github.com/tomasr/molokai)</span>
<span class="token function">wget</span> https://github.com/tomasr/molokai/archive/master.zip --no-check-certificate
<span class="token function">unzip</span> master.zip
<span class="token comment"># 将molokai.vim拷贝到 ~/.vim/colors/</span>
<span class="token function">cp</span> molokai-master/colors/molokai.vim  ~/.vim/colors/
<span class="token comment"># 若无~/.vim/，或无~/.vim/colors/，则mkdir他们</span>

<span class="token comment"># 在 ~/.vimrc 中添加：colorscheme molokai</span>
<span class="token comment"># 由于上述.vimrc文件中有这下句，故此处注释掉</span>
<span class="token comment"># echo 'colorscheme molokai' >> ~/.vimrc</span>

<span class="token comment"># 扫尾</span>
<span class="token function">rm</span> master.zip
<span class="token function">rm</span> molokai-master -rf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>tmux与vim配色冲突：在tmux里进入vim，文字自带不透明纯黑底色，为无文字处的底色是<code>dark</code>色。为了使得文字也变成透明底色，需设置<code>vim ~/.vim/colors/molokai.vim  </code>，将全文中，所有<code>hi Normal ... ctermbg=xxx</code>改为<code>hi Normal ... ctermbg=NONE    </code>。这样修改，对macvim没有干扰。</li>
</ul>
<h2 id="功效"><a class="header-anchor" href="#功效"></a>功效</h2>
<p>此配置可解决原生（.vimrc是空的）vim的以下问题：</p>
<ul>
<li>输入模式下，按上下左右键会出<code>A</code> <code>B</code>乱码，无法上下左右移动光标</li>
<li><code>cmd+V</code>黏贴（mac客户端的操作），会在粘完之后，出现<code>A</code> <code>B</code>乱码</li>
</ul>
<h1 id="从服务器VIM-复制-剪切到本机系统剪贴板"><a class="header-anchor" href="#从服务器VIM-复制-剪切到本机系统剪贴板"></a>从服务器VIM 复制/剪切到本机系统剪贴板</h1>
<p><a href="https://hiberabyss.github.io/2017/11/30/vim-remote-copy/">参考</a></p>
<h2 id="安装clipper"><a class="header-anchor" href="#安装clipper"></a>安装clipper</h2>
<ul>
<li>
<p>在个人电脑 安装clipper，MacOS使用  <code>brew install clipper</code> 安装</p>
</li>
<li>
<p>用brew将clipper为开机自启 <code>brew services start clipper</code></p>
</li>
<li>
<p>检查clipper否正常启动</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> clipper
<span class="token comment"># 返回 502   463     1   0  3:07PM ??         0:00.09 /usr/local/opt/clipper/bin/clipper</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="简单演示"><a class="header-anchor" href="#简单演示"></a>简单演示</h2>
<ul>
<li>clipper启动后，通过下面的命令连接到远程机器：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> 用户名@网址或ip -R <span class="token number">8377</span>:localhost:8377<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>-R 服务器端口:localhost:本机端口</code>其含义是在ssh时，将此服务器端口将转发到此本地端口。</p>
<p>clipper默认从<code>8377</code>读取远程传来的文本，将其写入到本机系统剪切板。</p>
<ul>
<li>确认远程机器上安装有 <code>nc</code></li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span>
<span class="token comment"># 返回</span>
<span class="token comment"># usage: nc [-46AacCDdEFhklMnOortUuvz] [-K tc] [-b boundif] [-i interval] [-p source_port] # [--apple-delegate-pid pid] [--apple-delegate-uuid uuid]</span>
<span class="token comment">#     [-s source_ip_address] [-w timeout] [-X proxy_version]</span>
<span class="token comment">#     [-x proxy_address[:port]] [hostname] [port[s]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>简单演示</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> hello,world <span class="token operator">|</span> <span class="token function">timeout</span> <span class="token number">0.1</span> <span class="token function">nc</span> localhost <span class="token number">8377</span> <span class="token comment"># 服务器端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>则 “hello,world” 字符转已经成功复制到本机的剪贴板了，可以<code>command+v</code>贴出。</p>
<ul>
<li><code>timeout 0.1</code>表示0.1秒内发出去，超时就结束连接，不管对面收没收到</li>
</ul>
<p>若不加此参数，在我用的nc版本</p>
<pre class="line-numbers language-none"><code class="language-none">OpenBSD netcat (Debian patchlevel 1.187-1ubuntu0.1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>命令行下敲完<code>echo hello,world | nc localhost 8377 </code>，会一致等待，而不允许输入下一行命令，除非ctrl+C结束。</p>
<ul>
<li>测试：在本地开此监听程序</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> -lk <span class="token number">8377</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>-k</code>: 持续监听。若不带此参数，听到一条消息就立即退出。若带此参数，不论听到多少条消息都不退出，需要<code>ctrl+c</code>退出。</p>
<p><code>-l</code>: 监听传入消息。若不带此参数，就表示传出消息。</p>
<p>若在服务器上执行<code>echo hello,world | timeout 0.1 nc localhost 8377</code>时，本地的监听程序返回“hello world”，则说明 【服务器8377端口→<code>ssh -R</code>→本地8377端口 】这种转发信道可用。</p>
<ul>
<li>配置ssh设置</li>
</ul>
<p>为免去每次登录加 <code>-R 8377:localhost:8377</code> 参数，可修改 <code>~/.ssh/config</code> 文件，其中每个Host配置下加一句<code>RemoteForward 8377 localhost:8377</code>（<code>RemoteForward 服务器端口 localhost:本机端口</code>）。完整的一个Host配置例如：</p>
<pre class="line-numbers language-none"><code class="language-none">Host 别名
    HostName 网址或ip
    Port 端口号
    User 用户名
    IdentityFile ~&#x2F;.ssh&#x2F;id_rsa
    RemoteForward 8377 localhost:8377<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="在远程主机的VIM里复制内容"><a class="header-anchor" href="#在远程主机的VIM里复制内容"></a>在远程主机的VIM里复制内容</h2>
<ul>
<li>我们可以利用 <code>:[range]w[rite] [++opt] !&#123;cmd&#125;</code> 来实现文件内容的复制：
<ul>
<li>复制当前行：在 VIM 中执行 <code>:.w !nc localhost 8377</code></li>
<li>复制选中的行：选中要复制的行后，执行 <code>:'&lt;,'&gt;w !nc localhost 8377</code> ( vy选中后，进入命令行模式后 VIM 会自动帮忙填充 <code>'&lt;,'&gt;</code>)</li>
<li>复制整个文件：在 VIM 中执行 <code>:%w !nc localhost 8377</code></li>
<li>复制 VIM 默认 register 的内容：在 VIM 中执行 <code>:call system('nc localhost 8377', @&quot;)</code></li>
</ul>
</li>
<li>为方便起见，在<code>~/.vimrc</code>加入</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&quot; 从服务器的vim里复制&#x2F;剪切文字到本地电脑的剪切板
&quot; v,y复制&#x2F;v,d剪切&#x2F;(数字)dd 整行剪切，发送到笔记本的系统剪切板，但不清空vim的寄存器
vmap y y:call system(&#39;timeout 0.1 nc localhost 8377&#39;, @&quot;)&lt;CR&gt;
vmap d d:call system(&#39;timeout 0.1 nc localhost 8377&#39;, @&quot;)&lt;CR&gt;
nmap dd dd:call system(&#39;timeout 0.1 nc localhost 8377&#39;, @&quot;)&lt;CR&gt;
&quot; ctrl+a 整个文件发送到笔记本的系统剪切板
map &lt;C-a&gt; :%w !timeout 0.1 nc localhost 8377&lt;CR&gt;&lt;CR&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中<code>@&quot;</code>表示vim的<code>&quot;</code>剪切板中的内容，在原生的vim中，每次按<code>y</code> <code>yy</code> <code>d</code> <code>dd</code> <code>c</code> <code>cc</code>操作，都会写到这个剪切板</p>
<h2 id="报错"><a class="header-anchor" href="#报错"></a>报错</h2>
<h3 id="服务器上端口占用"><a class="header-anchor" href="#服务器上端口占用"></a>服务器上端口占用</h3>
<ul>
<li>症状</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span>  user@host -R <span class="token number">8377</span>:localhost:8377
<span class="token comment"># 返回如下</span>
Warning: remote port forwarding failed <span class="token keyword">for</span> listen port <span class="token number">8377</span>   <span class="token comment"># 服务器上8377端口占用</span>
Welcome to Ubuntu <span class="token number">16.04</span>.4 LTS <span class="token punctuation">(</span>GNU/Linux <span class="token number">4.4</span>.0-112-generic x86_64<span class="token punctuation">)</span>

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Fri Aug <span class="token number">10</span> <span class="token number">17</span>:19:13 CST <span class="token number">2018</span>

  System load:  <span class="token number">4.79</span>              Processes:              <span class="token number">819</span>
  Usage of /:   <span class="token number">55.2</span>% of <span class="token number">3</span>.52TB   Users logged in:        <span class="token number">11</span>
  Memory usage: <span class="token number">61</span>%               IP address <span class="token keyword">for</span> em1:     <span class="token number">192.168</span>.245.157
  Swap usage:   <span class="token number">3</span>%                IP address <span class="token keyword">for</span> docker0: <span class="token number">172.17</span>.0.1

  Graph this data and manage this system at:
    https://landscape.canonical.com/

<span class="token number">176</span> packages can be updated.
<span class="token number">105</span> updates are security updates.

*** System restart required ***
Last login: Fri Aug <span class="token number">10</span> <span class="token number">17</span>:16:27 <span class="token number">2018</span> from <span class="token number">117.43</span>.160.228<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>登录后，若强行在vim中进行v-y, v-d, dd操作，本机剪切板收不到发来的文字，服务器端会在vim的底栏返回</p>
<pre class="line-numbers language-none"><code class="language-none">:call system(&#39;nc localhost 8377&#39;, @&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>一直卡在这里（这个操作阻塞了），做不了任何vim的操作（<code>:q</code>也不行），需要<code>ctrl+c</code>才能结束恢复各种vim操作。</p>
<ul>
<li>
<p>解决方法</p>
<p>在服务器上，用sudo权限（若不用sudo权限则看不完全）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">lsof</span> -i:8377 <span class="token comment"># 返回占用8377端口的进程，取出其pid</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>其返回如下</p>
<pre class="line-numbers language-none"><code class="language-none">COMMAND   PID    USER   FD   TYPE  DEVICE SIZE&#x2F;OFF NODE NAME
sshd    17188 myusername    9u  IPv6 4032419      0t0  TCP ip6-localhost:8377 (LISTEN)
sshd    17188 myusername   10u  IPv4 4032420      0t0  TCP localhost:8377 (LISTEN)
sshd    17188 myusername   14u  IPv4 4051809      0t0  TCP localhost:8377-&gt;localhost:40802 (CLOSE_WAIT)
sshd    17188 myusername   17u  IPv4 4058793      0t0  TCP localhost:8377-&gt;localhost:40828 (CLOSE_WAIT)
sshd    17188 myusername   18u  IPv4 4054593      0t0  TCP localhost:8377-&gt;localhost:40832 (CLOSE_WAIT)
sshd    17188 myusername   19u  IPv4 4054699      0t0  TCP localhost:8377-&gt;localhost:40840 (CLOSE_WAIT)
sshd    17188 myusername   20u  IPv4 4054757      0t0  TCP localhost:8377-&gt;localhost:40848 (CLOSE_WAIT)
sshd    17188 myusername   21u  IPv4 4054765      0t0  TCP localhost:8377-&gt;localhost:40850 (CLOSE_WAIT)
sshd    17188 myusername   22u  IPv4 4054894      0t0  TCP localhost:8377-&gt;localhost:40864 (CLOSE_WAIT)
sshd    17188 myusername   23u  IPv4 4057945      0t0  TCP localhost:8377-&gt;localhost:40874 (CLOSE_WAIT)
sshd    17188 myusername   24u  IPv4 4058045      0t0  TCP localhost:8377-&gt;localhost:40882 (CLOSE_WAIT)
sshd    17188 myusername   25u  IPv4 4063283      0t0  TCP localhost:8377-&gt;localhost:40892 (CLOSE_WAIT)
sshd    17188 myusername   26u  IPv4 4063384      0t0  TCP localhost:8377-&gt;localhost:40902 (CLOSE_WAIT)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>杀进程</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">kill</span> -9 <span class="token operator">&lt;</span>其pid<span class="token operator">></span> <span class="token comment"># 上述案例pid=17188</span>
<span class="token function">sudo</span> <span class="token function">lsof</span> -i:8377
<span class="token comment"># 若返回空，说明杀干净了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>然后需退出服务器，重新登录服务器，进入vim，测试一下v-y, v-d, dd操作，本机剪切板能收到发来的文字，则成功解决。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>器</category>
        <category>编辑器IDE</category>
      </categories>
  </entry>
  <entry>
    <title>安装YouCompleteMe编译的依赖-升级conda及其python</title>
    <url>/posts/323dc66b/</url>
    <content><![CDATA[<p>本教程是针对JUN集群的。其它场景仅供参考。</p>
<h2 id="JUN集群中已经升级到节点"><a class="header-anchor" href="#JUN集群中已经升级到节点"></a>JUN集群中已经升级到节点</h2>
<p>已经完成：cpu1-5, gpu1-11, gpu14-38</p>
<p>正在进行：</p>
<p>有待完成：gpu16</p>
<p>坏了的机器：gpu16</p>
<h2 id="安装Youcomplete所需的依赖"><a class="header-anchor" href="#安装Youcomplete所需的依赖"></a>安装Youcomplete所需的依赖</h2>
<p>以下方法适用于Linux系统</p>
<p>在g[x]:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda -V
python -V
cmake --version
g++-8 --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="升级python和升级conda"><a class="header-anchor" href="#升级python和升级conda"></a>升级python和升级conda</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> -y <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.10</span>
python -V

conda update conda
conda -V<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果上述升级过程遇到报错，请按照<a href="#%E5%8D%87%E7%BA%A7conda%E5%8F%8A%E5%85%B6%E4%B8%AD%E7%9A%84python">下文</a>的操作细节去安装。</p>
<h4 id="安装JUN集群上所需要的pip包"><a class="header-anchor" href="#安装JUN集群上所需要的pip包"></a>安装JUN集群上所需要的pip包</h4>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> -U pip
pip <span class="token function">install</span> pretty_errors <span class="token operator">&amp;&amp;</span> python -m pretty_errors -s -p
<span class="token assign-left variable">pretty_errors_config</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>python -m pretty_errors -f <span class="token operator">|</span> <span class="token function">grep</span> pretty_errors.pth<span class="token variable">)</span></span>"</span>
<span class="token punctuation">[</span> -f <span class="token string">"<span class="token variable">$pretty_errors_config</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ln</span> -sf <span class="token variable">$shareENV</span>/app_config/pretty_errors.pth <span class="token string">"<span class="token variable">$pretty_errors_config</span>"</span>
pip <span class="token function">install</span> jupyter
pip <span class="token function">install</span> jupyterthemes
pip <span class="token function">install</span> shadowsocks
<span class="token function">mkdir</span> /home/<span class="token variable">$&#123;<span class="token environment constant">USER</span>&#125;</span>/ENV/localENV/log/<span class="token punctuation">&#123;</span>polipo,shadowsocks<span class="token punctuation">&#125;</span>
pip <span class="token function">install</span> pynvim <span class="token comment"># 在python>=3.7上，使用pynvim而不是neovim</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Ubuntu18-04中手动安装cmake3-22"><a class="header-anchor" href="#Ubuntu18-04中手动安装cmake3-22"></a>Ubuntu18.04中手动安装cmake3.22</h3>
<p>参考：</p>
<p><a href="https://juejin.cn/post/7279346112317259831">https://juejin.cn/post/7279346112317259831</a></p>
<p><a href="https://blogca.cn/2022/07/13/ubuntu18-sheng-ji-an-zhuang-cmake-chao-xiang-xi-qin-ce-cheng-gong-2022-nian-7-yue-13-ri/">https://blogca.cn/2022/07/13/ubuntu18-sheng-ji-an-zhuang-cmake-chao-xiang-xi-qin-ce-cheng-gong-2022-nian-7-yue-13-ri/</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> remove -y cmake<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载、解压</span>
<span class="token comment"># 去https://cmake.org/files/下载所需版本的源码。也可以使用wget下载，例如：</span>
<span class="token builtin class-name">cd</span> /home/<span class="token environment constant">$USER</span>
<span class="token function">wget</span> https://cmake.org/files/v3.22/cmake-3.22.1.tar.gz
<span class="token function">tar</span> -xvzf cmake-3.22.1.tar.gz
<span class="token function">rm</span> cmake-3.22.1.tar.gz
<span class="token function">sudo</span> <span class="token function">mv</span> cmake-3.22.1 /usr/local/bin/cmake

<span class="token comment"># 手动编译</span>
<span class="token builtin class-name">cd</span> /usr/local/bin/cmake
<span class="token function">sudo</span> ./bootstrap
<span class="token comment"># 使用-j4参数以加快编译速度，数字4表示同时使用4个核心</span>
<span class="token function">sudo</span> <span class="token function">make</span> -j4
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span>
<span class="token function">sudo</span> <span class="token function">ln</span> -sf /usr/local/bin/cmake/bin/* /usr/bin/
cmake --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若 sudo ./bootstrap 报错：</p>
<blockquote>
<p>“CMake Error at Utilities/cmcurl/CMakeLists.txt:562 (message):<br>
Could not find OpenSSL.  Install an OpenSSL development package or<br>
configure CMake with -DCMAKE_USE_OPENSSL=OFF to build without OpenSSL.“</p>
</blockquote>
<p>则执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y libssl-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后执行上述的手动编译的命令。</p>
<h4 id="用conda安装cmake-不推荐"><a class="header-anchor" href="#用conda安装cmake-不推荐"></a>用conda安装cmake (不推荐)</h4>
<p>不推荐用conda安装cmake，因为前文方法安装的cmake可以给所有用户用，而用conda安装的cmake只能给本用户用。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> <span class="token assign-left variable">cmake</span><span class="token operator">=</span><span class="token number">3.14</span> <span class="token comment"># 但是，只有本用户可用，故不用</span>
conda <span class="token function">install</span> gxx_linux-64 <span class="token comment"># 但是，会显示成haoyu@x86_64-conda-linux-gnu，故不用</span>
cmake --version
gxx --version
python ~/.vim/plugged/YouCompleteMe/install.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="安装g-±8"><a class="header-anchor" href="#安装g-±8"></a>安装g+±8</h3>
<p>参考 <a href="https://blog.csdn.net/maoni99999/article/details/117378664">Your C++ compiler does NOT fully support C<ins>17，升级gcc到支持c</ins>17</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y g++-8
<span class="token function">sudo</span> update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 <span class="token number">700</span> --slave /usr/bin/g++ g++ /usr/bin/g++-7
<span class="token function">sudo</span> update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 <span class="token number">800</span> --slave /usr/bin/g++ g++ /usr/bin/g++-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="确认所安装软件的版本"><a class="header-anchor" href="#确认所安装软件的版本"></a>确认所安装软件的版本</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda -V
python -V
cmake --version
g++-8 --version

<span class="token function">which</span> python cmake g++-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>返回如下（gpu36，Ubuntu 18.04.5 LTS，2023-12-21执行）</p>
<pre class="line-numbers language-none"><code class="language-none">conda 23.11.0
Python 3.10.13
cmake version 3.22.1

CMake suite maintained and supported by Kitware (kitware.com&#x2F;cmake).
g++-8 (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0
Copyright (C) 2018 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;bin&#x2F;python
&#x2F;usr&#x2F;bin&#x2F;cmake
&#x2F;usr&#x2F;bin&#x2F;g++-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="编译YouCompleteMe"><a class="header-anchor" href="#编译YouCompleteMe"></a>编译YouCompleteMe</h2>
<p>在g[x]：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> -rf <span class="token environment constant">$HOME</span>/.vim/plugged/*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若有无法更新的包，则执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> -rf <span class="token environment constant">$HOME</span>/.vim/plugged/<span class="token operator">&lt;</span>包的名字<span class="token operator">></span>
ivp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>在已经成功下载YouCompleteMe及其子包的节点上（比如g49）:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ts /home/haoyu/.ssh g<span class="token punctuation">[</span>xx<span class="token punctuation">]</span>:.
ts /home/haoyu/ENV/localENV/app_config/vim_plug/YouCompleteMe g<span class="token punctuation">[</span>x<span class="token punctuation">]</span>:/home/haoyu/ENV/localENV/app_config/vim_plug/
<span class="token comment"># 其它包同理：</span>
ts /home/haoyu/ENV/localENV/app_config/vim_plug/<span class="token operator">&lt;</span>未安装的包名字<span class="token operator">></span> g<span class="token punctuation">[</span>x<span class="token punctuation">]</span>:/home/haoyu/ENV/localENV/app_config/vim_plug/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>在g[x]:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">uvp
python <span class="token environment constant">$HOME</span>/.vim/plugged/YouCompleteMe/install.py
vv
<span class="token comment"># 测试一下vim是否能启用YouCompleteMe的自动补全</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="升级conda及其中的python"><a class="header-anchor" href="#升级conda及其中的python"></a>升级conda及其中的python</h2>
<h3 id="升级conda"><a class="header-anchor" href="#升级conda"></a>升级conda</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看conda版本</span>
conda -V

<span class="token comment"># 首先更新 conda 到最新，测试中如果当前处在 conda activate 状态下，需要更新 conda 两次</span>
conda update conda
conda -V

<span class="token comment"># 如果遇到更新失败，可尝试强制更新</span>
conda update --force conda
conda -V<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="解决错误"><a class="header-anchor" href="#解决错误"></a>解决错误</h3>
<h4 id="若conda升级失败，可尝试先升级python"><a class="header-anchor" href="#若conda升级失败，可尝试先升级python"></a>若conda升级失败，可尝试先升级python</h4>
<p>若直接升级conda失败，可以尝试先升级conda下的python，再升级conda</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看python版本</span>
python -V
<span class="token comment"># 升级python到最新版本</span>
conda update python
<span class="token comment"># 或升级python到指定版本</span>
conda <span class="token function">install</span> <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.10</span>
python -V

<span class="token comment"># 升级conda</span>
conda update conda<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此方法，会重新安装一个新版本的 python 在<code>$HOME/miniconda/lib/python3.10</code> 中，并把 base 使用的 python 指向新版本python。</p>
<p>但是，新版本的 python 3.10 文件夹下没有就版本安装的第三方依赖（即pip包），需要重新安装。</p>
<p>旧 python 仍然在<code>$HOME/miniconda/lib/python3.7</code>中，这里面有旧版本python的基础文件和pip包。用上述命令安装新版本python时，不会自动删除这个目录。如果不需要使用旧版本的python，<strong>可以在新版本python安装好后，删掉这个目录</strong>，即</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> -rf <span class="token environment constant">$HOME</span>/miniconda/lib/python3.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>因此，一般情况下不建议升级。可以通过<code>conda create env -n new python=3.10</code>创建新的虚拟环境。</p>
<h4 id="RemoveError-‘setuptools’-is-a-dependency-of-conda"><a class="header-anchor" href="#RemoveError-‘setuptools’-is-a-dependency-of-conda"></a>RemoveError: ‘setuptools’ is a dependency of conda</h4>
<p>报错</p>
<blockquote>
<p>RemoveError: ‘setuptools’ is a dependency of conda and cannot be removed from conda’s operating environme</p>
</blockquote>
<p>则执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> --force -c anaconda <span class="token function">git</span>
conda update -n base -c defaults setuptools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="WARNING-A-newer-version-of-conda-exists"><a class="header-anchor" href="#WARNING-A-newer-version-of-conda-exists"></a>WARNING: A newer version of conda exists.</h4>
<p>报错</p>
<blockquote>
<p>==&gt; WARNING: A newer version of conda exists. &lt;==<br>
current version: 4.7.10<br>
latest version: 23.10.0<br>
Please update conda by running<br>
$ conda update -n base -c defaults conda</p>
</blockquote>
<p>则执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda update -n base -c defaults conda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="如果还是没能升级"><a class="header-anchor" href="#如果还是没能升级"></a>如果还是没能升级</h4>
<p>则执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> -n base -c defaults <span class="token assign-left variable">conda</span><span class="token operator">=</span><span class="token number">23.9</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="The-environment-is-inconsistent"><a class="header-anchor" href="#The-environment-is-inconsistent"></a>The environment is inconsistent</h4>
<p>报错</p>
<blockquote>
<p>The environment is inconsistent, please check the package plan carefully. The following packages are causing the inconsistency.</p>
</blockquote>
<p>则执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda activate base
conda update anaconda <span class="token comment"># 如果安装的是miniconds，则不要执行此命令</span>
conda update --all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="上述错误解决后，需要重新升级conda"><a class="header-anchor" href="#上述错误解决后，需要重新升级conda"></a>上述错误解决后，需要重新升级conda</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda update conda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>器</category>
        <category>编辑器IDE</category>
      </categories>
  </entry>
  <entry>
    <title>vim配置日志</title>
    <url>/posts/27f12ef1/</url>
    <content><![CDATA[<h1 id="其他vim的配置项目"><a class="header-anchor" href="#其他vim的配置项目"></a>其他vim的配置项目</h1>
<h3 id="vim化做sublime"><a class="header-anchor" href="#vim化做sublime"></a>vim化做sublime</h3>
<p><a href="https://github.com/fatih/subvim">https://github.com/fatih/subvim</a></p>
<p><a href="https://github.com/grigio/vim-sublime">https://github.com/grigio/vim-sublime</a></p>
<h1 id="字体"><a class="header-anchor" href="#字体"></a><a href="https://github.com/oldratlee/vim-practice/blob/master/font-config/README.md">字体</a></h1>
<h1 id="vim-plug"><a class="header-anchor" href="#vim-plug"></a>vim-plug</h1>
<p>vim-plug是增强版的vundle，新支持：并行、动态加载插件，节约内存</p>
<p>教程：<a href="https://vim.ink/vim-plug.html">https://vim.ink/vim-plug.html</a></p>
<p><a href="https://github.com/junegunn/vim-plug/wiki/tutorial">https://github.com/junegunn/vim-plug/wiki/tutorial</a></p>
<p>安装</p>
<pre class="line-numbers language-none"><code class="language-none">curl -fLo ~&#x2F;.vim&#x2F;autoload&#x2F;plug.vim --create-dirs https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;junegunn&#x2F;vim-plug&#x2F;master&#x2F;plug.vim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>配置插件</p>
<pre class="line-numbers language-none"><code class="language-none">call plug#begin(&#39;~&#x2F;.vim&#x2F;plugged&#39;)
Plug &#39;junegunn&#x2F;vim-easy-align&#39;
Plug &#39;https:&#x2F;&#x2F;github.com&#x2F;junegunn&#x2F;vim-github-dashboard.git&#39;
Plug &#39;SirVer&#x2F;ultisnips&#39; | Plug &#39;honza&#x2F;vim-snippets&#39;
Plug &#39;scrooloose&#x2F;nerdtree&#39;, &#123; &#39;on&#39;:  &#39;NERDTreeToggle&#39; &#125;
Plug &#39;tpope&#x2F;vim-fireplace&#39;, &#123; &#39;for&#39;: &#39;clojure&#39; &#125;
Plug &#39;rdnetto&#x2F;YCM-Generator&#39;, &#123; &#39;branch&#39;: &#39;stable&#39; &#125;
Plug &#39;nsf&#x2F;gocode&#39;, &#123; &#39;tag&#39;: &#39;v.20150303&#39;, &#39;rtp&#39;: &#39;vim&#39; &#125;
Plug &#39;junegunn&#x2F;fzf&#39;, &#123; &#39;dir&#39;: &#39;~&#x2F;.fzf&#39;, &#39;do&#39;: &#39;.&#x2F;install --all&#39; &#125;
Plug &#39;~&#x2F;my-prototype-plugin&#39;
call plug#end()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在Vim命令行模式下，使用命令 <code>:PlugInstall</code> 可安装vim配置文件中所有配置的vim插件；也可以使用 <code>PlugInstall [name ...]</code> 来指定安装某一个或某几个vim插件。</p>
<h1 id="vim-插件"><a class="header-anchor" href="#vim-插件"></a>vim 插件</h1>
<p><a href="https://zhuanlan.zhihu.com/p/58816186">VIM 插件推荐</a></p>
<p><a href="http://blog.guorongfei.com/2015/10/06/vim-plugin/">利器系列之 —— 编辑利器 Vim 之插件配置</a></p>
<p><a href="https://segmentfault.com/a/1190000014560645">https://segmentfault.com/a/1190000014560645</a></p>
<p>好几种插件：<a href="https://www.zlovezl.cn/articles/vim-plugins-cannot-live-without/">https://www.zlovezl.cn/articles/vim-plugins-cannot-live-without/</a></p>
<p><a href="https://www.jianshu.com/p/923aec861af3">https://www.jianshu.com/p/923aec861af3</a></p>
<h2 id="全局搜索插件"><a class="header-anchor" href="#全局搜索插件"></a>全局搜索插件</h2>
<p>快速grep工具目前有ack, ag, rg, pt, sift, ucg等。</p>
<h3 id="搜索全局模糊搜索"><a class="header-anchor" href="#搜索全局模糊搜索"></a>搜索全局模糊搜索</h3>
<p>目前<code>LeaderF</code>最快最准确，依赖python(2019-5评)</p>
<p>在grep结果的基础上再通过模糊匹配的方式进行二次过滤</p>
<p><strong>速度,准确度</strong>：<code>ctrlp</code> &lt; <a href="https://github.com/Yggdroot/LeaderF"><code>LeaderF</code></a></p>
<p><code>ctrlp</code> ：快速打开文件或定位某个buffer、最近使用的文件（mru）、tags（包括函数、类、变量等）；已经过时了(2019-5评)</p>
<p><code>LeaderF</code>：快速打开文件或定位某个buffer、最近使用的文件（mru）、tags（包括函数、类、变量等）、命令历史、文件中的某一行、vim的help、marks等等+跳转</p>
<p><code>fzf</code>：后端是fzf，需要另外安装</p>
<pre class="line-numbers language-none"><code class="language-none">skim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="文件内容搜索-跳转"><a class="header-anchor" href="#文件内容搜索-跳转"></a>文件内容搜索+跳转</h3>
<p><strong>速度</strong>：<code>vimgrep</code> (vim自带的全局搜搜) &lt;<code>ack.vim</code>插件 &lt;<code>ag.vim</code> 插件</p>
<p><code>ctrlsf</code> 插件：支持 ack/ag/pt/rg 四种搜索后端，支持跳转，支持异步搜索(即搜索时不影响当前编辑)</p>
<p><a href="https://blog.burntsushi.net/ripgrep/">后端的比较</a></p>
<p>推荐<code>rg</code></p>
<ul>
<li>速度和准确率: ack, pt &lt; ag &lt; rg (命令行下最快的文件内容搜索)</li>
<li>rg支持Unicode，跨linux/windows/mac平台</li>
</ul>
<p><a href="https://blog.csdn.net/archofortune/article/details/86490649">对比</a></p>
<blockquote>
<p>2019年01月15日</p>
<p>vim有很多著名的grep插件，我使用过的有ack.vim，ag.vim和ctrlsf.vim，它们应该也是目前用户最多的几个了。</p>
<p><strong>ack.vim</strong></p>
<p>起步比较早，早期后端grep工具是ack，后来也支持ag(the_silver_searcher)，pt(the_platinum_searcher)，rg(ripgrep)等工具了。它是一个比较传统的grep插件，不支持异步，要等到grep结束后才能显示结果，在大的项目中grep会卡好一阵子。它貌似也不再维护，我N久前提交的pull request还挂在那，它最近的代码更新在11个月前。</p>
<p><strong>ag.vim</strong></p>
<p>它其实是抄袭ack.vim，没错，是抄袭。在早期ack.vim还不支持ag时，它的作者在ack.vim代码的基础上稍微改了改，支持了ag。后来被ack.vim的作者给怼了，就放弃了对ag.vim的维护。目前功能上小于ack.vim。</p>
<p><strong>ctrlsf.vim</strong></p>
<p>这是国人开发的一个插件, 后端grep工具支持ack/ag/pt/rg，同时也支持异步，不过需要Vim 8.0.1039+或者NeoVim才支持异步。这个插件很好用，在我开发Leaderf rg之前一直使用的是它。</p>
</blockquote>
<blockquote>
<p>作者：Sainnhepark</p>
<p>链接：<a href="https://www.zhihu.com/question/23590572/answer/546352496">https://www.zhihu.com/question/23590572/answer/546352496</a></p>
<p>来源：知乎</p>
<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p>异步Fuzzy Finder：<br>
vim的fuzzy finder可不是只能像命令行里的fzf那样简单地fuzzy match，下面推荐的几个fuzzy finder插件你可以用它来：搜索字符串，对grep结果进行过滤(不需要其它grep插件了)，浏览和跳转tags(不需要tagbar了)，浏览、跳转以及管理buffer、files，跳转最近使用的文件(MRU)，搜索历史剪切板内容，切换color scheme，甚至浏览你的github星标版本库。</p>
<p><strong>denite.nvim</strong><br>
最高的可定制度，最高的可扩展性，最多的source，也最不好上手。依赖python。</p>
<p><strong>fzf.vim</strong><br>
开箱即用，新手友好，无需太多配置，source也足够多。但它实际上fzf的一个vim前端，并不是一个典型的vim插件，你需要安装fzf才能使用，不过也正是因为如此，它用起来非常丝滑。另外它缺乏官方文档，可定制度也较差。不依赖python。</p>
<p><strong>LeaderF</strong><br>
开箱即用，新手友好，无需太多配置。它的算法非常厉害（个人觉得只有fzy能和它比），另外它也提供了很多非常实用的选项（比如正则过滤），但是source相比前两者较少。依赖python。</p>
<p>2018.12.20<br>
最近的一个32万行代码的模糊匹配测试中，对下面几个模糊匹配工具进行了测试：<br>
leaderf, fzf, skim, ctrlp的默认matcher, denite的默认matcher，cpsm（denite和ctrlp的matcher之一）, fruzzy（denite和ctrlp的matcher之一）<br>
<strong>按匹配精准度和匹配速度来衡量它们的性能的话，leaderf的表现是最好的。</strong><br>
Note: leaderf的关键部分是用c写的</p>
<p>另外，关于ctrlp。ctrlp已经有了异步模式，但是它的性能和leaderf, fzf不在一个档次，并且群里有大佬说它的异步还有很多bug。<br>
如果你的vim没有python支持，个人推荐用fzf</p>
</blockquote>
<h2 id="搜索后端的安装-卸载方法"><a class="header-anchor" href="#搜索后端的安装-卸载方法"></a>搜索后端的安装/卸载方法</h2>
<h3 id="ag-又名-the-silver-searcher"><a class="header-anchor" href="#ag-又名-the-silver-searcher"></a>ag (又名 the_silver_searcher)</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># mac 安装 ag</span>
brew <span class="token function">install</span> the_silver_searcher
<span class="token comment"># mac 卸载 ag</span>
brew uninstall the_silver_searcher<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="ack"><a class="header-anchor" href="#ack"></a>ack</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># mac 安装 ack</span>
brew <span class="token function">install</span> ack
<span class="token comment"># mac 卸载 ack</span>
brew uninstall ack<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="rg"><a class="header-anchor" href="#rg"></a>rg</h3>
<p>参加 <a href="https://github.com/BurntSushi/ripgrep#installation">安装rg的方法</a></p>
<ul>
<li>mac</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># mac 安装 rg</span>
brew <span class="token function">install</span> ripgrep
<span class="token comment"># mac 卸载 rg</span>
brew uninstall ripgrep<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>
<p>Unbuntu</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ripgrep<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若报错曰apt没有找到ripgrep包</p>
<p>则先执行</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> add-apt-repository ppa:x4121/ripgrep
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ripgrep<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><strong>Debian</strong> 及其派生( 如 <strong>Ubuntu</strong>)</p>
</li>
</ul>
<p><a href="https://gist.github.com/kostaz/6e0cf1eee35a34cd6589ec15b58e682c">https://gist.github.com/kostaz/6e0cf1eee35a34cd6589ec15b58e682c</a></p>
<p><a href="https://segmentfault.com/a/1190000016170184">https://segmentfault.com/a/1190000016170184</a></p>
<p><a href="https://www.hi-linux.com/posts/29245.html">推荐一款命令行下最快的文本搜索神器 RipGrep</a></p>
<pre class="line-numbers language-none"><code class="language-none">curl -LO https:&#x2F;&#x2F;github.com&#x2F;BurntSushi&#x2F;ripgrep&#x2F;releases&#x2F;download&#x2F;11.0.1&#x2F;ripgrep_11.0.1_amd64.deb
sudo dpkg -i ripgrep_11.0.1_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>上述release最新版本见https://github.com/BurntSushi/ripgrep/releases</p>
<h2 id="LeaderF"><a class="header-anchor" href="#LeaderF"></a>LeaderF</h2>
<p><a href="https://www.v2ex.com/t/388940">https://www.v2ex.com/t/388940</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/53680291">https://zhuanlan.zhihu.com/p/53680291</a></p>
<p><a href="https://github.com/Yggdroot/LeaderF">https://github.com/Yggdroot/LeaderF</a></p>
<p>使用教程<a href="http://www.manongjc.com/article/94716.html">http://www.manongjc.com/article/94716.html</a></p>
<p>gtags功能：<a href="https://learnku.com/articles/28249">https://learnku.com/articles/28249</a></p>
<ul>
<li>MAC上面使用homebrew安装gtags</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">brew install global<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h6 id="1-LeaderF-介绍"><a class="header-anchor" href="#1-LeaderF-介绍"></a>1. LeaderF 介绍</h6>
<p><a href="https://github.com/Yggdroot/LeaderF/blob/master/CHANGELOG.md">LeaderF</a> 是一个问世很长时间的 Vim 插件了，可是我直到最近才发现它，大有相见恨晚之感。它的基本功能是提供了文件、buffers、mrus（most recently used）、tags 的检索，速度很快且是异步查找。检索过程中支持正则表达式、模糊匹配，并可以实时的过滤结果。</p>
<p>LeaderF 是用 Python 实现的，因此需要 Vim 支持 Python Feature。可以通过 vim –version 来查看是否支持 Python。</p>
<h6 id="3-常用功能"><a class="header-anchor" href="#3-常用功能"></a>3. 常用功能</h6>
<ul>
<li>检索文件：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&lt;leader&gt;f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>检索 buffer：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&lt;leader&gt;b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>在 LeaderF 运行起来以后（在正常检索的模式下），可以执行下面的一些操作：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&lt;C-C&gt;, &lt;ESC&gt; : 退出 LeaderF.
&lt;C-R&gt; : 在模糊匹配和正则式匹配之间切换
&lt;C-F&gt; : 在全路径搜索和名字搜索之间切换
&lt;Tab&gt; : 在检索模式和选择模式之间切换
&lt;C-J&gt;, &lt;C-K&gt; : 在结果列表里选择
&lt;C-X&gt; : 在水平窗口打开
&lt;C-]&gt; : 在垂直窗口打开
&lt;C-T&gt; : 在新标签打开
&lt;C-P&gt; : 预览结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>在 LeaderF 检索文件的模式下，如果按 Tab 进入选择列表之后，会有其他的快捷键，可以通过 F1 来查看。</li>
<li>集成 ripgrep 进行检索是 LeaderF 很强大的一个功能，rg 是异步的，比 vimgrep 要好很多。而且，对结果可以进行二次过滤：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">:LeaderfRgRecall 显示上次 rg 的结果
:Leaderf rg 实时检索
:Leaderf rg [option] 后面的 [option] 和 rg 的语法保持一致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h6 id="4-参考资料"><a class="header-anchor" href="#4-参考资料"></a>4. 参考资料</h6>
<ul>
<li>可以在 vim 中使用 :help LeaderF 来查看其帮助文档。</li>
<li><a href="https://vim-china.org/topic/24/vim%E7%9A%84grep%E6%8F%92%E4%BB%B6-leaderf-rg-grep%E5%92%8C%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%BB%93%E5%90%88">LeaderF rg 介绍</a></li>
<li><a href="https://github.com/BurntSushi/ripgrep/releases">ripgrep</a></li>
<li><a href="https://docs.rs/globset/0.3.0/globset/#syntax">rg 路径匹配语法</a>：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">Standard Unix-style glob syntax is supported:

? matches any single character. (If the literal_separator option is enabled, then ? can never match a path separator.)
* matches zero or more characters. (If the literal_separator option is enabled, then * can never match a path separator.)
** recursively matches directories but are only legal in three situations. First, if the glob starts with **&#x2F;, then it matches all directories. For example, **&#x2F;foo matches foo and bar&#x2F;foo but not foo&#x2F;bar. Secondly, if the glob ends with &#x2F;**, then it matches all sub-entries. For example, foo&#x2F;** matches foo&#x2F;a and foo&#x2F;a&#x2F;b, but not foo. Thirdly, if the glob contains &#x2F;**&#x2F; anywhere within the pattern, then it matches zero or more directories. Using ** anywhere else is illegal (N.B. the glob ** is allowed and means &quot;match everything&quot;).
&#123;a,b&#125; matches a or b where a and b are arbitrary glob patterns. (N.B. Nesting &#123;...&#125; is not currently allowed.)
[ab] matches a or b where a and b are characters. Use [!ab] to match any character except for a and b.
Metacharacters such as * and ? can be escaped with character class notation. e.g., [*] matches *.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="git插件"><a class="header-anchor" href="#git插件"></a>git插件</h2>
<p><a href="https://jakobgm.com/posts/vim/git-integration/">vim的git插件比较</a></p>
<h3 id="Vim-Gitgutter"><a class="header-anchor" href="#Vim-Gitgutter"></a>Vim Gitgutter</h3>
<p><a href="http://developer.51cto.com/art/201902/592448.htm">http://developer.51cto.com/art/201902/592448.htm</a></p>
<p><a href="https://github.com/airblade/vim-gitgutter">Vim Gitgutter</a> 插件对使用 Git 作为版本控制工具的人来说非常有用。它会在 Vim 的行号列旁显示 <code>git diff</code> 的差异标记。假设你有如下已提交过的代码：</p>
<p>另外，Vim Gitgutter 允许你用 <code>[c</code> 和 <code>]c</code> 在多个有修改的块之间跳转，甚至可以用 <code>Leader+hs</code> 来暂存某个变更集。</p>
<h3 id="Fugitive-vim-教程"><a class="header-anchor" href="#Fugitive-vim-教程"></a>Fugitive.vim 教程</h3>
<p><a href="http://vimcasts.org/episodes/fugitive-vim-working-with-the-git-index/">http://vimcasts.org/episodes/fugitive-vim-working-with-the-git-index/</a></p>
<p><a href="https://www.vim.org/scripts/script.php?script_id=2975">Vim Fugitive</a> 是另一个将 Git 工作流集成到 Vim 中的超棒插件。它对 Git 做了一些封装，可以让你在 Vim 里直接执行 Git 命令并将结果集成在 Vim 界面里。这个插件有超多的特性，更多信息请访问它的 <a href="https://github.com/tpope/vim-fugitive">GitHub</a> 项目页面。</p>
<p>这里有一个使用 Vim Fugitive 的基础 Git 工作流示例。设想我们已经对下面的 Go 代码做出修改，你可以用 <code>:Gblame</code> 调用 <code>git blame</code> 来查看每行最后的提交信息：</p>
<h2 id="nerdtree-git-plugin"><a class="header-anchor" href="#nerdtree-git-plugin"></a>nerdtree-git-plugin</h2>
<p>在目录树中显示 git 状态，依赖于 <a href="https://www.dreamxu.com/books/vim/plugin/nerdtree.html">The NERD Tree</a></p>
<p>可改变显示符号：</p>
<pre class="line-numbers language-none"><code class="language-none">let g:NERDTreeIndicatorMapCustom &#x3D; &#123;
\ &quot;Modified&quot;  : &quot;✹&quot;,
\ &quot;Staged&quot;    : &quot;✚&quot;,
\ &quot;Untracked&quot; : &quot;✭&quot;,
\ &quot;Renamed&quot;   : &quot;➜&quot;,
\ &quot;Unmerged&quot;  : &quot;═&quot;,
\ &quot;Deleted&quot;   : &quot;✖&quot;,
\ &quot;Dirty&quot;     : &quot;✗&quot;,
\ &quot;Clean&quot;     : &quot;✔︎&quot;,
\ &quot;Unknown&quot;   : &quot;?&quot;
\ &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Surround"><a class="header-anchor" href="#Surround"></a>Surround</h2>
<p>使用教程 <a href="https://gist.github.com/wilon/ac1fc66f4a79e7b0c161c80877c75c94">https://gist.github.com/wilon/ac1fc66f4a79e7b0c161c80877c75c94</a></p>
<h2 id="YCM编译报错"><a class="header-anchor" href="#YCM编译报错"></a>YCM编译报错</h2>
<h3 id="Your-C-compiler-does-NOT-fully-support-C-17"><a class="header-anchor" href="#Your-C-compiler-does-NOT-fully-support-C-17"></a>Your C++ compiler does NOT fully support C++17.</h3>
<p><a href="https://blog.csdn.net/u013187057/article/details/80116782">ubuntu下gcc和g++编译器修改</a></p>
<p>Ubuntu18, 2020-11-30, 编译ycm (哈希 4496153, 2020-11-27) 时报错如下，</p>
<pre class="line-numbers language-none"><code class="language-none">-- Detecting C compile features - done
-- Check for working CXX compiler: &#x2F;usr&#x2F;bin&#x2F;c++
-- Check for working CXX compiler: &#x2F;usr&#x2F;bin&#x2F;c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
CMake Error at CMakeLists.txt:232 (message):
  Your C++ compiler does NOT fully support C++17.


-- Configuring incomplete, errors occurred!
See also &quot;&#x2F;tmp&#x2F;ycm_build__rb87zu9&#x2F;CMakeFiles&#x2F;CMakeOutput.log&quot;.
ERROR: the build failed.

NOTE: it is *highly* unlikely that this is a bug but rather
that this is a problem with the configuration of your system
or a missing dependency. Please carefully read CONTRIBUTING.md
and if you&#39;re sure that it is a bug, please raise an issue on the
issue tracker, including the entire output of this script
and the invocation line used to run it.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>原因: gcc和g++版本太低, 对策: 升级到至少8.0以上</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">which</span> gcc<span class="token punctuation">;</span> <span class="token function">ls</span> -l <span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> gcc<span class="token variable">)</span></span>
<span class="token function">which</span> g++<span class="token punctuation">;</span> <span class="token function">ls</span> -l <span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> g++<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>/usr/bin/gcc<br>
lrwxrwxrwx 1 root root 21 Nov 30 20:23 /usr/bin/gcc -&gt; /etc/bin/gcc-7<br>
/usr/bin/g++<br>
lrwxrwxrwx 1 root root 21 Nov 30 20:23 /usr/bin/g++ -&gt; /etc/bin/gcc-7</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc –version
g++ –version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0<br>
Copyright © 2017 Free Software Foundation, Inc.<br>
This is free software; see the source for copying conditions.  There is NO<br>
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</p>
<p>g+±7 (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0<br>
Copyright © 2017 Free Software Foundation, Inc.<br>
This is free software; see the source for copying conditions.  There is NO<br>
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</p>
</blockquote>
<p>安装高版本的gcc和g++</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get install gcc-8 g++-8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>更换gcc和g++的链接</p>
<p><a href="https://blog.csdn.net/weixin_43512663/article/details/104475199?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-3.control">linux 软件版本切换命令 update-alternatives 使用心得</a></p>
<p><a href="https://blog.csdn.net/u013187057/article/details/84996127">ubuntu系统使用update-alternatives 管理多版本gcc/g++</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 <span class="token number">40</span> --slave /usr/bin/g++ g++ /usr/bin/g++-7
<span class="token function">sudo</span> update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8  <span class="token number">50</span> --slave /usr/bin/g++ g++ /usr/bin/g++-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>而后  /usr/bin/gcc -&gt; /etc/alternatives/gcc -&gt; /usr/bin/gcc-8, /usr/bin/g++ -&gt; /etc/alternatives/g++ -&gt; /usr/bin/g+±8</p>
<p>编译ycm能成功</p>
<h3 id="报错cregex-does-not-appear-to-contain-CMakeLists-txt"><a class="header-anchor" href="#报错cregex-does-not-appear-to-contain-CMakeLists-txt"></a>报错<code>cregex&quot; does not appear to contain CMakeLists.txt.</code></h3>
<p>编译ycm时报错如下，但依旧可以使用ycm，可以无需按tab就显示自动补全下拉菜单</p>
<pre class="line-numbers language-none"><code class="language-none">Searching Python 3.7 libraries...
Found Python library: &#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;lib&#x2F;libpython3.7m.so
Found Python headers folder: &#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;include&#x2F;python3.7m
-- The C compiler identification is GNU 5.4.0
-- The CXX compiler identification is GNU 5.4.0
-- Check for working C compiler: &#x2F;usr&#x2F;bin&#x2F;cc
-- Check for working C compiler: &#x2F;usr&#x2F;bin&#x2F;cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: &#x2F;usr&#x2F;bin&#x2F;c++
-- Check for working CXX compiler: &#x2F;usr&#x2F;bin&#x2F;c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found PythonLibs: &#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;lib&#x2F;libpython3.7m.so (found suitable version &quot;3.7.3&quot;, minimum required is &quot;3.5&quot;)
-- NOT using libclang, no semantic completion for C&#x2F;C++&#x2F;ObjC will be available
-- NOT using clang-tidy for static analysis.
-- Configuring done
-- Generating done
-- Build files have been written to: &#x2F;tmp&#x2F;ycm_build_mdfikwuq
Scanning dependencies of target BoostParts
[  2%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;filesystem&#x2F;src&#x2F;unique_path.cpp.o
[  4%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;filesystem&#x2F;src&#x2F;path_traits.cpp.o
[  7%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;filesystem&#x2F;src&#x2F;portability.cpp.o
[  9%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;filesystem&#x2F;src&#x2F;operations.cpp.o
[ 11%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;filesystem&#x2F;src&#x2F;windows_file_codecvt.cpp.o
[ 14%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;filesystem&#x2F;src&#x2F;codecvt_error_category.cpp.o
[ 16%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;filesystem&#x2F;src&#x2F;utf8_codecvt_facet.cpp.o
[ 19%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;filesystem&#x2F;src&#x2F;path.cpp.o
[ 21%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;regex&#x2F;src&#x2F;static_mutex.cpp.o
[ 23%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;regex&#x2F;src&#x2F;regex_traits_defaults.cpp.o
[ 26%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;regex&#x2F;src&#x2F;regex_debug.cpp.o
[ 30%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;regex&#x2F;src&#x2F;posix_api.cpp.o
[ 30%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;regex&#x2F;src&#x2F;cregex.cpp.o
[ 33%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;regex&#x2F;src&#x2F;cpp_regex_traits.cpp.o
[ 35%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;regex&#x2F;src&#x2F;winstances.cpp.o
[ 38%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;regex&#x2F;src&#x2F;instances.cpp.o
[ 40%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;regex&#x2F;src&#x2F;usinstances.cpp.o
[ 42%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;regex&#x2F;src&#x2F;c_regex_traits.cpp.o
[ 45%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;regex&#x2F;src&#x2F;wc_regex_traits.cpp.o
[ 47%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;regex&#x2F;src&#x2F;regex_raw_buffer.cpp.o
[ 50%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;regex&#x2F;src&#x2F;fileiter.cpp.o
[ 52%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;regex&#x2F;src&#x2F;regex.cpp.o
[ 54%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;regex&#x2F;src&#x2F;icu.cpp.o
[ 57%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;regex&#x2F;src&#x2F;wide_posix_api.cpp.o
[ 59%] Building CXX object BoostParts&#x2F;CMakeFiles&#x2F;BoostParts.dir&#x2F;libs&#x2F;regex&#x2F;src&#x2F;w32_regex_traits.cpp.o
[ 61%] Linking CXX static library libBoostParts.a
[ 61%] Built target BoostParts
Scanning dependencies of target ycm_core
[ 64%] Building CXX object ycm&#x2F;CMakeFiles&#x2F;ycm_core.dir&#x2F;Word.cpp.o
[ 66%] Building CXX object ycm&#x2F;CMakeFiles&#x2F;ycm_core.dir&#x2F;PythonSupport.cpp.o
[ 71%] Building CXX object ycm&#x2F;CMakeFiles&#x2F;ycm_core.dir&#x2F;CodePoint.cpp.o
[ 71%] Building CXX object ycm&#x2F;CMakeFiles&#x2F;ycm_core.dir&#x2F;Character.cpp.o
[ 73%] Building CXX object ycm&#x2F;CMakeFiles&#x2F;ycm_core.dir&#x2F;Candidate.cpp.o
[ 76%] Building CXX object ycm&#x2F;CMakeFiles&#x2F;ycm_core.dir&#x2F;versioning.cpp.o
[ 78%] Building CXX object ycm&#x2F;CMakeFiles&#x2F;ycm_core.dir&#x2F;CodePointRepository.cpp.o
[ 80%] Building CXX object ycm&#x2F;CMakeFiles&#x2F;ycm_core.dir&#x2F;IdentifierCompleter.cpp.o
[ 83%] Building CXX object ycm&#x2F;CMakeFiles&#x2F;ycm_core.dir&#x2F;CandidateRepository.cpp.o
[ 85%] Building CXX object ycm&#x2F;CMakeFiles&#x2F;ycm_core.dir&#x2F;Utils.cpp.o
[ 88%] Building CXX object ycm&#x2F;CMakeFiles&#x2F;ycm_core.dir&#x2F;ycm_core.cpp.o
[ 90%] Building CXX object ycm&#x2F;CMakeFiles&#x2F;ycm_core.dir&#x2F;IdentifierDatabase.cpp.o
[ 92%] Building CXX object ycm&#x2F;CMakeFiles&#x2F;ycm_core.dir&#x2F;CharacterRepository.cpp.o
[ 95%] Building CXX object ycm&#x2F;CMakeFiles&#x2F;ycm_core.dir&#x2F;IdentifierUtils.cpp.o
[ 97%] Building CXX object ycm&#x2F;CMakeFiles&#x2F;ycm_core.dir&#x2F;Result.cpp.o
[100%] Linking CXX shared library &#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;app_config&#x2F;vim_plug&#x2F;YouCompleteMe&#x2F;third_party&#x2F;ycmd&#x2F;ycm_core.so
[100%] Built target ycm_core
CMake Error: The source directory &quot;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;app_config&#x2F;vim_plug&#x2F;YouCompleteMe&#x2F;third_party&#x2F;ycmd&#x2F;third_party&#x2F;cregex&quot; does not appear to contain CMakeLists.txt.
Specify --help for usage, or press the help button on the CMake GUI.
ERROR: the build failed.

NOTE: it is *highly* unlikely that this is a bug but rather
that this is a problem with the configuration of your system
or a missing dependency. Please carefully read CONTRIBUTING.md
and if you&#39;re sure that it is a bug, please raise an issue on the
issue tracker, including the entire output of this script
and the invocation line used to run it.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这是因为子模块<code>third_party/ycmd/third_party/cregex</code>被改动了，里面没有包含<code>CMakeLists.txt.</code>，故而无法编译。</p>
<p>对策：重新<code>git clone</code> <code>cregex</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/.vim/plugged/YouCompleteMe
<span class="token function">rm</span> -rf third_party/ycmd/third_party/cregex
<span class="token function">git</span> clone https://github.com/ycm-core/regex.git third_party/ycmd/third_party/cregex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>其中<code>https://github.com/ycm-core/regex.git</code> 取自 <code>~/.vim/vim_plug/YouCompleteMe/third_party/ycmd/.gitmodules</code>中的<code>third_party/cregex</code> 对应的url。</p>
<p>而后手动编译ycm会成功</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./install.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="报错-Unexpected-exit-code-11"><a class="header-anchor" href="#报错-Unexpected-exit-code-11"></a>报错 <code>Unexpected exit code -11</code></h3>
<p>vim开启立即底栏报错</p>
<pre class="line-numbers language-none"><code class="language-none">The ycmd server SHUT DOWN (restart with &#39;:YcmRestartServer&#39;). Unexpected exit code -11. Type &#39;:YcmToggleLogs ycmd_50129_stderr_riih2wlh.log&#39; to check the logs.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>且无法使用ycm，这是因为conda安装的python 常常不兼容 YCM所用的预编译 libclang</p>
<p><a href="https://github.com/ycm-core/YouCompleteMe#ycm-does-not-work-with-my-anaconda-python-setup">对策</a>：</p>
<ul>
<li>在<code>YouCompleteMe/</code>下，用非conda的python进行手动编译</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">[非conda的python] install.py
# 如 &#x2F;usr&#x2F;bin&#x2F;python install.py # mac系统自带的python2
# 或 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;python3 install.py  # 2020年2月开始, YCM已经报警, 即将不支持python2编译, 故用此python3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>此python3此homebrew所装</p>
<p><code>/usr/local/bin/python3</code> -&gt;</p>
<p><code>/usr/local/Cellar/python/3.7.3/bin/python3</code> -&gt;</p>
<p><code>/usr/local/Frameworks/Python.framework/Versions/3.7/bin/python3</code> -&gt;</p>
<p><code>/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/bin/python3</code> -&gt;</p>
<p><code>/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/bin/python3.7</code> -&gt;</p>
<p>其中 <code>/usr/local/Frameworks/Python.framework/Versions</code> -&gt; <code>/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7</code></p>
<ul>
<li>若必想用conda的python来编辑，则需在<code>.ycm_extra_conf.py</code> 中任意处添加以下代码，来指定<code>interpreter_path</code> 为conda的python，如</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">def Settings(**kwargs):
    return &#123;
        &#39;interpreter_path&#39;: &#39;&#x2F;path&#x2F;to&#x2F;anaconda&#x2F;python&#39;
    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>而后在<code>./install.py</code>以编译。</p>
<p>详见 <a href="https://github.com/ycm-core/YouCompleteMe#python-semantic-completion">the Python Semantic Completion section</a></p>
<h3 id="YouCompleteMe-插件-MacOS-安装"><a class="header-anchor" href="#YouCompleteMe-插件-MacOS-安装"></a>YouCompleteMe 插件 MacOS 安装</h3>
<p><a href="https://www.jianshu.com/p/edc4bbed92ca">https://www.jianshu.com/p/edc4bbed92ca</a></p>
<pre class="line-numbers language-none"><code class="language-none">brew install cmake<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后在 <code>/.vimrc</code>文件中加入</p>
<pre class="line-numbers language-none"><code class="language-none">Plug &#39;Valloric&#x2F;YouCompleteMe&#39;, &#123;&#39;do&#39;:&#39;python3 install.py&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="手动编译ycm"><a class="header-anchor" href="#手动编译ycm"></a>手动编译ycm</h3>
<ul>
<li>mac上</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">brew install cmake
.&#x2F;install.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>linux上</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get install cmake
sudo apt-get install build-essential
sudo apt-get install python python-dev
apt-get install llvm-3.9 clang-3.9 libclang-3.9-dev libboost-all-dev # 如果不需要 C 家族的语义化补全，则可跳过这一步
.&#x2F;install.py
python3 .&#x2F;install.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="报错CMake-Error-cmake-61-message"><a class="header-anchor" href="#报错CMake-Error-cmake-61-message"></a>报错<code>CMake Error; cmake:61 (message):</code></h3>
<h4 id="环境"><a class="header-anchor" href="#环境"></a>环境</h4>
<p>时间：2019-12-7</p>
<p>系统环境</p>
<ul>
<li>服务器：实验室集群的 <code>cpu3</code></li>
<li>系统：Ubuntu 14.04.6 LTS</li>
<li>cmake：<code>/usr/bin/cmake -v</code>  cmake version 2.8.12.2</li>
<li>gcc: <code>/usr/bin/gcc -v</code> gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.4)</li>
<li>g++: <code>/usr/bin/g++ -v</code> gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.4)</li>
<li><code>apt list --installed build-essential</code>: build-essential/trusty,now 11.6ubuntu6 amd64 [installed]</li>
<li><code>apt list --installed python</code>:  python/trusty,now 2.7.5-5ubuntu3 amd64 [installed], Python 2.7.6</li>
<li><code>apt list --installed python-dev</code> python-dev/trusty,now 2.7.5-5ubuntu3 amd64 [installed]</li>
</ul>
<p>conda环境：在<code>base</code>环境，仅安装了python</p>
<ul>
<li>python: <code>/home/haoyu/ENV/localENV/anaconda3/bin/python -v</code>: Python 3.7.3</li>
</ul>
<h4 id="报错"><a class="header-anchor" href="#报错"></a>报错</h4>
<p>在<code>base</code>环境，执行<code>~/.vim/plugged/YouCompleteMe/install.pys</code> 手动编译ycm失败，报错如下</p>
<pre class="line-numbers language-none"><code class="language-none">Searching Python 3.6 libraries...
Found Python library: &#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;lib&#x2F;libpython3.6m.so
Found Python headers folder: &#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;include&#x2F;python3.6m
-- The C compiler identification is GNU 4.8.5
-- The CXX compiler identification is GNU 4.8.5
-- Check for working C compiler: &#x2F;usr&#x2F;bin&#x2F;cc
-- Check for working C compiler: &#x2F;usr&#x2F;bin&#x2F;cc -- broken
CMake Error at &#x2F;usr&#x2F;share&#x2F;cmake-2.8&#x2F;Modules&#x2F;CMakeTestCCompiler.cmake:61 (message):
The C compiler &quot;&#x2F;usr&#x2F;bin&#x2F;cc&quot; is not able to compile a simple test program.

It fails with the following output:

Change Dir: &#x2F;tmp&#x2F;ycm_build_i9zudbsb&#x2F;CMakeFiles&#x2F;CMakeTmp



Run Build Command:&#x2F;usr&#x2F;bin&#x2F;make &quot;cmTryCompileExec2070396260&#x2F;fast&quot;

&#x2F;usr&#x2F;bin&#x2F;make -f CMakeFiles&#x2F;cmTryCompileExec2070396260.dir&#x2F;build.make
CMakeFiles&#x2F;cmTryCompileExec2070396260.dir&#x2F;build

make[1]: Entering directory &#96;&#x2F;tmp&#x2F;ycm_build_i9zudbsb&#x2F;CMakeFiles&#x2F;CMakeTmp&#39;

&#x2F;usr&#x2F;bin&#x2F;cmake -E cmake_progress_report
&#x2F;tmp&#x2F;ycm_build_i9zudbsb&#x2F;CMakeFiles&#x2F;CMakeTmp&#x2F;CMakeFiles 1

Building C object
CMakeFiles&#x2F;cmTryCompileExec2070396260.dir&#x2F;testCCompiler.c.o

&#x2F;usr&#x2F;bin&#x2F;cc -o CMakeFiles&#x2F;cmTryCompileExec2070396260.dir&#x2F;testCCompiler.c.o
-c &#x2F;tmp&#x2F;ycm_build_i9zudbsb&#x2F;CMakeFiles&#x2F;CMakeTmp&#x2F;testCCompiler.c

Linking C executable cmTryCompileExec2070396260

&#x2F;usr&#x2F;bin&#x2F;cmake -E cmake_link_script
CMakeFiles&#x2F;cmTryCompileExec2070396260.dir&#x2F;link.txt --verbose&#x3D;1

&#x2F;usr&#x2F;bin&#x2F;cc CMakeFiles&#x2F;cmTryCompileExec2070396260.dir&#x2F;testCCompiler.c.o -o
cmTryCompileExec2070396260 -rdynamic

&#x2F;usr&#x2F;bin&#x2F;ld:
&#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;x86_64-linux-gnu&#x2F;4.8&#x2F;..&#x2F;..&#x2F;..&#x2F;x86_64-linux-gnu&#x2F;crti.o:
unrecognized relocation (\0x2a) in section &#96;.init&#39;

&#x2F;usr&#x2F;bin&#x2F;ld: final link failed: Bad value

collect2: error: ld returned 1 exit status

make[1]: Leaving directory &#96;&#x2F;tmp&#x2F;ycm_build_i9zudbsb&#x2F;CMakeFiles&#x2F;CMakeTmp&#39;

make[1]: *** [cmTryCompileExec2070396260] Error 1

make: *** [cmTryCompileExec2070396260&#x2F;fast] Error 2





CMake will not be able to correctly generate this project.
Call Stack (most recent call first):
CMakeLists.txt:26 (project)


-- Configuring incomplete, errors occurred!
See also &quot;&#x2F;tmp&#x2F;ycm_build_i9zudbsb&#x2F;CMakeFiles&#x2F;CMakeOutput.log&quot;.
See also &quot;&#x2F;tmp&#x2F;ycm_build_i9zudbsb&#x2F;CMakeFiles&#x2F;CMakeError.log&quot;.
ERROR: the build failed.

NOTE: it is *highly* unlikely that this is a bug but rather
that this is a problem with the configuration of your system
or a missing dependency. Please carefully read CONTRIBUTING.md
and if you&#39;re sure that it is a bug, please raise an issue on the
issue tracker, including the entire output of this script
and the invocation line used to run it.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这是因为，系统自带的<code>gcc</code>损坏。在没有sudo权限、或不想改动系统<code>gcc</code>的情况下，建议采用此策略。</p>
<h4 id="对策：创conda环境编译ycm"><a class="header-anchor" href="#对策：创conda环境编译ycm"></a>对策：创conda环境编译ycm</h4>
<p>此策略不仅能解决上述报错，还能应对各种ycm编译失败的问题。</p>
<h5 id="创建conda环境用于编译ycm"><a class="header-anchor" href="#创建conda环境用于编译ycm"></a>创建conda环境用于编译ycm</h5>
<p>创建build_ycm环境</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create -n build_ycm <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.8</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>进入build_ycm环境</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda activate build_ycm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><a href="https://anaconda.org/anaconda/cmake">anacoda安装cmake</a></p>
<pre class="line-numbers language-none"><code class="language-none">conda install -c anaconda cmake<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>此命令的源的cmake会更新，我当时装的是cmake 3.14.0</p>
<p>执行<code>which cmake</code>会返回<code>/home/haoyu/ENV/localENV/anaconda3/envs/build_ycm/bin/cmake</code></p>
<p><a href="https://anaconda.org/anaconda/gxx_linux-64">conda安装g++及gcc - for linux 64位</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> -c anaconda gxx_linux-64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>此命令的源的gcc/g<ins>会更新，我当时装的是gcc 7.3.0/g</ins> 7.3.0</p>
<p>此时，虽然<code>which gcc或g++</code> 返回的是<code>/usr/bin/gcc或g++</code>，但在编译时却实际用conda的gcc与g++（位于<code>/home/haoyu/ENV/localENV/anaconda3/envs/build_ycm/bin/x86_64-conda_cos6-linux-gnu-gcc或g++</code>）</p>
<h5 id="开启conda的gcc和g"><a class="header-anchor" href="#开启conda的gcc和g"></a>开启conda的gcc和g++</h5>
<p>根据<a href="https://stackoverflow.com/questions/53030539/conda-gcc-does-not-replace-system-gcc">参考</a>，需要执行以下代码，但我实际操作中发现这一步可以不用</p>
<p>退出然后重新进入build_ycm环境，以开启conda的gcc和g++</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda deactivate
<span class="token builtin class-name">export</span> <span class="token assign-left variable">CONDA_BUILD</span><span class="token operator">=</span><span class="token number">1</span>
conda activate build_ycm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>会输出</p>
<pre class="line-numbers language-none"><code class="language-none">INFO: activate-binutils_linux-64.sh made the following environmental changes:
+ADDR2LINE&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-addr2line
+AR&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-ar
+AS&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-as
+CXXFILT&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-c++filt
+ELFEDIT&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-elfedit
+GPROF&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-gprof
+HOST&#x3D;x86_64-conda_cos6-linux-gnu
+LD_GOLD&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-ld.gold
+LD&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-ld
+NM&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-nm
+OBJCOPY&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-objcopy
+OBJDUMP&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-objdump
+RANLIB&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-ranlib
+READELF&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-readelf
+SIZE&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-size
+STRINGS&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-strings
+STRIP&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-strip
INFO: activate-gcc_linux-64.sh made the following environmental changes:
+CC&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-cc
+CFLAGS&#x3D;-march&#x3D;nocona -mtune&#x3D;haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -I&#x2F;include -fdebug-prefix-map&#x3D;&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;conda&#x2F;- -fdebug-prefix-map&#x3D;&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;conda-prefix
+CMAKE_PREFIX_PATH&#x3D;::&#x2F;x86_64-conda_cos6-linux-gnu&#x2F;sysroot&#x2F;usr
+_CONDA_PYTHON_SYSCONFIGDATA_NAME&#x3D;_sysconfigdata_x86_64_conda_cos6_linux_gnu
+CPPFLAGS&#x3D;-DNDEBUG -D_FORTIFY_SOURCE&#x3D;2 -O2 -I&#x2F;include
+CPP&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-cpp
+DEBUG_CFLAGS&#x3D;-march&#x3D;nocona -mtune&#x3D;haswell -ftree-vectorize -fPIC -fstack-protector-all -fno-plt -Og -g -Wall -Wextra -fvar-tracking-assignments -ffunction-sections -pipe -I&#x2F;include -fdebug-prefix-map&#x3D;&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;conda&#x2F;- -fdebug-prefix-map&#x3D;&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;conda-prefix
+DEBUG_CPPFLAGS&#x3D;-D_DEBUG -D_FORTIFY_SOURCE&#x3D;2 -Og -I&#x2F;include
+GCC_AR&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-gcc-ar
+GCC&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-gcc
+GCC_NM&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-gcc-nm
+GCC_RANLIB&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-gcc-ranlib
+LDFLAGS&#x3D;-Wl,-O2 -Wl,--sort-common -Wl,--as-needed -Wl,-z,relro -Wl,-z,now -Wl,--disable-new-dtags -Wl,--gc-sections -Wl,-rpath,&#x2F;lib -Wl,-rpath-link,&#x2F;lib -L&#x2F;lib
INFO: activate-gxx_linux-64.sh made the following environmental changes:
+CXXFLAGS&#x3D;-fvisibility-inlines-hidden -std&#x3D;c++17 -fmessage-length&#x3D;0 -march&#x3D;nocona -mtune&#x3D;haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -I&#x2F;include -fdebug-prefix-map&#x3D;&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;conda&#x2F;- -fdebug-prefix-map&#x3D;&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;conda-prefix
+CXX&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-c++
+DEBUG_CXXFLAGS&#x3D;-fvisibility-inlines-hidden -std&#x3D;c++17 -fmessage-length&#x3D;0 -march&#x3D;nocona -mtune&#x3D;haswell -ftree-vectorize -fPIC -fstack-protector-all -fno-plt -Og -g -Wall -Wextra -fvar-tracking-assignments -ffunction-sections -pipe -I&#x2F;include -fdebug-prefix-map&#x3D;&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;conda&#x2F;- -fdebug-prefix-map&#x3D;&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;conda-prefix
+GXX&#x3D;&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;localENV&#x2F;anaconda3&#x2F;envs&#x2F;build_ycm&#x2F;bin&#x2F;x86_64-conda_cos6-linux-gnu-g++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时<code>which gcc或g++</code> 依旧返回的是<code>/usr/bin/gcc或g++</code>，</p>
<h5 id="编译ycm"><a class="header-anchor" href="#编译ycm"></a>编译ycm</h5>
<p>开始编译</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/.vim/plugged/YouCompleteMe
./install.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h5 id="测试"><a class="header-anchor" href="#测试"></a>测试</h5>
<p>然后回到conda的base环境</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda decativate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装neovim</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> neovim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>测试neovim上是否能使用ycm</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">neovim <span class="token operator">&lt;</span>test-file.sh<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>输入一些内容，看看是否能不按tab就自动补全，若能则ycm编译成功。我通过上法成功了。</p>
<h3 id="升级vim"><a class="header-anchor" href="#升级vim"></a>升级vim</h3>
<h4 id="vim版本太老会出现的问题"><a class="header-anchor" href="#vim版本太老会出现的问题"></a>vim版本太老会出现的问题</h4>
<h5 id="开启vim时报错"><a class="header-anchor" href="#开启vim时报错"></a>开启<code>vim</code>时报错</h5>
<ul>
<li>Python (2.7.1+ or 3.4+)</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">YouCompleteMe unavailable: requires Vim compiled with Python (2.7.1+ or 3.4+) support.
UltiSnips requires py &gt;&#x3D; 2.7 or py3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>是因为当前用的(n)vim版本不支持python2与python3。</p>
<p>vim的判断方法：执行<code>vim --version</code> ，显示有<code>-python</code> 和 <code>-python3</code>（减号表示不支持，加号表示支持）, 则皆不支持。</p>
<ul>
<li>Python (3.6.0+)</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">YouCompleteMe unavailable: requires Vim compiled with Python (3.6.0+) support.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>是因为当前用的(n)vim版本不支持python3 (&gt;=3.6.0)。</p>
<p>vim的判断方法：执行<code>vim --version</code> ，显示有 <code>-python3</code>（减号表示不支持，加号表示支持）, 则不支持。</p>
<ul>
<li>对策</li>
</ul>
<p>需要安装新版本的vim来解决此问题。</p>
<p>mac上的nvim:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew upgrade nvim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h5 id="utf8不支持"><a class="header-anchor" href="#utf8不支持"></a>utf8不支持</h5>
<p>若vim没有python2,python3,clipboard, 有conceal，并不会出现utf8不支持，应当是其他原因造成的</p>
<h4 id="conda安装vim"><a class="header-anchor" href="#conda安装vim"></a>conda安装vim</h4>
<pre class="line-numbers language-none"><code class="language-none">conda install -c conda-forge vim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="安装vim-gnome"><a class="header-anchor" href="#安装vim-gnome"></a>安装vim-gnome</h4>
<p>安装vim-gnome</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get install vim-gnome<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在服务器<code>sshost2</code>上装好后，有python3, clipboard, conceal，无python2，上述一切问题没有</p>
<p><a href="https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source">手动make vim-gnome</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure --with-gui<span class="token operator">=</span>gtk2 <span class="token comment"># or gnome</span>
<span class="token function">make</span> -j <span class="token number">4</span>
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="conda安装neovim"><a class="header-anchor" href="#conda安装neovim"></a>conda安装neovim</h4>
<p><a href="https://anaconda.org/conda-forge/neovim">github/neovim</a></p>
<p><a href="https://gist.github.com/yeekeiji/8143b9174f87715f95aa14dd99679b5f">安装脚本参考</a></p>
<p>我用conda安装neovim的方法</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> -c conda-forge neovim
<span class="token function">find</span> anaconda3 -name neovim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="Supertab"><a class="header-anchor" href="#Supertab"></a><a href="http://www.10tiao.com/html/568/201610/2650829602/1.html">Supertab</a></h2>
<h2 id="Ultisnip"><a class="header-anchor" href="#Ultisnip"></a><a href="https://vimzijun.net/2016/10/30/ultisnip/">Ultisnip</a></h2>
<p>默认加载代码段的文件夹：UltiSnips，即.vim下任意名为UltiSnips的文件夹下任意层的.snippets文件：<br>
用户自定义的代码段在 ~/.vim/UltiSnips<br>
vim-snippets 的在.vim/plugged/{vim-snippets, UltiSnips}<br>
手动添加其他目录</p>
<pre class="line-numbers language-none"><code class="language-none">let g:UltiSnipsSnippetDirectories &#x3D; [&#39;其他代码段目录&#39;, &#39;UltiSnips&#39; ]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>snippet写法，在<code>~/.vim/UltiSnips/语言.snippets</code>中，添加一段</p>
<pre class="line-numbers language-none"><code class="language-none">snippet 关键词 “提示” 设定
内容
endsnippet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>设定（更多详见<code>:help ultisnip</code>）</p>
<pre class="line-numbers language-none"><code class="language-none">b 代表只有关键词出现在行首的时候，才可以被展开
A 代表自动展开
w 代表可以展开这个 “词”，具体 “词” 的定义可以查看 :help iskeyword。直观感觉就是，这个关键词是单独的，和其他文字分开的。比如前后都是空格。
i 代表可以忽略前后字节，直接展开关键词。（这个设定比 w 要更松）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="ctrlsf"><a class="header-anchor" href="#ctrlsf"></a><a href="https://github.com/dyng/ctrlsf.vim">ctrlsf</a></h2>
<pre class="line-numbers language-none"><code class="language-none">:CtrlSF
[-I不分大小写|-S分大小写|default&#x3D;smart]
[-R正则表达式|default&#x3D;literally]
[-W整词|default&#x3D;非整词]
&quot;PATTERN&quot;
[搜索哪些文件的通配符，默认为所有可见文件(夹)|&#123;*,.*&#125;所有文件|*.py 所有可见.py文件|% 当前文件]
(不支持搜索所有打开的文件)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>-R</code> - Use regular expression pattern.</li>
<li><code>-I</code>, <code>-S</code> - Search case-insensitively (<code>-I</code>) or case-sensitively (<code>-S</code>).</li>
<li><code>-C</code>, <code>-A</code>, <code>-B</code> - Specify how many context lines to be printed, identical to their counterparts in Ag/Ack.</li>
<li><code>-W</code> - Only match whole words.</li>
</ul>
<h2 id="vim-which-key-按键提示"><a class="header-anchor" href="#vim-which-key-按键提示"></a><a href="https://segmentfault.com/a/1190000016661599">vim-which-key</a> 按键提示</h2>
<p><a href="https://segmentfault.com/a/1190000016661599">https://segmentfault.com/a/1190000016661599</a></p>
<h2 id="surround-括号匹配修改"><a class="header-anchor" href="#surround-括号匹配修改"></a>surround 括号匹配修改</h2>
<p><a href="http://zuyunfei.com/2013/04/17/killer-plugin-of-vim-surround/">参考</a></p>
<h2 id="vim-multiple-cursors-多行编辑插件"><a class="header-anchor" href="#vim-multiple-cursors-多行编辑插件"></a>vim-multiple-cursors 多行编辑插件</h2>
<p><a href="https://zhuanlan.zhihu.com/p/23262156">https://zhuanlan.zhihu.com/p/23262156</a></p>
<h2 id="vim-airline-vim-airline-标签页和下方状态栏"><a class="header-anchor" href="#vim-airline-vim-airline-标签页和下方状态栏"></a>vim-airline/vim-airline 标签页和下方状态栏</h2>
<h2 id="vim-airline-vim-airline-themes-标签页和下方状态栏配色"><a class="header-anchor" href="#vim-airline-vim-airline-themes-标签页和下方状态栏配色"></a>vim-airline/vim-airline-themes 标签页和下方状态栏配色</h2>
<h2 id="ctrlP"><a class="header-anchor" href="#ctrlP"></a>ctrlP</h2>
<p>ctrlp:<a href="http://zuyunfei.com/2013/08/26/vim-plugin-ctrlp/">http://zuyunfei.com/2013/08/26/vim-plugin-ctrlp/</a></p>
<p>提供的命令<a href="http://blog.collin2.xyz/index.php/archives/99/">http://blog.collin2.xyz/index.php/archives/99/</a></p>
<h3 id="教程"><a class="header-anchor" href="#教程"></a>教程</h3>
<p>进入ctrlp模式</p>
<ul>
<li><code>:CtrlP</code>或者<code>CtrlP [起始目录]</code>: 在查找文件模式下调用CtrlP</li>
<li><code>:CtrlPBuffer</code>或<code>:CtrlPMRU</code>: 在查找缓冲区调用CtrlP或者查找MRU文件模式</li>
</ul>
<p>进入ctrlp模式后</p>
<p>模式</p>
<ul>
<li><code>&lt;S-Left&gt;</code>、<code>&lt;S-right&gt;</code>: 左、右移动切换模式(文件 file/最近打开的文件 MRU/ctrlp打开的历史 buff)</li>
<li><code>&lt;c-f&gt;</code>: 开关到仅文件名搜索而不是完整路径搜索</li>
<li><code>&lt;c-r&gt;</code>: 开关切换到正则表达式模式</li>
</ul>
<p>选择</p>
<ul>
<li><code>Up</code>、<code>Down</code>:　在文件列表中上下移动</li>
<li><code>&lt;c-z&gt;</code>:　勾选/勾除记多个文件</li>
</ul>
<p>更新</p>
<ul>
<li><code>&lt;F5&gt;</code>: 清除当前目录的缓存以获取新文件，删除已删除的文件并应用新的忽略选项</li>
<li><code>&lt;F7&gt;</code>：</li>
<li>MRU下直接按它清空所有文件</li>
<li>MRU下先<code>&lt;c-z&gt;</code>勾选文件在按它清之</li>
<li>buffer下按它清除所在行的文件</li>
<li><code>&lt;c-z&gt;</code>,<code>&lt;c-s-z&gt;</code>:　撤销、重做于ctrlp中</li>
</ul>
<p>打开命令</p>
<ul>
<li><code>&lt;cr&gt;</code>、<code>&lt;c-t&gt;</code>、<code>&lt;c-v&gt;</code>、<code>&lt;c-h&gt;</code>: 开在本窗口（现在的文件就关了）、新Tab、横分屏、竖分屏</li>
<li><code>&lt;c-o&gt;</code>：打开，ctrlp会问你用上述哪种方法打开</li>
</ul>
<p>输入路径</p>
<ul>
<li><code>&lt;s-tab&gt;</code>：开关输入栏</li>
<li><code>tab</code>: 自动补全</li>
<li><code>left</code>、<code>right</code>：在自己输入的path中左右移动光标</li>
<li><code>&lt;c-\&gt;</code>：输入栏在光标处插入内容，会弹出选项，问从系统剪切板插入啥</li>
<li><code>..</code> 回车，上走一级目录，n个<code>.</code>后回车，上走n-1个目录</li>
<li>标记文件后，输<code>:number</code>，不回车，按打开命令，会打开并跳到指定行数</li>
<li>输入[父目录/父目录/]新文件名，<code>&lt;c-n&gt;</code> ，创建一个新文件及其父目录</li>
<li>默认是绝对路径，相对路径请用<code>./</code>开头</li>
<li>但貌似不能创建文件夹</li>
<li>对比文件：勾选多个文件</li>
<li>输入<code>:diffthis</code>，不回车，按打开命令（通常竖分屏） /或按<code>&lt;c-o&gt;</code>来竖分屏</li>
<li>或直接输入<code>&lt;C-d&gt;</code>，竖分屏</li>
</ul>
<p>文档：<a href="https://github.com/hyliang96/ctrlp.vim/blob/master/doc/ctrlp.cnx">https://github.com/hyliang96/ctrlp.vim/blob/master/doc/ctrlp.cnx</a></p>
<p>帮助</p>
<ul>
<li><code>:help ctrlp-options</code>: 获取帮助文档</li>
<li><code>:help ctrlp-mappings</code>：按键帮助</li>
<li><code>:help ctrlp-commands</code>：获取ctrlp命令的帮助</li>
</ul>
<h3 id="默认快捷键"><a class="header-anchor" href="#默认快捷键"></a>默认快捷键</h3>
<pre class="line-numbers language-none"><code class="language-none">let g:ctrlp_prompt_mappings &#x3D; &#123;
\ &#39;PrtBS()&#39;:              [&#39;&lt;bs&gt;&#39;, &#39;&lt;c-]&gt;&#39;],
\ &#39;PrtDelete()&#39;:          [&#39;&lt;del&gt;&#39;],
\ &#39;PrtDeleteWord()&#39;:      [&#39;&lt;c-w&gt;&#39;],
\ &#39;PrtClear()&#39;:           [&#39;&lt;c-u&gt;&#39;],
\ &#39;PrtSelectMove(&quot;j&quot;)&#39;:   [&#39;&lt;c-j&gt;&#39;, &#39;&lt;down&gt;&#39;],
\ &#39;PrtSelectMove(&quot;k&quot;)&#39;:   [&#39;&lt;c-k&gt;&#39;, &#39;&lt;up&gt;&#39;],
\ &#39;PrtSelectMove(&quot;t&quot;)&#39;:   [&#39;&lt;Home&gt;&#39;, &#39;&lt;kHome&gt;&#39;],
\ &#39;PrtSelectMove(&quot;b&quot;)&#39;:   [&#39;&lt;End&gt;&#39;, &#39;&lt;kEnd&gt;&#39;],
\ &#39;PrtSelectMove(&quot;u&quot;)&#39;:   [&#39;&lt;PageUp&gt;&#39;, &#39;&lt;kPageUp&gt;&#39;],
\ &#39;PrtSelectMove(&quot;d&quot;)&#39;:   [&#39;&lt;PageDown&gt;&#39;, &#39;&lt;kPageDown&gt;&#39;],
\ &#39;PrtHistory(-1)&#39;:       [&#39;&lt;c-n&gt;&#39;],
\ &#39;PrtHistory(1)&#39;:        [&#39;&lt;c-p&gt;&#39;],

\ &#39;AcceptSelection(&quot;e&quot;)&#39;: [&#39;&lt;cr&gt;&#39;, &#39;&lt;2-LeftMouse&gt;&#39;],
\ &#39;AcceptSelection(&quot;h&quot;)&#39;: [&#39;&lt;c-x&gt;&#39;, &#39;&lt;c-cr&gt;&#39;, &#39;&lt;c-s&gt;&#39;],
\ &#39;AcceptSelection(&quot;t&quot;)&#39;: [&#39;&lt;c-t&gt;&#39;],
\ &#39;AcceptSelection(&quot;v&quot;)&#39;: [&#39;&lt;c-v&gt;&#39;, &#39;&lt;RightMouse&gt;&#39;],

\ &#39;ToggleFocus()&#39;:        [&#39;&lt;s-tab&gt;&#39;],
\ &#39;ToggleRegex()&#39;:        [&#39;&lt;c-r&gt;&#39;],
\ &#39;ToggleByFname()&#39;:      [&#39;&lt;c-d&gt;&#39;],
\ &#39;ToggleType(1)&#39;:        [&#39;&lt;c-f&gt;&#39;, &#39;&lt;c-up&gt;&#39;],
\ &#39;ToggleType(-1)&#39;:       [&#39;&lt;c-b&gt;&#39;, &#39;&lt;c-down&gt;&#39;],
\ &#39;PrtExpandDir()&#39;:       [&#39;&lt;tab&gt;&#39;],
\ &#39;PrtInsert(&quot;c&quot;)&#39;:       [&#39;&lt;MiddleMouse&gt;&#39;, &#39;&lt;insert&gt;&#39;],

\ &#39;PrtInsert()&#39;:          [&#39;&lt;c-\&gt;&#39;],

\ &#39;PrtCurStart()&#39;:        [&#39;&lt;c-a&gt;&#39;],
\ &#39;PrtCurEnd()&#39;:          [&#39;&lt;c-e&gt;&#39;],
\ &#39;PrtCurLeft()&#39;:         [&#39;&lt;c-h&gt;&#39;, &#39;&lt;left&gt;&#39;, &#39;&lt;c-^&gt;&#39;],
\ &#39;PrtCurRight()&#39;:        [&#39;&lt;c-l&gt;&#39;, &#39;&lt;right&gt;&#39;],
\ &#39;PrtClearCache()&#39;:      [&#39;&lt;F5&gt;&#39;],
\ &#39;PrtDeleteEnt()&#39;:       [&#39;&lt;F7&gt;&#39;],

\ &#39;CreateNewFile()&#39;:      [&#39;&lt;c-y&gt;&#39;],
\ &#39;MarkToOpen()&#39;:         [&#39;&lt;c-z&gt;&#39;],
\ &#39;OpenMulti()&#39;:          [&#39;&lt;c-o&gt;&#39;],
\ &#39;PrtExit()&#39;:            [&#39;&lt;esc&gt;&#39;, &#39;&lt;c-c&gt;&#39;, &#39;&lt;c-g&gt;&#39;],
\ &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="vim基础知识"><a class="header-anchor" href="#vim基础知识"></a>vim基础知识</h1>
<h3 id="vim快捷键设置"><a class="header-anchor" href="#vim快捷键设置"></a>vim快捷键设置</h3>
<p><a href="https://www.jianshu.com/p/2c9a85277d49">https://www.jianshu.com/p/2c9a85277d49</a></p>
<h3 id="vim基础操作"><a class="header-anchor" href="#vim基础操作"></a>vim基础操作</h3>
<p><a href="http://vim.wikia.com/wiki/All_the_right_moves">http://vim.wikia.com/wiki/All_the_right_moves</a></p>
<h1 id="按键"><a class="header-anchor" href="#按键"></a>按键</h1>
<h2 id="冲突的"><a class="header-anchor" href="#冲突的"></a>冲突的</h2>
<p>enter=ctrl+m</p>
<p>tab=ctrl+i</p>
<p>ctrl+tab!=ctrl+i</p>
<p>Ctrl+3=ESC</p>
<p>delete=ctrl+d</p>
<h4 id="解决方案"><a class="header-anchor" href="#解决方案"></a>解决方案</h4>
<p><a href="https://stackoverflow.com/questions/14641942/how-to-unmap-tab-and-do-not-make-ctrl-i-invalid-in-vim">https://stackoverflow.com/questions/14641942/how-to-unmap-tab-and-do-not-make-ctrl-i-invalid-in-vim</a></p>
<p>需要你的终端发送不同的 <em>termcap</em> code</p>
<p><a href="https://stackoverflow.com/questions/3985341/how-do-vims-control-o-and-control-i-work">https://stackoverflow.com/questions/3985341/how-do-vims-control-o-and-control-i-work</a></p>
<p><a href="https://segmentfault.com/a/1190000012060333">jumplist及多次跳跃的教程</a></p>
<p>:h jumplist</p>
<p>ctrl+o：去上次光标位置，会跨越文件</p>
<p>ctrl+i：去下次光标位置，会跨越文件</p>
<h2 id="alt-键的映射"><a class="header-anchor" href="#alt-键的映射"></a>alt+键的映射</h2>
<h3 id="mac的解决方案"><a class="header-anchor" href="#mac的解决方案"></a>mac的解决方案</h3>
<p><a href="https://stackoverflow.com/questions/7501092/can-i-map-alt-key-in-vim">https://stackoverflow.com/questions/7501092/can-i-map-alt-key-in-vim</a></p>
<p>alt+键，shift+alt+键 皆可用，不会混</p>
<h3 id="依赖于英文输入法"><a class="header-anchor" href="#依赖于英文输入法"></a>依赖于英文输入法</h3>
<p>我使用的是ABC英文输入法</p>
<ul>
<li>其alt+键对应特殊字符的映射最通用</li>
<li>按 ^ ~ 等键不会滞留等待输入下一个键</li>
</ul>
<p>而<code>美式键盘（国际）</code>会滞留，例如，输入^ 会显示<code>^</code>并滞留</p>
<ul>
<li>若再输<code>a</code>，则出来$\hat{a}$</li>
<li>若再输空格，才出^</li>
</ul>
<p><code>ABC（国际）</code>输入alt+z/^ 等键会出现滞留间，例如输入alt+^ 会显示<code>^</code>并滞留</p>
<ul>
<li>若再输<code>a</code>，则出来$\hat{a}$</li>
<li>若再输空格，才出^</li>
</ul>
<h2 id="可用的快捷键"><a class="header-anchor" href="#可用的快捷键"></a>可用的快捷键</h2>
<h3 id="可用且不不同"><a class="header-anchor" href="#可用且不不同"></a>可用且不不同</h3>
<p><code>&lt;Home&gt;</code>=<code>Fn+Left</code>, <code>End</code>=<code>Fn+Right</code>,<code>S-Home/End</code>， <code>C-Home/End</code>，,<code>S-C-Home/End</code>， <code>S-C-Home/End</code>，</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;PageUp&#x2F;PageDown&gt;&#96;&#x3D;&#96;Fn+Up&#x2F;Down
F1&#96; &#96;&lt;S-F1&gt;&#96;  &#96;&lt;C-F1&gt;&#96; &#96;&lt;C-S-F1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="被占用的"><a class="header-anchor" href="#被占用的"></a>被占用的</h3>
<p><code>S-PageUp/PageDown</code> =（似乎）<code>C-PageUp/PageDown</code> 开/关下小栏</p>
<h2 id="不可用的"><a class="header-anchor" href="#不可用的"></a>不可用的</h2>
<h1 id="待办"><a class="header-anchor" href="#待办"></a>待办</h1>
<ul>
<li>insert 模式下，在行尾ctrl+v插入，再ctrl+z撤销，则会前移一格</li>
<li>insert 模式下，在行中ctrl+v插入或输入一段文字，再ctrl+z撤销，再重做ctrl+r，则光标相比于撤销后未动，而没有回到撤销前的光标位置</li>
<li>insert paste 模式下，ctrl+s出现^S，而没有保存</li>
<li>实现在insert模式，输入tab，若在单词尾，则自动补全，否则输入tab</li>
<li>insert paste 模式下，按tab键，会出tab；换行后自动缩进也出tab</li>
<li>insert 模式，行首输入<code>\</code>，会出现<code>【三个缩进】\</code>，但在行中不会有这个问题</li>
<li>用<code>inoremap \ &lt;space&gt;&lt;backspace&gt;\</code>能解决，需对文件做二分法来找出原因</li>
<li>用<code>inoremap \ &lt;任意其他字符&gt;&lt;backspace&gt;\</code>不能解决</li>
</ul>
<h3 id="vim-multiple-cursors-多行编辑插件-_2"><a class="header-anchor" href="#vim-multiple-cursors-多行编辑插件-_2"></a>vim-multiple-cursors 多行编辑插件</h3>
<h4 id="进入vim-multiple-cursors的visual、normal模式"><a class="header-anchor" href="#进入vim-multiple-cursors的visual、normal模式"></a>进入vim-multiple-cursors的visual、normal模式</h4>
<ul>
<li>bug：先ctrl+d选定一个词，在S-d选所有相同词时，会出现bug</li>
<li><code>shift+左</code> <code>Fn+右</code>输入后不立即奏效，需再输入一个键才左移一词或右移到行尾</li>
</ul>
<p>但<code>shift+右</code> <code>Fn+左</code>输入后立即奏效</p>
<ul>
<li><code>S-C-Up/Down</code>能用</li>
<li>在insert模式上述都能用</li>
</ul>
<h4 id="提示栏"><a class="header-anchor" href="#提示栏"></a>提示栏</h4>
<ul>
<li>底栏不显示现在在vim-multiple-cursors的visual或normal状态，但现实在insert状态</li>
</ul>
<h4 id="各模式"><a class="header-anchor" href="#各模式"></a>各模式</h4>
<ul>
<li>ctrl+b不能退出，esc才能退出</li>
</ul>
<h1 id="vim的常用函数"><a class="header-anchor" href="#vim的常用函数"></a>vim的常用函数</h1>
<ul>
<li>行号 <code>line('.')</code></li>
<li>下一个空白行的行号 <code>search(&quot;^$&quot;) - 1</code></li>
<li>getline(start, end)，获得字符串</li>
<li>判断是否在行尾</li>
<li>n、v模式：<code>virtcol(&quot;.&quot;) == virtcol(&quot;$&quot;)-1</code></li>
<li>i模式：<code>virtcol(&quot;.&quot;) == virtcol(&quot;$&quot;)</code></li>
<li>virtcol显示的是字符宽度，而非bite数</li>
<li><code>call feedkeys(&quot;\&lt;C-x&gt;xxx\&lt;Esc&gt;&quot;)</code></li>
<li>必需首字母大写</li>
<li>必需双引号</li>
<li><code>:h terminal-key-codes</code>查看key code，例如</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">t_%i	&lt;S-Right&gt;	shift arrow right		*t_%i* *&#39;t_%i&#39;*
t_#4	&lt;S-Left&gt;	shift arrow left		*t_#4* *&#39;t_#4&#39;*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>显示时，输入<code>:echo &quot;\&lt;S-Left&gt;&quot;</code>，输出<code>&lt;80&gt;#4</code></p>
<ul>
<li>在终端，输入<code>cat -v</code>或<code>sed -n l</code> 或按<code>ctrl+v</code> 然后输入组合键，会<strong>显示快捷键的键码</strong></li>
<li>在vim ，输入<code>:echo getchar()</code>回车，然后输入快捷键，会显示在vim下的编码。</li>
<li>如按PageUp，显示<code>&lt;80&gt;kP</code>，其含义是unicode为 \u80-k-P，即<code>getchar()=~'^[\u80]kP$'</code>为真</li>
<li>按S-PageUp，显示<code>&lt;80&gt;&lt;fc&gt;^D&lt;80&gt;&lt;fd&gt;^D</code>，其含义是unicode为<code>\u90-\ufc-^D-\u80-\ufd-^D</code>，即<code>getchar()=~&quot;^[\\u80][\\ufc]\&lt;C-D&gt;[\\u80][\\ufd]\&lt;C-D&gt;$&quot;</code>为真</li>
</ul>
<h3 id="转义字符"><a class="header-anchor" href="#转义字符"></a>转义字符</h3>
<ul>
<li>单引号不转义，双引号转义。转义字符如下</li>
<li>第一类：<code>\\</code>表示<code>\</code>，<code>\n</code>换行，<code>\t</code>tab</li>
<li>第二类：按键：<code>\&lt;C-Up&gt;</code>, <code>\&lt;up&gt;</code></li>
<li>第三类：正则表达式中的转义字符，单引号内写作<code>\某</code>，双引号内写作<code>\\某</code></li>
<li>正则表达式的转义:</li>
<li><code>\(</code>表示<code>(</code>,<code>\)</code>表示<code>)</code>,<code>\|</code> 表示<code>|</code>即“或”</li>
<li><code>\a</code>表示字母，即<code>[a-zA-Z]</code>，<code>\d</code>表示数字，即<code>[0-9]</code></li>
</ul>
<p>例如<code>match('asd','\(\a\|\d\)')</code>返回0，<code>match('213','\(\a\|\d\)')</code>返回0，<code>match('-+\','\(\a\|\d\)')</code>返回-1</p>
<ul>
<li>
<p>正则表达式中的<code>[</code> <code>]</code> <code>+</code> <code>*</code>皆不需要前加<code>\</code></p>
</li>
<li>
<p>例如</p>
</li>
<li>
<p>正则表达式转义字符，单引号内写作<code>\某</code>，双引号内写作<code>\\某</code></p>
</li>
</ul>
<p>如 <code>'\(\a\|\d\)'</code> 等价于 <code>&quot;\\(\\a\\|\\d\\)&quot;</code></p>
<ul>
<li>第一、二类转义字符，只能用双引号；第三类转义字符，单双引号皆可用。</li>
</ul>
<h1 id="系统剪切板"><a class="header-anchor" href="#系统剪切板"></a>系统剪切板</h1>
<p><a href="https://www.zhihu.com/question/19863631">https://www.zhihu.com/question/19863631</a></p>
<p><a href="http://os.51cto.com/art/201808/580326.htm?mobile">http://os.51cto.com/art/201808/580326.htm?mobile</a></p>
<pre class="line-numbers language-none"><code class="language-none">cd &#x2F;home&#x2F;$USER
git clone https:&#x2F;&#x2F;github.com&#x2F;vim&#x2F;vim.git
cd vim&#x2F;src
md &#x2F;home&#x2F;$USER&#x2F;ENV&#x2F;vim
.&#x2F;configure --prefix&#x3D;&#x2F;home&#x2F;$USER&#x2F;ENV&#x2F;vim
make
make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>删减vimrc中被注释掉的</li>
<li>剪切板：<a href="http://os.51cto.com/art/201808/580326.htm?mobile">http://os.51cto.com/art/201808/580326.htm?mobile</a></li>
<li><a href="https://vi.stackexchange.com/questions/84/how-can-i-copy-text-to-the-system-clipboard-from-vim">https://vi.stackexchange.com/questions/84/how-can-i-copy-text-to-the-system-clipboard-from-vim</a></li>
<li>xclip源代码：<a href="https://github.com/astrand/xclip">https://github.com/astrand/xclip</a></li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">.&#x2F;configure # --prefix&#x3D;&#x2F;home&#x2F;$USER&#x2F;ENV&#x2F;xclip
make
make install prefix&#x3D;&#x2F;home&#x2F;$USER&#x2F;ENV&#x2F;xclip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>如果要使用Xclip，请粘贴以下行：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">alias pbcopy&#x3D;&#39;xclip -selection clipboard&#39;  alias pbpaste&#x3D;&#39;xclip -selection clipboard -o&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果要使用xsel，请在?/.bashrc文件中粘贴以下行:</p>
<pre class="line-numbers language-none"><code class="language-none">alias pbcopy&#x3D;&#39;xsel --clipboard --input&#39;  alias pbpaste&#x3D;&#39;xsel --clipboard --output&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后保存并关闭.bashrc文件。</p>
<ul>
<li>安装xclip</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">sudo apt-get install xclip
:call system(&#39;xclip -selection clipboard&#39;, @&quot;)
:call system(&#39;xclip -selection clipboard -o&#39;, @&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><a href="https://coderwall.com/p/hmki3q/vim-copy-paste">https://coderwall.com/p/hmki3q/vim-copy-paste</a></p>
<p><a href="https://github.com/erickzanardo/vim-xclip">https://github.com/erickzanardo/vim-xclip</a></p>
<ul>
<li>clip：conda install</li>
</ul>
<p><a href="http://procrastinatingdev.com/clip/">http://procrastinatingdev.com/clip/</a></p>
<pre class="line-numbers language-none"><code class="language-none">conda install -c travis clip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>xsel</li>
</ul>
<p>make：<a href="https://gist.github.com/houtianze/7ba320bc250589fdd35ad4082e52133f">https://gist.github.com/houtianze/7ba320bc250589fdd35ad4082e52133f</a></p>
<pre class="line-numbers language-none"><code class="language-none">yum install -y automake autoconf git libtool
curl -OL http:&#x2F;&#x2F;www.vergenet.net&#x2F;~conrad&#x2F;software&#x2F;xsel&#x2F;download&#x2F;xsel-1.2.0.tar.gz
tar -xzf xsel-1.2.0.tar.gz
cd xsel-1.2.0
# .&#x2F;autogen.sh --prefix&#x3D;&#x2F;home&#x2F;$USER&#x2F;ENV&#x2F;xsel
.&#x2F;configure --prefix&#x3D;&#x2F;home&#x2F;$USER&#x2F;ENV&#x2F;xsel
make
make check
sudo make install
# make distclean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><a href="https://vi.stackexchange.com/questions/332/define-custom-commands-for-the-and-registers">https://vi.stackexchange.com/questions/332/define-custom-commands-for-the-and-registers</a></li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">function! ClipboardOrXclip(command, register)
if a:register !~ &#39;[+*]&#39; || has(&#39;xterm_clipboard&#39;) || has(&#39;gui_running&#39;)
&quot; Just return the original command if the clipboard is accessible
&quot; or it&#39;s not a register that should be handled by xsel
return a:command
endif
if a:register &#x3D;&#x3D; &#39;+&#39;
return &quot;&lt;Esc&gt;:r !xsel -bo&lt;CR&gt;&quot;
else
return &quot;&lt;Esc&gt;:r !xsel -po&lt;CR&gt;&quot;
endif
endfunction

nnoremap &lt;silent&gt; &lt;expr&gt; p ClipboardOrXclip(&#39;p&#39;, v:register)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>conda装vim 8.0</li>
</ul>
<p><a href="https://anaconda.org/conda-forge/vim">https://anaconda.org/conda-forge/vim</a></p>
<pre class="line-numbers language-none"><code class="language-none">conda install -c conda-forge vim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="bug"><a class="header-anchor" href="#bug"></a>bug</h1>
<p>已经解决</p>
<ul>
<li>
<p>多光标的各个模式都不支持 S-down，可能是键盘翻译不成功</p>
</li>
<li>
<p>但都支持pageup， pagedown，S-UP</p>
</li>
<li>
<p>原因是，mc中的map没有区分noremap和map，因此全都是可以反复翻译的，S-Down会映射为$ctrl-d，而ctrl-d是添加搜索下一个关键词</p>
</li>
<li>
<p>按S-C-Up，需要等待输入下一个键才执行，找出何处在等待输入空</p>
</li>
<li>
<p>在insert模式</p>
</li>
<li>
<p>在文件头，按S+left，S+up，会切换到normal模式：这是因为<code>inoremap &lt;S-Left&gt; &lt;esc&gt;gEa</code>执行到一半，发现<code>gE</code>无法执行，就卡在n模式了。故应当修改为<code>inoremap &lt;S-Left&gt; &lt;left&gt;&lt;c-o&gt;gE&lt;right&gt;</code>，使得执行到一半，就回到v模式。</p>
</li>
<li>
<p>所有imap，inoremap都不要写<code>&lt;esc&gt;...i或a</code>，要写<code>&lt;c-o&gt;</code>，则可避免上述问题</p>
</li>
<li>
<p>按left, up, S+C+up、PageUp，Home不会</p>
</li>
<li>
<p>在insert模式下，按ctrl+z撤销，与vimrc中更精细的undo不兼容</p>
</li>
<li>
<p>多光标的visual模式下，pagedown按过一次后，再按则只能向下移动一行；normal和插入模式则正常</p>
</li>
<li>
<p>多光标的各个模式不支持alt+up/down，但都支持alt+m</p>
</li>
<li>
<p>air-line 的tab标头，在关闭tab后，还会留着一个空壳标头</p>
</li>
</ul>
<p>未解决</p>
<ul>
<li>vim双击或v+移动 选中后，翻页时会推着光标走，从而选区变大，这是因为vim不支持off-screen cursor</li>
<li>精细的撤销：backspace和del连续按，</li>
<li>第一次按backspace或del，则标记一个节点</li>
<li>backsapce删到一个空格，则标记一个节点</li>
</ul>
<p>待办</p>
<ul>
<li>
<p>写翻墙服务器的一键安装脚本</p>
</li>
<li>
<p>把翻墙服务器的aliases写成专门的一个脚本，然后在~/.alias里source它</p>
</li>
<li>
<p>将系统安装脚本，输出写到log</p>
</li>
<li>
<p>比较实验室、笔记本、开发服务器上的共享dot文件的异同，将开发服务器没有添加得到开发服务器上面</p>
</li>
<li>
<p>将serverENV和shareENV装到实验室服务器上，并完善其自动安装脚本</p>
</li>
</ul>
<h1 id="安装方法"><a class="header-anchor" href="#安装方法"></a>安装方法</h1>
<h2 id="安装方法-_2"><a class="header-anchor" href="#安装方法-_2"></a>安装方法</h2>
<ul>
<li>备份</li>
</ul>
<p>把目录清空</p>
<pre class="line-numbers language-none"><code class="language-none">rm &#x2F;home&#x2F;$USER&#x2F;backup_before_install -rf
mkdir &#x2F;home&#x2F;$USER&#x2F;backup_before_install
mv &#x2F;home&#x2F;$USER&#x2F;&#123;*,.*&#125; &#x2F;home&#x2F;$USER&#x2F;backup_before_install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>或者全部清空【危险】</p>
<pre class="line-numbers language-none"><code class="language-none">rm &#x2F;home&#x2F;$USER&#x2F;* -rf
rm &#x2F;home&#x2F;$USER&#x2F;.* -rf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>重新登录，进入bash</p>
<ul>
<li>安装</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">cd &#x2F;home&#x2F;$USER
git clone https:&#x2F;&#x2F;github.com&#x2F;hyliang96&#x2F;system-template.git
cp &#x2F;home&#x2F;$USER&#x2F;system-template&#x2F;&#123;*,.*&#125; &#x2F;home&#x2F;$USER -r
rm &#x2F;home&#x2F;$USER&#x2F;system-template -rf
bash &#x2F;home&#x2F;$USER&#x2F;init_script&#x2F;install_sys.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>再次登录则是zsh，并开机安装zsh</p>
<ul>
<li>ssh设置</li>
<li>笔记本上</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">ssh-copy-id -i ~&#x2F;.ssh&#x2F;&lt;私钥名&gt;（如id_rsa） &lt;服务器别名&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>安装软件</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">bash &#x2F;home&#x2F;$USER&#x2F;init_script&#x2F;cpu_software.sh
或
bash &#x2F;home&#x2F;$USER&#x2F;init_script&#x2F;gpu_software.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>修改系统时间</li>
<li>个人用户修改</li>
</ul>
<p>获得修改指令</p>
<pre class="line-numbers language-none"><code class="language-none">tzselect<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>一路选择地区，得到返回<code>export TZ='Asia/Shanghai'</code></p>
<p>append this to <code>~/.env</code></p>
<pre class="line-numbers language-none"><code class="language-none">export TZ&#x3D;&#39;Asia&#x2F;Shanghai&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>系统修改</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">date -R # 再次查看时间
sudo cp &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai  &#x2F;etc&#x2F;localtime
date -R # 再次查看时间，确认已经修改为北京时间
sudo hwclock --systohc # 修改硬件CMOS的时间，如果没有这一步的话，后面时间还是不准<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>服务器上</li>
</ul>
<p>当确认服务器运行正常，将其<code>.ssh/id_ras.pub</code>公钥添加到github上，则可以同步shareENV、serverENV</p>
<h2 id="详解"><a class="header-anchor" href="#详解"></a>详解</h2>
<ul>
<li>自动脚本</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;hyliang96&#x2F;shareENV.git &#x2F;home&#x2F;$USER&#x2F;ENV&#x2F;shareENV
git clone https:&#x2F;&#x2F;github.com&#x2F;hyliang96&#x2F;serverENV.git &#x2F;home&#x2F;$USER&#x2F;ENV&#x2F;serverENV
zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>zsh是为了用antigen自动安装zsh的插件</p>
<p>用git@github.com则会permission denied，用https://github.com/hyliang96则需要输入密码</p>
<p>之后脚本中</p>
<pre class="line-numbers language-none"><code class="language-none">cd $shareENV
git remote set-url origin git@github.com:hyliang96&#x2F;shareENV
cd $serverENV
git remote set-url origin git@github.com:hyliang96&#x2F;serverENV<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>zsh compinit: insecure directories and files, run compaudit for list.</li>
<li>法一：保留原来的.antigen，但将<code>.antigen/init.zsh</code>中的<code>hyliang</code>改为<code>$USER</code>，会出现bug</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;home&#x2F;test&#x2F;ENV&#x2F;CONF&#x2F;.antigen&#x2F;init.zsh:source:74: no such file or directory: &#x2F;home&#x2F;test&#x2F;ENV&#x2F;CONF&#x2F;.antigen&#x2F;bundles&#x2F;rupa&#x2F;z&#x2F;z.sh
&#x2F;home&#x2F;test&#x2F;ENV&#x2F;CONF&#x2F;.antigen&#x2F;init.zsh:source:75: no such file or directory: &#x2F;home&#x2F;test&#x2F;ENV&#x2F;CONF&#x2F;.antigen&#x2F;bundles&#x2F;zsh-users&#x2F;zsh-autosuggestions&#x2F;zsh-autosuggestions.plugin.zsh
&#x2F;home&#x2F;test&#x2F;ENV&#x2F;CONF&#x2F;.antigen&#x2F;init.zsh:source:76: no such file or directory: &#x2F;home&#x2F;test&#x2F;ENV&#x2F;CONF&#x2F;.antigen&#x2F;bundles&#x2F;zsh-users&#x2F;zsh-completions&#x2F;zsh-completions.plugin.zsh
&#x2F;home&#x2F;test&#x2F;ENV&#x2F;CONF&#x2F;.antigen&#x2F;init.zsh:source:77: no such file or directory: &#x2F;home&#x2F;test&#x2F;ENV&#x2F;CONF&#x2F;.antigen&#x2F;bundles&#x2F;willghatch&#x2F;zsh-cdr&#x2F;cdr.plugin.zsh
&#x2F;home&#x2F;test&#x2F;ENV&#x2F;CONF&#x2F;.antigen&#x2F;init.zsh:source:79: no such file or directory: &#x2F;home&#x2F;test&#x2F;ENV&#x2F;CONF&#x2F;.antigen&#x2F;bundles&#x2F;zsh-users&#x2F;zsh-syntax-highlighting&#x2F;zsh-syntax-highlighting.plugin.zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>法二：重新安装后的zsh，没有git提示（使用之）</li>
</ul>
<p>需要</p>
<pre class="line-numbers language-none"><code class="language-none">rm ~&#x2F;.antigen&#x2F;bundles&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;themes&#x2F;&#123;agnoster.zsh-theme,agnoster.zsh-theme.antigen-compat&#125;
ln -s $shareENV&#x2F;shell_config&#x2F;&#123;agnoster.zsh-theme,agnoster.zsh-theme.antigen-compat&#125; ~&#x2F;.antigen&#x2F;bundles&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;themes
~&#x2F;.antigen&#x2F;bundles&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;themes&#x2F;my_agnoster.zsh-theme
~&#x2F;.antigen&#x2F;bundles&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;themes&#x2F;my_agnoster.zsh-theme.antigen-compat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>看看如何将其利用我的github，能独立安装antigen安装，并能用我的更换配色</p>
<ul>
<li>autojump不安全</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">zsh compinit: insecure directories and files, run compaudit for list.
Ignore insecure directories and files and continue [y] or abort compinit [n]? ncompinit: initialization aborted
_antigen_compinit:1: command not found: compdef<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>重装autojump</p>
<pre class="line-numbers language-none"><code class="language-none">cd $my
git clone git:&#x2F;&#x2F;github.com&#x2F;joelthelion&#x2F;autojump.git
cd autojump
.&#x2F;install.py
cd ..
rm autojump -rf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>更换链接</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">bash init_script&#x2F;add_link.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装完后不要在git pull，不然会把链接换回去</p>
<ul>
<li>安装vim 插件，会启动vim，可能需要后台运行，运行完自动关闭</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">vim +PlugInstall +qall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>更换zsh</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">chsh -s &#96;which zsh&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>退出重新登录，看看各个东西能不能用</p>
]]></content>
      <categories>
        <category>器</category>
        <category>编辑器IDE</category>
      </categories>
  </entry>
  <entry>
    <title>vscode安装配置</title>
    <url>/posts/9a4ae6c6/</url>
    <content><![CDATA[<h1 id="vscode安装配置"><a class="header-anchor" href="#vscode安装配置"></a>vscode安装配置</h1>
<h2 id="拓展安装方法"><a class="header-anchor" href="#拓展安装方法"></a>拓展安装方法</h2>
<ul>
<li>
<p><code>⇧⌘P</code> -<code>Extentions: Install Extentions</code> - 输入<code>插件名称</code> - <code>install</code></p>
</li>
<li>
<p>或在左侧拓展商店栏，输入<code>插件名称</code> - <code>install</code></p>
</li>
</ul>
<p><img data-src="/posts/9a4ae6c6/img1.png" alt></p>
<h2 id="语言"><a class="header-anchor" href="#语言"></a>语言</h2>
<p><code>⇧⌘P</code> -<code>Configure Display Language</code> -</p>
<p><img data-src="/posts/9a4ae6c6/2019-05-23_15.54.53.png" alt></p>
<ul>
<li>
<p>选择已有语言</p>
<p><img data-src="/posts/9a4ae6c6/2019-05-23_15.54.43.png" alt></p>
</li>
<li>
<p><code>install other language</code> -左侧拓展商店栏输入 <code>Chinese (Simplified) Language Pack for Visual Studio Code</code> - <code>install</code></p>
</li>
</ul>
<h2 id="配色与字体"><a class="header-anchor" href="#配色与字体"></a>配色与字体</h2>
<h3 id="预备"><a class="header-anchor" href="#预备"></a>预备</h3>
<p>安装插件<code>Gruvbox Themes</code></p>
<p><a href="https://github.com/powerline/fonts">Powerline字体安装</a></p>
<ul>
<li>
<p>mac:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># clone</span>
<span class="token function">git</span> clone https://github.com/powerline/fonts.git --depth<span class="token operator">=</span><span class="token number">1</span>
<span class="token comment"># install</span>
<span class="token builtin class-name">cd</span> fonts
./install.sh
<span class="token comment"># clean-up a bit</span>
<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>
<span class="token function">rm</span> -rf fonts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>linux:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> fonts-powerline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<p><a href="https://glitchbone.github.io/vscode-base16-term/#/">终端配色参考</a></p>
<h3 id="配置"><a class="header-anchor" href="#配置"></a>配置</h3>
<p><code>⌘,</code> ，在<code>用户</code>设置中</p>
<p><img data-src="/posts/9a4ae6c6/2019-05-23_16.04.11-8598764.png" alt></p>
<p>以打开<code>settings.json</code>，添加以下设置</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  ...
    <span class="token comment">// 终端字体</span>
    <span class="token property">"editor.fontFamily"</span><span class="token operator">:</span> <span class="token string">"Meslo LG S DZ for Powerline"</span><span class="token punctuation">,</span>
    <span class="token comment">// 终端配色</span>
    <span class="token property">"workbench.colorCustomizations"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"terminal.background"</span><span class="token operator">:</span><span class="token string">"#28282a"</span> <span class="token punctuation">,</span>         <span class="token property">"terminal.foreground"</span><span class="token operator">:</span><span class="token string">"#c7c7c7"</span><span class="token punctuation">,</span>
        <span class="token property">"terminalCursor.background"</span><span class="token operator">:</span><span class="token string">"#3b3b3b"</span><span class="token punctuation">,</span>   <span class="token property">"terminalCursor.foreground"</span><span class="token operator">:</span><span class="token string">"#A5A2A2"</span><span class="token punctuation">,</span>
        <span class="token property">"terminal.ansiBlack"</span><span class="token operator">:</span><span class="token string">"#28282a"</span><span class="token punctuation">,</span>          <span class="token property">"terminal.ansiBrightBlack"</span><span class="token operator">:</span><span class="token string">"#a2a2a2"</span><span class="token punctuation">,</span>
        <span class="token property">"terminal.ansiWhite"</span><span class="token operator">:</span><span class="token string">"#c7c7c7"</span><span class="token punctuation">,</span>           <span class="token property">"terminal.ansiBrightWhite"</span><span class="token operator">:</span><span class="token string">"#feffff"</span><span class="token punctuation">,</span>
        <span class="token property">"terminal.ansiRed"</span><span class="token operator">:</span><span class="token string">"#c91b00"</span><span class="token punctuation">,</span>             <span class="token property">"terminal.ansiBrightRed"</span><span class="token operator">:</span><span class="token string">"#ff6d67"</span><span class="token punctuation">,</span>
        <span class="token property">"terminal.ansiYellow"</span><span class="token operator">:</span><span class="token string">"#cecc4d"</span><span class="token punctuation">,</span>          <span class="token property">"terminal.ansiBrightYellow"</span><span class="token operator">:</span><span class="token string">"#fefb67"</span><span class="token punctuation">,</span>
        <span class="token property">"terminal.ansiGreen"</span><span class="token operator">:</span><span class="token string">"#89b560"</span><span class="token punctuation">,</span>           <span class="token property">"terminal.ansiBrightGreen"</span><span class="token operator">:</span><span class="token string">"#74dd74"</span><span class="token punctuation">,</span>
        <span class="token property">"terminal.ansiCyan"</span><span class="token operator">:</span><span class="token string">"#61aaab"</span><span class="token punctuation">,</span>            <span class="token property">"terminal.ansiBrightCyan"</span><span class="token operator">:</span><span class="token string">"#5ffdff"</span><span class="token punctuation">,</span>
        <span class="token property">"terminal.ansiBlue"</span><span class="token operator">:</span><span class="token string">"#5168d5"</span><span class="token punctuation">,</span>            <span class="token property">"terminal.ansiBrightBlue"</span><span class="token operator">:</span><span class="token string">"#6871ff"</span><span class="token punctuation">,</span>
        <span class="token property">"terminal.ansiMagenta"</span><span class="token operator">:</span><span class="token string">"#c930c7"</span><span class="token punctuation">,</span>         <span class="token property">"terminal.ansiBrightMagenta"</span><span class="token operator">:</span><span class="token string">"#ff76ff"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token comment">//  配色</span>
    <span class="token property">"workbench.colorTheme"</span><span class="token operator">:</span> <span class="token string">"Gruvbox Dark (Medium)"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上文的<code>// ...</code>注释可以黏贴到<code>settings.json</code>中，vscode支持注释</p>
<h2 id="终端"><a class="header-anchor" href="#终端"></a>终端</h2>
<h3 id="内部终端-integrated-terminal"><a class="header-anchor" href="#内部终端-integrated-terminal"></a>内部终端(integrated terminal)</h3>
<pre class="line-numbers language-⌃`" data-language="⌃`"><div class="caption"><span>```以开启内部终端</span></div><code class="language-⌃`">
### 外部终端(external terminal)

* 配置

&#96;⌘,&#96; ，在&#96;用户&#96;设置中，以打开&#96;settings.json&#96;，添加以下设置


&#96;&#96;&#96;json
&#123;
  ...
  &quot;terminal.external.osxExec&quot;: &quot;iTerm.app&quot;,
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>使用：<code>⇧⌘C</code>以，会弹出一个外部<code>iTerm2</code>窗口</li>
</ul>
<h2 id="命令行工具"><a class="header-anchor" href="#命令行工具"></a>命令行工具</h2>
<p><a href="https://code.visualstudio.com/docs/editor/integrated-terminal">https://code.visualstudio.com/docs/editor/integrated-terminal</a></p>
<p><code>⇧⌘P</code> - <code>Shell Command: install 'code' command in PATH</code></p>
<p><img data-src="/posts/9a4ae6c6/img2.png" alt></p>
<p>使用方法：</p>
<ul>
<li>在命令中输入如下命令，则会用vscode-insiders打开之</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">code-insiders 文件名/文件夹名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>在命令中输入如下命令，则会用vscode打开之</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">code 文件名&#x2F;文件夹名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>上述命令适用于：本地内置终端、本地外部终端、远程开发时内置终端、<s>远程开发时的本地外部终端</s></p>
<h2 id="远程开发"><a class="header-anchor" href="#远程开发"></a>远程开发</h2>
<h3 id="安装插件"><a class="header-anchor" href="#安装插件"></a>安装插件</h3>
<p>安装插件 <code>Remote Developement</code> ，目前(2019-5-23)只支持 <a href="https://code.visualstudio.com/insiders/">VSCode-Insiders</a>，不支持<a href="https://code.visualstudio.com/Download">正式版VSCode</a></p>
<h3 id="配置本地的ssh-config"><a class="header-anchor" href="#配置本地的ssh-config"></a>配置本地的ssh config</h3>
<p>请在本地<code>~/.ssh/config</code>或<code>/etc/ssh/ssh_config</code>中写好远程服务器的连接配置</p>
<p>vscode的<code>Remote Developement</code> 只支持密钥登录，也支持密码登录</p>
<h3 id="连接方法"><a class="header-anchor" href="#连接方法"></a>连接方法</h3>
<p>点左下角<code>&gt;&lt;</code>按钮</p>
<p><img data-src="/posts/9a4ae6c6/2019-05-23_16.27.00.png" alt></p>
<p><img data-src="/posts/9a4ae6c6/2019-05-23_16.27.05.png" alt></p>
<p><img data-src="/posts/9a4ae6c6/2019-05-23_16.27.13.png" alt></p>
<h3 id="编辑远程文件-夹"><a class="header-anchor" href="#编辑远程文件-夹"></a>编辑远程文件(夹)</h3>
<p><img data-src="/posts/9a4ae6c6/2019-05-23_16.32.52.png" alt></p>
<p>关于远程开发的vscode命令行工具</p>
<ul>
<li>
<p>vscode连接服务器后，会在服务器自动安装vscode远程开发的服务端程序，并运行之</p>
<ul>
<li>安装路径为<code>~/.vscode-remote/bin/服务器本机配对的hash码/</code></li>
<li>每当这台本机和这台服务器重新连接，就按照这个hash码，加载安装路径下，之前缓存的编辑器、内置终端、等模块的状态</li>
<li>故<strong>重新连接服务器，编辑器、内置终端、等模块的状态均保留</strong></li>
</ul>
</li>
<li>
<p>vscode连接服务器后，在内置终端可使用   <code>code(-insiders)</code>  命令打开远程文件(夹)。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">which</span> code<span class="token punctuation">(</span>-insiders<span class="token punctuation">)</span>
<span class="token comment"># 返回</span>
<span class="token comment"># ~/.vscode-remote/bin/服务器的hash码/bin/code(-insiders)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>但远程开发， <strong>在 本地外部终端 输入  <code>code(-insiders)</code>，无法 打开远程文件</strong></p>
</li>
</ul>
<h3 id="常见报错与处理"><a class="header-anchor" href="#常见报错与处理"></a>常见报错与处理</h3>
<h4 id="重新连接失败"><a class="header-anchor" href="#重新连接失败"></a>重新连接失败</h4>
<p>若之前连接过一台服务器，再次连它则报错，可杀死之前服务器端运行的 vscode 进程：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> vscode <span class="token operator">|</span> <span class="token function">grep</span> <span class="token environment constant">$USER</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">myusername     2382  0.0  0.0   4504   780 ?        S    01:33   0:00 sh &#x2F;home&#x2F;myusername&#x2F;.vscode-remote&#x2F;bin&#x2F;4ca38ce5584d7cd67b435b3c32ef1240c6a29628&#x2F;server.sh --port&#x3D;0
myusername     2390  0.0  0.0 1307344 62116 ?       Sl   01:33   0:11 &#x2F;home&#x2F;myusername&#x2F;.vscode-remote&#x2F;bin&#x2F;4ca38ce5584d7cd67b435b3c32ef1240c6a29628&#x2F;node &#x2F;home&#x2F;myusername&#x2F;.vscode-remote&#x2F;bin&#x2F;4ca38ce5584d7cd67b435b3c32ef1240c6a29628&#x2F;out&#x2F;remoteExtensionHostAgent.js --port&#x3D;0
myusername     6066  0.0  0.0  15976   972 pts&#x2F;20   S+   16:41   0:00 grep --color vscode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>杀死所有<code>~/.vscode-remote/bin/服务器本机配对的hash码/</code>路径下的进程</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">kill</span> -9 教程编号 <span class="token comment"># 如上一框的 2382 2390</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后vscode重新连接服务器即可连接成功</p>
<h4 id="wget失败"><a class="header-anchor" href="#wget失败"></a>wget失败</h4>
<p>服务器上请不要给用alias覆盖<code>wget</code>命令，如</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">alais <span class="token assign-left variable">wget</span><span class="token operator">=</span><span class="token string">'wget -C -t 0'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这样的alias会造成连接后，会报错曰，服务器上无法用wget下载vscode远程开发的服务器端</p>
<p>此alias改为</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">alais <span class="token assign-left variable">wgetc</span><span class="token operator">=</span><span class="token string">'wget -C -t 0'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后vscode重新连接服务器即可连接成功</p>
<h2 id="snippet"><a class="header-anchor" href="#snippet"></a>snippet</h2>
<p><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets">教程</a></p>
<p>写入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>
    <span class="token string">"《snippet_name》"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>
        <span class="token string">"prefix"</span><span class="token builtin class-name">:</span> <span class="token string">"《snippet_toggle》"</span>,
        <span class="token string">"body"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
            <span class="token string">"《insert_code》"</span>,
        <span class="token punctuation">]</span>,
        <span class="token string">"description"</span><span class="token builtin class-name">:</span> <span class="token string">"《prompt》"</span>
    <span class="token punctuation">&#125;</span>,
    <span class="token punctuation">..</span>.
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>
<p>json不支持跨行文本，即不支持形如</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"body"</span><span class="token operator">:</span> <span class="token punctuation">[</span>"asdasd
asdasd
asdas
" <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>请写成</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"body"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"asda ad s ad as d"</span><span class="token punctuation">,</span>
    <span class="token string">"asd  asd  sad as "</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>json中的文本只能用双引号，不能用单引号</p>
</li>
<li>
<p><code>body</code>中的特殊字符</p>
<ul>
<li>转义字符</li>
</ul>
<table>
<thead>
<tr>
<th>原文本</th>
<th>代码文本</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&quot;</code></td>
<td><code>\&quot;</code></td>
</tr>
<tr>
<td><code>$</code></td>
<td><code>\\$</code></td>
</tr>
<tr>
<td><code>\</code></td>
<td><code>\\</code></td>
</tr>
</tbody>
</table>
<ul>
<li>插入后，按<code>⇥</code>、<code>⇧⇥</code>去往下、前一个可编辑区域；可编辑区域的写法</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">&quot;body&quot;: [
    &quot;asda $&#123;1:【可编辑区域的提示】&#125; s ad $&#123;2:另一个可编辑区域&#125; as d&quot;,
    &quot;asd $&#123;1:同步可编辑区域&#125; as &quot;,
    &quot;asd $&#123;3&#125;&quot;，
],<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="设置同步插件"><a class="header-anchor" href="#设置同步插件"></a>设置同步插件</h2>
<p>为方便使得多个设备可以共用一份配置，可按照vscode插件 “settings sync”，它用gist同步你的vscode的各种设置，包括本地的全局设置、快捷键、snippet、所安装插件及版本。</p>
<h3 id="自动配置方法"><a class="header-anchor" href="#自动配置方法"></a>自动配置方法</h3>
<ul>
<li>清除已有配置 : 初次配置无需此步, 若要更新配置则需要此步. 按 <code>⇧⌘P</code> - <code>Sync: 重置扩展设置</code></li>
</ul>
<p><img data-src="/posts/9a4ae6c6/image-20200316184531147.png" alt="image-20200316184531147"></p>
<p>​	所谓重置, 即清空&quot;settings sync&quot;现有的配置. 重置后,  <code>⇧⌘P</code> - <code>Sync: Advanced Options</code> - <code>Sync: 打开设置</code>  会看见以下页面全空</p>
<p><img data-src="/posts/9a4ae6c6/image-20200509201718848.png" alt="image-20200509201718848"></p>
<ul>
<li>
<p>按 <code>⇧⌥U</code> , 则会弹出如下页面, 点 <code>login with github</code></p>
<p><img data-src="/posts/9a4ae6c6/image-20200509201635555.png" alt="image-20200509201635555"></p>
</li>
</ul>
<p><img data-src="/posts/9a4ae6c6/image-20200509202018164.png" alt="image-20200509202018164"></p>
<p>然后点 <code>信任github.com这个域名</code> .</p>
<p>然后会浏览器弹出如下网页,</p>
<p><img data-src="/posts/9a4ae6c6/ScreenShot%202020-05-20%2021.11.23.png" alt="ScreenShot 2020-05-20 21.11.23"></p>
<p>然后会看跳转如下页面, 此时可关闭此网页,</p>
<p><img data-src="/posts/9a4ae6c6/image-20200509202211987.png" alt="image-20200509202211987"></p>
<p>而vscode里弹出此标签页, 这意味着当前浏览器默认的github账号中, 创建了一个新的token, 可用于创建gist来同步vscode配置</p>
<p><img data-src="/posts/9a4ae6c6/image-20200509202252574.png" alt="image-20200509202252574"></p>
<p>此时  <code>⇧⌘P</code> - <code>Sync: Advanced Options</code> - <code>Sync: 打开设置</code>  的插件配置变成,</p>
<p><img data-src="/posts/9a4ae6c6/image-20200509202418088.png" alt="image-20200509202418088"></p>
<p>这说明当前浏览器默认的github账号中, 创建了一个新的token,  可用于创建gist来同步vscode配置, 但是这个token在 github 的配置中看不见:</p>
<ul>
<li><code>github网页</code>-<code>setting-developer settings</code>-<code>personal access token</code>, 显示如下</li>
</ul>
<pre><code>![image-20200509203832966](assets/image-20200509203832966.png)
</code></pre>
<p>此时再按 <code>⇧⌥U</code>, 则会在此github账号, 自动创建一个新gist, 然后询问是否上传当前的vscode各种配置, 点<code>是</code></p>
<p><img data-src="/posts/9a4ae6c6/image-20200509202900380.png" alt="image-20200509202900380"></p>
<p>打开 <code>https://gist.github.com/你的用户名 </code>来检查一下, 确实创建了新gist,</p>
<p><img data-src="/posts/9a4ae6c6/image-20200509203035964.png" alt="image-20200509203035964"></p>
<p>其内已上传各个vscode配置文件</p>
<p><img data-src="/posts/9a4ae6c6/image-20200509203239628.png" alt="image-20200509203239628"></p>
<p>这说明配置成功</p>
<h3 id="手动配置方法-废弃"><a class="header-anchor" href="#手动配置方法-废弃"></a>手动配置方法 (废弃)</h3>
<p>本法勿用, 目前(2020-5-9)若用本法, 会在vscode重启后, github 将下文所创建的 token 自动删除, vscode会在同步配置时显示”token无效或过期”.</p>
<ul>
<li>
<p>开一个<a href="https://gist.github.com/">gist</a></p>
<p><img data-src="/posts/9a4ae6c6/ScreenShot%202020-03-16%2019.00.22.png" alt="ScreenShot 2020-03-16 19.00.22"></p>
<p><img data-src="/posts/9a4ae6c6/ScreenShot%202020-03-16%2019.07.01.png" alt="ScreenShot 2020-03-16 19.07.01"></p>
<p>从url里复制gist id</p>
<p><img data-src="/posts/9a4ae6c6/ScreenShot%202020-03-16%2019.07.43.png" alt="ScreenShot 2020-03-16 19.07.43"></p>
</li>
<li>
<p>开一个带有gist功能的github token：</p>
<p><code>github网页</code>-<code>setting-developer settings</code>-<code>personal access token</code>-<code>generate new token</code></p>
<p><img data-src="/posts/9a4ae6c6/image-20200316184923683.png" alt="image-20200316184923683"></p>
<p>勾选gist和user</p>
<p><img data-src="/posts/9a4ae6c6/image-20200518012345366.png" alt="image-20200518012345366"></p>
<p>然后会显示 <code>github token</code>， 速速记录下，只会显示这一次，之后再也显示不了。</p>
</li>
<li>
<p>安装 <code>Settings Sync</code> 插件</p>
</li>
<li>
<p>设置 <code>Settings Sync</code> ： <code>⌘⇧P</code> - <code>Sync: Advanced Options</code> - <code>Sync: 打开设置</code></p>
<p><img data-src="/posts/9a4ae6c6/image-20200316184531147.png" alt="image-20200316184531147"></p>
<p><img data-src="/posts/9a4ae6c6/image-20200316184543735.png" alt="image-20200316184543735"></p>
</li>
<li>
<p>然后会弹出设置页面，设置方法如下</p>
</li>
</ul>
<p><img data-src="/posts/9a4ae6c6/ScreenShot%202020-03-16%2018.37.32.png" alt="ScreenShot 2020-03-16 18.37.32"></p>
<p>然后按 <code>⌥⇧U</code>， 如果状态栏显示“同步成功”，且gist上显示如下，则成功</p>
<p><img data-src="/posts/9a4ae6c6/image-20200316192700873.png" alt="image-20200316192700873"></p>
<h3 id="使用方法"><a class="header-anchor" href="#使用方法"></a>使用方法</h3>
<p>手动同步：</p>
<ul>
<li><code>⌥⇧U</code>：手动上传到gist</li>
<li><code>⌥⇧D</code>：手动从gist下载</li>
</ul>
<p>自动同步：打开vscode时，保存配置文件时，会自动下载再上传</p>
]]></content>
      <categories>
        <category>器</category>
        <category>编辑器IDE</category>
      </categories>
  </entry>
  <entry>
    <title>vscode remote报错Waiting for server log</title>
    <url>/posts/f751cd7f/</url>
    <content><![CDATA[<h2 id="现象及原因"><a class="header-anchor" href="#现象及原因"></a>现象及原因</h2>
<p>我在macbook pro 2020 intel+macOS Catalina上，VSCode&gt;1.85连接CentOS7/Ubuntu18.04/Ubuntu20.04/Ubuntu22.04可能会无法连接，出现如下报错</p>
<pre class="line-numbers language-none"><code class="language-none">Waiting for server log...

[00:26:32.554] Failed to parse remote port from server output
[00:26:32.554] Terminating local server
[00:26:32.569] Local server exit: 15
[00:26:32.846] Exec server for ssh-remote+g50 failed: Error
[00:26:32.846] Error opening exec server for ssh-remote+g50: Error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>或</p>
<pre class="line-numbers language-none"><code class="language-none">[15:53:18.927] Local server exit: 15
[15:53:21.045] Opening exec server for ssh-remote+g38
[15:53:21.566] Acquiring local install lock: &#x2F;var&#x2F;folders&#x2F;wc&#x2F;cp7yvqdn2n9dhfck78qf2_8m0000gn&#x2F;T&#x2F;vscode-remote-ssh-939ac7f5-install.lock
[15:53:21.567] Initizing new exec server for ssh-remote+g38
[15:53:21.731] Looking for existing server data file at &#x2F;Users&#x2F;mac&#x2F;Library&#x2F;Application Support&#x2F;Code&#x2F;User&#x2F;globalStorage&#x2F;ms-vscode-remote.remote-ssh&#x2F;vscode-ssh-host-939ac7f5-384ff7382de624fb94dbaf6da11977bba1ecd427-0.115.0-es&#x2F;data.json
[15:53:21.766] No existing data file
[15:53:21.767] Using commit id &quot;384ff7382de624fb94dbaf6da11977bba1ecd427&quot; and quality &quot;stable&quot; for server
[15:53:21.804] Opening exec server for ssh-remote+g38<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>网上查到可能的原因是：<a href="https://code.visualstudio.com/docs/remote/faq#_can-i-run-vs-code-server-on-older-linux-distributions">VSCode 1.86版本不再支持CentOS7</a>（包括Ubuntu18.04等），因此需要手动回退至<a href="https://code.visualstudio.com/updates/v1_85">1.85版本</a>。</p>
<p>参考文章：</p>
<ul>
<li><a href="https://blog.csdn.net/bigbaojian/article/details/136058326">VSCode&gt;1.85不支持连接远程的CentOS7和Ubuntu18.04</a></li>
<li><a href="https://github.com/microsoft/vscode/issues/204326">Server failed to start on Ubuntu22.04</a>å</li>
</ul>
<h2 id="解决办法"><a class="header-anchor" href="#解决办法"></a>解决办法</h2>
<ul>
<li>
<p>取消自动更新vscode：在本地vscode，按<code>cmd+,</code>，在设置页面搜索“Update: Mode”，将选项改为“none”。（要恢复自动更新，就改为default或start）<img data-src="/posts/f751cd7f/image-20240924213656026.png" alt="image-20240924213656026"></p>
</li>
<li>
<p>安装vscode 1.85，下载链接：<a href="https://code.visualstudio.com/updates/v1_85">1.85版本</a>，下载并安装它。</p>
</li>
<li>
<p>打开vscode，在插件栏会看见，插件“Remote Development”及其下所有扩展包（包括插件“Remote - SSH”，负责vscode通过ssh连接远程服务器）的版本与vscode 1.85不适配。需要先卸载再重装插件“Remote Development”，而后“Remote Development”及其下所有扩展包都会重装为与vscode 1.85相适配的版本。</p>
</li>
<li>
<p>然后在vscode里连接远程服务器就会成功。</p>
</li>
</ul>
<h2 id="不建议的解决方法"><a class="header-anchor" href="#不建议的解决方法"></a>不建议的解决方法</h2>
<h3 id="升级glibc到2-28"><a class="header-anchor" href="#升级glibc到2-28"></a>升级glibc到2.28</h3>
<p>参见<a href="https://code.visualstudio.com/docs/remote/linux#_remote-host-container-wsl-linux-prerequisites">Linux Prerequisites for Visual Studio Code Remote Development</a>，vscode使用连接成功的前提是：</p>
<ul>
<li>对远程Linux系统通用的要求：需要 kernel &gt;= 4.18（查看内核版本的命令<code>cat /proc/version</code>）, glibc &gt;=2.28 (查看版本的命令<code>ldd --version</code>), libstdc++ &gt;= 3.4.25 (查看版本的命令<code>strings /lib/x86_64-linux-gnu/libstdc++.so.6 | grep GLIBCXX</code>), tar</li>
<li>对Ubuntu&gt;=20.04系统特别的要求：需要安装了libc6，libstdc++6，ca-certificates，tar （查看版本的命令<code>apt show &lt;软件名&gt;</code>）</li>
</ul>
<p><strong>尽管我所登陆的服务器满足上述要求</strong>，但还是在macbook pro 2020 intel上，vscode连接Ubuntu20.04和ubuntu22的服务器均失败。我怀疑是其他原因，即vscode&gt;1.85不支持macbook pro 2020 intel+macOS Catalina使用remote-SSH插件，<strong>或许需要升级macOS才能解决，又或许需要苹果芯片的电脑才能解决</strong>。我选择不升级操作系统，不买新电脑，而是把vscode降级到1.85，来解决这个问题。</p>
<p>引自<a href="https://blog.csdn.net/bigbaojian/article/details/136058326">VSCode&gt;1.85不支持连接远程的CentOS7和Ubuntu18.04</a>，升级glibc到2.28的方法无效：</p>
<blockquote>
<p>参考<a href="https://code.visualstudio.com/docs/remote/faq#_what-linux-packages-or-libraries-need-to-be-installed-on-a-host-to-use-remote-development">Visual Studio Code Remote Development Frequently Asked Questions</a>，将glibc更新至2.28。但重启后问题仍未解决。<br>
尝试删除<a href="https://so.csdn.net/so/search?q=%E6%9C%8D%E5%8A%A1%E5%99%A8&amp;spm=1001.2101.3001.7020">服务器</a>上的<code>.vscode-server</code>，重新连接VSCode仍然无效。同时，删除客户端<code>.ssh/known_hosts</code>中的相关条目也未产生效果。</p>
</blockquote>
<p>在Ubuntu18.04使用apt升级glibc到2.28的操作方法<a href="https://cloud.baidu.com/article/3294956">详见</a>，该方法有安全隐患，不建议采用：</p>
<blockquote>
<p>[!WARNING]</p>
<p>升级glibc可能会对系统稳定性产生影响，尤其是如果其他应用程序或库与新版本的glibc不兼容。在进行升级之前，请务必了解潜在的风险，并仔细考虑是否需要进行升级。</p>
</blockquote>
<h2 id="案例"><a class="header-anchor" href="#案例"></a>案例</h2>
<p>我在2024年9月，在macbook pro 2020 intel上，vscode连接ubuntu18、Ubuntu20.04和ubuntu22的服务器，都无法连接成功，会遇到如下报错，完整报错详见<a href="private.%E6%8A%A5%E9%94%99.txt">本textbundle内的附件</a>。</p>
<pre class="line-numbers language-none"><code class="language-none">[00:25:50.468] Log Level: 2
[00:25:50.583] SSH Resolver called for &quot;ssh-remote+g50&quot;, attempt 1
[00:25:50.584] &quot;remote.SSH.useLocalServer&quot;: true
[00:25:50.585] &quot;remote.SSH.useExecServer&quot;: true
[00:25:50.585] &quot;remote.SSH.path&quot;: undefined
[00:25:50.585] &quot;remote.SSH.configFile&quot;: undefined
[00:25:50.586] &quot;remote.SSH.useFlock&quot;: true
[00:25:50.586] &quot;remote.SSH.lockfilesInTmp&quot;: false
[00:25:50.586] &quot;remote.SSH.localServerDownload&quot;: auto
[00:25:50.586] &quot;remote.SSH.remoteServerListenOnSocket&quot;: false
[00:25:50.586] &quot;remote.SSH.showLoginTerminal&quot;: false
[00:25:50.587] &quot;remote.SSH.defaultExtensions&quot;: []
[00:25:50.587] &quot;remote.SSH.loglevel&quot;: 2
[00:25:50.587] &quot;remote.SSH.enableDynamicForwarding&quot;: true
[00:25:50.591] &quot;remote.SSH.enableRemoteCommand&quot;: false
[00:25:50.591] &quot;remote.SSH.serverPickPortsFromRange&quot;: &#123;&#125;
[00:25:50.591] &quot;remote.SSH.serverInstallPath&quot;: &#123;&#125;
[00:25:50.592] &quot;remote.SSH.permitPtyAllocation&quot;: false
[00:25:50.592] &quot;remote.SSH.preferredLocalPortRange: undefined
[00:25:50.592] &quot;remote.SSH.useCurlAndWgetConfigurationFiles: false
[00:25:50.696] VS Code version: 1.93.1
[00:25:50.696] Remote-SSH version: remote-ssh@0.114.3
[00:25:50.696] darwin x64
[00:25:50.708] SSH Resolver called for host: g50
[00:25:50.708] Setting up SSH remote &quot;g50&quot;

...

&gt; OS: Ubuntu 22.04.2 LTS x86_64
&gt; Host: R4230-8G GPU
&gt; Kernel: 5.15.0-119-generic
&gt; Uptime: 18 days, 7 hours, 55 mins
&gt; Packages: 1312 (dpkg), 4 (snap)
&gt; Shell: bash 5.1.16
&gt; Resolution: 1024x768
&gt; Terminal: run-parts
&gt; CPU: Intel Xeon Gold 6330 (112) @ 3.100GHz
&gt; GPU: NVIDIA GeForce RTX 4090
&gt; GPU: NVIDIA GeForce RTX 4090
&gt; GPU: NVIDIA GeForce RTX 4090
&gt; GPU: NVIDIA GeForce RTX 4090
&gt; GPU: NVIDIA GeForce RTX 4090
&gt; GPU: NVIDIA GeForce RTX 4090
&gt; GPU: NVIDIA GeForce RTX 4090
&gt; GPU: NVIDIA GeForce RTX 4090
&gt; Memory: 306801MiB &#x2F; 515601MiB
&gt;
&gt;
&gt; zpool status:
&gt;   all pools are healthy
&gt;
&gt; zpool usage:
&gt;   datapool                       6% used out of 43.7T
&gt;   [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;]
&gt;
&gt;   System information as of Tue Sep 24 00:25:57 CST 2024
&gt;
&gt;   System load:    20.70263671875    Processes:                1484
&gt;   Usage of &#x2F;home: 29.7% of 3.44TB   Users logged in:          3
&gt;   Memory usage:   60%               IPv4 address for ens31f0: 166.111.153.129
&gt;   Swap usage:     0%                IPv4 address for ens31f1: 192.168.0.2
&gt;   Temperature:    53.0 C            IPv4 address for wg0:     10.0.0.150
&gt; *** System restart required ***
&gt; Ubuntu 18.04: jungpu[1-37] with nvidia-450, juncluster[1-4]
[00:25:58.819] &gt; ready: b995d2eaba3e
[00:25:58.835] &gt; Linux 5.15.0-119-generic #129-Ubuntu SMP Fri Aug 2 19:25:20 UTC 2024
[00:25:58.836] Platform: linux
[00:25:58.851] &gt; &#x2F;usr&#x2F;bin&#x2F;zsh
[00:25:58.851] Parent Shell: zsh
[00:25:58.851] Parent Shell pid: 4313
[00:25:58.917] &gt; 4033820

...

&gt; Spawned remote CLI: 4035866
[00:26:32.066] &gt; Waiting for server log...
[00:26:32.097] &gt; Waiting for server log...
[00:26:32.129] &gt; Waiting for server log...
[00:26:32.162] &gt; Waiting for server log...
[00:26:32.194] &gt; Waiting for server log...
[00:26:32.227] &gt; Waiting for server log...
[00:26:32.258] &gt; Waiting for server log...
[00:26:32.290] &gt; Waiting for server log...
[00:26:32.322] &gt; Waiting for server log...
[00:26:32.354] &gt; Waiting for server log...
[00:26:32.390] &gt; Waiting for server log...
[00:26:32.419] &gt; Waiting for server log...
[00:26:32.455] &gt; Waiting for server log...
[00:26:32.485] &gt; Waiting for server log...
[00:26:32.517] &gt; Waiting for server log...
[00:26:32.550] &gt; 60891db1baba: start
&gt; listeningOn&#x3D;&#x3D;&#x3D;&#x3D;
&gt; osReleaseId&#x3D;&#x3D;ubuntu&#x3D;&#x3D;
&gt; arch&#x3D;&#x3D;x86_64&#x3D;&#x3D;
&gt; vscodeArch&#x3D;&#x3D;x64&#x3D;&#x3D;
&gt; bitness&#x3D;&#x3D;64&#x3D;&#x3D;
&gt; tmpDir&#x3D;&#x3D;&#x2F;run&#x2F;user&#x2F;10228&#x3D;&#x3D;
&gt; platform&#x3D;&#x3D;linux&#x3D;&#x3D;
[00:26:32.553] &gt; unpackResult&#x3D;&#x3D;&#x3D;&#x3D;
&gt; didLocalDownload&#x3D;&#x3D;0&#x3D;&#x3D;
&gt; downloadTime&#x3D;&#x3D;&#x3D;&#x3D;
&gt; installTime&#x3D;&#x3D;&#x3D;&#x3D;
&gt; serverStartTime&#x3D;&#x3D;488&#x3D;&#x3D;
&gt; execServerToken&#x3D;&#x3D;a1a1111a-111a-1aa1-a11a-a1aa11111a11&#x3D;&#x3D;
&gt; platformDownloadPath&#x3D;&#x3D;cli-alpine-x64&#x3D;&#x3D;
&gt; 60891db1baba: end
[00:26:32.553] Received install output:
listeningOn&#x3D;&#x3D;&#x3D;&#x3D;
osReleaseId&#x3D;&#x3D;ubuntu&#x3D;&#x3D;
arch&#x3D;&#x3D;x86_64&#x3D;&#x3D;
vscodeArch&#x3D;&#x3D;x64&#x3D;&#x3D;
bitness&#x3D;&#x3D;64&#x3D;&#x3D;
tmpDir&#x3D;&#x3D;&#x2F;run&#x2F;user&#x2F;10228&#x3D;&#x3D;
platform&#x3D;&#x3D;linux&#x3D;&#x3D;unpackResult&#x3D;&#x3D;&#x3D;&#x3D;
didLocalDownload&#x3D;&#x3D;0&#x3D;&#x3D;
downloadTime&#x3D;&#x3D;&#x3D;&#x3D;
installTime&#x3D;&#x3D;&#x3D;&#x3D;
serverStartTime&#x3D;&#x3D;488&#x3D;&#x3D;
execServerToken&#x3D;&#x3D;a1a1111a-111a-1aa1-a11a-a1aa11111a11&#x3D;&#x3D;
platformDownloadPath&#x3D;&#x3D;cli-alpine-x64&#x3D;&#x3D;

[00:26:32.554] Failed to parse remote port from server output
[00:26:32.554] Terminating local server
[00:26:32.569] Local server exit: 15
[00:26:32.846] Exec server for ssh-remote+g50 failed: Error
[00:26:32.846] Error opening exec server for ssh-remote+g50: Error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上述报错显示了服务器的登陆信息，说明本地vscode所使用的ssh config里指定的密钥对能登陆到服务器上，连接失败的原因可能是 VSCode&gt;1.85不支持连接远程的CentOS7和Ubuntu18.04、Ubuntu20.04、Ubuntu22.04。</p>
<p>我把vscode降到1.85版本后，就能正常连接了。</p>
]]></content>
      <categories>
        <category>器</category>
        <category>编辑器IDE</category>
      </categories>
  </entry>
  <entry>
    <title>AP路由器设置</title>
    <url>/posts/76063fa8/</url>
    <content><![CDATA[<p>摘自：<a href="https://jingyan.baidu.com/article/fb48e8be6e3fc22e632e1415.html">如何配置无线AP机？</a></p>
<p>在一些企业里，虽然已经存在有线路由器供电脑主机联网，但是对于一些无线的终端设备（比如笔记本电脑、手机等），上网和办公并不方便，这时就需要有无线路由器接入，但为了能够让连接无线路由的终端设备和连接有线路由的电脑主机处在同一个局域网，以方便于局域网内的文件传输、文件共享、打印机共享等，需要把无线路由器配置成无线AP模式。下面小编就分享一下如何配置。</p>
<p><img data-src="/posts/76063fa8/a48bc2e8904800fc3f0623bdd42043715edb9344.jpg.png" alt="a48bc2e8904800fc3f0623bdd42043715edb9344.jpg"></p>
<h2 id="工具-原料"><a class="header-anchor" href="#工具-原料"></a>工具/原料</h2>
<ul>
<li>终端设备（电脑或手机）</li>
<li>无线路由器</li>
</ul>
<h2 id="方法-步骤"><a class="header-anchor" href="#方法-步骤"></a>方法/步骤</h2>
<h3 id="1、登录无线路由器"><a class="header-anchor" href="#1、登录无线路由器"></a><strong>1、登录无线路由器</strong></h3>
<p>说明：以下将有线路由器称之为前端路由器。</p>
<p>给无线路由器供电（暂不要连接到前端网络），操作电脑连接到无线路由器的LAN口（此步骤也可使用笔记本电脑或者手机连接无线路由器的wifi，这里小编以有线连接为例），在浏览器中输入192.168.1.1并进入管理界面。</p>
<p><img data-src="/posts/76063fa8/01bd69f7980e5f200880e468bd20b93acc898e44.jpg.png" alt="01bd69f7980e5f200880e468bd20b93acc898e44.jpg"></p>
<h3 id="2、修改无线信号"><a class="header-anchor" href="#2、修改无线信号"></a><strong>2、修改无线信号</strong></h3>
<p>进入无线设置&gt;&gt;基本设置，在SSID号中设置无线网络名称。</p>
<p><img data-src="/posts/76063fa8/423041db3620b93a82789b76ad0f8835dc8a8a44.jpg.png" alt="423041db3620b93a82789b76ad0f8835dc8a8a44.jpg"></p>
<p>进入无线安全设置，选择 WPA-PSK/WPA2-PSK，并在PSK密码中设置不小于8位的无线密码。</p>
<p><img data-src="/posts/76063fa8/ccc83ec5260f88358e7be26dce07880139708644.jpg.png" alt="ccc83ec5260f88358e7be26dce07880139708644.jpg"></p>
<h3 id="3、关闭DHCP服务器"><a class="header-anchor" href="#3、关闭DHCP服务器"></a><strong>3、关闭DHCP服务器</strong></h3>
<p>点击DHCP服务器，选择不启用。</p>
<p><img data-src="/posts/76063fa8/8974c38a59de4507def083c35e413a8ca7088544.jpg.png" alt="8974c38a59de4507def083c35e413a8ca7088544.jpg"></p>
<h3 id="4、修改管理地址"><a class="header-anchor" href="#4、修改管理地址"></a><strong>4、修改管理地址</strong></h3>
<p>进入网络参数&gt;&gt;LAN口设置，将IP地址修改为与前端路由器的LAN口IP在同一网段但不冲突。</p>
<p>比如前端路由器的IP地址为192.168.1.1，那么无线路由器的IP地址修改为192.168.1.X（X位于2-254之间）。保存并重启路由器。</p>
<p><img data-src="/posts/76063fa8/3931cb413a8ca608fefe2f4fdb8c9bcec6f8fe44.jpg.png" alt="3931cb413a8ca608fefe2f4fdb8c9bcec6f8fe44.jpg"></p>
<h3 id="5、连接上网"><a class="header-anchor" href="#5、连接上网"></a><strong>5、连接上网</strong></h3>
<p>将该无线路由器的任意LAN口（即1~4号接口）与前端路由器的任意LAN口连接。需要上网的台式机可以连接任何LAN口上网，无线终端设备搜索到设置好的无线信号即可上网，并且所有的有线PC主机和无线终端设备均处在同一个局域网。</p>
<p><img data-src="/posts/76063fa8/a749bb0f94fc508cc53f7c4b01775ddd894cfd44.jpg.png" alt="a749bb0f94fc508cc53f7c4b01775ddd894cfd44.jpg"></p>
<p>至此，就将无线路由器配置了无线AP模式，希望能够对大家有所帮助。</p>
]]></content>
      <categories>
        <category>器</category>
        <category>网络配置</category>
      </categories>
  </entry>
  <entry>
    <title>小鹤音形码</title>
    <url>/posts/b61a1a24/</url>
    <content><![CDATA[<h1 id="小鹤音形码"><a class="header-anchor" href="#小鹤音形码"></a>小鹤音形码</h1>
<h2 id="纯音码"><a class="header-anchor" href="#纯音码"></a>纯音码</h2>
<p>一个汉字 = 声母 一个按键 + 韵母 一个按键</p>
<p>对应关系如下</p>
<p><img data-src="/posts/b61a1a24/3987507-5d38597368645423.png" alt="3987507-5d38597368645423"></p>
<h2 id="音形码"><a class="header-anchor" href="#音形码"></a>音形码</h2>
<h3 id="汉字的音形码"><a class="header-anchor" href="#汉字的音形码"></a>汉字的音形码</h3>
<p>声母键+韵母键+首小字部件或笔画 键 + 末小字部件或笔画 键</p>
<h3 id="在线查询汉字的音形码"><a class="header-anchor" href="#在线查询汉字的音形码"></a>在线查询汉字的音形码</h3>
<p><a href="http://react.xhup.club/search">在线查询汉字的音形码</a></p>
<h2 id="按键编码"><a class="header-anchor" href="#按键编码"></a>按键编码</h2>
<p><a href="https://mubu.com/doc/3fSzcreCeE">参考</a></p>
<table>
<thead>
<tr>
<th>字母</th>
<th>声母</th>
<th></th>
<th>笔画</th>
<th>例</th>
<th>部件 ([X]表示依声母)</th>
<th>例</th>
<th>小字</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td></td>
<td>a</td>
<td>一(横)</td>
<td><img data-src="/posts/b61a1a24/image-20201211143431812.png" alt="image-20201211143431812" style="zoom:12%;" align="left"></td>
<td>鱼: A形似鱼头</td>
<td></td>
<td>凹</td>
</tr>
<tr>
<td>B</td>
<td>b</td>
<td>in</td>
<td></td>
<td></td>
<td>冖宀: (秃)[宝]盖<br>丷: 倒[八]字<br>疒: [病]字头<br>勹: [包]字头<br><img data-src="/posts/b61a1a24/image-20201211140409678.png" alt="image-20201211140409678" style="zoom:20%;" align="left">: [比]左侧</td>
<td></td>
<td>百白八卜bŭ匕卞不巴办半丙必本</td>
</tr>
<tr>
<td>C</td>
<td>c</td>
<td>ao</td>
<td></td>
<td></td>
<td>艹 廾: [草]字头</td>
<td></td>
<td>寸才匆册</td>
</tr>
<tr>
<td>D</td>
<td>d</td>
<td>ai</td>
<td>丶(点)</td>
<td></td>
<td>冫 氵: 两/三[点]水 <br>刂 : 立刀旁/刀子头</td>
<td></td>
<td>大丁刀歹刁东丹电旦氐dī</td>
</tr>
<tr>
<td>E</td>
<td></td>
<td>e</td>
<td></td>
<td></td>
<td>阝 卩 <img data-src="/posts/b61a1a24/image-20201211140813605.png" alt="image-20201211140813605" style="zoom:30%;" align="left">: [耳]旁<br>儿<img data-src="/posts/b61a1a24/image-20201211141316646.png" alt="image-20201211141316646" style="zoom:40%;" align="left">: [儿]/及其形变<br>彐山: E旋转</td>
<td></td>
<td>二耳儿而</td>
</tr>
<tr>
<td>F</td>
<td>f</td>
<td>en</td>
<td></td>
<td></td>
<td>扌: [扶]手旁<br><img data-src="/posts/b61a1a24/image-20201211141656953.png" alt="image-20201211141656953" style="zoom:35%;" align="left">: [丰]形变<br>[缶fŏu]</td>
<td><img data-src="/posts/b61a1a24/image-20201211142242768.png" alt="image-20201211142242768" style="zoom:15%;" align="left"></td>
<td>非方飞夫凡甫fŭ弗乏丰</td>
</tr>
<tr>
<td>G</td>
<td>g</td>
<td>eng</td>
<td></td>
<td></td>
<td>艮<img data-src="/posts/b61a1a24/image-20201211142704916.png" alt="image-20201211142704916" style="zoom:35%;" align="left">: [艮gèn]/及其形变<br>[鬼 革 骨]</td>
<td></td>
<td>广弓戈工瓜干个甘亘gèn更果丐</td>
</tr>
<tr>
<td>H</td>
<td>h</td>
<td>ang</td>
<td></td>
<td></td>
<td>灬: [火]字底<br>虍: [虎]字头<br><img data-src="/posts/b61a1a24/image-20201211142930692.png" alt="image-20201211142930692" style="zoom:40%;" align="left">: [禾]形变<br>[黑]</td>
<td></td>
<td>禾户互乎火</td>
</tr>
<tr>
<td>I</td>
<td>ch</td>
<td>i</td>
<td></td>
<td></td>
<td>彳: [彳chì] <br>亍: [亍chù]<br>[虫]</td>
<td></td>
<td>川厂车长叉尺丑臣出产串斥垂成</td>
</tr>
<tr>
<td>J</td>
<td>j</td>
<td>an</td>
<td></td>
<td></td>
<td>钅金: [金]字底i<br>: [卷]字头</td>
<td></td>
<td>巾几九斤久巨己井击柬戋jiān韭臼jiù甲夹及</td>
</tr>
<tr>
<td>K</td>
<td>k</td>
<td>uai/ing</td>
<td></td>
<td></td>
<td>匚冂凵囗㠯: [框]</td>
<td><img data-src="/posts/b61a1a24/image-20201211145150760.png" alt="image-20201211145150760" style="zoom:13%;" align="left"></td>
<td>口开亏</td>
</tr>
<tr>
<td>L</td>
<td>l</td>
<td>uang/iang</td>
<td>丨(竖)</td>
<td>亅<img data-src="/posts/b61a1a24/image-20201211151950886.png" alt="image-20201211151950886" style="zoom:12%;" align="left"></td>
<td>耂: [老]字头<br>[立 龙]</td>
<td></td>
<td>了力乐来良两里吏丽卵耒lěi</td>
</tr>
<tr>
<td>M</td>
<td>m</td>
<td>ian</td>
<td></td>
<td></td>
<td>朩: [木]形变</td>
<td></td>
<td>木毛米门马皿末灭面么民母</td>
</tr>
<tr>
<td>N</td>
<td>n</td>
<td>iao</td>
<td>乀(捺)</td>
<td></td>
<td>牜: [牛]形变</td>
<td></td>
<td>廿女牛鸟乃内农年</td>
</tr>
<tr>
<td>O</td>
<td></td>
<td>o/uo</td>
<td></td>
<td></td>
<td>日月目: 都是圆的</td>
<td></td>
<td></td>
</tr>
<tr>
<td>P</td>
<td>p</td>
<td>ie</td>
<td>丿(撇)</td>
<td><img data-src="/posts/b61a1a24/image-20201211182503276.png" alt="image-20201211182503276" style="zoom:13%;" align="left"></td>
<td>礻衤: 都有一撇</td>
<td></td>
<td>片平爿pán</td>
</tr>
<tr>
<td>Q</td>
<td>q</td>
<td>iu</td>
<td></td>
<td></td>
<td>犭: 反[犬]旁<br><img data-src="/posts/b61a1a24/image-20201211150715732.png" alt="image-20201211150715732" style="zoom:20%;" align="left">: [具]的上半<br><img data-src="/posts/b61a1a24/image-20201211150818795.png" alt="image-20201211150818795" style="zoom:20%;" align="left">: [其]的上半<br>[求]</td>
<td></td>
<td>七千犬且丘曲气乞</td>
</tr>
<tr>
<td>R</td>
<td>r</td>
<td>uan</td>
<td></td>
<td></td>
<td>亻: 单[人]旁</td>
<td></td>
<td>人入冉壬刃</td>
</tr>
<tr>
<td>S</td>
<td>s</td>
<td>ong/iong</td>
<td></td>
<td></td>
<td>纟: 绞[丝]旁<br>厶: [私]右侧/其上下翻转<br>罒: 扁[四]头</td>
<td></td>
<td>三巳肃</td>
</tr>
<tr>
<td>T</td>
<td>t</td>
<td>üe</td>
<td></td>
<td></td>
<td>[田]</td>
<td></td>
<td>土天太屯乇tuō(托的本字)</td>
</tr>
<tr>
<td>U</td>
<td>sh</td>
<td>u</td>
<td></td>
<td></td>
<td>饣: [食]字旁<br>氺: [水]形变<br>: 篆书[手]形变<br>[石]</td>
<td></td>
<td>十尸士手身水上少矢氏豕shǐ戍勺束书事升史申世生失术</td>
</tr>
<tr>
<td>V</td>
<td>zh</td>
<td>ü/ui</td>
<td></td>
<td></td>
<td>: [竹]字头<br>豸: [豸zhì ]</td>
<td></td>
<td>止爪主舟之正丈中乍重州朱专</td>
</tr>
<tr>
<td>W</td>
<td>w</td>
<td>ei</td>
<td></td>
<td></td>
<td>亠夂攵文: [文]字各种变形</td>
<td></td>
<td>王瓦五无万午卫亡兀丸我戊为勿韦乌未</td>
</tr>
<tr>
<td>X</td>
<td>x</td>
<td>ia/ua</td>
<td></td>
<td></td>
<td>忄: 竖[心]旁<br>乂: 形似X<br>ッ: [小]字形变</td>
<td></td>
<td>小西心血下夕乡习戌xū</td>
</tr>
<tr>
<td>Y</td>
<td>y</td>
<td>un</td>
<td></td>
<td></td>
<td>羊: [羊]形变<br>讠: [言]字旁<br>𧘇: [衣]字底</td>
<td></td>
<td>又酉已于义与夭玉雨聿yù弋夷禹尹yìn臾禺幺用严亚央由业也尤永丫牙曳yè</td>
</tr>
<tr>
<td>Z</td>
<td>z</td>
<td>ou</td>
<td>乛(折)</td>
<td>乚</td>
<td>足: [足]字旁<br>辶廴: [走]字底/及其形变</td>
<td></td>
<td>再自子</td>
</tr>
<tr>
<td>非小字</td>
<td>用首末笔画表示</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>旡: jì, 头笔横(a), 末笔折(z), 如既(jigv)</td>
</tr>
</tbody>
</table>
<h2 id="组合规则"><a class="header-anchor" href="#组合规则"></a>组合规则</h2>
<ul>
<li>
<p>始于足下</p>
<p>九层之台,起于累土。(建字底，廴)；千里之行,始于足下。(走之旁，辶)</p>
<ul>
<li>以“廴 辶”为部首的字，首码先取z: 如 廷 (tkzr) jrji</li>
<li>以“廴 辶”为部首的字, 依笔顺在其之前其他部首或小字，则末码先取z: 如随 (svez), 挺 (tkfz), 庭 (tkgz)</li>
</ul>
</li>
<li>
<p>首末双形</p>
<ul>
<li>
<p>遵循字根笔顺。<br>
字根按书写顺序排序</p>
</li>
<li>
<p>取首和末两个形码。<br>
<strong>先取小字或部件，否则取笔画</strong></p>
</li>
</ul>
</li>
<li>
<p>不拆穿</p>
<ul>
<li>不要往穿插式构造的方向去拆字，因为结构会被破坏。<br>
(中，未，末，重，里，……)</li>
</ul>
</li>
<li>
<p>不分开</p>
<ul>
<li>不要往隔开式构造的方向去拆字，因为结构会被破坏。<br>
(办，半，米，……)</li>
</ul>
</li>
</ul>
<h2 id="小字"><a class="header-anchor" href="#小字"></a>小字</h2>
<p>小字衍生规则</p>
<ul>
<li>
<p>小字的判定:</p>
<p>无法被如下衍生得到的字是元小字</p>
<p>通过如下方式在小字上<strong>加1-3笔衍生</strong>的字<strong>都是小字</strong></p>
<ul>
<li>
<p>延长: 用所加笔画将小字中的笔画延长</p>
<p>己-&gt;巳, 已</p>
</li>
<li>
<p>穿插: 存在所加笔画x, 存在小字的笔画y, 使得 去掉端点(x)  ∩ 去掉端点(y) ≠ ∅</p>
<p>中=口+丨，未=一+木，末=一+木, 井=一+廾</p>
</li>
<li>
<p>隔开:  不是穿插, 且存在小字的笔画y, 使得 所加诸(&gt;=2)笔画的凸包 ∩ 去掉端点(y)  ≠ ∅</p>
<p>办=力+丶+丶, 为=丶+力+丶, 米=丶+丶+木, 来=一+米, 半=丶+丶+一+十……</p>
</li>
<li>
<p>组合: 以上除外的情况, 且所加笔画</p>
<p>旦=日+一,良=丶+艮, 只=口+八, 白=丿+日, 失=丿+夫, 大=+乀, 巴=巳+丨</p>
</li>
</ul>
</li>
<li>
<p>输入小字:</p>
<ul>
<li>
<p>元小字: 首笔画+末笔画</p>
</li>
<li>
<p>变形/穿插/隔开式小字: 首笔画+末笔画（对应组合规则中的 <strong>“不拆穿” “不分开”</strong>）</p>
</li>
<li>
<p>组合式小字:</p>
<ul>
<li>
<p>若组合的方式 与实际笔顺相同, 则根据实际笔顺: 首小字/笔画+末小字/笔画</p>
<p>例如:</p>
</li>
<li>
<p>若组合的方式 与实际笔顺不同, 则: 小字+加的笔画的末笔</p>
<p>例如: 巴BASL=巳S+丨L</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="小字的衍生"><a class="header-anchor" href="#小字的衍生"></a><a href="https://mubu.com/doc/1fzV_K9daE">小字的衍生</a></h2>
<p>以下的根节点是元小字</p>
<h3 id="衍生分支繁多"><a class="header-anchor" href="#衍生分支繁多"></a>衍生分支繁多</h3>
<ul>
<li>
<p>冂</p>
<ul>
<li>
<p>巾</p>
</li>
<li>
<p>门</p>
</li>
<li>
<p>册</p>
</li>
<li>
<p>丹</p>
<ul>
<li>舟</li>
</ul>
</li>
<li>
<p>用</p>
</li>
</ul>
</li>
<li>
<p>口</p>
<ul>
<li>
<p>日</p>
<ul>
<li>
<p>白</p>
<ul>
<li>百</li>
</ul>
</li>
<li>
<p>旦</p>
<ul>
<li>亘</li>
</ul>
</li>
<li>
<p>由</p>
<ul>
<li>曲</li>
</ul>
</li>
<li>
<p>甲</p>
</li>
<li>
<p>申</p>
</li>
<li>
<p>电</p>
</li>
</ul>
</li>
<li>
<p>中</p>
<ul>
<li>史
<ul>
<li>吏</li>
</ul>
</li>
</ul>
</li>
<li>
<p>四</p>
</li>
<li>
<p>目</p>
</li>
<li>
<p>田</p>
</li>
<li>
<p>只</p>
</li>
</ul>
</li>
<li>
<p>十</p>
<ul>
<li>
<p>干</p>
<ul>
<li>午</li>
</ul>
</li>
<li>
<p>千</p>
<ul>
<li>
<p>壬</p>
</li>
<li>
<p>禾</p>
</li>
</ul>
</li>
<li>
<p>士</p>
<ul>
<li>壬</li>
</ul>
</li>
<li>
<p>土</p>
<ul>
<li>
<p>王</p>
<ul>
<li>
<p>玉</p>
</li>
<li>
<p>主</p>
</li>
</ul>
</li>
<li>
<p>生</p>
</li>
</ul>
</li>
<li>
<p>丰</p>
<ul>
<li>耒</li>
</ul>
</li>
<li>
<p>木</p>
<ul>
<li>
<p>术</p>
</li>
<li>
<p>禾</p>
</li>
<li>
<p>本</p>
</li>
<li>
<p>末</p>
</li>
<li>
<p>未</p>
<ul>
<li>
<p>朱</p>
</li>
<li>
<p>耒</p>
</li>
</ul>
</li>
<li>
<p>米</p>
<ul>
<li>来</li>
</ul>
</li>
</ul>
</li>
<li>
<p>牛</p>
<ul>
<li>生</li>
</ul>
</li>
<li>
<p>平</p>
</li>
<li>
<p>半</p>
</li>
</ul>
</li>
<li>
<p>人</p>
<ul>
<li>
<p>个</p>
</li>
<li>
<p>内</p>
<ul>
<li>丙</li>
</ul>
</li>
<li>
<p>火</p>
<ul>
<li>灭</li>
</ul>
</li>
</ul>
</li>
<li>
<p></p>
<ul>
<li>
<p>大</p>
<ul>
<li>
<p>天</p>
<ul>
<li>矢</li>
</ul>
</li>
<li>
<p>夭</p>
</li>
<li>
<p>太</p>
</li>
<li>
<p>犬</p>
</li>
<li>
<p>夫</p>
<ul>
<li>
<p>失</p>
</li>
<li>
<p>夹</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>丈</p>
</li>
</ul>
</li>
</ul>
<h3 id="衍生分支简单"><a class="header-anchor" href="#衍生分支简单"></a>衍生分支简单</h3>
<h4 id="单分支"><a class="header-anchor" href="#单分支"></a>单分支</h4>
<ul>
<li>
<p>非</p>
<ul>
<li>韭</li>
</ul>
</li>
<li>
<p>冉</p>
<ul>
<li>再</li>
</ul>
</li>
<li>
<p>兀</p>
<ul>
<li>元</li>
</ul>
</li>
<li>
<p>西</p>
<ul>
<li>酉</li>
</ul>
</li>
<li>
<p>夕</p>
<ul>
<li>歹</li>
</ul>
</li>
<li>
<p>夬</p>
<ul>
<li>央</li>
</ul>
</li>
<li>
<p>立</p>
<ul>
<li>产</li>
</ul>
</li>
<li>
<p>皿</p>
<ul>
<li>血</li>
</ul>
</li>
<li>
<p>之</p>
<ul>
<li>乏</li>
</ul>
</li>
<li>
<p>刀</p>
<ul>
<li>刃</li>
</ul>
</li>
<li>
<p>艮</p>
<ul>
<li>良</li>
</ul>
</li>
<li>
<p>厂</p>
<ul>
<li>广</li>
</ul>
</li>
<li>
<p>氏</p>
<ul>
<li>氐</li>
</ul>
</li>
<li>
<p>万</p>
<ul>
<li>方</li>
</ul>
</li>
<li>
<p>乂</p>
<ul>
<li>义</li>
</ul>
</li>
<li>
<p>又</p>
<ul>
<li>叉</li>
</ul>
</li>
<li>
<p>二</p>
<ul>
<li>亏</li>
</ul>
</li>
<li>
<p>母</p>
<ul>
<li>每</li>
</ul>
</li>
<li>
<p>心</p>
<ul>
<li>必</li>
</ul>
</li>
<li>
<p>束</p>
<ul>
<li>柬</li>
</ul>
</li>
<li>
<p>卜</p>
<ul>
<li>下
<ul>
<li>卞</li>
</ul>
</li>
</ul>
</li>
<li>
<p>匚</p>
<ul>
<li>巨
<ul>
<li>臣</li>
</ul>
</li>
</ul>
</li>
<li>
<p>弋</p>
<ul>
<li>戈
<ul>
<li>戋</li>
</ul>
</li>
</ul>
</li>
<li>
<p>业</p>
<ul>
<li>亚
<ul>
<li>严</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="多分支"><a class="header-anchor" href="#多分支"></a>多分支</h4>
<ul>
<li>
<p>弓</p>
<ul>
<li>
<p>弗</p>
</li>
<li>
<p>夷</p>
</li>
</ul>
</li>
<li>
<p>几</p>
<ul>
<li>
<p>凡</p>
</li>
<li>
<p>风</p>
</li>
</ul>
</li>
<li>
<p>力</p>
<ul>
<li>
<p>办</p>
</li>
<li>
<p>为</p>
</li>
</ul>
</li>
<li>
<p>廿</p>
<ul>
<li>
<p>甘</p>
</li>
<li>
<p>世</p>
</li>
</ul>
</li>
<li>
<p>尸</p>
<ul>
<li>
<p>户</p>
</li>
<li>
<p>尺</p>
</li>
</ul>
</li>
<li>
<p>戊</p>
<ul>
<li>
<p>戌</p>
</li>
<li>
<p>戍</p>
</li>
<li>
<p>成</p>
</li>
</ul>
</li>
<li>
<p>小</p>
<ul>
<li>
<p>少</p>
</li>
<li>
<p>示</p>
</li>
<li>
<p>东</p>
</li>
<li>
<p>乐</p>
</li>
</ul>
</li>
<li>
<p>尢</p>
<ul>
<li>
<p>无</p>
</li>
<li>
<p>尤</p>
</li>
</ul>
</li>
<li>
<p>勹</p>
<ul>
<li>
<p>勺</p>
</li>
<li>
<p>勿</p>
<ul>
<li>匆</li>
</ul>
</li>
</ul>
</li>
<li>
<p>己</p>
<ul>
<li>
<p>已</p>
</li>
<li>
<p>巳</p>
<ul>
<li>巴</li>
</ul>
</li>
</ul>
</li>
<li>
<p>厶</p>
<ul>
<li>
<p>么</p>
</li>
<li>
<p>幺</p>
<ul>
<li>乡</li>
</ul>
</li>
</ul>
</li>
<li>
<p>斤</p>
<ul>
<li>
<p>丘</p>
<ul>
<li>兵</li>
</ul>
</li>
<li>
<p>斥</p>
</li>
</ul>
</li>
<li>
<p>乙</p>
<ul>
<li>
<p>九</p>
<ul>
<li>丸</li>
</ul>
</li>
<li>
<p>乞</p>
</li>
</ul>
</li>
<li>
<p>廾</p>
<ul>
<li>
<p>开</p>
<ul>
<li>并</li>
</ul>
</li>
<li>
<p>升</p>
</li>
<li>
<p>井</p>
</li>
</ul>
</li>
</ul>
<h3 id="没有衍生分支"><a class="header-anchor" href="#没有衍生分支"></a>没有衍生分支</h3>
<p>不是偏旁部首,又很难规则关联的常用独体字</p>
<ul>
<li>
<p>a 凹</p>
</li>
<li>
<p>b 匕 不 半</p>
</li>
<li>
<p>c 寸 才</p>
</li>
<li>
<p>d 丁 刁 东</p>
</li>
<li>
<p>e 耳 儿 而</p>
</li>
<li>
<p>f 飞 甫</p>
</li>
<li>
<p>g 工 瓜 丐 果 更</p>
</li>
<li>
<p>h 互 乎</p>
</li>
<li>
<p>i 川 车 长 丑 垂 出</p>
</li>
<li>
<p>j 及 臼 击</p>
</li>
<li>
<p>k</p>
</li>
<li>
<p>l 了 乐 里 卵 丽</p>
</li>
<li>
<p>m 毛 马 民 面</p>
</li>
<li>
<p>n 女 鸟 乃 农 年</p>
</li>
<li>
<p>o</p>
</li>
<li>
<p>p 片 爿pán</p>
</li>
<li>
<p>q 七 且 气</p>
</li>
<li>
<p>r 入</p>
</li>
<li>
<p>s 肃</p>
</li>
<li>
<p>t 屯</p>
</li>
<li>
<p>u 手 身 水 上 事 书 豕shǐ</p>
</li>
<li>
<p>v 止 爪 专 州 重 乍</p>
</li>
<li>
<p>w 瓦 五 卫 亡 韦 我</p>
</li>
<li>
<p>x 习</p>
</li>
<li>
<p>y 与 牙 丫 永 也 禺 禹 雨 曳 聿yù、尹yǐn</p>
</li>
<li>
<p>z</p>
</li>
</ul>
]]></content>
      <categories>
        <category>器</category>
        <category>输入法</category>
      </categories>
  </entry>
  <entry>
    <title>bash设置</title>
    <url>/posts/e303a4a3/</url>
    <content><![CDATA[<h2 id="配置环境变量"><a class="header-anchor" href="#配置环境变量"></a>配置环境变量</h2>
<p>参见 <a href="http://elf8848.iteye.com/blog/1582137">http://elf8848.iteye.com/blog/1582137</a></p>
<p>适应Mac/Linux</p>
<h3 id="一、改哪个文件"><a class="header-anchor" href="#一、改哪个文件"></a>一、改哪个文件</h3>
<table>
<thead>
<tr>
<th>文件</th>
<th>ubuntu或debian</th>
<th>mac</th>
<th>启动条件</th>
<th>有效于</th>
</tr>
</thead>
<tbody>
<tr>
<td>/etc/profile</td>
<td>无</td>
<td>有</td>
<td>用户登录系统</td>
<td>所有用户</td>
</tr>
<tr>
<td>/etc[/bashrc|bash.bashrc]</td>
<td>无</td>
<td>有</td>
<td>用户登录系统，开新 shell</td>
<td>所有用户</td>
</tr>
<tr>
<td>~/[.bash_profile|.bash_login|.profile]</td>
<td>有</td>
<td>有</td>
<td>用户登录系统</td>
<td>当前用户</td>
</tr>
<tr>
<td>~/.bashrc</td>
<td>有</td>
<td>有</td>
<td>用户登录系统，开新 shell</td>
<td>当前用户</td>
</tr>
<tr>
<td>~/.bash_logout</td>
<td>有</td>
<td>有</td>
<td>用户退出系统时</td>
<td>当前用户</td>
</tr>
</tbody>
</table>
<p>登录: 如 “su -“ 命令, ssh 连服务器</p>
<p>非登录: 执行’bash xxx’命令，戳开终端</p>
<p>启动上述文件，即下面的激活上述文件</p>
<h4 id="执行顺序"><a class="header-anchor" href="#执行顺序"></a>执行顺序</h4>
<p><a href="https://wxnacy.com/2018/06/01/shell-profile/">参考</a>, <a href="https://blog.csdn.net/robertaqi/article/details/5449763">流程图</a>, <a href="http://blog.51cto.com/hxl2009/664187">各个文件</a></p>
<p><img data-src="/posts/e303a4a3/17NoJ.png" alt="17NoJ"></p>
<h5 id="登录"><a class="header-anchor" href="#登录"></a>登录</h5>
<p>流程图</p>
<pre class="line-numbers language-none"><code class="language-none">                     &#x2F;etc&#x2F;profile.d&#x2F;下诸文件
                          ↑ 手动
*用户登录* --先自动--&gt; &#x2F;etc&#x2F;profile -手动-&gt; &#x2F;etc&#x2F;(bash.)bashrc
    |                                    ↑ 手动
    |        不登录开新shell* -----&gt;  ~&#x2F;.bashrc  -手动-&gt;  ~&#x2F;.bash_aliases
    \                               ↑ 手动
     \--- --后自动---------------&gt; ~&#x2F;[.bash_profile|.bash_login|.profile]从前到后找，只执行一个
     					     CentOS 默认用 ~&#x2F;.bash_profile 文件
     					     Ubuntu 默认用 ~&#x2F;.profile 文件
     					     混用也不影响
     					     sh 登录只加载 .profile, 与bash共用.profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上述跳转关系依赖于</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /etc/profile，/etc/bashrc 中通常有</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token environment constant">$BASH_VERSION</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> -d /etc/profile.d <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
      <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> /etc/profile.d/*.sh<span class="token punctuation">;</span> <span class="token keyword">do</span>
        <span class="token keyword">if</span> <span class="token punctuation">[</span> -r <span class="token variable">$i</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
          <span class="token builtin class-name">.</span> <span class="token variable">$i</span>
        <span class="token keyword">fi</span>
      <span class="token keyword">done</span>
      <span class="token builtin class-name">unset</span> i
    <span class="token keyword">fi</span>
<span class="token keyword">fi</span>

<span class="token comment"># ~/.bash_profile 中通常有</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token environment constant">$BASH_VERSION</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> -f ~/.bashrc <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">.</span> ~/.bashrc
    <span class="token keyword">fi</span>
<span class="token keyword">fi</span>

<span class="token comment"># ~/.bashrc 中通常有</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token environment constant">$BASH_VERSION</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> -f /etc/bashrc  <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">.</span> /etc/bashrc
    <span class="token keyword">fi</span>
<span class="token keyword">fi</span>

<span class="token comment"># ~/.bashrc 中通常有</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token environment constant">$BASH_VERSION</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> -f ~/.bash_aliases  <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">.</span> ~/.bash_aliases
    <span class="token keyword">fi</span>
<span class="token keyword">fi</span>

<span class="token comment"># ~/.bashrc 中通常有</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token environment constant">$BASH_VERSION</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> -f /etc/bashrc <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">.</span> /etc/bashrc
    <span class="token keyword">fi</span>
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>分工建议</p>
<ul>
<li>
<p><code>/etc/profile</code> ：所有用户系统信息，如置环境信息，只在用户登录时执行一次</p>
</li>
<li>
<p><code>~/.bash_profile</code> ： 本用户系统信息，如环境变量</p>
</li>
<li>
<p><code>~/.bashrc</code> ：shell 信息，如alias，配色</p>
</li>
</ul>
<h5 id="登出"><a class="header-anchor" href="#登出"></a>登出</h5>
<p>~/.bash_logout</p>
<h3 id="二、激活"><a class="header-anchor" href="#二、激活"></a>二、激活</h3>
<p>修改完环境变量，要在终端输入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> 被改的文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="命令别名"><a class="header-anchor" href="#命令别名"></a>命令别名</h2>
<p>参见 <a href="http://www.cnblogs.com/fuly550871915/p/4961903.html">http://www.cnblogs.com/fuly550871915/p/4961903.html</a><br>
其语法是</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> 命令1<span class="token operator">=</span><span class="token string">'命令2'</span>
<span class="token comment"># 或</span>
<span class="token builtin class-name">alias</span> 命令1<span class="token operator">=</span><span class="token string">"命令2"</span>
<span class="token comment"># = 前后不能有空格</span>
<span class="token comment"># 注释不能写在代码所在行尾</span>
<span class="token comment"># '...'与"..."完全一样</span>
<span class="token comment"># &lt;命令1>不能有空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>则在该用户登录电脑时，终端里输入<code>命令1</code>均会文本替换为<code>命令2</code></p>
<h2 id="bashrc"><a class="header-anchor" href="#bashrc"></a>~/.bashrc</h2>
<h3 id="Linux服务器的"><a class="header-anchor" href="#Linux服务器的"></a>Linux服务器的</h3>
<p>以下可直接复制，用于配置Linux服务器用户、个人mac的 ~/.bashrc 文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># enable color support of ls and also add handy aliases</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> -x /usr/bin/dircolors <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">test</span> -r ~/.dircolors <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">dircolors</span> -b ~/.dircolors<span class="token variable">)</span></span>"</span> <span class="token operator">||</span> <span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">dircolors</span> -b<span class="token variable">)</span></span>"</span>
    <span class="token builtin class-name">alias</span> <span class="token assign-left variable">ls</span><span class="token operator">=</span><span class="token string">'ls --color=auto'</span>
    <span class="token builtin class-name">alias</span> <span class="token assign-left variable">dir</span><span class="token operator">=</span><span class="token string">'dir --color=auto'</span>
    <span class="token builtin class-name">alias</span> <span class="token assign-left variable">vdir</span><span class="token operator">=</span><span class="token string">'vdir --color=auto'</span>
    <span class="token builtin class-name">alias</span> <span class="token assign-left variable">grep</span><span class="token operator">=</span><span class="token string">'grep --color=auto'</span>
    <span class="token builtin class-name">alias</span> <span class="token assign-left variable">fgrep</span><span class="token operator">=</span><span class="token string">'fgrep --color=auto'</span>
    <span class="token builtin class-name">alias</span> <span class="token assign-left variable">egrep</span><span class="token operator">=</span><span class="token string">'egrep --color=auto'</span>
<span class="token keyword">fi</span>

<span class="token comment"># ----- ls aliases -----</span>
<span class="token comment"># 显(xxx)隐(.xxx) 文件(xxx)文件夹(xxx/) 用户名 大小(k/M/GB格式) 创建日期</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ll</span><span class="token operator">=</span><span class="token string">'ls -alFh'</span>
<span class="token comment"># 显(xxx)隐(.xxx) 文件与文件夹不区分(xxx)</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">la</span><span class="token operator">=</span><span class="token string">'ls -A'</span>
<span class="token comment"># 显 文件(xxx)文件夹(xxx/) hide .pyc</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">l</span><span class="token operator">=</span><span class="token string">'ls -CF -I*.pyc'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="mac的"><a class="header-anchor" href="#mac的"></a>mac的</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
<span class="token comment"># ==================== 命令行配色 =====================</span>
<span class="token comment"># -------------------- alias to ls ------------------</span>
<span class="token comment"># 显(xxx)隐(.xxx) 文件(xxx)文件夹(xxx/) 用户名 大小(k/M/GB格式) 创建日期</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ll</span><span class="token operator">=</span><span class="token string">'ls -alFh'</span>
<span class="token comment"># 显(xxx)隐(.xxx) 文件与文件夹不区分(xxx)</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">la</span><span class="token operator">=</span><span class="token string">'ls -A'</span>
<span class="token comment"># 显 文件(xxx)文件夹(xxx/) hide .pyc</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">l</span><span class="token operator">=</span><span class="token string">'ls -CF -I*.pyc'</span>

<span class="token comment"># -------------------- alias to grep ------------------</span>
<span class="token comment"># 上色</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ls</span><span class="token operator">=</span><span class="token string">'ls --color=auto'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">dir</span><span class="token operator">=</span><span class="token string">'dir --color=auto'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">vdir</span><span class="token operator">=</span><span class="token string">'vdir --color=auto'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">grep</span><span class="token operator">=</span><span class="token string">'grep --color=auto'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">fgrep</span><span class="token operator">=</span><span class="token string">'fgrep --color=auto'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">egrep</span><span class="token operator">=</span><span class="token string">'egrep --color=auto'</span>

<span class="token comment"># ------------- 命令行使用Coreutils 配色方案 ----------</span>
<span class="token comment"># Coreutils安装教程：http://linfan.info/blog/2012/02/27/colorful-terminal-in-mac/</span>
<span class="token comment"># 效果：不同类型的文件有不同颜色，如图水红色，文件夹群青色...</span>
<span class="token comment"># 采用GNU Coreutils的gdircolor配色替代ls的配色</span>
<span class="token comment"># 修改~/.dir_colors(自定义配色文件)，以修改ls命令使用的环境变量LS_COLORS（BSD是LSCOLORS）</span>
<span class="token keyword">if</span> brew list <span class="token operator">|</span> <span class="token function">grep</span> coreutils <span class="token operator">></span> /dev/null <span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --prefix coreutils<span class="token variable">)</span></span>/libexec/gnubin:<span class="token environment constant">$PATH</span>"</span>
  <span class="token builtin class-name">alias</span> <span class="token assign-left variable">ls</span><span class="token operator">=</span><span class="token string">'ls -F --show-control-chars --color=auto'</span>
  <span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">`</span>gdircolors -b <span class="token environment constant">$HOME</span>/.dir_colors<span class="token variable">`</span></span>
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="Mac的命令行配色"><a class="header-anchor" href="#Mac的命令行配色"></a><a href="http://linfan.info/blog/2012/02/27/colorful-terminal-in-mac/">Mac的命令行配色</a></h4>
<h5 id="Coreutils-配色方案"><a class="header-anchor" href="#Coreutils-配色方案"></a>Coreutils 配色方案</h5>
<p>效果：不同类型的文件有不同颜色，如，图片水红色，文件夹群青色…</p>
<p>原理：采用GNU Coreutils的gdircolor配色替代ls的配色，修改~/.dir_colors(自定义配色文件)，以修改ls命令使用的环境变量LS_COLORS（BSD是LSCOLORS）</p>
<ul>
<li>
<p>安装Coreutils</p>
<ul>
<li>mac： 通过<a href="http://linfan.info/blog/2012/02/25/homebrew-installation-and-usage/">Homebrew</a>安装Coreutils</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> xz coreutils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>
<p>Linux：</p>
<ul>
<li>
<p>若有sudo权限，依<a href="https://www.howtoinstall.co/en/ubuntu/trusty/coreutils">安装教程</a>，即</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> coreutils<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>若无sudo权限，使用<a href="https://anaconda.org/bioconda/coreutils">conda安装coreutils</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda <span class="token function">install</span> -c bioconda coreutils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>生成颜色定义文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdircolors --print-database <span class="token operator">></span> ~/.dir_colors
<span class="token comment"># 如显示没有“gdircolors”命令，但有”dircolors“，则执行下列命令</span>
<span class="token function">dircolors</span> --print-database <span class="token operator">></span> ~/.dir_colors<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>在<code>~/.bash_profile</code>配置文件中加入以下代码</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ------------- 命令行使用Coreutils 配色方案 ----------</span>
<span class="token comment"># Coreutils安装教程：http://linfan.info/blog/2012/02/27/colorful-terminal-in-mac/</span>
<span class="token comment"># 效果：不同类型的文件有不同颜色，如图水红色，文件夹群青色...</span>
<span class="token comment"># 采用GNU Coreutils的gdircolor配色替代ls的配色</span>
<span class="token comment"># 修改~/.dir_colors(自定义配色文件)，以修改ls命令使用的环境变量LS_COLORS（BSD是LSCOLORS）</span>
<span class="token keyword">if</span> brew list <span class="token operator">|</span> <span class="token function">grep</span> coreutils <span class="token operator">></span> /dev/null <span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --prefix coreutils<span class="token variable">)</span></span>/libexec/gnubin:<span class="token environment constant">$PATH</span>"</span>
  <span class="token builtin class-name">alias</span> <span class="token assign-left variable">ls</span><span class="token operator">=</span><span class="token string">'ls -F --show-control-chars --color=auto'</span>
  <span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">`</span>gdircolors -b <span class="token environment constant">$HOME</span>/.dir_colors<span class="token variable">`</span></span>
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="bash-profile"><a class="header-anchor" href="#bash-profile"></a>~/.bash_profile</h2>
<p>以下可直接复制，用于配置Linux服务器用户、个人mac的 ~/.bash_profile 文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.bashrc
<span class="token comment"># ---------------- alias to resource ----------------</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">gpu</span><span class="token operator">=</span><span class="token string">'nvidia-smi'</span> <span class="token comment"># 查GPU使用</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">mem</span><span class="token operator">=</span><span class="token string">'free'</span>  <span class="token comment"># 查内存使用</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">killpid</span><span class="token operator">=</span><span class="token string">'kill -9'</span>  <span class="token comment"># killpid [pid] 杀死指定编号的进程</span>

<span class="token comment"># ----------------- use which gpu -------------------</span>
<span class="token comment"># 用法</span>
<span class="token comment"># `gpuid 0 python xxx.py` 现在暂时用GPU0运行 xxx.py</span>
<span class="token comment"># `gpuid 0` 并不能使得接下来一直默认用GPU0运行各个程序</span>
<span class="token function-name function">gpuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">eval</span> <span class="token string">"CUDA_VISIBLE_DEVICES=<span class="token variable">$*</span>"</span>
<span class="token punctuation">&#125;</span>
<span class="token comment"># 若`nvidia-smi`显示的GPU编号和`CUDA_VISIBLE_DEVICES=[GPU编号]`不一致，则</span>
<span class="token comment"># &#123;</span>
<span class="token comment">#     arg1="$1"</span>
<span class="token comment">#     shift</span>
<span class="token comment">#     if [ "$arg1" == "1" ]</span>
<span class="token comment">#     then</span>
<span class="token comment">#         eval "CUDA_VISIBLE_DEVICES=0 $*"</span>
<span class="token comment">#     elif [ "$arg1" == "0" ]</span>
<span class="token comment">#     then</span>
<span class="token comment">#         eval "CUDA_VISIBLE_DEVICES=1 $*"</span>
<span class="token comment">#     else</span>
<span class="token comment">#         echo "no gpuid = $arg1, command 'nvidia-smi' to see more"</span>
<span class="token comment">#     fi</span>
<span class="token comment"># &#125;</span>

<span class="token comment"># ---------------- alias envr vari ------------------</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">vbp</span><span class="token operator">=</span><span class="token string">'vim ~/.bash_profile'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">sbp</span><span class="token operator">=</span><span class="token string">'source ~/.bash_profile'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">vbr</span><span class="token operator">=</span><span class="token string">'vim ~/.bashrc'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">sbr</span><span class="token operator">=</span><span class="token string">'source ~/.bashrc'</span>

<span class="token comment"># ---------------- alias to python ------------------</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">py</span><span class="token operator">=</span><span class="token string">'python'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ip</span><span class="token operator">=</span><span class="token string">'ipython'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">nt</span><span class="token operator">=</span><span class="token string">'jupyter notebook'</span>

<span class="token comment"># -----------------  alias to tmux ------------------</span>
<span class="token comment"># create a new tmux session, tmux new</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">tn</span><span class="token operator">=</span><span class="token string">'tmux new -s'</span>
<span class="token comment"># list all session of tmux session</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">tl</span><span class="token operator">=</span><span class="token string">'tmux ls'</span>
<span class="token comment"># kill a tmux session</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">tk</span><span class="token operator">=</span><span class="token string">'tmux kill-session -t'</span>
<span class="token comment"># kill tmux server, means tmux kill all</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">tka</span><span class="token operator">=</span><span class="token string">'tmux kill-server'</span>
<span class="token comment"># attach to a tmux session, t means go to</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ta</span><span class="token operator">=</span><span class="token string">'tmux a -t'</span>
<span class="token comment"># attach to the last tmux session, r means recover</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">tr</span><span class="token operator">=</span><span class="token string">'tmux a'</span>

<span class="token comment"># ------------------ 命令行基础操作 ---------------</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">md</span><span class="token operator">=</span><span class="token string">'mkdir'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">lk</span><span class="token operator">=</span><span class="token string">'ln -s'</span>
<span class="token comment"># 创建软连接</span>
<span class="token builtin class-name">alias</span> <span class="token punctuation">..</span><span class="token operator">=</span><span class="token string">'cd ../'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>器</category>
        <category>shell</category>
      </categories>
  </entry>
  <entry>
    <title>shell下的颜色</title>
    <url>/posts/7fde870c/</url>
    <content><![CDATA[<h2 id="显示256色的预览"><a class="header-anchor" href="#显示256色的预览"></a>显示256色的预览</h2>
<p>执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -s https://gist.githubusercontent.com/HaleTom/89ffe32783f89f403bba96bd7bcd1263/raw/ <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>会返回</p>
<p><img data-src="/posts/7fde870c/image-20200120192157283.png" alt="image-20200120192157283"></p>
<p>注意:</p>
<ul>
<li>同色号的字, 非粗体和粗体(bold)的前景颜色不同</li>
<li>同色号的前景颜色和背景颜色不同</li>
<li>第0-15号色在iterm2下实际显示何种颜色, 取决于iterm的中 Preference-Profile-color-ANSI color的设置</li>
</ul>
]]></content>
      <categories>
        <category>器</category>
        <category>shell</category>
      </categories>
  </entry>
  <entry>
    <title>shell的参数解析</title>
    <url>/posts/bb2bab3e/</url>
    <content><![CDATA[<h1 id="getopt"><a class="header-anchor" href="#getopt"></a>getopt</h1>
<h2 id="使用规则"><a class="header-anchor" href="#使用规则"></a>使用规则</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bash或zsh getopt_demo.sh 一堆参数 <span class="token comment"># 其前中后均可有 余参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>格式化参数：即<code>-</code>开头的参数，若无法依照希望的方式解析，就会报错</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>短参数</th>
<th>长参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>无选项</td>
<td>-a</td>
<td>–a-long</td>
</tr>
<tr>
<td>必有选项</td>
<td><code>-boption</code>  或 <code>-b option</code>或 <br><code>-b'op tions'</code>  或 <code>-b 'op tion'</code></td>
<td><code>--b-long option</code>或<br><code>--b-long 'op tion'</code></td>
</tr>
<tr>
<td>可有选项 若无选项</td>
<td><code>-c</code></td>
<td><code>--c-long</code></td>
</tr>
<tr>
<td>可有选项 若有选项：<br><strong>只能用短参数 选项和参数间无空格</strong></td>
<td><code>-coption</code>  <br><code>-c'op tion'</code></td>
<td><code>--c-long option</code>不可</td>
</tr>
</tbody>
</table>
<ul>
<li>余参数：即非<code>-</code>开头的参数，可出现在格式化参数之前、之中、之后</li>
</ul>
<hr>
<p>例如</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bash/zsh getopt_demo.sh -a par1 <span class="token string">'another arg'</span> --c-long <span class="token string">'wow!*\?'</span> -cmore -b <span class="token string">" very long "</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回</p>
<pre class="line-numbers language-none"><code class="language-none">Option a
Option c, no argument
Option c, argument more&#39;
Option b, argument very long &#39;
Remaining arguments:
--&gt; par1&#39;
--&gt;another arg&#39;
--&gt; &#96;wow!\?&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="代码写法"><a class="header-anchor" href="#代码写法"></a>代码写法</h2>
<p><code>getopt_demo.sh</code>内容如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># 使用规则</span>
<span class="token comment"># bash/zsh getopt_demo.sh 一堆参数，其前中后均可有 余参数</span>
<span class="token comment"># 格式化参数：以'-'开头，必需符合本代码的解析要求</span>
    <span class="token comment">#             短参数                           长参数</span>
    <span class="token comment"># 无选项       -a                              --a-long</span>
    <span class="token comment"># 必有选项     -bss          -b ss             --b-long ss</span>
    <span class="token comment">#             -b'sds sds'   -b 'sds sds'      --b-long 'sds sds'</span>
    <span class="token comment"># 可有选项若无  -c                              --c-long</span>
    <span class="token comment"># 可有选项若有  -css          -c'sds sds'  只可短参数，选项与参数间不得有空格</span>
<span class="token comment"># 余参数：不以'-'开头</span>


<span class="token comment"># 参数预处理</span>
<span class="token assign-left variable">TEMP</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>getopt <span class="token punctuation">\</span>
    -o      ab:c:: <span class="token punctuation">\</span>
    --long  a-long,b-long:,c-long:: <span class="token punctuation">\</span>
    -n      <span class="token string">'参数解析错误'</span> <span class="token punctuation">\</span>
    -- s    <span class="token string">"<span class="token variable">$@</span>"</span><span class="token variable">)</span></span>
<span class="token comment"># 写法</span>
    <span class="token comment">#   -o     短参数 不需要分隔符</span>
    <span class="token comment">#   --long 长参数 用','分隔</span>
    <span class="token comment">#   ``无选项  `:`必有选项  `::` 可由选项</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token builtin class-name">echo</span> <span class="token string">"格式化的参数解析错误，正在退出"</span> <span class="token operator">></span><span class="token file-descriptor important">&amp;2</span> <span class="token punctuation">;</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span> <span class="token punctuation">;</span> <span class="token keyword">fi</span>
<span class="token builtin class-name">eval</span> <span class="token builtin class-name">set</span> -- <span class="token string">"<span class="token variable">$TEMP</span>"</span> <span class="token comment"># 将复制给 $1, $2, ...</span>


<span class="token comment"># 处理参数</span>
<span class="token keyword">while</span> <span class="token boolean">true</span> <span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token keyword">case</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token keyword">in</span>
    <span class="token comment"># 无选项</span>
    -a<span class="token operator">|</span>--a-long<span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> opt a <span class="token punctuation">;</span> <span class="token builtin class-name">shift</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token comment"># 必有选项</span>
    -b<span class="token operator">|</span>--b-long<span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> opt b arg <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token punctuation">;</span> <span class="token builtin class-name">shift</span> <span class="token number">2</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token comment"># 可省选项</span>
    -c<span class="token operator">|</span>--c-long<span class="token punctuation">)</span> <span class="token keyword">case</span> <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token keyword">in</span>
        <span class="token comment"># 无选项</span>
        <span class="token string">""</span><span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> opt c no arg <span class="token punctuation">;</span> <span class="token builtin class-name">shift</span> <span class="token number">2</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token comment"># 有选项</span>
        *<span class="token punctuation">)</span>   <span class="token builtin class-name">echo</span> opt c arg <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token punctuation">;</span> <span class="token builtin class-name">shift</span> <span class="token number">2</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token keyword">esac</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token comment"># '--'后是 余参数</span>
    --<span class="token punctuation">)</span> <span class="token builtin class-name">shift</span> <span class="token punctuation">;</span> <span class="token builtin class-name">break</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
    <span class="token comment"># 处理参数的代码错误</span>
    *<span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">"参数处理错误"</span> <span class="token punctuation">;</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span> <span class="token punctuation">;</span> <span class="token keyword">done</span>


<span class="token comment"># 余下参数</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
   <span class="token builtin class-name">echo</span> rest <span class="token string">"<span class="token variable">$i</span>"</span>
<span class="token keyword">done</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="snippets"><a class="header-anchor" href="#snippets"></a>snippets</h2>
<p>为了方便些getopt，我已经将上述模板写成sublime、vscode、vim的snippet</p>
<h1 id="徒手解析"><a class="header-anchor" href="#徒手解析"></a>徒手解析</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">while</span> <span class="token builtin class-name">test</span> <span class="token variable">$#</span> -gt <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token keyword">case</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token keyword">in</span>
        -<span class="token operator">&lt;</span>短参数<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token punctuation">)</span>  相应代码 <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment"># 短参数</span>
        -<span class="token operator">&lt;</span>短参数<span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token punctuation">)</span>  相应代码 <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment"># 短参数</span>
        --<span class="token operator">&lt;</span>长参数<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token punctuation">)</span> 相应代码 <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment"># 长参数</span>
        --<span class="token operator">&lt;</span>长参数<span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token punctuation">)</span> 相应代码 <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment"># 长参数</span>
        -*<span class="token punctuation">)</span>         相应代码 <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment"># 剩余短参数</span>
        --*<span class="token punctuation">)</span>        相应代码 <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment"># 剩余长参数</span>
        *<span class="token punctuation">)</span>          相应代码 <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment"># 非参数</span>
    <span class="token keyword">esac</span>
    <span class="token builtin class-name">shift</span>
<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注：</p>
<ul>
<li><code>;;</code>前可以换行，详见下</li>
<li><code>-某某) </code>后可以换行，详见下</li>
<li>相应代码可以再接受参数，例如</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-<span class="token operator">&lt;</span>短参数<span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$&#123;2<span class="token operator">:</span>0<span class="token operator">:</span>1&#125;</span>"</span> <span class="token operator">!=</span> <span class="token string">'-'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        相应代码来处理<span class="token variable">$2</span>
        <span class="token builtin class-name">shift</span>
    <span class="token keyword">fi</span>
    <span class="token punctuation">;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>缺点：</p>
<ul>
<li>仅此一个：不支持解析相邻的短参数 <code>-lAd</code>，必需写成<code>-l -A -d</code></li>
</ul>
]]></content>
      <categories>
        <category>器</category>
        <category>shell</category>
      </categories>
  </entry>
  <entry>
    <title>bash及zsh语法</title>
    <url>/posts/Infinity/</url>
    <content><![CDATA[<h1 id="执行命令或文件"><a class="header-anchor" href="#执行命令或文件"></a>执行命令或文件</h1>
<p>以下对zsh与bash同时成立</p>
<p><a href="https://blog.csdn.net/solaraceboy/article/details/79131772">参考</a></p>
<p>下述<code>文件</code>为shell语言的脚本，常见为<code>.sh</code>文件或<code>.bash_xxxx</code>类文件</p>
<h3 id="在当前shell执行"><a class="header-anchor" href="#在当前shell执行"></a>在当前shell执行</h3>
<p>在以下操作中，创立/修改/删除  变量/函数/当前路径  , 不论是否export,  都会保存在当前shell里面</p>
<ul>
<li>
<p><code>source 文件 </code>（等价于 <code>. 文件 </code>）</p>
<ul>
<li>文件不必有可执行权限</li>
</ul>
</li>
<li>
<p><code>命令</code> , <code>&#123; 命令块;&#125;</code> , 循环体/条件体</p>
</li>
</ul>
<pre><code>*   `&#123;`后要有空格, `&#125;`前要有`;`(但无需空格), 才能在bash运行, 不然只能zsh下运行

*   `&#123; 命令块;&#125;` , 循环体/条件体, 即相当于运行了匿名函数

*   `&#123; 命令块;&#125;` 与`命令块`产生相同的标准输出和标准错误
</code></pre>
<ul>
<li>
<p>执行显式函数 或 隐式函数：</p>
<ul>
<li>
<p>在函数内执行<code>local 变量名</code>，或<code>local 变量名=初始值</code>， 定义一个只在函数能有效的局部变量，之后执行<code>变量名=取值</code>时，都是对这个局部变量，而不改变同名的全局变量。</p>
</li>
<li>
<p>显式函数：代码格式如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment"># 定义</span>
    命令
    命令
<span class="token punctuation">&#125;</span>
f <span class="token comment"># 执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>隐式函数：代码格式如下（只有zsh里能这样写，bash里有没匿名函数、这样写会报错）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> 
    命令
    命令
<span class="token punctuation">&#125;</span> <span class="token comment"># 定义这个匿名函数的同时立即执行它，之后无法再调用它了</span>

<span class="token comment"># 等价于：</span>

<span class="token function-name function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment"># 定义</span>
    命令
    命令
<span class="token punctuation">&#125;</span>
f <span class="token comment"># 执行</span>
<span class="token builtin class-name">unset</span> -f f <span class="token comment"># unset -f 表示注销函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="开新shell执行"><a class="header-anchor" href="#开新shell执行"></a>开新shell执行</h3>
<p><code>./文件 </code>或 <code>&lt;某种SHELL&gt; 文件</code></p>
<ul>
<li>
<p>开新shell运行, 会加载执行的shell 的 profile 文件 (例如<code>.profile</code>, <code>.zshenv</code>)</p>
</li>
<li>
<p>继承全局变量(即export了的变量):</p>
<ul>
<li>新shell继承 (即copy) 当前shell中 export 了的变量, 不继承当前shell中未export的变量</li>
<li>新shell新建/改变 的 变量/函数/当前路径, 不论新shell是否export它们, 在新shell结束后注销, 不会被带回当前shell</li>
<li>新shell结束后, 当前shell的变量均无变化</li>
</ul>
</li>
<li>
<p>执行的shell:</p>
<ul>
<li><code>&lt;某种SHELL&gt; 文件</code>, 包括<code>sh 文件</code> , 文件不必有可执行权限</li>
<li><code>./文件 </code>等价于<code>sh 文件</code>，但要求文件有可执行（<code>x</code>）权限，授权方式<code>chmod +x 文件</code>）</li>
</ul>
</li>
<li>
<p>shell的区别</p>
<ul>
<li>sh: 全称 POSIX shell, <code>./文件 </code> 所使用的shell, 所有 unix  系统共有
<ul>
<li>POSIX: 可移植操作系统接口Portable Operating System Interface of UNIX</li>
</ul>
</li>
<li>bash:  全称 Bourne Shell, 增强版的sh, 更常用,  大多数Linux发行版默认的交互shell</li>
<li>zsh: 全称 z shell, 类似bash的shell, 改善交互体验</li>
</ul>
</li>
<li>
<p><code>$SHELL 文件</code>：用当前默认的交互shell（可能是zsh或bash等）执行，文件不必有可执行权限</p>
<ul>
<li><code>$SHELL</code> 是当前默认的交互shell</li>
<li><code>$SHELL -c '命令'</code>：用当当前默认的交互shell执行</li>
<li><code>chsh -s $(which &lt;shell名&gt;)</code> : 修改默认的交互shell</li>
</ul>
</li>
</ul>
<h3 id="开子shell执行"><a class="header-anchor" href="#开子shell执行"></a>开子shell执行</h3>
<ul>
<li>不是另启一个新shell，故不会加载执行的shell 的 profile 文件 (例如<code>.profile</code>, <code>.zshenv</code>)</li>
<li>开子shell, 与当前shell是同一个shell类型 (即, 是sh,bash, 还是zsh)</li>
<li>继承父shell的所有变量, 不论是否export</li>
<li>子shell新建的、改变的 变量/函数/当前路径 不会被带回父shell，不论是否使用export, 在子shell结束后注销, 子shell结束后父shell的变量均无变化</li>
</ul>
<p><code>value=`命令`</code>，等价于 <code>value=$(命令)</code></p>
<ul>
<li>输出返回到value，value为一个字符串，可以有换行符；value不是数组</li>
</ul>
<p><code>(命令块)</code></p>
<ul>
<li>与<code>命令块</code>产生相同的标准输出和标准错误</li>
<li><code>(</code> 后与<code>)</code>前无需空格, 有也能运行; <code>命令块</code> 后无需<code>;</code>, 有也能运行.</li>
</ul>
<p>例子</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">pwd</span>
<span class="token punctuation">(</span>cd <span class="token punctuation">..</span><span class="token punctuation">;</span> <span class="token builtin class-name">pwd</span><span class="token punctuation">)</span>
<span class="token builtin class-name">pwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>返回</p>
<blockquote>
  <pre class="line-numbers language-none"><code class="language-none">&#x2F;home&#x2F;you&#x2F;ENV&#x2F;CONF
&#x2F;home&#x2F;you&#x2F;ENV
&#x2F;home&#x2F;you&#x2F;ENV&#x2F;CONF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</blockquote>
<p>然而</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">pwd</span>
<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span class="token punctuation">;</span> <span class="token builtin class-name">pwd</span>
<span class="token builtin class-name">pwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>返回</p>
<blockquote>
  <pre class="line-numbers language-none"><code class="language-none">&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;CONF
&#x2F;home&#x2F;haoyu&#x2F;ENV
&#x2F;home&#x2F;haoyu&#x2F;ENV<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h3 id="管道-命令1-命令2"><a class="header-anchor" href="#管道-命令1-命令2"></a>管道 <code>命令1 | 命令2</code></h3>
<ul>
<li><code>命令1</code> (非管道结尾的命令), 均是在当前shell分别开子shell, <code>命令1</code>  的修改/创建的变量(不论是否export), 不会留给 <code>命令2</code> 与 后续的父shell</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">2</span> <span class="token operator">|</span> <span class="token builtin class-name">echo</span> <span class="token variable">$a</span> <span class="token punctuation">;</span>   <span class="token builtin class-name">echo</span> <span class="token variable">$a</span>
<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token builtin class-name">export</span> <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">2</span> <span class="token operator">|</span> <span class="token builtin class-name">echo</span> <span class="token variable">$a</span> <span class="token punctuation">;</span>   <span class="token builtin class-name">echo</span> <span class="token variable">$a</span>
<span class="token comment"># bash 和 zsh 下均输出</span>
<span class="token comment"># 1</span>
<span class="token comment"># 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>命令2</code> (管道结尾的命令) 在zsh下是 <a href="#%E5%9C%A8%E5%BD%93%E5%89%8Dshell%E6%89%A7%E8%A1%8C">在当前shell执行</a>, 改/创建的变量(不论是否export), 会留给后续的父shell</li>
<li><code>命令2</code> (管道结尾的命令) 在bash下是 开子shell执行, 改/创建的变量(不论是否export), 不会留给后续的父shell</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">2</span> <span class="token operator">|</span> <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">2</span> <span class="token operator">|</span> <span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$a</span> <span class="token variable">$b</span> <span class="token variable">$c</span>
<span class="token comment"># zsh下输出 1 1 2</span>
<span class="token comment"># bash下输出 1 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="管道与循环体-管道组合"><a class="header-anchor" href="#管道与循环体-管道组合"></a>管道与循环体/管道组合</h3>
<ul>
<li>
<p><code>命令|循环体</code>, 在bash中循环体是<strong>子shell</strong>执行; 在zsh中循环体是当前shell执行</p>
</li>
<li>
<p>循环体与重定向 ( <code>&lt;&lt;&lt;</code> <code>&lt;&lt;</code>  <code>&lt;</code> <code>&lt; &lt;(...)</code>  )组合起来, 则循环体在bash和shell中均是用当前shell执行</p>
</li>
<li>
<p>故而, 如需修改<strong>此代码块外的变量</strong> (例如给一个array加成员, 给计数器加值), 建议能用重定向, 就用重定向写, 以便zsh和bash兼容.</p>
<p>即, 要写成</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">循环或条件体 <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"<span class="token variable">$&#123;string&#125;</span>"</span>
循环或条件体 <span class="token operator">&lt;</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span> 命令块 <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>而不要</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> -E <span class="token string">"<span class="token variable">$&#123;string&#125;</span>"</span> <span class="token operator">|</span> 循环或条件体
<span class="token punctuation">(</span> 命令块 <span class="token punctuation">)</span> <span class="token operator">|</span> 循环或条件体
<span class="token punctuation">&#123;</span> 命令块<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token operator">|</span> 循环或条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>例如</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span> <span class="token builtin class-name">read</span> -r line<span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token assign-left variable">array</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">$&#123;line&#125;</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">done</span> <span class="token operator">&lt;&lt;&lt;</span> <span class="token punctuation">\</span>
<span class="token string">'asda'</span><span class="token string">$'<span class="token entity" title="\n">\n</span>'</span>'adasadasd<span class="token string">'$'</span><span class="token punctuation">\</span>n<span class="token string">''</span>asdasdasdassd<span class="token string">'
declare -p array
# bash 输出
# declare -a array='</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"asda"</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"adasadasd"</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"asdasdasdassd"</span><span class="token punctuation">)</span>'
<span class="token comment"># zsh 输出</span>
<span class="token comment"># typeset -a array=( asda adasadasd asdasdasdassd )</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin class-name">echo</span> -E <span class="token string">'asda'</span><span class="token string">$'<span class="token entity" title="\n">\n</span>'</span>'adasadasd<span class="token string">'$'</span><span class="token punctuation">\</span>n<span class="token string">''</span>asdasdasdassd<span class="token string">' | \
while IFS= read -r line; do array+=("$&#123;line&#125;"); done
declare -p array
# bash 输出
# declare -a array='</span><span class="token punctuation">(</span><span class="token punctuation">)</span>'
<span class="token comment"># zsh 输出</span>
<span class="token comment"># typeset -a array=( asda adasadasd asdasdasdassd )</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h1 id="代码块的性质"><a class="header-anchor" href="#代码块的性质"></a>代码块的性质</h1>
<h3 id="代码块的组合命令"><a class="header-anchor" href="#代码块的组合命令"></a>代码块的组合命令</h3>
<p>不论哪种代码, 均有以下性质</p>
<ul>
<li><code>帽 代码块 靴 | 命令</code> : 表示对整个代码块的输出 经过管道 送给<code>命令</code></li>
<li><code>帽 代码块 靴 &gt;文件</code> :  表示对整个代码块的输出 写入到<code>文件</code>. <code>&gt;&gt;</code>同理</li>
</ul>
<h3 id="循环体"><a class="header-anchor" href="#循环体"></a>循环体</h3>
<ul>
<li><code>for/while xxx do; 代码块; done 管道或写入文件</code>  是对所有轮的输出 整体执行一次.</li>
<li><code>for/while xxx do; &#123; 代码块; &#125; 管道或写入文件; done</code> 是每轮循环输出 执行一次管道/文件写入</li>
</ul>
<p>例如</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span>
<span class="token keyword">done</span> <span class="token operator">|</span> <span class="token function">sort</span> -r <span class="token comment"># 降序</span>

<span class="token comment"># 结果为</span>
<span class="token comment"># 3</span>
<span class="token comment"># 2</span>
<span class="token comment"># 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="条件体"><a class="header-anchor" href="#条件体"></a>条件体</h3>
<p><code>if ... if 管道或写入文件</code> 不论对于哪个条件分支, 或不满足任何分支条件的情况, 均会执行</p>
<p>例如</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> result
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token number">1</span> -ne <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">'1 -ne 1'</span>
    <span class="token builtin class-name">echo</span> <span class="token string">'1 != 1'</span>
<span class="token keyword">fi</span> <span class="token operator">></span> result
<span class="token comment"># 结果为 创建了一个空的 result 文件</span>

<span class="token function">rm</span> result
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token number">1</span> -ne <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
<span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">'1 -ne 1'</span>
    <span class="token builtin class-name">echo</span> <span class="token string">'1 != 1'</span>
<span class="token punctuation">&#125;</span> <span class="token operator">></span> result
<span class="token keyword">fi</span>
<span class="token comment"># 结果为 没有创建result文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="获得命令输出"><a class="header-anchor" href="#获得命令输出"></a>获得命令输出</h1>
<h2 id="输出返回为匿名字符串"><a class="header-anchor" href="#输出返回为匿名字符串"></a><code>$(...)</code> <code>`....`</code>输出返回为匿名字符串</h2>
<p>以下对zsh与bash同时成立</p>
<h3 id="子shell执行"><a class="header-anchor" href="#子shell执行"></a>子shell执行</h3>
<ul>
<li><code>`xx`</code>   完全等价于  <code>$(xx)</code>：用<strong>当前shell开子shell</strong>执行<code>xx</code>命令，将其返回为无名变量。例如</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ls</span><span class="token variable">`</span></span>
<span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span><span class="token variable">)</span></span>
<span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span><span class="token variable">`</span></span>
<span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>`bash -c &quot;xx&quot;`</code>   完全等价于  <code>$(bash -c &quot;xx&quot;)</code>：用<strong>bash</strong>执行<code>xx</code>命令，将其返回为无名变量</li>
</ul>
<h3 id="输出"><a class="header-anchor" href="#输出"></a>输出</h3>
<p><code>`xx`</code>   完全等价于  <code>$(xx)</code>只获得<code>xx</code>命令的正常输出(<code>&gt;&amp;1</code>)，不获得</p>
<ul>
<li><code>xx</code>的报错报警输出(<code>&gt;&amp;2</code>)仍然打印在屏幕</li>
<li>若想<code>xx</code>重定向到文件的输出, 则写<code>&gt;文件</code></li>
</ul>
<p>例如：</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token builtin class-name">echo</span> <span class="token string">'file'</span> <span class="token operator">></span> /dev/null <span class="token comment"># 报错报警</span>
    <span class="token builtin class-name">echo</span> <span class="token string">'warring'</span> <span class="token operator">></span><span class="token file-descriptor important">&amp;2</span> <span class="token comment"># 报错报警</span>
    <span class="token builtin class-name">echo</span> <span class="token string">'normal'</span> <span class="token operator">></span><span class="token file-descriptor important">&amp;1</span> <span class="token comment"># 正常输报警</span>
    <span class="token builtin class-name">echo</span> <span class="token string">'normal'</span> <span class="token comment"># 默认是正常输报警</span>
<span class="token punctuation">&#125;</span>
<span class="token assign-left variable">return_string</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>f<span class="token variable">)</span></span>
<span class="token comment"># 输出如下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>warring</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable">$return_string</span>
<span class="token comment"># 输出如下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>normal<br>
normal</p>
</blockquote>
<h2 id="输出返回为匿名文件"><a class="header-anchor" href="#输出返回为匿名文件"></a><code>&lt;(...)</code>输出返回为匿名文件</h2>
<p>以下对zsh与bash同时成立</p>
<p><code>&lt;(命令)</code>, 将命令的输出返回为匿名文件.</p>
<p>注意:</p>
<ul>
<li>用<strong>当前shell开子shell</strong>执行<code>xx</code>命令</li>
<li>此文件只获得<code>xx</code>命令的正常输出(<code>&gt;&amp;1</code>), 报错报警输出(<code>&gt;&amp;2</code>)仍然打印在屏幕</li>
</ul>
<p>辨析:</p>
<ul>
<li><code>命令 &lt; &lt;(echo -E &quot;$&#123;string&#125;”)</code> 等价于 <code>命令 &lt;&lt;&lt; &quot;$&#123;string&#125;&quot;</code></li>
</ul>
<p>例如:</p>
<ul>
<li>
<p>比较两个目录的差异</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">diff</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">ls</span> dirA<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">ls</span> dirB<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>逐行读取多行字符串</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">while</span> <span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span> <span class="token builtin class-name">read</span> -r line<span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$line</span>"</span>
<span class="token keyword">done</span> <span class="token operator">&lt;</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token builtin class-name">echo</span> -E <span class="token string">"<span class="token variable">$&#123;string&#125;</span>"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>等价于</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">while</span> <span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span> <span class="token builtin class-name">read</span> -r line<span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$line</span>"</span>
<span class="token keyword">done</span> <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"<span class="token variable">$&#123;string&#125;</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h1 id="各种引号"><a class="header-anchor" href="#各种引号"></a>各种引号</h1>
<p>以下对zsh和bash皆成立</p>
<h2 id="转义"><a class="header-anchor" href="#转义"></a>转义</h2>
<h3 id="创建字符串-各种引号"><a class="header-anchor" href="#创建字符串-各种引号"></a>创建字符串, 各种引号</h3>
<p>赋值给字符串时:</p>
<ul>
<li>
<p>单引号：所有都不转义</p>
</li>
<li>
<p><code>$'xxx'</code>: 仅<code>\某</code>转义</p>
</li>
<li>
<p>双引号, <code>&lt;&lt;EOF</code>, <code>&lt;&lt;-EOF</code> ：<code>$&#123;xxx&#125;</code>(变量)、<code>`xx`</code> <code>$()</code>(命令返回) 转义, 用 <code>\$</code> <code>\`xxx\`</code>取消转义;  <code>\某</code> 不转义</p>
</li>
</ul>
<h3 id="输出-_2"><a class="header-anchor" href="#输出-_2"></a>输出</h3>
<p>从被输出的字符串, 到输出的字符串, 这个过程中:</p>
<ul>
<li>
<p><code>echo -E 字符串</code>: 输出  <code>\某</code> 不转义</p>
</li>
<li>
<p><code>echo [-e] 字符串</code>: 输出 <code>\某</code> 转义, <code>-e</code>即默认选项 可省去</p>
</li>
</ul>
<h2 id="双引号的优先级"><a class="header-anchor" href="#双引号的优先级"></a>双引号的优先级</h2>
<ul>
<li>
<p><code>”$(...&quot;...$&#123;variable&#125;...&quot;....)”</code>  及 <code>”`...&quot;...$&#123;variable&#125;...&quot;....`”</code>  均表示: 含有将variable变量的字符串<code>&quot;...$&#123;variable&#125;…”</code> , 用于某个子shell命令<code>...&quot;...$&#123;variable&#125;...&quot;....</code>, 其结果返回为一个字符串. 最外围的双引号不会跨过  <code>$(…)</code> 或 <code>`…`</code> 的边界与其内部的双引号成对解析. 例如</p>
</li>
<li>
<pre><code class="language-bash">  echo &quot;$([ &quot;$&#123;USER&#125;&quot; = &quot;$&#123;USER&#125;&quot; ] &amp;&amp; echo yes)&quot;
  # 返回 yes
  <pre class="line-numbers language-none"><code class="language-none">
*   &#96;”$((...&quot;...$&#123;variable&#125;...&quot;....))”&#96;  会被解析成 &#96;”$((...”&#96; 字符串, &#96;....&#96; , &#96;$&#123;variable&#125;&#96; 变量, &#96;...&#96;, &#96; &quot;....))”&#96; 字符串的concat. 例如

    &#96;&#96;&#96;bash
    a&#x3D;1; b&#x3D;2
    echo &quot;$((&quot;$a&quot; + &quot;$b&quot;))&quot;
    # 返回
    # zsh: bad math expression: illegal character: &quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</code></pre>
</li>
</ul>
<h1 id="局部变量"><a class="header-anchor" href="#局部变量"></a>局部变量</h1>
<ul>
<li>仅函数内可见的变量，只需首次用时写<code>local</code>，之后不用再写了。但不可用于非函数内 (如脚本中 不在函数里之处), 例如</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">local</span> <span class="token assign-left variable">variable</span><span class="token operator">=</span>xxx
    <span class="token assign-left variable">variable</span><span class="token operator">=</span>yyy <span class="token comment"># 再次使用，无需声明local</span>

    <span class="token builtin class-name">local</span> <span class="token assign-left variable">i</span><span class="token operator">=</span>
    <span class="token comment"># 不可写作 local i; 不然若之前已经创建了local i, 则此处会输出 "i=xxxx"</span>
    <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token comment"># 不可写作 for local i in "$@"; do</span>
        <span class="token comment"># xxxx</span>
    <span class="token keyword">done</span>
<span class="token punctuation">&#125;</span>

f
<span class="token builtin class-name">echo</span> <span class="token variable">$&#123;varible&#125;</span> <span class="token comment"># 返回为空，因为在全局变量中，没有名为variable的变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>local variable=</code> : local variable赋值为<code>’’</code>, 用于</li>
<li><code>local variable</code> : 若无local variable, 则创建此variable; 若有local variable, 则显示&quot;vairable=xxxx&quot;.</li>
<li><code>bash/zsh/sh 文件.sh</code>及其<code>./文件.sh</code>运行脚本，脚本中所创、改、删的变量/函数不会带到运行它环境中（除非<code>export</code>），无需手动释放创建的变量/函数</li>
<li><code>source 文件.sh</code>(即<code>. 文件.sh</code>)，脚本中所创、改、删的变量/函数会带到运行它环境中(不论是否<code>export</code>)，故需手动释放创建的变量/函数</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">unset</span> -f 函数名
<span class="token builtin class-name">unset</span> -v 变量名 <span class="token comment"># -v 可缺省</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="判断"><a class="header-anchor" href="#判断"></a>判断</h1>
<p>以下适用于<code>bash</code>和<code>zsh</code></p>
<h2 id="概述"><a class="header-anchor" href="#概述"></a>概述</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">(</span> 判断语句 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    do_something
<span class="token keyword">fi</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> 判断语句 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    do_something
<span class="token keyword">fi</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> 判断语句 <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    do_something
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>或</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">                              <span class="token comment"># 否定条件则写作：</span>
<span class="token punctuation">(</span> 判断语句 <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> do_something   <span class="token comment"># ! ( 判断语句 )  &amp;&amp; do_something   也即   ( ! 判断语句 )  &amp;&amp; do_something</span>
也即 判断语句 <span class="token operator">&amp;&amp;</span> do_something   <span class="token comment"># 也即 ! 判断语句 &amp;&amp; do_something</span>

<span class="token punctuation">[</span> 判断语句 <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> do_something   <span class="token comment"># ! [ 判断语句 ]  &amp;&amp; do_something</span>

<span class="token punctuation">[</span><span class="token punctuation">[</span> 判断语句<span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> do_something <span class="token comment"># ! [[ 判断语句 ]]  &amp;&amp; do_something</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="判断语句"><a class="header-anchor" href="#判断语句"></a>判断语句</h2>
<p><a href="https://blog.csdn.net/ithomer/article/details/6836382?utm_source=copy">参考</a></p>
<table>
<thead>
<tr>
<th><code>( 判断语句 )</code>  也即  <code>判断语句</code></th>
<th>含义</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>command -v 命令 &amp;&gt; /dev/null</code></td>
<td>判断命令知否存在(命令可以使alias以及自定义的shell函数)</td>
<td><code>if command -v pwd &gt;&amp; /dev/null; then</code> 也即 <code>if ( command -v pwd &amp;&gt; /dev/null ); then</code></td>
</tr>
<tr>
<td>注：<code>[ command 命令 2&gt;&amp;1 | grep 'command not found']</code></td>
<td>辨析：判断命令知否存在(命令为系统原生命令，不包含可以使alias以及自定义的shell函数)</td>
<td><code>[ command ls 2&gt;&amp;1 | grep 'command not found']</code></td>
</tr>
<tr>
<td>注：<code>which 命令 &amp;&gt; /dev/null</code></td>
<td>判断命令知否存在(命令可以使alias以及自定义的shell函数)，但不如<code>command -v 命令 &amp;&gt; /dev/null</code>可靠</td>
<td><code>if which -v pwd &gt;&amp; /dev/null; then</code> 也即 <code>if ( which pwd &amp;&gt; /dev/null ); then</code></td>
</tr>
<tr>
<td><code>[ $? -eq 0 ]</code></td>
<td><code>$?</code>表示前面所有代码里是报错的编码是啥, 为0&lt;=&gt;无错误</td>
<td>[ $? -ne 0 ] &amp;&amp;  echo Error</td>
</tr>
<tr>
<td><strong><code>[ 判断语句 ]</code></strong> (也可用<code>[[ ]]</code>)</td>
<td><strong>含义</strong></td>
<td><strong>示例</strong></td>
</tr>
<tr>
<td><strong>文件比较</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>-e file</td>
<td>存在文件或文件夹，或存在一个<strong>有效</strong>（最终（可以符号逻辑递归）指到文件或文件夹）的符号链接</td>
<td>[ -e /var/log/syslog ]</td>
</tr>
<tr>
<td>-d file</td>
<td>存在且为目录</td>
<td>[ -d /tmp/mydir ]</td>
</tr>
<tr>
<td>-f file</td>
<td>存在且为常规文件</td>
<td>[ -f /usr/bin/grep ]</td>
</tr>
<tr>
<td>-L file</td>
<td>为符号链接，不论是否<strong>有效</strong></td>
<td>[ -L /usr/bin/grep ]</td>
</tr>
<tr>
<td>-r file</td>
<td>存在且当前用户可读</td>
<td>[ -r /var/log/syslog ]</td>
</tr>
<tr>
<td>-w file</td>
<td>存在且当前用户可写</td>
<td>[ -w /var/mytmp.txt ]</td>
</tr>
<tr>
<td>-x file</td>
<td>存在且当前用户可执行</td>
<td>[ -L /usr/bin/grep ]</td>
</tr>
<tr>
<td>-c file</td>
<td>存在且为字符特殊文件</td>
<td></td>
</tr>
<tr>
<td>-b file</td>
<td>存在且为块特殊文件</td>
<td></td>
</tr>
<tr>
<td>-s file</td>
<td>存在且文件大小非0，即文件存在且非空</td>
<td></td>
</tr>
<tr>
<td>-t file</td>
<td>文件描述符(默认为1)指定的设备为终端</td>
<td>[ -t 1 ] 表示当前命令会显示在屏幕，即当前处在交互终端下</td>
</tr>
<tr>
<td>file1 -nt file2</td>
<td>file1 比 file2 新</td>
<td>[ /tmp/install/etc/services -nt /etc/services ]</td>
</tr>
<tr>
<td>file1 -ot file2</td>
<td>file1 比 file2 旧</td>
<td>[ /boot/bzImage -ot arch/i386/boot/bzImage ]</td>
</tr>
<tr>
<td><strong>字符串比较</strong></td>
<td></td>
<td>要用引号</td>
</tr>
<tr>
<td>-z string</td>
<td>长度为零，即串空</td>
<td>[ -z “$myvar” ]</td>
</tr>
<tr>
<td>-n string</td>
<td>长度非零，即串非空</td>
<td>[ -n “$myvar” ]</td>
</tr>
<tr>
<td><code>-z $&#123;var+x&#125;</code></td>
<td>变量var是否有定义（<code>$var=''</code>即var无定义）</td>
<td>[ -z “${myvar+x}&quot; ]</td>
</tr>
<tr>
<td>string</td>
<td>与上等价</td>
<td>[ “$myvar” ]</td>
</tr>
<tr>
<td>string1 = string2</td>
<td>string1 与 string2 相同</td>
<td>[ “$myvar” = “one two three” ]</td>
</tr>
<tr>
<td>string1 != string2</td>
<td>string1 与 string2 不同</td>
<td>[ “$myvar” != “one two three” ]</td>
</tr>
<tr>
<td><strong>布尔值</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>&quot;$mybool&quot; = true</code></td>
<td>是否真</td>
<td><code>[ &quot;$mybool&quot; = true ]</code></td>
</tr>
<tr>
<td><code>&quot;$mybool&quot; = false</code></td>
<td>是否假</td>
<td><code>[ &quot;$mybool&quot; = false ]</code></td>
</tr>
<tr>
<td><code>&quot;$myboo1l&quot; = &quot;$mybool2&quot;</code></td>
<td>是否同</td>
<td><code>[ &quot;$myboo1l&quot; = &quot;$mybool2&quot; ]</code></td>
</tr>
<tr>
<td><code>&quot;$myboo1l&quot; != &quot;$mybool2&quot;</code></td>
<td>是否异</td>
<td><code>&quot;$myboo1l&quot; != &quot;$mybool2&quot;</code></td>
</tr>
<tr>
<td><strong><code>[[ 判断语句 ]]</code></strong></td>
<td><strong>含义</strong></td>
<td><strong>示例</strong></td>
</tr>
<tr>
<td><strong>匹配</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>&quot;$string&quot; =~ &quot;$substring” </code>  及 <code>&quot;$string&quot; =~ 'xxxx' </code></td>
<td>bash中：string是否<strong>包含</strong>substring (普通字符串）； zsh中是：string是否匹配<strong>正则表达式</strong>，例如</td>
<td><code>[[ &quot;$string&quot; =~ &quot;$substring&quot; ]]</code> 及 <code>[[ &quot;$string&quot; =~ &quot;balabala&quot; ]]</code></td>
</tr>
<tr>
<td><code>&quot;$string&quot; =~ $正则表达式</code> 及 <code>&quot;$string&quot; =~ xxxx </code></td>
<td>在zsh和bash中：是否string包含**<code>正则表达式</code>**，例如</td>
<td><code>[[ &quot;$string&quot; =~ ^[0-9]+$ ]]</code></td>
</tr>
<tr>
<td><code>&quot;$string&quot; = $通配符</code> 及 <code>&quot;$string&quot; = xxxx</code></td>
<td>在zsh和bash中：string是否能匹配**<code>通配符</code>**，例如</td>
<td><code>[[ &quot;$path&quot; = */images/* ]]</code></td>
</tr>
<tr>
<td><strong>算术比较</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>num1 -eq num2</td>
<td>==</td>
<td>[[ 3 -eq $mynum ]]</td>
</tr>
<tr>
<td>num1 -ne num2</td>
<td>!=</td>
<td>[[ 3 -ne $mynum ]]</td>
</tr>
<tr>
<td>num1 -lt num2</td>
<td>&lt;</td>
<td>[[ 3 -lt $mynum ]]</td>
</tr>
<tr>
<td>num1 -le num2</td>
<td>&lt;=</td>
<td>[[ 3 -le $mynum ]]</td>
</tr>
<tr>
<td>num1 -gt num2</td>
<td>&gt;</td>
<td>[[ 3 -gt $mynum ]]</td>
</tr>
<tr>
<td>num1 -ge</td>
<td>&gt;=</td>
<td>[[ 3 -ge $mynum ]]</td>
</tr>
</tbody>
</table>
<p><strong>注意</strong></p>
<ul>
<li><strong>运算符前后要有空格至少一个</strong></li>
<li><strong><code>[、[[</code>后<code>]、]]</code>前要有空格至少一个</strong></li>
</ul>
<h2 id="其他特殊判断"><a class="header-anchor" href="#其他特殊判断"></a>其他特殊判断</h2>
<table>
<thead>
<tr>
<th>式子</th>
<th>含义</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>[ &quot;$&#123;variable-no&#125;&quot; != no ]</code></td>
<td>变量<code>variable</code>有定义</td>
<td>若变量 <code>variable</code>无定义, 则<code>$&#123;variable-xxxx&#125;</code>返回“xxxx”<br><code>variable</code>有定义, 则返回<code>$&#123;variable&#125;</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>variable=</code>  : 等价于  <code>variable=‘’</code> , 故有定义<br><code>unset variable</code> : 注销variable, 故无定义</td>
</tr>
</tbody>
</table>
<h2 id="逻辑运算"><a class="header-anchor" href="#逻辑运算"></a>逻辑运算</h2>
<p>以下以<code>[ 判断语句 ]</code>为例，<code>[[ 判断语句 ]]</code>同理</p>
<table>
<thead>
<tr>
<th>逻辑运算</th>
<th>含义</th>
<th>例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>[ 判断语句 ] &amp;&amp; [ 判断语句 ]</code></td>
<td>与，次次优先</td>
<td></td>
</tr>
<tr>
<td><code>[ 判断语句 ] || [ 判断语句 ]</code></td>
<td>或，次次优先</td>
<td></td>
</tr>
<tr>
<td><code>! [ 判断语句 ]</code> 或 <code> [ ! 判断语句 ]</code></td>
<td>非，次优先</td>
<td>! 和 [ 中间必需有至少一个空格</td>
</tr>
<tr>
<td><code>( 上述三种运算 )</code></td>
<td>结合，最优先</td>
<td>if ! ( [ 判断1 ] ||  [ 判断2 ] )  &amp;&amp; [ 判断3 ]; then dosomething; fi</td>
</tr>
</tbody>
</table>
<h2 id="与-辨析"><a class="header-anchor" href="#与-辨析"></a><code>[[ ... ]]</code> 与 <code>[ ... ]</code> 辨析</h2>
<ul>
<li>linux的sh不支持<code>[[...]]</code></li>
<li>在zsh,bash,mac的sh, <s>linux的sh</s> 中:
<ul>
<li>凡是能用<code>[...]</code>的判断语句, 都能用 <code>[[...]]</code></li>
<li><code>[[...]]</code> 可以把 <code>&amp;&amp;</code>, <code>||</code> , <code>()</code>, <code>!</code> 写在里面:  例如<code>[[ 1 = 1 &amp;&amp; 2 =2 ]]</code>, <code>[[ ( ! 判断1 || 判断2 ) &amp;&amp; ( 判断3 )]]</code></li>
</ul>
</li>
<li>在linux与mac的sh/bash/zsh中, <code>[…]</code>, <code>[[...]]</code> . 它们都可以把 <s><code>&amp;&amp;</code></s> ,<s><code>||</code></s>, <s><code>()</code></s>, <code>!</code> 写在里面: 例如 <code>[ ! 1 = 2 ]</code>  <code>[[ ! 1 = 2 ]]</code></li>
</ul>
<h1 id="输入"><a class="header-anchor" href="#输入"></a>输入</h1>
<h2 id="get-one-char"><a class="header-anchor" href="#get-one-char"></a>get one char</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">answer</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">bash</span> -c <span class="token string">"read  -n 1 -p '&lt;要显示的提示句> ? [Y|N]' c; echo \<span class="token variable">$c</span>"</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span>
<span class="token comment"># 调用bash执行read -n 1 -p '&lt;要显示的提示句> c', 即将提示句显示，等待输入字符，抓取即赋值给c</span>
<span class="token comment"># 将c返回到answer</span>
<span class="token comment"># echo：换行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>适用于：zsh、bash、sh、<code>./文件</code>运行可执行文件、任何当前终端中</li>
<li>功能：等待输入，<strong>一旦输入一个字符</strong>（回车也算一个字符），<strong>立即结束等待</strong>，将这个字符返回给<code>answer</code>变量</li>
</ul>
<p>注：</p>
<ul>
<li>
<p>请不要使用</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> -n <span class="token string">'&lt;要显示的提示句> ? [Y|N]'</span>
<span class="token assign-left variable">answer</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">bash</span> -c <span class="token string">"read  -n 1 c; echo \<span class="token variable">$c</span>"</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>因为使用sh、<code>./文件</code>运行可执行文件 的方法运行上述命令，echo不支持<code>-n</code>参数，会输出&quot;-n&quot;</p>
</li>
</ul>
<h2 id="询问Y-N"><a class="header-anchor" href="#询问Y-N"></a>询问Y/N</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token comment"># echo - '提示？[Y/n]'</span>
    <span class="token assign-left variable">answer</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">bash</span> -c <span class="token string">"read  -n 1 -p '&lt;要显示的提示句>? [Y/N] ' c; echo \<span class="token variable">$c</span>"</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$answer</span>"</span> <span class="token operator">=</span> <span class="token string">"y"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$answer</span>"</span> <span class="token operator">=</span> <span class="token string">"Y"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token comment"># 回答是则如何操作</span>
        <span class="token builtin class-name">break</span>
    <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$answer</span>"</span> <span class="token operator">=</span> <span class="token string">"n"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$answer</span>"</span> <span class="token operator">=</span> <span class="token string">"N"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token comment"># 回答否则如何操作</span>
        <span class="token builtin class-name">break</span>
    <span class="token keyword">else</span>
        <span class="token builtin class-name">echo</span> <span class="token string">'input Y/y or N/n please!'</span>
    <span class="token keyword">fi</span>
<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>例如</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;提示句&gt;? [Y|N]n
# 回答否的操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="错误代码"><a class="header-anchor" href="#错误代码"></a>错误代码</h1>
<h2 id="给定和获得错误代码"><a class="header-anchor" href="#给定和获得错误代码"></a>给定和获得错误代码</h2>
<p>给定错误代码：</p>
<ul>
<li><code>reutrn 错误代码</code> ：退出当前函数，但不退出当前shell。<code>return</code>命令参数缺省时，错误代码为0。函数自然执行到头退出时，错误代码为0。</li>
<li><code>exit 错误代码</code> ：退出当前shell。<code>exit</code>命令参数缺省时，错误代码为0。shell自然执行到头退出时，错误代码为0。</li>
</ul>
<p>获得前一个命令的错误代码：<code>$?</code>。例如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> xxx<span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$?</span>
<span class="token comment"># 返回：</span>
<span class="token comment"># ls: cannot access 'xxx': No such file or directory</span>
<span class="token comment"># 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>判断前一个命令错误代码是否为0: <code>[ $? -eq 0 ]</code>。例如</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> xxx
<span class="token keyword">if</span> <span class="token operator">!</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token builtin class-name">echo</span> <span class="token function">ls</span> xxx failed<span class="token punctuation">;</span> <span class="token keyword">fi</span>
<span class="token comment"># 返回：</span>
<span class="token comment"># ls: cannot access 'xxx': No such file or directory</span>
<span class="token comment"># ls xxx failed</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>错误代码为0表示执行成功，仅能说明前一个命令在<code>exit</code>或<code>return</code>时<code>$?</code>为0，<strong>和前一个命令在通道stderr（即<code>&gt;&amp;2</code>）是否有输出无关</strong>。例如</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> err <span class="token operator">></span><span class="token file-descriptor important">&amp;2</span>  <span class="token comment"># 这一句的$?=0， 但从stderr输出“err”</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$?</span>       <span class="token comment"># 因为上一句$?=0，故这一句从stdout输出0</span>
<span class="token comment"># 返回：</span>
<span class="token comment"># err</span>
<span class="token comment"># 0    </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="错误代码的取值"><a class="header-anchor" href="#错误代码的取值"></a>错误代码的取值</h2>
<p>在zsh/bash中，错误代码（也称为退出状态码或返回码）的规范取值范围为 <strong>0 到 255</strong> 之间的整数，具体含义如下：</p>
<ol>
<li><strong>成功和通用错误代码：0-125</strong></li>
</ol>
<ul>
<li>
<p><strong>0</strong>：成功（Success）<br>
表示命令成功执行且没有遇到任何错误。</p>
</li>
<li>
<p><strong>1-125</strong>：通用错误代码（由命令或脚本自定义返回的值）</p>
<p>对于<strong>自定义脚本，推荐使用 1-125</strong> 之间的代码来表示不同的错误原因，这样可以避免和 Bash 的内建错误代码发生冲突。</p>
<ul>
<li><strong>1</strong>：通用错误代码（General error），通常用于表示未知错误。</li>
<li><strong>2</strong>：命令行参数错误（Misuse of shell builtins），例如参数格式不正确。</li>
<li><strong>126</strong>：无法执行的命令（Command invoked cannot execute），如权限问题。</li>
<li><strong>127</strong>：命令未找到（Command not found），如输入了不存在的命令。</li>
<li><strong>128</strong>：无效的退出参数（Invalid argument to exit），退出状态参数不合法。</li>
</ul>
</li>
</ul>
<ol start="2">
<li><strong>特殊信号引起的错误代码</strong>：<strong>128 + n</strong> 的格式表示一个命令被信号 <code>n</code> 中断或终止，用于<strong>Bash内建错误代码</strong>。例如：</li>
</ol>
<ul>
<li><strong>130</strong>：被 <code>Ctrl+C</code> 中断，即 <code>SIGINT</code> 信号引起。</li>
<li><strong>137</strong>：被 <code>SIGKILL</code> 信号终止。</li>
<li><strong>143</strong>：被 <code>SIGTERM</code> 信号终止。</li>
</ul>
<ol start="3">
<li><strong>其他系统保留错误代码</strong></li>
</ol>
<ul>
<li>
<p><strong>255</strong>：一般用于脚本或命令异常退出</p>
</li>
<li>
<p>自定义使用$&gt;255$或$&lt;0$的整数，仅在结束当前shell时<code>$?</code>会$\mod 256$，其余情况<code>$?</code>仍取原数值。</p>
<p>比如：</p>
<ul>
<li><code>return 数字</code>：退出当前函数，<code>$?</code>仍取&gt;=256的数。例如：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># return只退出函数，不退出shell，故错误代码不mod 256</span>
<span class="token function-name function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token builtin class-name">return</span> <span class="token number">257</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> f<span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$?</span> <span class="token comment"># 会返回 257</span>
<span class="token function-name function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token builtin class-name">return</span> -257<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> f<span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$?</span> <span class="token comment"># 会返回-257</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>当前shell执行到头：自然结束当前shell， <code>$?</code>会模256。例如：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 退出子shell时最后一条命令的错误代码 就是 子shell的错误代码</span>
<span class="token comment"># (  ...  )是一个子shell, 执行f函数返回错误代码x, 然后子shell自然结束后, 错误代码x mod 256</span>
<span class="token punctuation">(</span> <span class="token function-name function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token builtin class-name">return</span> <span class="token number">257</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> f<span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$?</span> <span class="token comment"># 会返回 1， 即257mod256</span>
<span class="token punctuation">(</span> <span class="token function-name function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token builtin class-name">return</span> -257<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> f<span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$?</span> <span class="token comment"># 会返回 255, 即-257mod256</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>exit 数字</code>：强制退出当前shell， <code>$?</code>会模256。例如：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># (  ...  )是一个子shell, 执行exit x就退出这个子shell, 错误代码x mode 256</span>
<span class="token punctuation">(</span>  <span class="token builtin class-name">exit</span> <span class="token number">257</span><span class="token punctuation">;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$?</span> <span class="token comment"># 会返回 1， 即257mod256</span>
<span class="token punctuation">(</span>  <span class="token builtin class-name">exit</span> -257<span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$?</span> <span class="token comment"># 会返回 255, 即-257mod256</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre><code>* 即使在函数内执行exit，也会立即退出当前shell，而不是只退出这个函数
</code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span> <span class="token function-name function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token builtin class-name">exit</span> <span class="token number">257</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> f<span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$?</span> <span class="token comment"># 会返回 1， 即257 mod 256</span>
<span class="token punctuation">(</span> <span class="token function-name function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token builtin class-name">exit</span> -257<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> f<span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$?</span> <span class="token comment"># 会返回 255, 即-257 mod 256</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<ul>
<li>
<p>在bash和zsh中，错误代码自定义使用小数，在<code>exit 小数x</code>  <code>return 小数x</code>执行时，<code>$?</code>为  x向0取整，其定义如下，python中<code>int(x)</code>就是这样执行的<br>
$$<br>
\text{int}(x):=\begin{cases}⌊x⌋, x\geq 0\⌈x⌉, x &lt; 0  \end{cases}<br>
$$<br>
比如：</p>
<pre class="line-numbers language-none"><code class="language-none">f() &#123; return 257.123; &#125;; f; echo $? # 会返回 257， 即 int(257.123)
f() &#123; return -257.123; &#125;; f; echo $? # 会返回-257， 即 int(-257.123)

(  exit 257.123;  ); echo $? # 会返回 1， 即 int(257.123) mod 256
(  exit -257.123; ); echo $? # 会返回 255, 即 int(-257.123) mod 256<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>非整数、非小数的字符串</p>
<ul>
<li>在bash内，错误代码自定义使用非整数、非小数的字符串，在<code>exit 字符串</code>  <code>return 字符串</code>执行时，会报错”bash: exit: xxxx: numeric argument required”，并让<code>$?</code>取2，不会终结当前shell。比如</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token builtin class-name">return</span> asd257qwe<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> f<span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$?</span> 
<span class="token punctuation">(</span>  <span class="token builtin class-name">exit</span> asd257qwe<span class="token punctuation">;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$?</span>
<span class="token comment"># 这两行的返回一样，都是如下：</span>
<span class="token comment"># bash: exit: asd257qwe: numeric argument required</span>
<span class="token comment"># 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>在zsh内，自定义使用非整数、非小数、不以数字开头的字符串，在<code>exit 字符串</code>  <code>return 字符串</code>执行时，<code>$?</code>会取0，不会终结当前shell。比如</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token builtin class-name">return</span> asd257qwe<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> f<span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$?</span> <span class="token comment"># 返回0</span>
<span class="token punctuation">(</span>  <span class="token builtin class-name">exit</span> asd257qwe<span class="token punctuation">;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$?</span> <span class="token comment"># 返回0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>在zsh内，自定义使用非整数、非小数、以数字开头的字符串，在<code>exit 字符串</code>  <code>return 字符串</code>执行时，会报错“bad math expression: operator expected at xxxx”，然后终结当前shell，<code>$?</code>会取0。比如</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token builtin class-name">return</span> 257qwe<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> f<span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$?</span>
<span class="token comment"># 返回：</span>
<span class="token comment"># f:1: bad math expression: operator expected at `qwe'</span>

<span class="token punctuation">(</span> <span class="token function-name function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token builtin class-name">return</span> 257qwe<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> f<span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token string">'test'</span><span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$?</span>  
<span class="token comment"># 返回：</span>
<span class="token comment"># zsh: bad math expression: operator expected at `qwe'</span>
<span class="token comment"># 0</span>
<span class="token comment"># 没有返回test，这说明在f处就终结当前shell了，没执行到echo $?这句</span>

<span class="token punctuation">(</span>  <span class="token builtin class-name">exit</span> 257qwe<span class="token punctuation">;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$?</span> 
<span class="token comment"># 返回：</span>
<span class="token comment"># zsh: bad math expression: operator expected at `qwe'</span>
<span class="token comment"># 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h1 id="重定向"><a class="header-anchor" href="#重定向"></a>重定向</h1>
<h2 id="输入重定向"><a class="header-anchor" href="#输入重定向"></a>输入重定向</h2>
<h3 id="与"><a class="header-anchor" href="#与"></a><code>&lt;</code> 与 <code>&lt;&lt;&lt;</code></h3>
<ul>
<li><code>命令 &lt; 文件</code> 等价于: 执行 <code>命令</code> 然后在 stdin 输入 { <code>cat 文件</code> 之所得}</li>
<li><code>命令 &lt;&lt;&lt; 字符串</code> 等价于: 执行 <code>命令</code> 然后在 <strong>stdin</strong> 输入 <code>字符串</code></li>
</ul>
<p>例如:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
  <pre class="line-numbers language-none"><code class="language-none">&#x2F;home&#x2F;haoyu&#x2F;ENV&#x2F;CONF<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">'$&#123;HOME&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
  <pre class="line-numbers language-none"><code class="language-none">$HOEM<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> <span class="token string">'s/a/b/g'</span> <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"aaa"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
  <pre class="line-numbers language-none"><code class="language-none">bbb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p><code>cat &lt; 文件</code> 等价于 <code>cat 文件</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'aaa'</span> <span class="token operator">></span> <span class="token function">file</span>
<span class="token function">sed</span> <span class="token string">'s/a/b/g'</span> <span class="token operator">&lt;&lt;&lt;</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
  <pre class="line-numbers language-none"><code class="language-none">bbb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<h3 id="读取文件到变量"><a class="header-anchor" href="#读取文件到变量"></a>读取文件到变量</h3>
<ul>
<li>
<p>不保留结尾空白字符和开头空白字符</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">read</span> -r -d <span class="token string">''</span> 变量 <span class="token operator">&lt;</span> 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><code>-r</code>: raw string, 即原始的字符串</li>
<li><code>-d 分隔字符</code>: 以分隔符将分割得到的字符串数组给变量. 当其为 <code>''</code> 即不要分割.</li>
</ul>
</li>
<li>
<p>保留开头空白字符, 但不保结尾空白字符</p>
</li>
</ul>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">变量<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token operator">&lt;</span>文件<span class="token variable">)</span></span>
<span class="token comment"># 等价于</span>
变量<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> 文件<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>
<p>保留开头/结尾空白字符</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">file_to_var</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token builtin class-name">local</span> <span class="token assign-left variable">file_name</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$2</span>"</span>
  <span class="token builtin class-name">local</span> <span class="token assign-left variable">var_name</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$1</span>"</span>
  <span class="token builtin class-name">local</span> <span class="token assign-left variable">file_to_var_var</span><span class="token operator">=</span><span class="token string">''</span>
  <span class="token keyword">while</span> <span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span> <span class="token builtin class-name">read</span> -r line <span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token assign-left variable">file_to_var_var</span><span class="token operator">+=</span><span class="token string">"<span class="token variable">$line</span>"</span><span class="token string">$'<span class="token entity" title="\n">\n</span>'</span><span class="token punctuation">;</span>
  <span class="token keyword">done</span> <span class="token operator">&lt;</span> <span class="token variable">$file_name</span>
  <span class="token assign-left variable">file_to_var_var</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;file_to_var_var<span class="token operator">:</span>0<span class="token operator">:-</span>1&#125;</span>"</span>
  <span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable">$var_name</span>"</span><span class="token string">'="$&#123;file_to_var_var&#125;"'</span>
<span class="token punctuation">&#125;</span>
file_to_var 文件 变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="多行字符串"><a class="header-anchor" href="#多行字符串"></a><code>&lt;&lt;</code> 多行字符串</h3>
<ul>
<li>
<p>总述</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">命令 <span class="token operator">&lt;&lt;</span><span class="token punctuation">[</span>-<span class="token punctuation">]</span>EOF
  多行内容1
  多行内容2
EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>以上等价于: 执行 <code>命令</code> 然后将 <code>&lt;&lt;[-]EOF</code> 与 <code>EOF</code> 之间的字符串 <strong>输入到 stdin</strong></li>
</ul>
</li>
<li>
<p><code>&lt;&lt;</code> / <code>&lt;&lt;-</code> 与 <code>EOF</code> 间可以有空格</p>
<ul>
<li><code>EOF</code> 可以改成任意 <code>[a-zA-Z_]+</code> 的字符串</li>
</ul>
</li>
<li>
<p><code>&lt;&lt;-</code> 表示去掉多行内容再每行开头的所有 tab, <code>&lt;&lt;</code> 则不去掉</p>
<ul>
<li>结尾的 <code>EOF</code> 必需在行首, 无缩进</li>
<li>不转义<code>\x</code>, 仅转义 <code>$&#123;xxx&#125;</code> <code>$xxx</code> <code>$(xxx)</code> <code>`xxx`</code>,  取消转义需 <code>$</code> 写做 <code>\$</code>, <code>`</code> 写做 <code>\`</code> .</li>
</ul>
</li>
<li>
<p>输出多行字符串:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF
  多行内容1
  多行内容2
EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出</p>
<pre class="line-numbers language-none"><code class="language-none">多行内容1
多行内容2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>取消tab缩进, 但空格缩进不会取消:</p>
</li>
</ul>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;&lt;-</span><span class="token string">EOF
  多行内容1 # 开头是 tab, 不是空格
  多行内容2 # 开头是 tab, 不是空格
EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出</p>
<pre><code><pre class="line-numbers language-none"><code class="language-none">多行内容1
多行内容2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</code></pre>
<ul>
<li>
<p>多行字符串写到文件</p>
</li>
<li>
<p>法一: <code>&gt;</code> 无法以 sudo 形式写入到文件</p>
</li>
</ul>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">  <span class="token function">cat</span> <span class="token operator">></span> 文件 <span class="token operator">&lt;&lt;</span> <span class="token string">EOF
    多行内容1
    多行内容2
EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>法二 [更灵活, 推荐之] : 允许以 sudo 形式写入到文件</li>
</ul>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> <span class="token punctuation">[</span> <span class="token function">sudo</span> <span class="token punctuation">]</span> <span class="token function">tee</span> <span class="token punctuation">[</span>-a<span class="token punctuation">]</span> 文件 <span class="token punctuation">[</span> <span class="token operator">></span>/dev/null <span class="token punctuation">]</span></span>
  多行内容1
  多行内容2
EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>
<p>多行字符串赋值给变量</p>
</li>
<li>
<p>不保留结尾空白字符和开头空白字符</p>
</li>
</ul>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">read</span> -r -d <span class="token string">''</span> var <span class="token operator">&lt;&lt;</span> <span class="token string">EOF
  多行内容1
  多行内容2
EOF</span>

<span class="token comment"># 或将命令块的返回作为多行字符串返回给var</span>
<span class="token builtin class-name">read</span> -r -d <span class="token string">''</span> var <span class="token operator">&lt;</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>命令块<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>保留开头/结尾空白字符</li>
</ul>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">var</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span> <span class="token builtin class-name">read</span> -r line <span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token assign-left variable">var</span><span class="token operator">+=</span><span class="token string">"<span class="token variable">$line</span>"</span><span class="token string">$'<span class="token entity" title="\n">\n</span>'</span><span class="token punctuation">;</span> <span class="token keyword">done</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">var</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;var<span class="token operator">:</span>0<span class="token operator">:-</span>1&#125;</span>"</span></span>
  多行内容1
    多行内容2
EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="输出重定向"><a class="header-anchor" href="#输出重定向"></a>输出重定向</h2>
<h3 id="与-_2"><a class="header-anchor" href="#与-_2"></a><code>&gt;</code> 与 <code>&gt;&gt;</code></h3>
<p>写文件的模式</p>
<ul>
<li><code>&gt;</code>： write模式：即若有文件，则重写文件；若无文件，则新创而写之</li>
<li><code>&gt;&gt;</code>： append模式：即若有文件，则追加到文件尾；若无文件，则新创而写之</li>
</ul>
<p>标准输出、标准错误重定向到文件</p>
<ul>
<li><code>命令 &gt;文件名</code>=<code>命令 1&gt;文件名</code> ：重定向标准输出到文件，write模式</li>
<li><code>命令 2&gt;文件名</code>：重定向标准错误到文件，write模式</li>
<li>上述 <code>&gt;</code>改为 <code>&gt;&gt;</code>，即变成append模式</li>
<li>（<code>&gt;</code>or <code>&gt;&gt;</code>） 与<code>文件名</code>之间可以有空格, 但与<code>&amp;1</code> <code>&amp;2</code> 之间不能有空格</li>
</ul>
<p>常用文件名</p>
<ul>
<li><code>	/dev/null</code>：可无限写入、但不保存内容的“黑洞“文件</li>
<li><code>&amp;1</code>：标准输出，会显示在显示屏</li>
<li><code>&amp;2</code>：标准错误，也会显示在显示屏</li>
</ul>
<p>标准输出、标准错误相互重定向</p>
<ul>
<li><code>2&gt;&amp;1</code>：将标准错误重定向到标准输出——标准错误不再有原标准错误的内容，而标准输出同时有远标准错误、标准输出的内容。</li>
<li><code>1&amp;&gt;2</code>：将标准输出重定向到标准错误，效果同上理</li>
</ul>
<p>重定向的组合命令：重定向从后往前执行，如 <code>命令 &gt;文件名 2&amp;&gt;1</code> 先执行  <code>2&amp;&gt;1</code> 后执行 <code>&gt;文件名</code></p>
<ul>
<li><code>命令 &amp;&gt;文件名</code> = <code>命令 &gt;文件名 2&amp;&gt;1</code> （≠ <code>命令 2&amp;&gt;1 &gt;文件名</code>）：标准输入和输出都重定向到文件，write模式</li>
<li><code>命令 &amp;&gt;&gt;文件名</code>= <code>命令 &gt;&gt;文件名 2&amp;&gt;1</code> （≠ <code>命令 2&amp;&gt;1 &gt;&gt;文件名</code>）：标准输入和输出都重定向到文件，append模式</li>
<li>上述不等的原因是，重定向从后往前执行</li>
</ul>
<p>缺点:</p>
<ul>
<li><code>&gt;</code>和 <code>&gt;&gt;</code> 不支持 sudo 重定向: 例如当执行 <code>sudo 命令 &gt;文件</code>, 仅 <code>命令</code> 是用 sudo 执行的, 重定向写文件用的是普通用户, 故若此文件仅 root 可写, 则会写入向失败. 可以使用 <code>tee</code> 来解决这个需求</li>
</ul>
<h3 id="tee-推荐"><a class="header-anchor" href="#tee-推荐"></a>tee [推荐]</h3>
<p>基础用法</p>
<ul>
<li><code>命令 | tee 文件</code>: write 模式 将命令的<strong>标准输出</strong>写在文件, 同时输出在终端</li>
<li><code>命令 | tee -a 文件</code>: append 模式 将命令的标准输出写在文件, 同时输出在终端</li>
</ul>
<p>变体用法</p>
<ul>
<li><code>命令 | tee [-a] 文件 &gt;/dev/null</code>: 仅将命令的标准输出写在文件, 标准输出<strong>不输出在终端</strong>, 标准错误才输出在终端</li>
<li><code>命令 | tee [-a] 文件 &gt;/dev/null 2&gt;&amp;1</code>: 仅将命令的标准输出写在文件, 标准输出/标准错误均<strong>不输出在终端</strong></li>
<li><code>命令 2&gt;&amp;1 | tee [-a] 文件</code>: 将命令的<strong>标准错误</strong>与标准输出写到文件, 同时输出在终端</li>
<li><code>命令 | sudo tee [-a] 文件</code> : 普通用户执行命令, <strong>sudo 模式重定向</strong>其标准输出到文件</li>
<li><code>sudo 命令 | sudo tee [-a] 文件</code> : sudo 用户执行命令, <strong>sudo 模式重定向</strong>其标准输出到文件</li>
</ul>
<p>以上变体均可组合, 如:</p>
<ul>
<li><code>sudo 命令 | sudo tee [-a] 文件 &gt;/dev/null</code> : sudo 用户执行命令, <strong>sudo 模式重定向</strong>其标准输出到文件. 仅将命令的标准输出写在文件, 标准输出<strong>不输出在终端</strong>, 标准错误才输出在终端</li>
</ul>
<p>优点:</p>
<ul>
<li>支持写到文件, 同时显示或不显示在终端</li>
<li>支持 sudo 写入到文件</li>
</ul>
<h3 id="dd"><a class="header-anchor" href="#dd"></a>dd</h3>
<p>基础用法</p>
<ul>
<li><code>命令 | dd of=文件</code>: write模式, 将命令的<strong>标准输出</strong>写在文件, 其标准输出<strong>不输出在终端</strong>, 标准错误才输出在终端</li>
<li><code>命令 | dd of=文件 oflag=append conv=notrunc</code> : append模式, 将命令的标准输出写在文件, 标准输出<strong>不输出在终端</strong></li>
</ul>
<p>变体用法</p>
<ul>
<li><code>命令 2&gt;&amp;1 | dd of=文件</code>: write模式, 将命令的<strong>标准输出</strong>/<strong>标准错误</strong>写在文件, <strong>均不输出在终端</strong></li>
<li><code>命令 | sudo dd of=文件</code>: 用普通账号运行命令; write模式, 用 sudo 模式将命令的标准输出写在文件, 标准错误才输出在终端</li>
<li><code>命令 | sudo dd of=文件</code>: 用 sudo 运行命令; write模式, 用 sudo 模式将命令的标准输出写在文件, 标准错误才输出在终端</li>
</ul>
<p>缺点:</p>
<ul>
<li>写到文件的同时无法显示在终端</li>
</ul>
<h1 id="参数传输"><a class="header-anchor" href="#参数传输"></a>参数传输</h1>
<h2 id="xargs命令"><a class="header-anchor" href="#xargs命令"></a>xargs命令</h2>
<p><a href="https://www.ruanyifeng.com/blog/2019/08/xargs-tutorial.html">参见</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">前置命令 <span class="token operator">|</span> <span class="token function">xargs</span> -0  后续命令 -选项 参数 -选项 参数   <span class="token comment"># 传到最后一个参数后面做参数</span>
前置命令 <span class="token operator">|</span> <span class="token function">xargs</span> -0 -I<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> 后续命令 -选项 <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> -选项 参数 <span class="token comment"># 传给&#123;&#125;所在位置的参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><code>-0</code>参数表示用<code>null</code>当作分隔符。</p>
<h1 id="后台运行"><a class="header-anchor" href="#后台运行"></a>后台运行</h1>
<h2 id="前台运行-重定向输出"><a class="header-anchor" href="#前台运行-重定向输出"></a>前台运行+重定向输出</h2>
<p>前台运行，在这个窗口输新命令无法立即执行</p>
<p>但又看不见输出的结果，输出都写入了文件中</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 输出写到文件，文件原来的内容全删</span>
<span class="token punctuation">&#123;</span>
   命令1
   命令2
   <span class="token punctuation">..</span>.
<span class="token punctuation">&#125;</span> <span class="token operator">>&amp;</span> 文件名    <span class="token comment"># 等价于  > 文件名 2>&amp;1</span>

<span class="token comment"># 输出追加写到文件名的屁股后面</span>
<span class="token punctuation">&#123;</span>
   命令1
   命令2
   <span class="token punctuation">..</span>.
<span class="token punctuation">&#125;</span> <span class="token operator">>></span><span class="token operator">&amp;</span> 文件名  <span class="token comment"># 等价于  > 文件名 2>&amp;1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>&gt; 文件名</code>表示将<code>1</code>（正常输出）写到<code>文件名</code>，文件原来的内容全删</li>
<li><code>&gt;&gt; 文件名</code>表示将<code>1</code>（正常输出）追加写到<code>文件名</code>的屁股后面</li>
<li><code>2&gt;&amp;1</code>表示将<code>2</code>（错误、警告）都用<code>1</code>（正常输出）输出</li>
<li>若 <code>文件名</code> = <code>/dev/null</code>，表示不显示到命令行，也不写到任何真实文件。<code>/dev/null</code>是一个可无限写入、但不保存内容的“黑洞“文件</li>
</ul>
<h2 id="后台运行结束插播短信"><a class="header-anchor" href="#后台运行结束插播短信"></a>后台运行结束插播短信</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>
   命令1
   命令2
   <span class="token punctuation">..</span>.
<span class="token punctuation">&#125;</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>后台执行命令1,2…</p>
<ul>
<li>开始启动时显示</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">120892</span>
用户名@服务器名 <span class="token punctuation">(</span>在此可以干别的事情<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>完成时显示</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">用户名@服务器名 <span class="token punctuation">(</span>插播短信<span class="token string">"完成进程"</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  + <span class="token number">120892</span> <span class="token keyword">done</span>       <span class="token punctuation">&#123;</span> 命令1<span class="token punctuation">;</span> 命令2<span class="token punctuation">;</span> <span class="token punctuation">..</span>. <span class="token punctuation">&#125;</span>
用户名@服务器名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="后台运行结束不插播短信-输出重定向"><a class="header-anchor" href="#后台运行结束不插播短信-输出重定向"></a>后台运行结束不插播短信+输出重定向</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span>
   命令1
   命令2
   <span class="token punctuation">..</span>.
<span class="token punctuation">&#125;</span> <span class="token operator">&amp;</span> <span class="token punctuation">)</span> <span class="token operator">>&amp;</span> <span class="token operator">&lt;</span>log_file<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>&amp;</code>：后台执行命令1,2…</p>
<p><code>&gt;&amp;</code> : 并将错误、警告、正常输出都写到 &lt;log_file&gt;</p>
<ul>
<li>程序开始和结束都不会有显示，要看输出需开`文件名</li>
</ul>
<h2 id="后台运行结束插播短信-输出重定向"><a class="header-anchor" href="#后台运行结束插播短信-输出重定向"></a>后台运行结束插播短信+输出重定向</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span>
   命令1
   命令2
   <span class="token punctuation">..</span>.
<span class="token punctuation">&#125;</span> <span class="token punctuation">)</span> <span class="token operator">>&amp;</span> <span class="token operator">&lt;</span>log_file<span class="token operator">></span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>后台执行命令1,2…</p>
<ul>
<li>开始启动时显示</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">120892</span>
用户名@服务器名 <span class="token punctuation">(</span>在此可以干别的事情<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>完成时显示</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">用户名@服务器名 <span class="token punctuation">(</span>插播<span class="token string">"完成进程"</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  + <span class="token number">120892</span> <span class="token keyword">done</span>       <span class="token punctuation">&#123;</span> 命令1<span class="token punctuation">;</span> 命令2<span class="token punctuation">;</span> <span class="token punctuation">..</span>. <span class="token punctuation">&#125;</span>
用户名@服务器名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>其余错误、警告、正常输出都写到 &lt;log_file&gt;</li>
<li>若 &lt;log_file&gt; = <code>/dev/null</code>，表示不显示到命令行，也不写到任何真实文件。/dev/null 是一个可无限写入、但不保存内容的“黑洞“文件。</li>
</ul>
<h2 id="多进程后台运行-运行完集中输出"><a class="header-anchor" href="#多进程后台运行-运行完集中输出"></a>多进程后台运行+运行完集中输出</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">rand</span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$RANDOM</span>"</span>
<span class="token assign-left variable">log_file</span><span class="token operator">=</span><span class="token string">"/tmp/parallels<span class="token variable">$rand</span>"</span>
<span class="token punctuation">(</span>
    <span class="token keyword">for</span> 范围<span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token punctuation">&#123;</span>
        命令
    <span class="token punctuation">&#125;</span> <span class="token operator">>></span> <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token variable">$log_file</span> <span class="token operator">&amp;</span>
    <span class="token comment"># &amp;: 多进程后台运行</span>
    <span class="token comment"># >>  $log_file        # stdout 存入$log_fil</span>
    <span class="token comment"># >> 2>&amp;1 $log_file    # stdout, warning, error  存入$log_fil</span>
    <span class="token keyword">done</span>
    <span class="token function">wait</span>
<span class="token punctuation">)</span> <span class="token operator">>&amp;</span> /dev/null <span class="token comment"># stdout, warning, error, 包含 后台运行开始和结束的短信</span>
<span class="token function">cat</span> <span class="token variable">$log_file</span> <span class="token comment"># 集中输出运行结果</span>
<span class="token function">rm</span> <span class="token variable">$log_file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="数学运算"><a class="header-anchor" href="#数学运算"></a>数学运算</h1>
<p><code> $(( 算式 ))</code> 等价于<code>$(expr 算式)</code> 等价于 <code>`xpr 算式`</code></p>
<p>算式中运算符与数值或变量之间必需有空格, 例如</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token variable">))</span></span><span class="token punctuation">;</span>  <span class="token builtin class-name">echo</span>  <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token number">1</span> + <span class="token number">2</span><span class="token variable">`</span></span><span class="token punctuation">;</span>  <span class="token builtin class-name">echo</span>  <span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> <span class="token number">1</span> + <span class="token number">2</span><span class="token variable">)</span></span><span class="token punctuation">;</span>  <span class="token function">expr</span> <span class="token number">1</span> + <span class="token number">2</span>
<span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span>$a <span class="token operator">+</span> <span class="token number">2</span><span class="token variable">))</span></span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span>  <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a + <span class="token number">2</span><span class="token variable">`</span></span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span>  <span class="token variable"><span class="token variable">$(</span><span class="token function">expr</span> $a + <span class="token number">2</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token function">expr</span> <span class="token variable">$a</span> + <span class="token number">2</span>
<span class="token comment"># 输出皆 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="字符串"><a class="header-anchor" href="#字符串"></a>字符串</h1>
<p><a href="https://segmentfault.com/a/1190000010885665">Zsh 开发指南（第二篇 字符串处理之常用操作）</a></p>
<p>以下的 <code>string </code>可以取做 <code>1</code> <code>2</code> …,  表示是函数或脚本的第1,2,…个参数</p>
<p>如 <code>$&#123;1:4&#125;</code> 表示第函数的1个参数的左起第4个字符(0开始计数)及往后的子串</p>
<h2 id="字符串长度"><a class="header-anchor" href="#字符串长度"></a>字符串长度</h2>
<h3 id="字符串长度-含颜色控制符"><a class="header-anchor" href="#字符串长度-含颜色控制符"></a>字符串长度 (含颜色控制符)</h3>
<p>zsh bash通用</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$&#123;<span class="token operator">#</span>string&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="字符串长度-去除颜色控制符"><a class="header-anchor" href="#字符串长度-去除颜色控制符"></a>字符串长度 (去除颜色控制符)</h3>
<p>zsh bash通用, 可以通过如下方法, 去除红色的控制符</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">string</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">'abc 123abc123'</span> <span class="token operator">|</span> <span class="token function">grep</span> --color<span class="token operator">=</span>always <span class="token number">123</span><span class="token variable">)</span></span>
<span class="token assign-left variable">length_string</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token operator">#</span>string&#125;</span>
<span class="token comment"># 等价于</span>
<span class="token assign-left variable">string_without_red</span><span class="token operator">=</span><span class="token string">"$(cat -v &lt;&lt;&lt; "<span class="token variable">$&#123;string&#125;</span>" | sed -E "s/(\^\[\[01;31m\^\[\[K|\^\[\[m\^\[\[K)//g"</span><span class="token punctuation">)</span>"
<span class="token assign-left variable">length_string_without_red</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token operator">#</span>string_without_red&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$string</span>"</span>
<span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$length_string</span>"</span>
<span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$string_without_red</span>"</span>
<span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$length_string_without_red</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出</p>
<pre class="line-numbers language-none"><code class="language-none">abc 123abc123
47
abc 123abc123
14<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="字符串取子串"><a class="header-anchor" href="#字符串取子串"></a>字符串取子串</h2>
<h3 id="string-始-长-从0开始-bash-zsh-支持-string-始-0-止-0-仅zsh支持"><a class="header-anchor" href="#string-始-长-从0开始-bash-zsh-支持-string-始-0-止-0-仅zsh支持"></a><code>&#123;string:始:长&#125; (从0开始)</code> bash/zsh 支持, <code>&#123;string:始&gt;=0:止&lt;0&#125; </code> 仅zsh支持</h3>
<table>
<thead>
<tr>
<th>bash或zsh支持</th>
<th>zsh支持，bash不支持</th>
<th>bash或zsh里这样写得不到想要的</th>
<th>结果（用python表示）</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&#123;string:始:长&#125;</code></td>
<td><code>&#123;string:始:止&#125;</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>始&gt;=0 左起<br>始&lt;=-1 右起<br>长&gt;=0</td>
<td>始&gt;=0 左起<br>始&lt;=-1 右起<br>止&lt;=-1 右起</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>若始=-m&lt;=-1 且 长&gt;=0</strong></td>
<td><strong>若始=-m&lt;=-1 且 止=-n&lt;0</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>$&#123;string:始&#125;</code> <code>$&#123;string:始:止&#125;</code></td>
<td></td>
<td></td>
<td><code>string</code></td>
</tr>
<tr>
<td><code>$&#123;string:$&#123;</code> <code>#string&#125;-m:长&#125;</code></td>
<td></td>
<td></td>
<td><code>string[-m,len(string)-m+长]</code></td>
</tr>
<tr>
<td></td>
<td><code>$&#123;string:$&#123;</code> <code>#string&#125;-m:-n&#125;</code></td>
<td></td>
<td><code>string[-m,-n]</code></td>
</tr>
<tr>
<td><strong>止=倒数第 n 个 (n&gt;0)</strong></td>
<td>**若始&gt;=0 且 止=-n&lt;0 **</td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>$&#123;string:始:-n</code> = <code>$&#123;string:始:&#123;</code> <code>#string&#125;-n-始&#125;</code></td>
<td><code>$&#123;string:始:-n&#125;</code></td>
<td></td>
<td><code>string[始:-n]</code></td>
</tr>
<tr>
<td><strong>若始&gt;=0 且 长&gt;=0</strong></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>$&#123;string:始&#125;</code></td>
<td></td>
<td><code>$&#123;string:始:&#125;</code> zsh无法解析会报错，bash返回空字符串</td>
<td><code>string[始:]</code></td>
</tr>
<tr>
<td><code>$&#123;string:始:长&#125;</code></td>
<td></td>
<td></td>
<td><code>string[始:始+长]</code>即<code>string[始:min(始+长,len(string)+1]</code></td>
</tr>
<tr>
<td><code>$&#123;string:始:1&#125;</code></td>
<td></td>
<td><code>$&#123;string:始&#125;</code>结果是 <code>string[始:]</code></td>
<td><code>string[始]</code></td>
</tr>
<tr>
<td><code>$&#123;string:始:0&#125;</code></td>
<td></td>
<td></td>
<td><code>''</code></td>
</tr>
</tbody>
</table>
<p>说明:</p>
<ul>
<li><code>$&#123;string:x:y&#125;</code>: <code>x</code> <code>y</code> 可以<strong>直接写四则运算</strong>,如 <code>$&#123;stinrg:0*1+1:$&#123;</code> <code>#string&#125;/2+1&#125;</code></li>
</ul>
<h3 id="string-始-止-从1开始-仅-zsh-支持"><a class="header-anchor" href="#string-始-止-从1开始-仅-zsh-支持"></a><code>$string[始,止] (从1开始)</code> 仅 zsh 支持</h3>
<p>本写法zsh支持，bash不支持。始，止<strong>皆从1开始</strong>，可以是负数。</p>
<ul>
<li>
<p>取一个字符</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$string</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>取值：$n \in (-\infty,+\infty)$</p>
<p>结果：</p>
  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>
    n<span class="token operator">=</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> string<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 取出的是第n个字符</span>
<span class="token keyword">else</span>
    <span class="token keyword">return</span> <span class="token string">''</span>          <span class="token comment"># 取出的是''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>取一段字符</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$string</span><span class="token punctuation">[</span>m,n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>取值：$m,n \in (-\infty,+\infty)$</p>
<p>结果：</p>
  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> m<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>
    m<span class="token operator">=</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> n<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>
    n<span class="token operator">=</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> m<span class="token operator">&lt;=</span>n<span class="token punctuation">:</span>
    <span class="token keyword">return</span> string<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">]</span>    <span class="token comment"># 取出的是第[m,n] 区间的字符</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">''</span>               <span class="token comment"># 取出的是''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="遍历字符串"><a class="header-anchor" href="#遍历字符串"></a>遍历字符串</h2>
<p>以下适用于zsh和bash</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>$&#123;#string&#125;<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;string<span class="token operator">:</span>$i<span class="token operator">:</span>1&#125;</span>"</span>
<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="字符串拼接"><a class="header-anchor" href="#字符串拼接"></a>字符串拼接</h2>
<p>以下适用于zsh和bash</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">string</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;sting1&#125;</span><span class="token variable">$&#123;string2&#125;</span>"</span>
<span class="token assign-left variable">string</span><span class="token operator">+=</span><span class="token string">"<span class="token variable">$&#123;sting2&#125;</span>"</span>
<span class="token assign-left variable">string</span><span class="token operator">+=</span><span class="token string">'xxxxxx'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="字符串转数组"><a class="header-anchor" href="#字符串转数组"></a>字符串转数组</h2>
<pre class="line-numbers language-none"><code class="language-none">string&#x3D;&quot;1:2:3::4 :5&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>zsh专用</strong></p>
<pre class="line-numbers language-none"><code class="language-none">array&#x3D;(&quot;$&#123;(@s&#x2F;【分割字符串】&#x2F;)string&#125;&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-zsh" data-language="zsh"><code class="language-zsh">array&#x3D;(&quot;$&#123;(@s&#x2F;:&#x2F;)string&#125;&quot;)
array&#x3D;(&quot;$&#123;(@s&#x2F;\n&#x2F;)string&#125;&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><strong>bash专用</strong></p>
<ul>
<li>
<p>使用空白字符(正则表达式为<code>\s+</code>, 即连续尽可能多(&gt;=1个)的tab/换行/空格等)分割:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">$&#123;string&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">read</span> -a array <span class="token operator">&lt;&lt;&lt;</span> <span class="token variable">$string</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<p><strong>bash与zsh通用</strong></p>
<ul>
<li>
<p>使用任何单个字符分割</p>
<p>注意, 连续两个【 分割字符】, 分割开会得到其中间的一个 “” 字符串, 这与bash专用的分割策略不同</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">hadopt</span><span class="token operator">=</span>false
<span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$ZSH_VERSION</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>setopt <span class="token operator">|</span> <span class="token function">grep</span> shwordsplit<span class="token variable">)</span></span>"</span> <span class="token operator">!=</span> <span class="token string">''</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>
    <span class="token assign-left variable">hadopt</span><span class="token operator">=</span>true <span class="token operator">&amp;&amp;</span> setopt sh_word_split <span class="token comment"># 若为 zsh则开sh_word_split选项</span>
<span class="token assign-left variable">OLD_IFS</span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$IFS</span>"</span> <span class="token punctuation">;</span> <span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span><span class="token string">"【 分割字符】"</span> <span class="token comment"># " # 必需是单个字符，但可以是汉字</span>
<span class="token comment"># 如果是转义字符需加 $'\某'，如换行，需要写成  $'\n'，必需是单引号</span>
<span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> -E <span class="token string">"<span class="token variable">$string</span>"</span><span class="token variable">)</span></span><span class="token punctuation">)</span>
<span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span><span class="token string">"<span class="token variable">$OLD_IFS</span>"</span>
<span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$ZSH_VERSION</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$hadopt</span>"</span> <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> unsetopt sh_word_split <span class="token comment"># 若原先没开此选项则关之</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​	<code>zsh</code> 默认是没有开<code>sh_word_split</code>选项的，没开的话，得到的array=<code>(&quot;$&#123;string&#125;&quot;)</code></p>
<p>​	执行<code>setopt</code>命令查看开了哪些选项，若见’shwordsplot’则开了此选项</p>
</li>
<li>
<p>多行字符串, 按换行符分割为数组, 每行开头结尾的连续空白符均保留, 连续两个换行符分割出一个<code>''</code>字符串</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">while</span> <span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span> <span class="token builtin class-name">read</span> -r line <span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token assign-left variable">array</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">$line</span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">done</span> <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"<span class="token variable">$&#123;string&#125;</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>IFS=</code> 等价于 <code>IFS=‘'</code>, 仅改变read这个命令的环境变量, 无需再恢复此环境变量</li>
</ul>
</li>
<li>
<p>若不加<code>IFS=</code>, 则line的开头/结尾的连续空白符 (<code>\s+</code>)会被删掉</p>
<ul>
<li><code>-r</code>: <code>\x</code> 不当成转义字符, 而当成普通字符串, 从而见到<code>&quot;\n”</code>不分割, 见到<code>$'\n’</code>才分割.</li>
</ul>
<p>例如</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">string</span><span class="token operator">=</span>'    asdas    <span class="token number">12312</span>

asdasd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>’</p>
<h1 id="12312后有3个空格"><a class="header-anchor" href="#12312后有3个空格"></a>(12312后有3个空格)</h1>
<p>array=()<br>
while IFS= read -r line ; do<br>
array+=(“$line”);<br>
done &lt;&lt;&lt; “${string}”<br>
declare -p array</p>
<pre class="line-numbers language-none"><code class="language-none">
zsh输出
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<p>typeset -a array=( ’    asdas    12312   ’ ‘’ asdasd ‘’ ‘’ ‘’ )<br>
<pre class="line-numbers language-none"><code class="language-none">
bash输出
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>
declare -a array=‘([0]=&quot;    asdas    12312   &quot; [1]=“” [2]=“asdasd” [3]=“” [4]=“” [5]=“”)’<br>
<pre class="line-numbers language-none"><code class="language-none">    
    是一样的

## 字符串替换

### 引用字符串时替换

以下适用于&#96;zsh&#96;和&#96;bash&#96;

&#96;&#96;&#96;bash
&quot;$&#123;string&#x2F;旧子串&#x2F;新子串&#125;&quot;   #  替换首个旧子串
&quot;$&#123;string&#x2F;&#x2F;旧子串&#x2F;新子串&#125;&quot;  #  替换所有旧子串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<ul>
<li>新旧字符串转义
<ul>
<li>空字符串：旧字符串中写作<code>$&#123;string/旧子串/&#125; </code>, 不可写作<code>$&#123;string/旧子串/''&#125; </code>(这样会替换为<code>''</code>)</li>
<li>空格 新旧字符串均写作`\ `  ，不可写作<code>' '</code></li>
<li>换行 新字符串中写作<code>\n</code>，旧字符串中写作<code>$'\n'</code></li>
<li><code>\ </code>新旧字符串均写作<code>\\</code></li>
<li><code>$ </code>新旧字符串均写作<code>\$</code></li>
<li><code>`</code>  新旧字符串均写作<code>\`</code></li>
<li><code>&quot;  </code>新旧字符串均写作<code>\&quot;</code></li>
</ul>
</li>
<li>新旧字符串不转义
<ul>
<li>不采用正则表达式</li>
<li><code>'</code>新旧字符串均写作<code>'</code> ,不可写作<code>\'</code></li>
</ul>
</li>
</ul>
<h3 id="用sed替换"><a class="header-anchor" href="#用sed替换"></a>用sed替换</h3>
<p>一下写法适用于mac、linux：</p>
<p>正则表达式进行字符串替换，<code>-E</code>表示支持正则表达式</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">new_string</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> $string <span class="token operator">|</span> <span class="token function">sed</span> -E <span class="token string">'s/旧子串/新字符串/'</span><span class="token variable">`</span></span>"</span>   <span class="token comment"># 替换第一个匹配</span>
<span class="token assign-left variable">new_string</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> $string <span class="token operator">|</span> <span class="token function">sed</span> -E <span class="token string">'s/旧子串/新字符串/g'</span><span class="token variable">`</span></span>"</span>  <span class="token comment"># 替换第全部匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>输出文件内容并用正则表达式替换</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> 文件 <span class="token operator">|</span> <span class="token function">sed</span> -E <span class="token string">'s/旧子串/新字符串/'</span> <span class="token comment"># 替换第一个匹配</span>
<span class="token function">sed</span> -E <span class="token string">'s/旧子串/新字符串/'</span> 文件  <span class="token comment"># 替换第一个匹配</span>
<span class="token function">cat</span> 文件 <span class="token operator">|</span> <span class="token function">sed</span> -E <span class="token string">'s/旧子串/新字符串/g'</span> <span class="token comment"># 替换第全部匹配</span>
<span class="token function">sed</span> -E <span class="token string">'s/旧子串/新字符串/g'</span> 文件 <span class="token comment"># 替换第全部匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><a href="https://wiki.jikexueyuan.com/project/unix/regular-expressions.html">更多参考</a></p>
<ul>
<li>
<p>加<code>-E</code>才能在mac和linux下都支持正则表达式，不加<code>-E</code>则只linux支持正则表达式</p>
</li>
<li>
<p>新旧字符串中若有<code>/</code>，命令里应该写作<code>\/</code>，不能写作<code>&quot;/&quot;</code>,<code>'/'</code>,<code>\\\/</code>,<code>/</code></p>
</li>
<li>
<p>支持<code>[a-zA-z0-9]</code>的写法</p>
</li>
<li>
<p><code>[a-z]+</code>：加了<code>-E</code>则 应该写作 <code>[a-z]+</code> (不加<code>-E</code>写作<code>[a-z]\+</code>)</p>
</li>
<li>
<p>空白字符：不支持<code>\s</code>(空白字符)，支持<code>[:space:]</code>，</p>
<ul>
<li>例如替换所有空白字符<code>sed -E 's/[[:space:]]+//g'</code></li>
<li>例如替换所有非空白字符<code>sed -E 's/[^[:space:]]+//g'</code></li>
</ul>
</li>
<li>
<p>换成换行符：</p>
<ul>
<li>
<p>应该写成 <code>'s/旧子串/新字符串前段'$'\\\n''新字符串后段/g'</code></p>
</li>
<li>
<p>或写成</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">'s/旧子串/新字符串前段\
新字符串后段/g'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>不可写成<code>s/旧子串/新字符串前段\n新字符串后段/g</code> ，或<code>s/旧子串/新字符串前段\\\n新字符串后段/g</code></p>
</li>
</ul>
</li>
<li>
<p>跨行替换/将换行符换掉：如些写</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> -e <span class="token string">':a'</span> -e <span class="token string">'N'</span> -e <span class="token string">'$!ba'</span> -Ee <span class="token string">'s/旧子串前段\n旧子串后段/新字符串/g'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>sed的参数 <code>-e 'xxxx'</code> 表示追加一条命令，即</p>
<ul>
<li>当<code>sed</code>只执行一条命令(如<code>s/xxx/xxx/g</code>）, 则 <code>sed  &quot;s/xxx/xxx/g&quot;</code> 是 <code>sed -e &quot;s/xxx/xxx/g&quot;</code>的简写</li>
<li>当<code>sed</code>执行多条命令时，则每条命令前需要写<code>-e</code>，如<code>sed -e 'xx' -e 'xxx' -e 'xxxxx'</code></li>
</ul>
</li>
<li>
<p>选中一行再进行替换</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> -e <span class="token string">'/子串1/ s/字串2/字串3/'</span>       <span class="token comment"># 先选中有字串1的行，再将这些行中的字串2替换为字串3</span>
perl -pe <span class="token string">'/子串1/ &amp;&amp; s/字串2/字串3/'</span>  <span class="token comment"># 先选中有字串1的行，再将这些行中的字串2替换为字串3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>引用被匹配的内容：<code>sed 's/xxx\(aaa\)xxx\(bbb\)xxx/yyy\1yyy\2yyy/g'</code>，则替换结果为</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">yyyaaayyybbbyyy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
</li>
</ul>
<h3 id="用perl替换"><a class="header-anchor" href="#用perl替换"></a>用perl替换</h3>
<p>sed不支持正则表达式中的向前匹配、向后匹配、非贪婪匹配（即模式后面加<code>?</code>），可以用perl命令代替sed搞替换。</p>
<p>Linux系统一般默认安装Perl包</p>
<p>以下适用于<code>zsh</code>和<code>bash</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">perl -pe <span class="token string">'s/旧子串/新子串/g'</span> <span class="token operator">&lt;</span>文件路径<span class="token operator">></span> <span class="token comment"># 输出替换后的全文</span>
perl -i -pe <span class="token string">'s/旧子串/新子串/g'</span> <span class="token operator">&lt;</span>文件路径<span class="token operator">></span> <span class="token comment"># 在文件内直接替换</span>
<span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;string&#125;</span>"</span> ｜ perl -pe <span class="token string">'s/旧子串/新子串/g'</span> <span class="token operator">&lt;</span>文件路径<span class="token operator">></span> <span class="token comment"># 替换输出</span>
<span class="token function">cat</span> <span class="token operator">&lt;</span>文件路径<span class="token operator">></span> ｜ perl -pe <span class="token string">'s/旧子串/新子串/g'</span> <span class="token operator">&lt;</span>文件路径<span class="token operator">></span> <span class="token comment"># 替换输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="取第几行"><a class="header-anchor" href="#取第几行"></a>取第几行</h2>
<p>取前m行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;string&#125;</span>"</span> <span class="token operator">|</span> <span class="token function">head</span> -n <span class="token operator">&lt;</span>m<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>取后行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;string&#125;</span>"</span> <span class="token operator">|</span> <span class="token function">tail</span> -n <span class="token operator">&lt;</span>m<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>去掉前<strong>m-1</strong>行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;string&#125;</span>"</span> <span class="token operator">|</span> <span class="token function">tail</span> -n +<span class="token operator">&lt;</span>m<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>去掉后m行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;string&#125;</span>"</span> <span class="token operator">|</span> <span class="token function">head</span> -n -<span class="token operator">&lt;</span>m<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="截取"><a class="header-anchor" href="#截取"></a>截取</h2>
<h3 id="语法"><a class="header-anchor" href="#语法"></a>语法</h3>
<table>
<thead>
<tr>
<th>写法</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$&#123;variable#pattern&#125;</code></td>
<td>去掉variable头最短匹配的pattern</td>
</tr>
<tr>
<td><code>$&#123;variable##pattern&#125;</code></td>
<td>去掉variable头最长匹配的pattern</td>
</tr>
<tr>
<td><code>$&#123;variable%pattern&#125;</code></td>
<td>去掉variable尾最短匹配的pattern</td>
</tr>
<tr>
<td><code>$&#123;variable%%pattern&#125;</code></td>
<td>去掉variable尾最长匹配的pattern</td>
</tr>
</tbody>
</table>
<p><code>pattern</code> 采用通配符的语法:</p>
<ul>
<li><code>?</code> : 0或1个任意字符</li>
<li><code>*</code> : [0,+∞)个任意字符</li>
<li><code>[...]</code> : 匹配一个字符 中括号里面</li>
<li><code>[!...]</code> (bash), <code>[\!...]</code> (zsh): 匹配一个字符 不在中括号里</li>
</ul>
<p>注意:</p>
<ul>
<li><code>[...]</code>或<code>[!...]</code> 后加<code>+</code> <code>*</code>  <code>?</code>  均不表示对中括号描述的字符重复[1,+∞), [0,+∞), [0,1]次; 而是表示匹配完一个中括号描述的字符, 而后再匹配 一个&quot;+”字符/[0,+∞)个任意字符/0或1个任意字符</li>
</ul>
<h3 id="用法"><a class="header-anchor" href="#用法"></a>用法</h3>
<p>截取某个子串之前/之后</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"<span class="token variable">$&#123;string<span class="token operator">%%</span>子串*&#125;</span>"</span>    <span class="token comment"># 截取 string 第一个 &lt;子串> 之前</span>
<span class="token string">"<span class="token variable">$&#123;string<span class="token operator">%</span>子串*&#125;</span>"</span>     <span class="token comment"># 截取 string 最后一个 &lt;子串> 之前</span>
<span class="token string">"<span class="token variable">$&#123;string<span class="token operator">#</span>*子串&#125;</span>"</span>     <span class="token comment"># 截取 string 第一个 &lt;子串> 之后</span>
<span class="token string">"<span class="token variable">$&#123;string<span class="token operator">##</span>*子串&#125;</span>"</span>    <span class="token comment"># 截取 string 最后一个 &lt;子串> 之后</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>注释:</p>
<ul>
<li>
<p><code>子串</code> 可以直接写字符, 可以是单个或多个字符, 如</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">string</span><span class="token operator">=</span><span class="token string">'https://github.com/someone://other'</span>
<span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;string<span class="token operator">%%</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>*&#125;</span>"</span>
<span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;string<span class="token operator">#</span>*<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>&#125;</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>返回</p>
<pre class="line-numbers language-none"><code class="language-none">https
github.com&#x2F;someone:&#x2F;&#x2F;other<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p><code>子串</code> 可以写 <code>$&#123;substring&#125;</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">string</span><span class="token operator">=</span><span class="token string">'https://github.com/someone://other'</span>
<span class="token assign-left variable">substring</span><span class="token operator">=</span><span class="token string">'://'</span>
<span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;string<span class="token operator">%%</span>$&#123;substring&#125;</span>*&#125;"</span>
<span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;string<span class="token operator">#</span>*$&#123;substring&#125;</span>&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>也返回同上</p>
</li>
<li>
<p>若无目标子串, 则各自均换返回整个字符串, 例如</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">string</span><span class="token operator">=</span><span class="token string">'https://github.com/someone://other'</span>
<span class="token assign-left variable">substring</span><span class="token operator">=</span><span class="token string">'///'</span>
<span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;string<span class="token operator">%%</span>$&#123;substring&#125;</span>*&#125;"</span>
<span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;string<span class="token operator">#</span>*$&#123;substring&#125;</span>&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>返回</p>
<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;github.com&#x2F;someone:&#x2F;&#x2F;other
https:&#x2F;&#x2F;github.com&#x2F;someone:&#x2F;&#x2F;other<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="调用"><a class="header-anchor" href="#调用"></a>调用</h2>
<p>bash与zsh通用的写法是 <code>&quot;$&#123;string&#125;”</code> 或 <code>&quot;$string&quot;</code>, 加不加<code>&#123;...&#125;</code>无影响</p>
<h4 id="bash"><a class="header-anchor" href="#bash"></a>bash</h4>
<p>bash中, 调用变量名为string的字符串, 必需两侧加引号.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"<span class="token variable">$string</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若不加引号, 则其中所有连续大于等于1个空白符(即正则表达式的<code>\s+</code>)均替换为一个空格</p>
<p>且在echo时, 行开头<s>与结尾</s>的连续空白符(即<code>^\s+</code>)会删去. 例如</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token string">'   a b  c   d
e
f  '</span> <span class="token comment"># d后有四个空格, 可能代码里显示不出来</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable">$a</span><span class="token string">'|'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
  <pre class="line-numbers language-none"><code class="language-none">a b c d e f |<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'|'</span><span class="token variable">$a</span><span class="token string">'|'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
  <pre class="line-numbers language-none"><code class="language-none">| a b c d e f |<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$a</span>|"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
  <pre class="line-numbers language-none"><code class="language-none">   a b  c   d
e
f  |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$a</span>|"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
  <pre class="line-numbers language-none"><code class="language-none">|   a b  c   d
e
f  |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h4 id="zsh"><a class="header-anchor" href="#zsh"></a>zsh</h4>
<p>zsh中, 调用变量名为string的字符串, 加不加引号皆可, 均会输出完整的字符串, 各行齐全, 空白符未改动.</p>
<p>即 zsh中 <code>&quot;$string”</code> 与 <code>$string</code> 结果都是 与bash中的 <code>&quot;$string”</code> 相同的.</p>
<h2 id="输出-_3"><a class="header-anchor" href="#输出-_3"></a>输出</h2>
<p>以下适用于<code>zsh</code>和<code>bash</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> -E 字符串 <span class="token comment"># 输出不转义，即`\某`不会转义，输出还是`\某`</span>
<span class="token builtin class-name">echo</span> -e 字符串 <span class="token comment"># 输出会转义，即`\某`会转义</span>
<span class="token builtin class-name">echo</span> -n 字符串 <span class="token comment"># 结尾不换行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="输入-_2"><a class="header-anchor" href="#输入-_2"></a>输入</h2>
<p>参数含义：输入写到string变量</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">read</span> -r string <span class="token comment"># 输入不转义，即`\某`不会转义，输入还是`\某`；输入完会换行</span>
<span class="token builtin class-name">read</span> -s string <span class="token comment"># 输入字符不显示；输入完不会换行</span>
<span class="token builtin class-name">read</span> -p 提示信息 string <span class="token comment"># bash支持，zsh不支持</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>组合用法：以下适用于<code>zsh</code>和<code>bash</code></p>
<ul>
<li>
<p>输入普通信息</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> -n 提示信息<span class="token punctuation">;</span> <span class="token builtin class-name">read</span> -r string<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">提示信息:输入内容
输入完进入下一行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</blockquote>
</li>
<li>
<p>输入密码</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> -n 提示信息<span class="token punctuation">;</span> <span class="token builtin class-name">read</span> -rs string<span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token string">''</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">提示信息:                       &#x2F;&#x2F; 输入内容不显示
输入完进入下一行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</blockquote>
</li>
</ul>
<h2 id="转义-_2"><a class="header-anchor" href="#转义-_2"></a>转义</h2>
<p>以下适用于<code>zsh</code>和<code>bash</code></p>
<ul>
<li><code>'</code> in <code>'xxxx'</code>：<code>'xxx'\''xxxx'</code>(推荐) 或 <code>'xxx'&quot;'&quot;'xxx'</code>
<ul>
<li><code>'xxx\'xxxx'</code> 无用，会被解析成<code>xxx\</code>(字符串),<code>xxxx</code>(变量), <code>'</code>(另一个字符串的开头)</li>
</ul>
</li>
<li><code>&quot;</code> in <code>&quot;xxxx&quot;</code>:    <code>&quot;xxx&quot;\&quot;&quot;xxxx&quot;</code> 或 <code>&quot;xxx\&quot;xxx&quot;</code>(推荐)</li>
</ul>
<h1 id="数组"><a class="header-anchor" href="#数组"></a>数组</h1>
<p><a href="https://segmentfault.com/a/1190000010910381">参考</a></p>
<h2 id="显示数组"><a class="header-anchor" href="#显示数组"></a>显示数组</h2>
<pre class="line-numbers language-none"><code class="language-none">declare -p array<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>返回如下</p>
<p><strong>zsh</strong></p>
<pre class="line-numbers language-none"><code class="language-none">typeset -a array&#x3D;( 1 &#39;2\n&#39; 3 &#39;4 &#39; 5 )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>bash</strong></p>
<pre class="line-numbers language-none"><code class="language-none">declare -a array&#x3D;&#39;([0]&#x3D;&quot;1&quot; [1]&#x3D;&quot;2\\n&quot; [2]&#x3D;&quot;3&quot; [3]&#x3D;&quot;4 &quot; [4]&#x3D;&quot;5&quot;)&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="数组取元素"><a class="header-anchor" href="#数组取元素"></a>数组取元素</h2>
<h3 id="array-始-长-从0开始-sh-bash-zsh共享"><a class="header-anchor" href="#array-始-长-从0开始-sh-bash-zsh共享"></a><code>$&#123;array[@]:始:长&#125; (从0开始)</code>  sh/bash/zsh共享</h3>
<ul>
<li>array数组     起始数字从 0 开始, 长度&gt;=1;        函数的参数   起始数字从 1 开始, 长度&gt;=1</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># array数组                            函数的参数</span>
<span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token operator">:</span>起始数字<span class="token operator">:</span>1&#125;</span>"</span>               <span class="token string">"<span class="token variable">$&#123;@<span class="token operator">:</span>起始数字<span class="token operator">:</span>1&#125;</span>"</span>      <span class="token comment"># return array[起始数字]</span>
<span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token operator">:</span>起始数字<span class="token operator">:</span>长度&#125;</span>"</span>             <span class="token string">"<span class="token variable">$&#123;@<span class="token operator">:</span>起始数字<span class="token operator">:</span>长度&#125;</span>"</span>   <span class="token comment"># return array[起始数字:长度]</span>
<span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token operator">:</span>起始数字&#125;</span>"</span>                 <span class="token string">"<span class="token variable">$&#123;@<span class="token operator">:</span>起始数字&#125;</span>"</span>        <span class="token comment"># return array[起始数字:]</span>
<span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span>                         <span class="token string">"<span class="token variable">$&#123;@&#125;</span>"</span>               <span class="token comment"># return array</span>
<span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token operator">:</span>$&#123;<span class="token operator">#</span>array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>&#125;"</span>            <span class="token string">"<span class="token variable">$&#123;@<span class="token operator">:</span>$<span class="token operator">#</span>&#125;</span>"</span>            <span class="token comment"># return array[-1]</span>
<span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token operator">:</span>$&#123;$((<span class="token operator">#</span>array<span class="token punctuation">[</span>@<span class="token punctuation">]</span> - 1))&#125;</span>&#125;"</span>   <span class="token string">"<span class="token variable">$&#123;@<span class="token operator">:</span>$(($<span class="token operator">#</span> - 1))&#125;</span>"</span>   <span class="token comment"># return array[-2:]     $(( 算式 )) 等价于 `expr 算式 `</span>
<span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token operator">:</span>$&#123;$((<span class="token operator">#</span>array<span class="token punctuation">[</span>@<span class="token punctuation">]</span> - 1))&#125;</span>:1&#125;"</span> <span class="token string">"<span class="token variable">$&#123;@<span class="token operator">:</span>$(($<span class="token operator">#</span> - 1))<span class="token operator">:</span>1&#125;</span>"</span> <span class="token comment"># return array[-2:]     $(( 算式 )) 等价于 `expr 算式 `</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>
<p>当 <code>始</code>, <code>长</code> 为变量时, 必须写<code>$</code>, 例如</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token operator">:</span>$index<span class="token operator">:</span>2&#125;</span>"</span>    <span class="token comment"># 可以解析</span>
<span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token operator">:</span>index<span class="token operator">:</span>2&#125;</span>"</span>     <span class="token comment"># 无法解析</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>当 <code>始</code>, <code>长</code> 为四则运算时, 直接写算式即可, 支持<code>+</code> <code>- </code> <code>*</code> <code>/</code> <code>(</code> <code>)</code>, 例如</p>
</li>
</ul>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span>zero one two three four five six seven eight nine ten <span class="token punctuation">)</span>
<span class="token assign-left variable">idx</span><span class="token operator">=</span><span class="token number">3</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token operator">:</span>(($idx+2)<span class="token operator">/</span>2)*3-1<span class="token operator">:</span>1&#125;</span>
<span class="token comment"># 返回 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="数-从1开始-sh-bash-zsh共享"><a class="header-anchor" href="#数-从1开始-sh-bash-zsh共享"></a><code>$数 (从1开始)</code>   sh/bash/zsh共享</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"$数"</span>                     <span class="token comment"># 函数的第[数]个参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>
<p>当<code>数</code>为变量时, 只能用<code>eval var=\&quot;\$&#123;$&#123;idx&#125;&#125;\&quot;</code> 来获得 (如下), 或用 <code>$&#123;@:$idx:1&#125;</code> (必需写$)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token assign-left variable">idx</span><span class="token operator">=</span><span class="token number">2</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$idx</span>  <span class="token comment"># 返回 2</span>
    <span class="token builtin class-name">eval</span> <span class="token assign-left variable">var</span><span class="token operator">=</span><span class="token punctuation">\</span>"<span class="token punctuation">\</span><span class="token variable">$&#123;$&#123;idx&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">\</span>"  <span class="token punctuation">;</span>	<span class="token builtin class-name">echo</span> <span class="token variable">$&#123;var&#125;</span>  <span class="token comment"># 返回  arg 2</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;$&#123;idx&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment"># 返回 2</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$&#123;$idx&#125;</span> <span class="token comment">#  返回 f:5: bad substitution</span>
<span class="token punctuation">&#125;</span>

f <span class="token string">'arg 1'</span> <span class="token string">'arg 2'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>当 <code>数</code> 为size运算算式时, 只能用<code>eval var=\&quot;\$&#123;$((算式))&#125;\&quot;</code> 来获得 (如下), 或用 <code>$&#123;@:直接写size运算:1&#125;</code> (必需写$)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">eval</span> <span class="token assign-left variable">var</span><span class="token operator">=</span><span class="token punctuation">\</span>"<span class="token punctuation">\</span><span class="token variable">$&#123;$((1 + 1))&#125;</span><span class="token punctuation">\</span>"
    <span class="token builtin class-name">echo</span> <span class="token variable">$var</span>
<span class="token punctuation">&#125;</span>
f <span class="token string">'arg 1'</span> <span class="token string">'arg 2'</span>
<span class="token comment"># 返回 arg 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="array-数-”-bash从0开始-zsh从1开始"><a class="header-anchor" href="#array-数-”-bash从0开始-zsh从1开始"></a><code>&quot;$&#123;array[数]&#125;” (bash从0开始, zsh从1开始)</code></h3>
<ul>
<li>sh/bash: 数字 从0开始</li>
<li>zsh: 数字从1开始</li>
<li><code>&quot;$&#123;@[数字]&#125;”</code> 写法无效</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>数字<span class="token punctuation">]</span>&#125;</span>"</span>           <span class="token comment"># return array[数字]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>
<p>当 <code>数</code> 为变量时, 可以不写<code>$</code>, 例如</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token operator">:</span>$index<span class="token operator">:</span>2&#125;</span>"</span>    <span class="token comment"># 可以解析</span>
<span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token operator">:</span>index<span class="token operator">:</span>2&#125;</span>"</span>     <span class="token comment"># 可以解析</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>当 <code>始</code>, <code>长</code> 为四则运算时, 直接写算式即可, 支持<code>+</code> <code>- </code> <code>*</code> <code>/</code> <code>(</code> <code>)</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span>zero one two three four five six seven eight nine ten <span class="token punctuation">)</span>
<span class="token assign-left variable">idx</span><span class="token operator">=</span><span class="token number">3</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$&#123;array<span class="token punctuation">[</span>(($idx+2)<span class="token operator">/</span>2)*3-1<span class="token punctuation">]</span>&#125;</span>
<span class="token comment"># bash 返回 five, zsh 返回 four</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="array-始-止-从1开始-仅zsh支持"><a class="header-anchor" href="#array-始-止-从1开始-仅zsh支持"></a><code>$&#123;array[始,止]&#125; (从1开始)</code>  仅zsh支持</h3>
<ul>
<li>数字/起始数字 从1开始, 表示正着数</li>
<li>起始数字, 结束数字可为-1,-2, …, 表示结束数字倒着数</li>
<li>不论正着数还是倒着数, 只要起始位置比结束位置靠右, 则返回空白字符串</li>
<li>当 <code>始</code>, <code>止</code> 为变量时, 必须写<code>$</code></li>
<li>当 <code>始</code>, <code>止</code> 为四则运算时, 直接写算式即可, 支持<code>+</code> <code>- </code> <code>*</code> <code>/</code> <code>(</code> <code>)</code></li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># array数组                  函数的参数</span>
<span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>数字<span class="token punctuation">]</span>&#125;</span>"</span>             <span class="token string">"<span class="token variable">$&#123;@<span class="token punctuation">[</span>数字<span class="token punctuation">]</span>&#125;</span>"</span>              <span class="token comment"># 按照上述index计法, 返回第 数字 个元素, 对应Python: array[数字-1]</span>
<span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>起始数字<span class="token operator">,</span>结束数字<span class="token punctuation">]</span>&#125;</span>"</span>  <span class="token string">"<span class="token variable">$&#123;@<span class="token punctuation">[</span>起始数字<span class="token operator">,</span>结束数字<span class="token punctuation">]</span>&#125;</span>"</span> <span class="token comment"># 按照上述 index 计法, 返回数组 取闭区间 [起始数字,正结束数字]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><code>$&#123;array[起始数字,结束数字]&#125;</code> 对应的 python 代码</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> 结束数字<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> array<span class="token punctuation">[</span>起始数字<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>结束数字<span class="token punctuation">]</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> 结束数字<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> 结束数字<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> array<span class="token punctuation">[</span>起始数字<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> array<span class="token punctuation">[</span>起始数字<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>结束数字<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="数组长度"><a class="header-anchor" href="#数组长度"></a>数组长度</h2>
<p>zsh/bash通用</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$&#123;<span class="token operator">#</span>array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>zsh专用</p>
<pre class="line-numbers language-zsh" data-language="zsh"><code class="language-zsh">$&#123;#array&#125;
# 或
$#array<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="判断是否是数组"><a class="header-anchor" href="#判断是否是数组"></a>判断是否是数组</h2>
<p><strong>封装成函数</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">is_array</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">local</span> <span class="token assign-left variable">array_name</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$1</span>"</span>
    <span class="token comment"># declare -p $array_name</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">declare</span> -p $array_name<span class="token variable">)</span></span>"</span> <span class="token operator">=~</span> <span class="token string">'declare -a '</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">\</span>
       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">declare</span> -p $array_name<span class="token variable">)</span></span>"</span> <span class="token operator">=~</span> <span class="token string">'typeset -g -a '</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">\</span>
       <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">declare</span> -p $array_name<span class="token variable">)</span></span>"</span> <span class="token operator">=~</span> <span class="token string">'typeset -a '</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">echo</span> <span class="token boolean">true</span>
    <span class="token keyword">else</span>
        <span class="token builtin class-name">echo</span> <span class="token boolean">false</span>
    <span class="token keyword">fi</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-none"><code class="language-none">a&#x3D;(gpu&#123;1..3&#125;)
is_array a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">a&#x3D;adsaasd
is_array a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">false<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p>注：</p>
<ul>
<li>
<p>bash 返回</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">declare -a array_name&#x3D;&#39;([0]&#x3D;&quot;gpu1&quot; [1]&#x3D;&quot;gpu2&quot; [2]&#x3D;&quot;gpu3&quot;)&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
</li>
<li>
<p>zsh   返回</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">typeset -g -a array_name&#x3D;( gpu1 gpu2 gpu3 )
或
typeset -a array_name&#x3D;( gpu1 gpu2 gpu3 )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</blockquote>
</li>
</ul>
<h2 id="数组赋值与拼接"><a class="header-anchor" href="#数组赋值与拼接"></a>数组赋值与拼接</h2>
<p>以下适用于<code>zsh</code>和<code>bash</code>的</p>
<ul>
<li>数组赋值</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">$&#123;array1<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>declare -p array</code>和<code>declare -p array1</code>输出结果会完全一样，即array和array1的每个元素都一样，元素内可以含有空格、换行，均不影响赋值。</p>
<ul>
<li>数组拼接并赋值</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">$&#123;array1<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span> <span class="token string">"<span class="token variable">$&#123;array2<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span><span class="token punctuation">)</span>
<span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">$&#123;array1<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span> <span class="token string">"string"</span><span class="token punctuation">)</span>
<span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"string"</span> <span class="token string">"<span class="token variable">$&#123;array2<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">$&#123;array2<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span><span class="token punctuation">)</span>
<span class="token comment"># 等价于</span>
<span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span> <span class="token string">"<span class="token variable">$&#123;array2<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>array1、array2元素内可以含有空格、换行，均不影响拼接和赋值。</p>
<p>上述不可省略<code>&quot;</code>，这是因为</p>
<ul>
<li>
<p><code>$&#123;array[@]&#125;$</code>(bash)  返回 <code>'\n'.join(array).split('\n')</code>(python)</p>
</li>
<li>
<p><code>&quot;$&#123;array[@]&#125;$&quot;</code> (zsh、bash) 和 <code>$&#123;array[@]&#125;$</code>(zsh)   返回 <code>array</code>(python)</p>
<p><strong>例如</strong>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array1</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'asd'</span> <span class="token string">'asd\nsads
asdsa'</span><span class="token punctuation">)</span>
<span class="token assign-left variable">array2</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'asd'</span><span class="token punctuation">)</span>
<span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">$&#123;array1<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span> <span class="token variable">$&#123;array2<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span><span class="token punctuation">)</span>
<span class="token builtin class-name">declare</span> -p array<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>
<p>bash中返回</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">declare -a array&#x3D;&#39;([0]&#x3D;&quot;asd&quot; [1]&#x3D;&quot;asd\\nsads&quot; [2]&#x3D;&quot;asdsa&quot; [3]&#x3D;&quot;asd&quot;)&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p>即<code>array</code>数组成员中若有换行， <code>$&#123;array[@]&#125;</code>  会在换行号处断开成成两个数组成员。</p>
</li>
<li>
<p>zsh中</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">typeset -a array&#x3D;( asd $&#39;asd\nsads\nasdsa&#39; asd )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p>即<code>array</code>数组成员中若有换行， <code>$&#123;array[@]&#125;</code>  不会在换行号处断开成成两个数组成员。</p>
</li>
</ul>
</li>
</ul>
<h2 id="生成range"><a class="header-anchor" href="#生成range"></a>生成range</h2>
<p>以下适用于<code>zsh</code>和<code>bash</code></p>
<h3 id="一组range"><a class="header-anchor" href="#一组range"></a>一组range</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'前缀'</span><span class="token punctuation">&#123;</span>起始数字<span class="token punctuation">..</span>结束数字<span class="token punctuation">&#125;</span><span class="token string">'后缀'</span><span class="token punctuation">)</span>  <span class="token comment"># 前缀、后缀可有空格、回车</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>原理：</p>
<ul>
<li>代码<code>前缀&#123;起始数字..结束数字&#125;后缀</code>等价于代码<code>'前缀xx后缀' '前缀xx后缀' …… '前缀xx后缀'  </code></li>
<li>故<code>('前缀'起始数字..结束数字&#125;'后缀')</code>返回数字<code>('前缀xx后缀' '前缀xx后缀'    ……   '前缀xx后缀')</code></li>
</ul>
<h3 id="多组range拼接起来"><a class="header-anchor" href="#多组range拼接起来"></a>多组range拼接起来</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'前缀1'</span><span class="token punctuation">&#123;</span>起始数字<span class="token punctuation">..</span>结束数字<span class="token punctuation">&#125;</span><span class="token string">'后缀1'</span> <span class="token string">'前缀2'</span><span class="token punctuation">&#123;</span>起始数字<span class="token punctuation">..</span>结束数字<span class="token punctuation">&#125;</span><span class="token string">'后缀2'</span><span class="token punctuation">)</span>  <span class="token comment"># 前缀、后缀可有空格、回车</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>原理：</p>
<ul>
<li>
<p>等价于</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'前缀1xx后缀1'</span> <span class="token string">'前缀1xx后缀1'</span> …… <span class="token string">'前缀1xx后缀1'</span> <span class="token string">'前缀2xx后缀2'</span> <span class="token string">'前缀2xx后缀2'</span> …… <span class="token string">'前缀2xx后缀2'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<h2 id="从文件加载数组"><a class="header-anchor" href="#从文件加载数组"></a>从文件加载数组</h2>
<p>适用于zsh、bash，mac、linux</p>
<ul>
<li>以换行为分隔符（tab和空格皆不分割）</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">IFS_old</span><span class="token operator">=</span><span class="token environment constant">$IFS</span>
<span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span><span class="token string">$'<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>'</span>
<span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable"><span class="token variable">$(</span><span class="token operator">&lt;</span>file_path<span class="token variable">)</span></span><span class="token punctuation">)</span>
<span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span><span class="token variable">$IFS_old</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>以空格为分隔符（tab和换行皆不分割）</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">IFS_old</span><span class="token operator">=</span><span class="token environment constant">$IFS</span>
<span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span><span class="token string">' '</span>
<span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable"><span class="token variable">$(</span><span class="token operator">&lt;</span>file_path<span class="token variable">)</span></span><span class="token punctuation">)</span>
<span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span><span class="token variable">$IFS_old</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>以空白字符为分割（空格、tab、换行皆分割）</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable"><span class="token variable">$(</span><span class="token operator">&lt;</span>file_path<span class="token variable">)</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="遍历数组"><a class="header-anchor" href="#遍历数组"></a>遍历数组</h2>
<h3 id="遍历元素"><a class="header-anchor" href="#遍历元素"></a>遍历元素</h3>
<p>正确写法：以下适用于<code>zsh</code>和<code>bash</code>和<code>sh</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 自定义的数组</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">idx</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token punctuation">..</span>.
<span class="token keyword">done</span>
<span class="token comment"># 传入函数或文件的参数</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">idx</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token punctuation">..</span>.
<span class="token keyword">done</span>

<span class="token comment"># 遍历数组 (1 2 3 4)</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">idx</span> <span class="token keyword">in</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token punctuation">..</span>.
<span class="token keyword">done</span>
<span class="token comment"># 遍通配符路径</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">idx</span> <span class="token keyword">in</span> ./*.zip <span class="token punctuation">..</span>/*<span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token punctuation">..</span>.
<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>错误写法：</p>
<ul>
<li>以下写法，<code>zsh </code> 会正常遍历数组；<code>bash</code> 只遍历到数组首个元素就结束了遍历。</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 自定义的数组</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">idx</span> <span class="token keyword">in</span> <span class="token variable">$array</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token punctuation">..</span>.
<span class="token keyword">done</span>

<span class="token comment"># 传入函数或文件的参数</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">idx</span> <span class="token keyword">in</span> <span class="token variable">$@</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token punctuation">..</span>.
<span class="token keyword">done</span>

<span class="token comment"># 遍历数组 (1 2 3 4)</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">idx</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token punctuation">..</span>.
<span class="token keyword">done</span>

<span class="token comment"># 遍通配符路径</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">idx</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> ./*.zip <span class="token punctuation">..</span>/*<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token comment"># 这样会把 被匹配到的文件夹向下列出一级, 例如</span>
    <span class="token comment"># house.zip  object_vox.zip  object.zip  room.zip  ../suncg_data.zip  texture.zip</span>

    <span class="token comment"># ../suncg_data:</span>
    <span class="token comment"># house  object  object_vox  room  texture</span>

  <span class="token comment"># ../suncg_data_old:</span>
  <span class="token comment"># house  object  object_vox  room  suncg_room_json  suncg_room_obj  texture</span>

  <span class="token comment"># ../suncg_data.zip_extract:</span>
  <span class="token comment"># house.zip  object_vox.zip  object.zip  room.zip  texture.zip</span>
    <span class="token punctuation">..</span>.
<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="遍历编号"><a class="header-anchor" href="#遍历编号"></a>遍历编号</h3>
<p>以下适用于<code>zsh</code>和<code>bash</code>和<code>sh</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> $&#123;#array[@]&#125;<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span> <span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token operator">:</span>$i<span class="token operator">:</span>1&#125;</span>
    <span class="token comment"># 不要使用 $&#123;array[i]&#125;, bash和sh的是i从0开始，zsh的是从1开始</span>
<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>以下适用于<code>bash</code>和<code>sh</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token string">"&#123;!array[@]&#125;"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
<span class="token comment"># bash和sh的是i从0开始</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span> <span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span><span class="token operator">:</span>$i<span class="token operator">:</span>1&#125;</span>
    <span class="token comment"># 或</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span> <span class="token variable">$&#123;array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>&#125;</span>
<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="命令返回数组"><a class="header-anchor" href="#命令返回数组"></a>命令返回数组</h2>
<h3 id="法一-for-命令-或-命令"><a class="header-anchor" href="#法一-for-命令-或-命令"></a>法一 for + <code>$(命令)</code> 或 <code>`命令`</code></h3>
<ul>
<li>在<code>zsh</code>/<code>bash</code>中返回一个字符串（不论多少行），输入给函数或for，则会自动用空格分割。</li>
<li>而不是返回数组(自带切分，而不是以空格或换行符切分)。</li>
</ul>
<p>例：在一个文件夹下有<code>file1</code> <code>file with space</code> <code>有空格的 中文文件</code>，</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 返回给for</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"|<span class="token variable">$i</span>|"</span>
<span class="token keyword">done</span>
<span class="token comment"># 或返回给函数</span>
<span class="token function-name function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"|<span class="token variable">$i</span>|"</span>
    <span class="token keyword">done</span>
<span class="token punctuation">&#125;</span>
f <span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在bash下返回</p>
<blockquote>
<p>|file1|</p>
<p>| file with space|</p>
<p>|有空格的 中文文件|</p>
</blockquote>
<p>在zsh/bash下返回</p>
<blockquote>
<p>|file1|<br>
|file|<br>
|with|<br>
|space|<br>
|有空格的|<br>
|中文文件|</p>
</blockquote>
<ul>
<li>
<p>解决办法：将<code>命令</code>结果分行返回( 如<code>ls -1</code> 一个文件返回一行)，然后设置<code>IFS=$'\n'</code> ，则返回给<code>for</code>或<code>函数</code>的均是数组</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">hadopt</span><span class="token operator">=</span>false
<span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$ZSH_VERSION</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>setopt <span class="token operator">|</span> <span class="token function">grep</span> shwordsplit<span class="token variable">)</span></span>"</span> <span class="token operator">!=</span> <span class="token string">''</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>
    <span class="token assign-left variable">hadopt</span><span class="token operator">=</span>true <span class="token operator">&amp;&amp;</span> setopt sh_word_split <span class="token comment"># 若为 zsh则开sh_word_split选项</span>
<span class="token assign-left variable">OLD_IFS</span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$IFS</span>"</span><span class="token punctuation">;</span> <span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span><span class="token string">$'<span class="token entity" title="\n">\n</span>'</span>
<span class="token comment"># ---</span>
<span class="token comment"># 返回给for</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> -1<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"|<span class="token variable">$i</span>|"</span>
<span class="token keyword">done</span>
<span class="token comment"># 或返回给函数</span>
f <span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span><span class="token variable">)</span></span>
<span class="token comment"># ---</span>
<span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span><span class="token string">"<span class="token variable">$OLD_IFS</span>"</span>
<span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$ZSH_VERSION</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$hadopt</span>"</span> <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> unsetopt sh_word_split <span class="token comment"># 若原先没开此选项则关之</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果</p>
<blockquote>
<p>|file1|</p>
<p>| file with space|</p>
<p>|有空格的 中文文件|</p>
</blockquote>
</li>
</ul>
<h2 id="调用数组"><a class="header-anchor" href="#调用数组"></a>调用数组</h2>
<h3 id="array-数组拼接成字符串"><a class="header-anchor" href="#array-数组拼接成字符串"></a><code>&quot;$&#123;array[*]&#125;&quot;</code> 数组拼接成字符串</h3>
<p><code>&quot;$&#123;array[*]&#125;&quot;</code>：array拼接成字符串，用一个空格分隔数组成员。比如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">f</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token string">"[<span class="token variable">$i</span>]"</span><span class="token punctuation">;</span> <span class="token keyword">done</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"hello world"</span> <span class="token string">"foo bar"</span><span class="token punctuation">)</span>

f <span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span>"</span>
<span class="token comment"># 在bash和zsh中都返回：</span>
<span class="token comment"># [hello world foo bar]</span>

f <span class="token variable">$&#123;array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span>
<span class="token comment"># 在bash中返回：</span>
<span class="token comment"># [hello]</span>
<span class="token comment"># [world]</span>
<span class="token comment"># [foo]</span>
<span class="token comment"># [bar]</span>

<span class="token comment"># 在zsh中返回：</span>
<span class="token comment"># [hello world]</span>
<span class="token comment"># [foo bar]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="array-仍是原数组"><a class="header-anchor" href="#array-仍是原数组"></a><code>&quot;$&#123;array[@]&#125;&quot;</code> 仍是原数组</h3>
<p><code>&quot;$&#123;array[*]&#125;&quot;</code>仍是array数组</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">f</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token string">"[<span class="token variable">$i</span>]"</span><span class="token punctuation">;</span> <span class="token keyword">done</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"hello world"</span> <span class="token string">"foo bar"</span><span class="token punctuation">)</span>

f <span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span>
<span class="token comment"># 在bash和zsh中都返回：</span>
<span class="token comment"># [hello world]</span>
<span class="token comment"># [foo bar]</span>

f <span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>
<span class="token comment"># 在bash中返回：</span>
<span class="token comment"># [hello]</span>
<span class="token comment"># [world]</span>
<span class="token comment"># [foo]</span>
<span class="token comment"># [bar]</span>

<span class="token comment"># 在zsh中返回：</span>
<span class="token comment"># [hello world]</span>
<span class="token comment"># [foo bar]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="数组传入传出函数"><a class="header-anchor" href="#数组传入传出函数"></a>数组传入传出函数</h2>
<p>以下适用于zsh和bash</p>
<h3 id="法一-传入-array"><a class="header-anchor" href="#法一-传入-array"></a>法一 <code>传入&quot;$&#123;array[@]&#125;&quot;</code></h3>
<p>以下适用于zsh和bash，向文件或函数传入数组</p>
<p><strong>传入数组</strong></p>
<p>写法：</p>
<ul>
<li>传入一个数组</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zsh/bash 文件.sh <span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span>
zsh/bash  文件.sh <span class="token string">"<span class="token variable">$@</span>"</span>
func <span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span>
func <span class="token string">"<span class="token variable">$@</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>传入多个数组(以函数为例，其余同理成立)</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">func <span class="token string">"string1"</span> <span class="token string">"<span class="token variable">$&#123;array1<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span> <span class="token string">"string2"</span> <span class="token string">"<span class="token variable">$&#123;array2<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span> <span class="token string">"string3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>“${array[@]}” <strong>必需得加引号</strong>，若不加引号，则会如下出错：</p>
<p>file.zsh内容为</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"|<span class="token variable">$i</span>|"</span>
<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>而在bash中运行函数</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">zsh</span> file.sh <span class="token variable">$@</span> <span class="token punctuation">&#125;</span>
f asdas <span class="token string">'qwe qweasd'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>会输出</p>
<blockquote>
<p>|asdas|</p>
<p>|qwe|</p>
<p>|qweasd|</p>
</blockquote>
<p><strong>例子</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">get_array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">local</span> <span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">$@</span>"</span><span class="token punctuation">)</span> <span class="token comment"># 把传入变成数组</span>
  <span class="token builtin class-name">declare</span> -p array <span class="token comment"># 检测</span>
<span class="token punctuation">&#125;</span>
<span class="token function-name function">go_through_arg</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token for-or-select variable">idx</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token comment"># 遍历输入，若输入有 `go_through_arg 'sad asd' 'asd' adasd`</span>
    <span class="token comment"># bash 中不支持 写作 $@，$*，"$*"</span>
    <span class="token comment"># zsh 中不支持写作 "$*"，但支持写作$@，$*</span>
    <span class="token comment"># zsh和bash 仅 "$@"通用，可输出三行，分别是'sad asd'，'asd'， 'adasd'</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"|<span class="token variable">$idx</span>|"</span>
    <span class="token keyword">done</span>
<span class="token punctuation">&#125;</span>
<span class="token function-name function">argparse</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"|<span class="token variable">$1</span>|"</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"|<span class="token variable">$2</span>|"</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"|<span class="token variable">$3</span>|"</span>
<span class="token punctuation">&#125;</span>

<span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"a"</span> <span class="token string">"b asd"</span> <span class="token string">"c<span class="token entity" title="\n">\n</span>asd
asdsa"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>传参写法</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">get_array <span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span> <span class="token comment"># 传入数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">typeset -a array&#x3D;( a &#39;b asd&#39; &#39;c\nasd\nasdsa&#39; )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go_through_arg <span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span> <span class="token comment"># 传入数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">|a|
|b asd|
|c
asd
asdsa|<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">argparse <span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span> <span class="token comment"># 传入数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">|a|
|b asd|
|c
asd
asdsa|<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h3 id="法二-用declare-p-array作为表示"><a class="header-anchor" href="#法二-用declare-p-array作为表示"></a>法二 用<code>declare -p array</code>作为表示</h3>
<p>以下适用于zsh和bash</p>
<p>缺点：依赖于zsh的版本的操作系统</p>
<p><strong>传出数组</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">make_array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">local</span> array
  <span class="token builtin class-name">declare</span> -a array
  <span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token string">'b asd'</span> <span class="token string">'c\nasd\nasds
  asdas'</span><span class="token punctuation">)</span>
  <span class="token builtin class-name">echo</span> -E <span class="token variable">$&#123;"$(declare -p array )"<span class="token operator">#</span>*=&#125;</span> <span class="token comment">#</span>
<span class="token punctuation">&#125;</span>
make_array<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>mac zsh 5.7.1 (x86_64-apple-darwin18.2.0) 返回，不能使用本法</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">( a &#39;b asd&#39; &#39;c\nasd\nasdsa&#39; )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p>Linux zsh 5.4.2 (x86_64-ubuntu-linux-gnu)返回 ，能使用本法</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">( a &#39;b asd&#39; $&#39;c\\nasd\\nasds\n  asdas&#39; )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p>Linux zsh 5.0.5 (x86_64-pc-linux-gnu) 返回 ，能使用本法</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">(a &#39;b asd&#39; &#39;c\nasd\nasds
asdas&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</blockquote>
<p><strong>传入数组</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">get_array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">local</span> getton_array
    <span class="token builtin class-name">declare</span> -a getton_array
  <span class="token builtin class-name">eval</span> <span class="token string">"getton_array="</span><span class="token variable">$1</span> <span class="token comment"># get array</span>
  <span class="token builtin class-name">declare</span> -p getton_array
<span class="token punctuation">&#125;</span>
get_array <span class="token string">"<span class="token variable"><span class="token variable">$(</span>make_array<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>mac zsh 5.7.1 (x86_64-apple-darwin18.2.0) 返回，不能使用本法</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">typeset -a getton_array&#x3D;( a &#39;b asd&#39; $&#39;c\nasd\nasds\n  asdas&#39; )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p>Linux zsh 5.4.2 (x86_64-ubuntu-linux-gnu)返回 ，能使用本法</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">typeset -a getton_array&#x3D;( a &#39;b asd&#39; $&#39;c\\nasd\\nasds\n  asdas&#39; )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p>Linux zsh 5.0.5 (x86_64-pc-linux-gnu) 返回 ，能使用本法</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">typeset -a getton_array
getton_array&#x3D;(a &#39;b asd&#39; &#39;c\nasd\nasds
asdas&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h3 id="法三-修改分隔符"><a class="header-anchor" href="#法三-修改分隔符"></a>法三 修改分隔符</h3>
<p>以下适用于zsh和bash</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">a2s</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">local</span> <span class="token assign-left variable">string</span><span class="token operator">=</span><span class="token string">''</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> -ne <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token assign-left variable">string</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$1</span>"</span>
        <span class="token builtin class-name">shift</span>
    <span class="token keyword">fi</span>
    <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
        <span class="token assign-left variable">string</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$string</span>䴅<span class="token variable">$i</span>"</span> <span class="token comment"># 可以用任意字符，但只能是单个字符，故选用冷门汉字</span>
    <span class="token keyword">done</span>
  <span class="token builtin class-name">echo</span> -E <span class="token string">"<span class="token variable">$string</span>"</span>
<span class="token punctuation">&#125;</span>
<span class="token function-name function">make_array</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">local</span> array
  <span class="token builtin class-name">declare</span> -a array
  <span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token string">'b asd'</span> <span class="token string">'c\nasd\nasdss
  asdas'</span><span class="token punctuation">)</span>
  a2s <span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span>
  <span class="token comment"># echo -E "$(a2s \"$&#123;array[@]&#125;\")"</span>
<span class="token punctuation">&#125;</span>
make_array<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>返回</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">a䴅b asd䴅c\nasd\nasdss
asdas<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">get_array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token builtin class-name">local</span> <span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$1</span>"</span>
  <span class="token builtin class-name">local</span> <span class="token assign-left variable">OLD_IFS</span><span class="token operator">=</span><span class="token environment constant">$IFS</span>
  <span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span><span class="token string">'䴅'</span>
  <span class="token builtin class-name">local</span> <span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> -E <span class="token string">"<span class="token variable">$str</span>"</span><span class="token variable">)</span></span><span class="token punctuation">)</span>
  <span class="token comment"># local array=($str)</span>
  <span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span><span class="token variable">$OLD_IFS</span>
  <span class="token builtin class-name">declare</span> -p array
<span class="token punctuation">&#125;</span>
get_array <span class="token string">"<span class="token variable"><span class="token variable">$(</span>make_array<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>返回</p>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">typeset -a array
array&#x3D;( &#39;c\nasd\nasdss
asdas&#39; )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</blockquote>
<h2 id="引用传参——在函数中修改参数"><a class="header-anchor" href="#引用传参——在函数中修改参数"></a>引用传参——在函数中修改参数</h2>
<p>适用于 zsh  与 bash</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token builtin class-name">local</span> <span class="token assign-left variable">a_</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$1</span>"</span>
  <span class="token builtin class-name">eval</span> <span class="token variable">$a_</span><span class="token operator">=</span><span class="token string">'asdsad'</span> <span class="token comment"># 注意，这里的`a_`不要和传入`f`的值`a`重名</span>
<span class="token punctuation">&#125;</span>
<span class="token comment"># 或</span>
<span class="token function-name function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token builtin class-name">eval</span> <span class="token variable">$1</span><span class="token operator">=</span><span class="token string">'asdsad'</span>
<span class="token punctuation">&#125;</span>
<span class="token comment"># 或</span>
<span class="token function-name function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token builtin class-name">local</span> <span class="token assign-left variable">a_</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$1</span>"</span>
  <span class="token builtin class-name">local</span> <span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token string">'asdsad'</span>
  <span class="token builtin class-name">eval</span> <span class="token variable">$a_</span><span class="token operator">=</span><span class="token punctuation">\</span>"<span class="token punctuation">\</span><span class="token variable">$c</span><span class="token punctuation">\</span>"
<span class="token punctuation">&#125;</span>
<span class="token comment"># 或</span>
<span class="token function-name function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token builtin class-name">local</span> <span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token string">'asdsad'</span>
  <span class="token builtin class-name">eval</span> <span class="token variable">$1</span><span class="token operator">=</span><span class="token punctuation">\</span>"<span class="token punctuation">\</span><span class="token variable">$c</span><span class="token punctuation">\</span>"
<span class="token punctuation">&#125;</span>
<span class="token comment"># 而后</span>
<span class="token function-name function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token builtin class-name">local</span> <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">123</span>
  f a <span class="token comment"># 注意，这里的`a`不要和`f`中的`a_`重名</span>
  <span class="token builtin class-name">echo</span> <span class="token variable">$a</span>
<span class="token punctuation">&#125;</span>
<span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">asdsad<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p>其原理是<code>eval $a_=\&quot;\$c\&quot;</code> 等价于执行了<code>a=&quot;$c&quot;</code></p>
<h2 id="运行数组"><a class="header-anchor" href="#运行数组"></a>运行数组</h2>
<h3 id="错误的做法"><a class="header-anchor" href="#错误的做法"></a>错误的做法</h3>
<ul>
<li>
<p>方法一</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span>  <span class="token comment"># 即等价于 python 中的 sys.command(' '.join(array))</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>这样会把含有空白字符的字符串拆开</li>
</ul>
</li>
<li>
<p>方法二</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>当array的第一个元素不是终端的命令时（如第一个元素为<code>CUDA_VISIBLE_DEVICES=1</code>），则无法执行</li>
<li>当array中有元素等于<code>|</code>、<code>;</code>、<code>&#123;</code>，<code>&#125; </code> <code>&amp;&amp;</code> <code>||</code>等时，也无法执行</li>
</ul>
</li>
</ul>
<h3 id="正确的做法"><a class="header-anchor" href="#正确的做法"></a>正确的做法</h3>
<p>本方法可以克服上述法一、二的所有问题</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">evalarray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> -eq <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token comment"># 若array仅一个元素，则直接 sys.command(array[0])</span>
        <span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable">$1</span>"</span>
    <span class="token keyword">else</span>
        <span class="token comment"># 否则 sys.command( ' '.join([</span>
        <span class="token comment">#	x.replace("'", "'\''")</span>
        <span class="token comment">#    if ' ' in x or  '\n' in x or  '\t' in x</span>
        <span class="token comment">#    else x</span>
        <span class="token comment">#    for x in array]</span>
        <span class="token comment"># ) )</span>
        <span class="token builtin class-name">local</span> <span class="token assign-left variable">processedarray</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token for-or-select variable">arg</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
            <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$arg</span>"</span> <span class="token operator">=~</span> <span class="token string">' '</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$arg</span>"</span> <span class="token operator">=~</span> <span class="token string">$'<span class="token entity" title="\t">\t</span>'</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$arg</span>"</span> <span class="token operator">=~</span> <span class="token string">$'<span class="token entity" title="\n">\n</span>'</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
                <span class="token comment"># 若arg中有空白字符，则arg两端加',arg中间的</span><span class="token string">'改为'</span><span class="token punctuation">\</span>'<span class="token string">'
                processedarray+=("'</span><span class="token variable">$&#123;arg<span class="token operator">/</span><span class="token operator">/</span>'<span class="token operator">/</span>'\\''&#125;</span>'<span class="token string">")
            else
                processedarray+=("</span><span class="token variable">$&#123;arg&#125;</span><span class="token string">")
            fi
        done
        eval "</span><span class="token variable">$processedarray</span><span class="token punctuation">[</span>@<span class="token punctuation">]</span>"
    <span class="token keyword">fi</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">evalarray <span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>例如：</p>
<ul>
<li>用法一：所有命令和参数均分开写。当参数含有空白字符和特殊运算连接符（<code>|</code>、<code>;</code>、<code>&#123;</code>，<code>&#125; </code> <code>&amp;&amp;</code> <code>||</code>等）时，才用括号括起来。</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span>touch <span class="token string">'文件名 有空格'</span> <span class="token string">'&amp;&amp;'</span> <span class="token function">ls</span> <span class="token punctuation">..</span> <span class="token string">'|'</span>  <span class="token function">grep</span> a<span class="token punctuation">)</span>
evalarray <span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span>
<span class="token comment"># 或</span>
evalarray <span class="token function">touch</span> <span class="token string">'文件名 有空格'</span> <span class="token string">'&amp;&amp;'</span> <span class="token function">ls</span> <span class="token punctuation">..</span> <span class="token string">'|'</span>  <span class="token function">grep</span> a
evalarray <span class="token function">touch</span> 文件名<span class="token punctuation">\</span> 有空格 <span class="token string">'&amp;&amp;'</span> <span class="token function">ls</span> <span class="token punctuation">..</span> <span class="token string">'|'</span>  <span class="token function">grep</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>用法二：所有命令和参数写在一个字符串中</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'touch 文件名\ 有空格 &amp;&amp; ls .. |  grep a'</span><span class="token punctuation">)</span>
evalarray <span class="token string">"<span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span>
<span class="token comment"># 或</span>
evalarray <span class="token string">'touch 文件名\ 有空格 &amp;&amp; ls .. |  grep a'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>注意，用法一二不能混着写，例如，</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">evalarray <span class="token function">touch</span> <span class="token string">'文件名 有空格'</span> <span class="token string">'&amp;&amp;'</span> <span class="token function">ls</span> <span class="token punctuation">..</span> <span class="token string">'|'</span>  <span class="token string">'grep a'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这样不行，运行时会把’grep a’当成一个终端命令，故而报错</p>
<pre class="line-numbers language-none"><code class="language-none">(eval):1: command not found: grep a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="输出表格"><a class="header-anchor" href="#输出表格"></a>输出表格</h1>
<h3 id="column-命令"><a class="header-anchor" href="#column-命令"></a><code>column</code> 命令</h3>
<p><code>代码块 | column -t -s 分割字符的集合</code> 即能输出表格, 使得各列左对齐</p>
<ul>
<li>
<p>例1: 单个分隔字符:</p>
<p>注意必需写成<code>$'\t’</code> 才会转义成制表符, 用它分隔列; 写成<code>&quot;\t</code>”  <code>'\t’</code> 均不转义, 而是用<code>\</code> 与 <code>t</code> 这两个字符分列</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'Name\tScore
-----\t-----
Somebody with a very long name\t100
ShortNmae\t1231981738184788381413131
Ann\t
    \tnana'</span> <span class="token operator">|</span> <span class="token function">column</span> -t -s <span class="token string">$'<span class="token entity" title="\t">\t</span>'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出</p>
<pre class="line-numbers language-none"><code class="language-none">Name                            Score
-----                           -----
Somebody with a very long name  100
ShortNmae                       1231981738184788381413131
Ann
                                nana<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>例2: 多个分隔字符</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'Name|Score\n-----|-----
Somebody with a very long name\t100
ShortNmae\t1231981738184788381413131
Ann|
    |nana'</span> <span class="token operator">|</span> <span class="token function">column</span> -t -s <span class="token string">$'<span class="token entity" title="\t">\t</span>|'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出同例1</p>
</li>
</ul>
<h2 id="sudo执行"><a class="header-anchor" href="#sudo执行"></a>sudo执行</h2>
<h3 id="sudo执行非sudo的函数"><a class="header-anchor" href="#sudo执行非sudo的函数"></a>sudo执行非sudo的函数</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">bash</span> -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">declare</span> -f <span class="token operator">&lt;</span>非sodu的函数名<span class="token operator">></span><span class="token variable">)</span></span>; &lt;非sodu的函数名>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="sudo执行代码段"><a class="header-anchor" href="#sudo执行代码段"></a>sudo执行代码段</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">bash</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF
代码段
EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="sudo执行文件"><a class="header-anchor" href="#sudo执行文件"></a>sudo执行文件</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">bash</span> <span class="token operator">&lt;</span>文件路径<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>器</category>
        <category>shell</category>
      </categories>
  </entry>
  <entry>
    <title>zsh安装配置教程</title>
    <url>/posts/72862763/</url>
    <content><![CDATA[<p>环境：ubuntu 16 实验室服务器</p>
<p>时间：2018年8月6日</p>
<p>[TOC]</p>
<h2 id="介绍"><a class="header-anchor" href="#介绍"></a>介绍</h2>
<p><code>zsh </code>：是一款强大的虚拟终端，用以他替代shell， 其配置较为复杂</p>
<p><code>oh my zsh</code> ：zsh的一套强大配置</p>
<p><a href="https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2Fzsh-users%2Fantigen"><code>antigen</code></a> ：zsh的包（即插件）管理器，让我们以类似apt-get的方式来安装zsh的包。其官方会提供已经配置好的oh my zsh和一些常用zsh包。</p>
<h2 id="zsh安装"><a class="header-anchor" href="#zsh安装"></a>zsh安装</h2>
<ul>
<li>
<p>安装zsh</p>
<ul>
<li>实验室各台服务器上已安装zsh，如未安装，可叫管理员</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> -y <span class="token function">install</span> <span class="token function">zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>
<p>mac上</p>
<ul>
<li>
<p>mac系统自带的zsh</p>
<p>在<code>/bin/zsh</code>，但版本老了，建议另外安装新版本</p>
<p><code>zsh --version</code>，返回<code>zsh 5.3 (x86_64-apple-darwin18.0)</code></p>
</li>
<li>
<p>另外安装新版本的zsh</p>
<p>不覆盖系统自带的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装到 <code>/usr/local/Cellar/zsh/版本号</code></p>
<p>并会自动创建链接<code>/usr/local/bin/zsh -&gt; ../Cellar/zsh/5.7.1/bin/zsh*</code></p>
<p>安装后，<code>zsh --version</code>，返回<code>/usr/local/bin/zsh</code></p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>修改为默认shell，即用zsh于替代shell，每次登陆或开新的终端都开zsh而不是shell</p>
<ul>
<li>
<p>只改个人的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chsh -s <span class="token variable"><span class="token variable">`</span><span class="token function">which</span> <span class="token function">zsh</span><span class="token variable">`</span></span>
<span class="token comment"># 然后输入个人的密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>改整个系统的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> chsh -s <span class="token variable"><span class="token variable">`</span><span class="token function">which</span> <span class="token function">zsh</span><span class="token variable">`</span></span>
<span class="token comment"># 然后输入root密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<p>重登服务器则生效</p>
</li>
<li>
<p>如上述方法不生效，则修改在<code>~/.profile</code> 第一行中加入</p>
</li>
<li>
<pre><code class="language-bash">if [ -t 1 ]; then
# [ -t FD ]  如果文件描述符 FD 打开且指向一个终端则为真。
# 文件描述符1表示stdout(即屏幕输出)
# [ -t 1 ] = true (此脚本输出到屏幕)，false(其他，如此脚本输出到文件或pipe)
	exec zsh
	# exec含义：开zsh替代当前sehll
fi
<pre class="line-numbers language-none"><code class="language-none">
  例如在WSL（windows的linux子系统）中，使用cmder打开shell，需要做此次修改。

* 如果切换帐号后无法使用 zsh， 则&#96;. ~&#x2F;.zshrc&#96;

## 直接安装oh-my-zsh (root下推荐)

[oh-my-zsh安装方法](https:&#x2F;&#x2F;ohmyz.sh&#x2F;#install)

适用于mac和linux

&#96;&#96;&#96;bash
sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.github.com&#x2F;ohmyzsh&#x2F;ohmyzsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</code></pre>
</li>
</ul>
<h3 id="报错"><a class="header-anchor" href="#报错"></a>报错</h3>
<h4 id="Insecure-completion-dependent-directories-detected"><a class="header-anchor" href="#Insecure-completion-dependent-directories-detected"></a>Insecure completion-dependent directories detected</h4>
<p>若给root安装oh-my-zsh, 运行  <code>sudo su</code> 报错</p>
<pre class="line-numbers language-none"><code class="language-none">[oh-my-zsh] Insecure completion-dependent directories detected:
drwxrwxrwx 7 hans admin 238 2 9 10:13 &#x2F;usr&#x2F;local&#x2F;share&#x2F;zsh
drwxrwxrwx 6 hans admin 204 10 1 2017 &#x2F;usr&#x2F;local&#x2F;share&#x2F;zsh&#x2F;site-functions

[oh-my-zsh] For safety, we will not load completions from these directories until
[oh-my-zsh] you fix their permissions and ownership and restart zsh.
[oh-my-zsh] See the above list for directories with group or other writability.

[oh-my-zsh] To fix your permissions you can do so by disabling
[oh-my-zsh] the write permission of &quot;group&quot; and &quot;others&quot; and making sure that the
[oh-my-zsh] owner of these directories is either root or your current user.
[oh-my-zsh] The following command may help:
[oh-my-zsh] compaudit | xargs chmod g-w,o-w

[oh-my-zsh] If the above didn&#39;t help or you want to skip the verification of
[oh-my-zsh] insecure directories you can set the variable ZSH_DISABLE_COMPFIX to
[oh-my-zsh] &quot;true&quot; before oh-my-zsh is sourced in your zshrc file.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>则依次尝试如下方法, 然后分别运行 <code>sudo su</code>,  直到 <code>sudo su</code> 不再如上报错</p>
<ol>
<li>执行</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">755</span> /usr/local/share/zsh
<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">755</span> /usr/local/share/zsh/site-functions<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ol start="2">
<li>执行</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> compaudit <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">chmod</span> g-w,o-w<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ol start="3">
<li>向root的 <code>.zshrc</code> 加入</li>
</ol>
<pre class="line-numbers language-zsh" data-language="zsh"><code class="language-zsh">ZSH_DISABLE_COMPFIX&#x3D;&quot;true&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="安装和使用antigen-普通用户推荐"><a class="header-anchor" href="#安装和使用antigen-普通用户推荐"></a>安装和使用antigen (普通用户推荐)</h2>
<h3 id="安装antigen"><a class="header-anchor" href="#安装antigen"></a>安装antigen</h3>
<h4 id="导入配置"><a class="header-anchor" href="#导入配置"></a>导入配置</h4>
<p>从网上导入zsh的配置文件到<code>~/.zshrc</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -L https://raw.githubusercontent.com/skywind3000/vim/master/etc/zshrc.zsh <span class="token operator">></span> ~/.zshrc
<span class="token comment">#   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span>
<span class="token comment">#                                  Dload  Upload   Total   Spent    Left  Speed</span>
<span class="token comment"># 100  5388  100  5388    0     0   8482      0 --:--:-- --:--:-- --:--:--  8607</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后输入<code>zsh</code>命令，即开始自动安装插件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">zsh</span>
<span class="token comment"># Installing antigen ...</span>
<span class="token comment">#   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span>
<span class="token comment">#                                  Dload  Upload   Total   Spent    Left  Speed</span>
<span class="token comment">#   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0</span>
<span class="token comment">#   0     0    0     0    0     0      0      0 --:--:--  0:00:02 --:--:--     0</span>
<span class="token comment"># 100 58503  100 58503    0     0  17045      0  0:00:03  0:00:03 --:--:-- 17045</span>
<span class="token comment"># move /tmp/antigen.zsh to /Users/$USER/.local/bin/antigen.zsh</span>
<span class="token comment"># Installing robbyrussell/oh-my-zsh!...</span>
<span class="token comment"># Installing rupa/z!...</span>
<span class="token comment"># Installing zsh-users/zsh-autosuggestions!...</span>
<span class="token comment"># Installing zsh-users/zsh-completions!...</span>
<span class="token comment"># Installing Vifon/deer!...</span>
<span class="token comment"># Installing willghatch/zsh-cdr!...</span>
<span class="token comment"># Installing zsh-users/zsh-syntax-highlighting!...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此<code>~/.zshrc</code>功效：</p>
<ul>
<li>
<p>antigen未装则装之：创建<code>~/.antigen</code>, <code>~/.local</code>，导入antigen配置<code>curl -L git.io/antigen &gt;  .local/bin/antigen.zsh </code></p>
</li>
<li>
<p>用antigen加载zsh包，你可根据需要修改<code>~/.zshrc</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">antigen bundle 包的名称 <span class="token comment"># 注释掉则不加载此包</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>该命令用于下载和安装插件，如果插件已安装，那么就加载该插件</p>
</li>
<li>
<p>如果出现警告：zsh compinit: insecure directories, run compaudit for list.</p>
<pre class="line-numbers language-ba&#39;sh" data-language="ba&#39;sh"><code class="language-ba&#39;sh">chmod -R 755 ~&#x2F;.antigen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<h3 id="点文件"><a class="header-anchor" href="#点文件"></a>点文件</h3>
<p>sh/bash/zsh的点文件执行顺序：</p>
<p><img data-src="/posts/72862763/17NoJ.png" alt="17NoJ"></p>
<p>注：bash中的登陆（红、橙、黑、紫线）， <code>~/[.bash_profile|.bash_login|.profile]</code>从前到后找，只执行一个文件。</p>
<h4 id="zsh的点文件"><a class="header-anchor" href="#zsh的点文件"></a><a href="https://unix.stackexchange.com/questions/71253/what-should-shouldnt-go-in-zshenv-zshrc-zlogin-zprofile-zlogout">zsh的点文件</a></h4>
<table>
<thead>
<tr>
<th>自上而下执行</th>
<th>触发条件</th>
<th>{ ssh登录<a href="zsh%E4%B8%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%BB%98%E8%AE%A4shell">^ 1</a>、tmux开新窗口<a href="zsh%E4%B8%BAtmux%E7%9A%84%E9%BB%98%E8%AE%A4shell">^ 2</a> }</th>
<th><code>zsh</code>开一个新的zsh窗口</th>
<th><code>zsh 文件</code>或<code>zsh -c “命令”</code></th>
<th><code>ssh 服务器  命令</code><a href="zsh%E4%B8%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%BB%98%E8%AE%A4shell">^ 1</a></th>
<th>ssh登出<a href="zsh%E4%B8%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%BB%98%E8%AE%A4shell">^ 1</a></th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>~/.zshenv</td>
<td>启动zsh总执行</td>
<td>✓（执行）</td>
<td>✓</td>
<td>✓</td>
<td>✓</td>
<td>✗</td>
<td>环境变量、alias</td>
</tr>
<tr>
<td>~/.zprofile</td>
<td>登录</td>
<td>✓</td>
<td>✗</td>
<td>✗</td>
<td>✗</td>
<td>✗</td>
<td>登录设置，如文件同步</td>
</tr>
<tr>
<td>~/.zshrc</td>
<td>启动zsh交互</td>
<td>✓</td>
<td>✓</td>
<td>✗</td>
<td>✗</td>
<td>✗</td>
<td>交互界面、zsh插件（都是交互用的）</td>
</tr>
<tr>
<td>~/.zlogin</td>
<td>登录</td>
<td>✓</td>
<td>✗</td>
<td>✗</td>
<td>✗</td>
<td>✗</td>
<td>登录设置；与.zprofile仅执行先后不同，会都执行</td>
</tr>
<tr>
<td>~/.zlogout</td>
<td>登出</td>
<td>✗（不执行）</td>
<td>✗</td>
<td>✗</td>
<td>✗</td>
<td>✓</td>
<td>登出打扫</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>自动触发：上述点文件皆直接被“触发条件”触发，不用在一文件内要写<code>. 另一个点文件</code> ，该机制与bash不同</p>
</li>
<li>
<p>不执行bash的点文件：zsh为系统的默认shell、zsh为tmux的默认shell时，每次登陆或开新tmux窗口时皆然</p>
</li>
</ul>
<h4 id="修改点文件"><a class="header-anchor" href="#修改点文件"></a>修改点文件</h4>
<p><strong>之前的触发关系是</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">                                           开新shell
                                               ↓
登录 -<span class="token operator">></span> ~/.profile <span class="token punctuation">(</span>系统环境配置<span class="token punctuation">)</span>-<span class="token operator">></span> ~/.bashrc <span class="token punctuation">(</span>shell环境配置<span class="token punctuation">)</span> -<span class="token operator">></span> ~/.bash_aliases <span class="token punctuation">(</span>设置别名命令<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><strong>若<code>chsh -s `which zsh` </code>修改成功</strong></p>
<p>每次登录都直接进入zsh，则需改为如下触发（source）关系（用箭头表示）</p>
<pre class="line-numbers language-none"><code class="language-none">~&#x2F;.zshenv         ~&#x2F;.zprofile         ~&#x2F;.zshrc          ~&#x2F;.zlogout
     ↓                                  ↓                    ↓
~&#x2F;.profile  ---------------→     ~&#x2F;.bash_aliases       ~&#x2F;.bash_logout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>做法如下：</p>
<ul>
<li><code>~/.profile</code>中的<code>. ~/bashrc</code> 改为<code>. ~/bash_aliases</code></li>
<li><code>~/.bashrc</code> 不动，闲置不用了，被<code>~/.zshrc</code>代替</li>
<li>修改<code>~/.zshrc</code></li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># .zshenv只写</span>
<span class="token punctuation">[</span> -f ~/.profile <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">.</span> ~/.profile

<span class="token comment"># 加在.zshrc开头，之后每次编辑~/.zshrc，请确保它在最开头</span>
<span class="token punctuation">[</span> -f ~/.profile <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">.</span> ~/.profile
<span class="token comment"># 加在.zshrc结尾，之后每次编辑~/.zshrc，请确保它在最结尾，不然zshrc中其他配置会覆盖其alias</span>
<span class="token punctuation">[</span> -f ~/.bash_aliases <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">.</span> ~/.bash_aliases

<span class="token comment"># ~/.zprofile 写登录同步文件的命令</span>

<span class="token comment"># ~/.zlogout只写</span>
<span class="token punctuation">[</span> -f ~/.bash_logout <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">.</span> ~/.bash_logout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>若<code>chsh -s `which zsh` </code>修改不成功</strong></p>
<p>登录不自动进入zsh，则每次登录启动的是bash，运行的是<code>~/.profile</code></p>
<p>需修改为如下触发关系</p>
<pre class="line-numbers language-none"><code class="language-none">                           开新zsh
                             ↓
登录 -&gt;  ~&#x2F;.profile  -&gt;   ~&#x2F;.zshrc (zsh包，环境配置)
                             \------&gt; ~&#x2F;.profile_for_zsh, ~&#x2F;.bash_aliases<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>方法如下</p>
<ul>
<li><code>cp ~/.profile ~/.profile_for_zsh</code></li>
<li>删除<code>~/.profile_for_zsh</code>中的<code>. ~/.bashrc</code>和<code>. ~/.bash_aliases</code></li>
<li>将<code>~/.profile</code>清空，只写入</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> -t <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
<span class="token comment"># 判断是否是交互shell</span>
<span class="token comment"># whether file descriptor 1 (the shell's standard output) is connected to a terminal</span>
    <span class="token builtin class-name">exec</span> <span class="token function">zsh</span>
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>修改<code>~/.zshrc</code></li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 加在.zshrc开头，之后每次编辑~/.zshrc，请确保它在最开头</span>
<span class="token punctuation">[</span> -f ~/.profile_for_zsh <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">.</span> ~/.profile_for_zsh <span class="token comment"># 个人环境变量设置</span>

<span class="token comment"># 加在.zshrc结尾，之后每次编辑~/.zshrc，请确保它在最结尾</span>
<span class="token punctuation">[</span> -f ~/.bash_aliases <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span><span class="token builtin class-name">.</span> ~/.bash_aliases <span class="token comment"># 个人别名、小脚本设置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="MAC上-zshenv设的-PATH前被加别的路径"><a class="header-anchor" href="#MAC上-zshenv设的-PATH前被加别的路径"></a>MAC上.zshenv设的$PATH前被加别的路径</h3>
<p><strong>问题描述</strong></p>
<p>在mac上，zsh登录式启动，在<code>.zshenv</code>中设置的PATH，前方覆盖了别的路径，例如：</p>
<ul>
<li>
<p>在<code>~/.zshenv</code>中设置了</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span>  <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/Users/<span class="token environment constant">$USER</span>/anaconda/bin:/Users/<span class="token environment constant">$USER</span>/shareENV/local/bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>但是zsh登录式启动后，<code>echo $PATH</code>，返回的头几行是</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;local&#x2F;bin
&#x2F;usr&#x2F;bin
&#x2F;bin
&#x2F;usr&#x2F;sbin
&#x2F;sbin
&#x2F;Users&#x2F;$USER&#x2F;anaconda&#x2F;bin
&#x2F;Users&#x2F;$USER&#x2F;shareENV&#x2F;local&#x2F;bin
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p><strong>原因分析</strong></p>
<ul>
<li>
<p>zsh登录式启动，执行顺序点文件顺序是</p>
  <pre class="line-numbers language-none"><code class="language-none">... →&#96;~&#x2F;.zshenv&#96; → &#96;&#x2F;etc&#x2F;zprofile&#96; → &#96;~&#x2F;.zprofile&#96; → ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>在bash登录式启动，执行顺序点文件顺序是</p>
<pre class="line-numbers language-none"><code class="language-none">... → &#x2F;etc&#x2F;profile → ~&#x2F;.profile
 		↓ 手动执行       ↓ 手动执行
      &#x2F;etc&#x2F;bashrc    ~&#x2F;.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>在Mac上， <code>/etc/zprofile</code>和<code>/etc/profile</code>都有以下内容（在linux上， <code>/etc/zprofile</code>为空）</p>
</li>
</ul>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># system-wide environment settings for zsh(1)</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> -x /usr/libexec/path_helper <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">`</span>/usr/libexec/path_helper -s<span class="token variable">`</span></span>
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>
<p><code>/usr/libexec/path_helper</code>是Mac上专有的可执行文件，用于将别处设置的系统级的$PATH，添加到当前PATH的开头</p>
<p>所添加的内容为</p>
  <pre class="line-numbers language-none"><code class="language-none">---------------------------------------------
                       &#x2F;etc&#x2F;paths文件中的路径
&#x2F;usr&#x2F;local&#x2F;bin
&#x2F;usr&#x2F;bin
&#x2F;bin
&#x2F;usr&#x2F;sbin
&#x2F;sbin
---------------------------------------------
                       其他地方设置的系统$PATH
&#x2F;Library&#x2F;TeX&#x2F;texbin
&#x2F;usr&#x2F;local&#x2F;aria2&#x2F;bin
&#x2F;opt&#x2F;X11&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>故zsh登录启动时，先执行<code>~/.zshenv</code>中的修改PATH，而后被path_helper在前面加上了系统级的$PATH</p>
</li>
<li>
<p>而bash登录启动无此问题，因为是先执行path_helper，再执行<code>~/.profile</code>中的修改PATH</p>
</li>
</ul>
<p><strong>解决办法</strong></p>
<p><a href="https://github.com/sorin-ionescu/prezto/issues/381#issuecomment-294549773">参考</a></p>
<ul>
<li>
<p>法一：若有root权限，<strong>建议用本法</strong>，所有用户可解决此问题, 对登录和非登录式的zsh均有效</p>
<p>修改<code>/etc/zprofile</code>，把<code>$PATH</code>复制一份到<code>$PATH_SAVE</code>，执行<code>path_helper</code>修改<code>$$PATH</code>，然后再把<code>$PATH_SAVE</code>粘到<code>$PATH</code>前面</p>
<p>将 <code>/etc/zprofile</code>中的</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># system-wide environment settings for zsh(1)</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> -x /usr/libexec/path_helper <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">`</span>/usr/libexec/path_helper -s<span class="token variable">`</span></span>
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>改为</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># save the $PATH set in ~/.zshenv, to prevent `path_helper` appand the</span>
<span class="token comment"># paths in /etc/zprofile on the begining of $PATH</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">PATH_SAVE</span><span class="token operator">=</span><span class="token environment constant">$PATH</span>

<span class="token comment"># system-wide environment settings for zsh(1)</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> -x /usr/libexec/path_helper <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">`</span>/usr/libexec/path_helper -s<span class="token variable">`</span></span>
<span class="token keyword">fi</span>

<span class="token comment"># this block means</span>
<span class="token comment">#     eport PATH=$PATH_SAVE:$PATH</span>
<span class="token comment">#     and then remove repeated paths in PATH</span>
<span class="token comment">#     and then unset PATH_SAVE</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$PATH_SAVE</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token assign-left variable">PATH_SAVE</span><span class="token operator">=</span>:<span class="token variable">$PATH_SAVE</span><span class="token builtin class-name">:</span><span class="token punctuation">;</span>
  <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span>
  <span class="token keyword">while</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token environment constant">$PATH</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
   <span class="token assign-left variable">x</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PATH</span><span class="token operator">%%</span><span class="token operator">:</span>*&#125;</span>  <span class="token comment"># the first remaining entry</span>
   <span class="token keyword">case</span> <span class="token variable">$PATH_SAVE</span> <span class="token keyword">in</span>
     *:<span class="token variable">$x</span>:*<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token comment"># already there</span>
     *<span class="token punctuation">)</span> <span class="token assign-left variable">PATH_SAVE</span><span class="token operator">=</span><span class="token variable">$PATH_SAVE</span><span class="token variable">$x</span><span class="token builtin class-name">:</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token comment"># not there yet</span>
   <span class="token keyword">esac</span>
   <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PATH</span><span class="token operator">#</span>*<span class="token operator">:</span>&#125;</span>
  <span class="token keyword">done</span>
  <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;PATH_SAVE<span class="token operator">:</span>1<span class="token operator">:-</span>1&#125;</span>
  <span class="token builtin class-name">unset</span> PATH_SAVE x
  <span class="token builtin class-name">export</span> <span class="token environment constant">PATH</span>
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>法二：若无root权限, 可用本法, 但对非登录式的zsh无效</p>
<p>在 <code>~/.zshenv</code>结尾写</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">PATH_SAVE</span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在 <code>~/.zprofile</code>开头写</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># this block means</span>
<span class="token comment">#     eport PATH=$PATH_SAVE:$PATH</span>
<span class="token comment">#     and then remove repeated paths in PATH</span>
<span class="token comment">#     and then unset PATH_SAVE</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$PATH_SAVE</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token assign-left variable">PATH_SAVE</span><span class="token operator">=</span>:<span class="token variable">$PATH_SAVE</span><span class="token builtin class-name">:</span><span class="token punctuation">;</span>
  <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span>
  <span class="token keyword">while</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token environment constant">$PATH</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
   <span class="token assign-left variable">x</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PATH</span><span class="token operator">%%</span><span class="token operator">:</span>*&#125;</span>  <span class="token comment"># the first remaining entry</span>
   <span class="token keyword">case</span> <span class="token variable">$PATH_SAVE</span> <span class="token keyword">in</span>
     *:<span class="token variable">$x</span>:*<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token comment"># already there</span>
     *<span class="token punctuation">)</span> <span class="token assign-left variable">PATH_SAVE</span><span class="token operator">=</span><span class="token variable">$PATH_SAVE</span><span class="token variable">$x</span><span class="token builtin class-name">:</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token comment"># not there yet</span>
   <span class="token keyword">esac</span>
   <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">PATH</span><span class="token operator">#</span>*<span class="token operator">:</span>&#125;</span>
  <span class="token keyword">done</span>
  <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;PATH_SAVE<span class="token operator">:</span>1<span class="token operator">:-</span>1&#125;</span>
  <span class="token builtin class-name">unset</span> PATH_SAVE x
  <span class="token builtin class-name">export</span> <span class="token environment constant">PATH</span>
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="换zsh的主题"><a class="header-anchor" href="#换zsh的主题"></a>换zsh的主题</h3>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 搜索"antigen use oh-my-zsh"，其下一行加</span>
antigen theme agnoster <span class="token comment"># 换主题 # ys , agnoster # 参考：https://github.com/robbyrussell/oh-my-zsh/wiki/themes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="中文"><a class="header-anchor" href="#中文"></a>中文</h3>
<p>若出现中文乱码，说明未设置zsh默认编码为utf8</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在~/.zshenv中</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LC_ALL</span></span><span class="token operator">=</span>en_US.UTF-8
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="命令行下配色"><a class="header-anchor" href="#命令行下配色"></a>命令行下配色</h3>
<p>Mac需要另外设置命令行下的配色，<code>vim ~/.zshrc</code>, 加在source ~/.bash_aliases之前</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 命令行下的配色</span>

<span class="token comment"># -------------------- alias to ls -----------------</span>
<span class="token comment"># 显(xxx)隐(.xxx) 文件(xxx)文件夹(xxx/) 用户名 大小 创建日期 大小用GMk格式</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ll</span><span class="token operator">=</span><span class="token string">'ls -alFGh'</span>
<span class="token comment"># 显(xxx)隐(.xxx) 文件与文件夹不区分(xxx)</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">la</span><span class="token operator">=</span><span class="token string">'ls -AG'</span>
<span class="token comment"># 显 文件(xxx)文件夹(xxx/)</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">l</span><span class="token operator">=</span><span class="token string">'ls -CFG'</span>
<span class="token comment"># 上色 文件(白)文件夹(紫)</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">ls</span><span class="token operator">=</span><span class="token string">'ls -G'</span>

<span class="token comment"># -------------------- alias to grep ------------------</span>
<span class="token comment"># 上色</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">grep</span><span class="token operator">=</span><span class="token string">'grep --color'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">egrep</span><span class="token operator">=</span><span class="token string">'egrep --color'</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">fgrep</span><span class="token operator">=</span><span class="token string">'fgrep --color'</span>

<span class="token comment"># ------------- 命令行使用Coreutils 配色方案 ----------</span>
<span class="token comment"># 采用Coreutils的gdircolor配色，修改~/.dir_colors(自定义配色)</span>
<span class="token comment"># 以修改ls命令使用的环境变量LS_COLORS（BSD是LSCOLORS）</span>
<span class="token comment"># 效果：不同类型的文件有不同颜色，如图水红色，文件夹群青色...</span>
<span class="token keyword">if</span> brew list <span class="token operator">|</span> <span class="token function">grep</span> coreutils <span class="token operator">></span> /dev/null <span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --prefix coreutils<span class="token variable">)</span></span>/libexec/gnubin:<span class="token environment constant">$PATH</span>"</span>
    <span class="token builtin class-name">alias</span> <span class="token assign-left variable">ls</span><span class="token operator">=</span><span class="token string">'ls -F --show-control-chars --color=auto'</span>
    <span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">`</span>gdircolors -b <span class="token environment constant">$HOME</span>/.dir_colors<span class="token variable">`</span></span>
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="使用"><a class="header-anchor" href="#使用"></a>使用</h2>
<p><a href="https://blog.csdn.net/u011054333/article/details/79314095">详见</a></p>
<h3 id="使插件修改生效"><a class="header-anchor" href="#使插件修改生效"></a>使插件修改生效</h3>
<p>当修改了正在使用的antigen插件(包括主题)的源代码后, 要运行<code>antigen reset</code>, 以重新加载antigen插件, 而后登录一个新的shell, 才能更新此插件.</p>
<h2 id="tmux启动设置"><a class="header-anchor" href="#tmux启动设置"></a>tmux启动设置</h2>
<ul>
<li>令tmux启动pane时开zsh，而不是开shell （Linux中会遇到，mac中不会，但也可做此设置）</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.tmux.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>加一行</p>
<pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"># 开一个窗口，自动启动zsh作为<span class="token keyword">shell</span>
<span class="token keyword">set</span><span class="token operator">-</span>option <span class="token operator">-</span>g default<span class="token operator">-</span><span class="token keyword">shell</span> <span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>则重启tmux，或在tmux的窗口中，执行<code>ctrl+b :source-file ~/.tmux.conf</code>，更改即生效</p>
<h2 id="卸载antigen"><a class="header-anchor" href="#卸载antigen"></a>卸载antigen</h2>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> ~/.antigen -rf
<span class="token function">rm</span> ~/.local -rf <span class="token comment"># 删前手动检查一下，其下是否有不是antigen的文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="zsh插件推荐"><a class="header-anchor" href="#zsh插件推荐"></a>zsh插件推荐</h1>
<p><a href="https://github.com/unixorn/awesome-zsh-plugins">zsh插件推荐</a></p>
<h2 id="fzf-模糊查找-历史命令-下方路径-等"><a class="header-anchor" href="#fzf-模糊查找-历史命令-下方路径-等"></a>fzf: 模糊查找 历史命令/下方路径 等</h2>
<ul>
<li>fzf的主项目: <a href="https://github.com/junegunn/fzf.git">fzf的github</a></li>
<li>fzf的周边: <a href="https://github.com/junegunn/fzf/wiki/Related-projects">fzf相关项目</a>  <a href="https://github.com/Aloxaf/fzf-tab">fzf-tab</a>  <a href="https://github.com/ytet5uy4/fzf-widgets">fzf-widgets</a></li>
</ul>
<p><strong>安装方法</strong>:</p>
<p><code>.zshrc</code>中加入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">check_fzf_install</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span><span class="token variable">)</span></span>"</span> <span class="token operator">=</span> <span class="token string">"Darwin"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token comment"># for mac</span>
        <span class="token keyword">if</span> <span class="token operator">!</span> <span class="token punctuation">[</span> -x <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">command</span> -v fzf<span class="token variable">)</span></span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token comment"># if ! builtin type fzf >/dev/null 2>&amp;1; then</span>
            <span class="token keyword">if</span> <span class="token punctuation">[</span> -x <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">command</span> -v brew<span class="token variable">)</span></span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
                brew <span class="token function">install</span> fzf
            <span class="token keyword">else</span>
                <span class="token builtin class-name">echo</span> <span class="token string">'There is no brew on your mac; cannot `brew  install fzf`'</span> <span class="token operator">></span><span class="token file-descriptor important">&amp;2</span>
            <span class="token keyword">fi</span>
        <span class="token keyword">fi</span>
    <span class="token keyword">else</span>
    <span class="token comment">#  for unbuntu, debian</span>
        <span class="token builtin class-name">export</span> <span class="token assign-left variable">FZF_BASE</span><span class="token operator">=</span><span class="token string">"~/.fzf"</span>
        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -x <span class="token variable">$FZF_BASE</span>/bin/fzf <span class="token punctuation">]</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
            <span class="token builtin class-name">echo</span> <span class="token string">'There is no fzf. Installing to '</span><span class="token string">"<span class="token variable">$FZF_BASE</span>"</span> <span class="token operator">></span><span class="token file-descriptor important">&amp;2</span>
            <span class="token function">git</span> clone --depth <span class="token number">1</span> https://github.com/junegunn/fzf.git <span class="token variable">$FZF_BASE</span>
            <span class="token variable">$FZF_BASE</span>/install --bin
        <span class="token keyword">fi</span>
    <span class="token keyword">fi</span>
<span class="token punctuation">&#125;</span>

<span class="token comment"># ....</span>

check_fzf_install
antigen bundle fzf

<span class="token comment"># antigen bundle 其他zsh插件</span>

antigen apply<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>
<p>无需执行: <code>$FZF_BASE/install</code>, 这个程序会:</p>
<p>创建 <code>~/.fzf.zsh</code>:  以加载fzf, 定义快捷键 for 历史命令模糊搜索等的操作 在shell下,</p>
<p>给 <code>~/&#123;.bashrc,.zshrc&#125;</code> 添加 <code> [ -f ~/.fzf.zsh ] &amp;&amp; source ~/.fzf.zsh</code></p>
</li>
<li>
<p>而 <code>antigen bundle fzf</code> 命令同样会做上述操作</p>
</li>
</ul>
<h2 id="历史目录跳转"><a class="header-anchor" href="#历史目录跳转"></a>历史目录跳转</h2>
<p>比较各种历史目录跳转的插件, 推荐 <code>z.lua</code>:</p>
<ul>
<li>搜索速度: <code>z.lua</code> 是 <code>z</code> 的三倍, 是 <code>autojump</code> <code>fasd</code> 的十多倍</li>
<li>调用 <code>fzf</code> 在交互模式下模糊查找历史路径: <code>z.lua</code> , <a href="https://github.com/andrewferrier/fzf-z"><code>fzf-z</code></a> 都可以, 但 <code>fzf-z</code> 调用的是 <code>z</code></li>
<li><code>z.lua</code> 功能最丰富: 可以搜 按近期且高频排序的历史路径, 按时间排序的历史路径, 当前路径子历史路径, 当前路径的父路径</li>
</ul>
<h3 id="z-lua"><a class="header-anchor" href="#z-lua"></a>z.lua</h3>
<p><a href="https://github.com/skywind3000/z.lua/blob/master/README.cn.md">z.lua 的 github - 详细介绍</a></p>
<p><strong>安装方法</strong></p>
<p>在 <code>.zshrc</code> 中加入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># --------------------------------------------------------</span>

antigen bundle skywind3000/z.lua
<span class="token builtin class-name">export</span> <span class="token assign-left variable">_ZL_ADD_ONCE</span><span class="token operator">=</span><span class="token number">1</span>   <span class="token comment"># 若为0 则prompt显示一次则计数加1, 若为1则 cd到目录一次则计数加1</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">_ZL_MATCH_MODE</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment"># 启用增强匹配模式</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">_ZL_NO_ALIASES</span><span class="token operator">=</span><span class="token number">0</span> <span class="token comment"># 不用预设alias, 用自己定义的alias</span>

<span class="token comment"># antigen bundle 其他zsh插件</span>

antigen apply

<span class="token comment"># --------------------------------------------------------</span>
<span class="token comment"># 定义z的alias</span>

<span class="token builtin class-name">unalias</span> z
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">zz</span><span class="token operator">=</span>_zlua

<span class="token function-name function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=~</span> <span class="token string">'^(-h|--help)$'</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF
_zlua [-c] 的封装的帮助:
    z [options] [.] 路径中间字段 路径中间字段 路径结尾字段
    z [options] [.] 路径中间字段 路径中间字段 路径未必结尾字段 $
    z [options] [.] 路径中间字段 路径中间字段 /
    加 . : 从当前路径往下匹配
_zlua [其他option] 没有封装
EOF</span>
        <span class="token builtin class-name">echo</span>
        <span class="token builtin class-name">echo</span> 原生的帮助:
        _zlua -h
    <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">'.'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">shift</span>  <span class="token comment"># z匹配当前路径 的历史子路径 -> fzf模糊匹配</span>
        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> -eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
            _zlua -I -c <span class="token builtin class-name">.</span>
        <span class="token keyword">else</span>
            _zlua -I -c <span class="token string">"<span class="token variable">$@</span>"</span>
        <span class="token keyword">fi</span>
    <span class="token keyword">elif</span> <span class="token operator">!</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=~</span> <span class="token string">'^-'</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token comment"># z匹配历史路径, 按访问频率排序 -> fzf模糊匹配</span>
        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> -eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
            _zlua -I <span class="token builtin class-name">.</span>
        <span class="token keyword">else</span>
            _zlua -I <span class="token string">"<span class="token variable">$@</span>"</span>
        <span class="token keyword">fi</span>
    <span class="token keyword">else</span>
        _zlua <span class="token string">"<span class="token variable">$@</span>"</span>
    <span class="token keyword">fi</span>
<span class="token punctuation">&#125;</span>

<span class="token builtin class-name">alias</span> z<span class="token punctuation">..</span><span class="token operator">=</span><span class="token string">'_zlua -b'</span> <span class="token comment"># 跳转到父目录中 名称含foo的那一级</span>

<span class="token function-name function">zh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment"># z匹配历史路径, 按之间排序 -> fzf模糊匹配</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> -eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        _zlua -I -t <span class="token builtin class-name">.</span>
    <span class="token keyword">else</span>
        _zlua -I -t <span class="token string">"<span class="token variable">$@</span>"</span>
    <span class="token keyword">fi</span>
<span class="token punctuation">&#125;</span>
zle -N zh
bindkey <span class="token string">'^h'</span> zh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="autojump"><a class="header-anchor" href="#autojump"></a>autojump</h3>
<p>antigen无法自动安装autojump，故需要手动安装之，然后加入autojump的搜索路径</p>
<h4 id="安装"><a class="header-anchor" href="#安装"></a>安装</h4>
<p>autojump 是一个命令行工具，它允许你可以直接跳转到你喜爱的目录，而不受当前所在目录的限制</p>
<p>首先安装autojump，如果你用 Mac，可以使用 brew 安装：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> autojump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果是 Linux，去下载 autojump 的最新版本</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在任意一个目录下</span>
<span class="token function">git</span> clone git://github.com/joelthelion/autojump.git
<span class="token builtin class-name">cd</span> autojump
./install.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>安装成功会返回如下，要用<code>autojump</code>命令，需先<code>. ~/.autojump/etc/profile.d/autojump.sh</code></p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">Please manually add the following line(s) to ~/.zshrc:

    [[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; source ~/.autojump/etc/profile.d/autojump.sh

    autoload -U compinit &amp;&amp; compinit -u

Please restart terminal(s) before running autojump.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>autojump 安装到<code>~/.autojump/</code>，下载得的 <code>autojump/</code>可删</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> autojump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="配置"><a class="header-anchor" href="#配置"></a>配置</h4>
<ul>
<li>Linux需要先改antigen搜索autojump安装路径的脚本</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.antigen/bundles/robbyrussell/oh-my-zsh/plugins/autojump/autojump.plugin.zsh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 文件开头改成</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> -f <span class="token environment constant">$HOME</span>/.autojump/etc/profile.d/autojump.sh <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token comment"># manual user-local installation</span>
    <span class="token builtin class-name">.</span> <span class="token environment constant">$HOME</span>/.autojump/etc/profile.d/autojump.sh
<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$commands</span><span class="token punctuation">[</span>autojump<span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token comment"># check if autojump is installed</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>而后修改<code>~/.zshrc</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 搜索"antigen use oh-my-zsh"，其下一行加</span>
antigen bundle autojump <span class="token comment"># 使用 antigen 加载 zsh；注释此行则不加载</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>若设置为要加载，重新登录zsh则<code>autojump</code>命令生效</p>
<ul>
<li>Mac直接改<code>~/.zshrc</code>即可</li>
</ul>
<h4 id="使用-_2"><a class="header-anchor" href="#使用-_2"></a>使用</h4>
<p><a href="https://linux.cn/article-3401-1.html">详见</a></p>
<h2 id="zsh语法高亮"><a class="header-anchor" href="#zsh语法高亮"></a>zsh语法高亮</h2>
<p>推荐 <code>fast-syntax-highlighting</code> , 它是 <code>zsh-syntax-highlighting</code> 的升级版, 支持更丰富的语法高亮</p>
<h3 id="fast-syntax-highlighting"><a class="header-anchor" href="#fast-syntax-highlighting"></a>fast-syntax-highlighting</h3>
<p><strong>安装方法</strong></p>
<p>在 <code>.zshrc</code> 中加入</p>
<pre class="line-numbers language-zsh" data-language="zsh"><code class="language-zsh">antigen bundle zdharma&#x2F;fast-syntax-highlighting    # zsh 命令的语法高亮
# antigen bundle 其他zsh插件
antigen apply

# -----------------
# 设置 zdharma&#x2F;fast-syntax-highlighting 的主题
fast-theme &lt;fast-syntax-highlighting内置theme&gt; &gt;&#x2F;dev&#x2F;null
fast-theme &lt;path-to-your-theme&gt;&#x2F;&lt;your_theme&gt;.ini &gt;&#x2F;dev&#x2F;null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>自定义theme详见<a href="https://github.com/zdharma/fast-syntax-highlighting/blob/master/THEME_GUIDE.md">fast-syntax-highlighting 的 github - 安装教程</a></p>
<h3 id="zsh-syntax-highlighting"><a class="header-anchor" href="#zsh-syntax-highlighting"></a>zsh-syntax-highlighting</h3>
<p><strong>安装方法</strong></p>
<p>在 <code>.zshrc</code> 中加入</p>
<pre class="line-numbers language-zsh" data-language="zsh"><code class="language-zsh">antigen bundle zsh-users&#x2F;zsh-syntax-highlighting # zsh 命令的语法高亮
# antigen bundle 其他zsh插件
antigen apply
# -----------------
# 设置 zsh-users&#x2F;zsh-syntax-highlighting 的主题

# syntax color definition
ZSH_HIGHLIGHT_HIGHLIGHTERS&#x3D;(main brackets pattern)

typeset -A ZSH_HIGHLIGHT_STYLES

ZSH_HIGHLIGHT_STYLES[default]&#x3D;none
ZSH_HIGHLIGHT_STYLES[unknown-token]&#x3D;fg&#x3D;009
ZSH_HIGHLIGHT_STYLES[reserved-word]&#x3D;fg&#x3D;red,bold  # &#x3D;fg&#x3D;009,standout
ZSH_HIGHLIGHT_STYLES[alias]&#x3D;fg&#x3D;cyan,bold
ZSH_HIGHLIGHT_STYLES[builtin]&#x3D;fg&#x3D;cyan,bold
ZSH_HIGHLIGHT_STYLES[function]&#x3D;fg&#x3D;cyan,bold
ZSH_HIGHLIGHT_STYLES[command]&#x3D;fg&#x3D;white,bold
ZSH_HIGHLIGHT_STYLES[precommand]&#x3D;fg&#x3D;white,underline
ZSH_HIGHLIGHT_STYLES[commandseparator]&#x3D;none
ZSH_HIGHLIGHT_STYLES[hashed-command]&#x3D;fg&#x3D;009
ZSH_HIGHLIGHT_STYLES[path]&#x3D;fg&#x3D;214,underline
ZSH_HIGHLIGHT_STYLES[globbing]&#x3D;fg&#x3D;063
ZSH_HIGHLIGHT_STYLES[history-expansion]&#x3D;fg&#x3D;white,underline
ZSH_HIGHLIGHT_STYLES[single-hyphen-option]&#x3D;none
ZSH_HIGHLIGHT_STYLES[double-hyphen-option]&#x3D;none
ZSH_HIGHLIGHT_STYLES[back-quoted-argument]&#x3D;none
ZSH_HIGHLIGHT_STYLES[single-quoted-argument]&#x3D;fg&#x3D;063
ZSH_HIGHLIGHT_STYLES[double-quoted-argument]&#x3D;fg&#x3D;063
ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]&#x3D;fg&#x3D;009
ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]&#x3D;fg&#x3D;009
ZSH_HIGHLIGHT_STYLES[assign]&#x3D;none<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="zsh的自动补全"><a class="header-anchor" href="#zsh的自动补全"></a>zsh的自动补全</h1>
<h2 id="复用现有命令的自动补全"><a class="header-anchor" href="#复用现有命令的自动补全"></a>复用现有命令的自动补全</h2>
<p>在<code>~/.bash_aliases</code>中设置</p>
<ul>
<li>凡如下设置的<code>[新命令]</code>会自动继承<code>[现有命令]</code>的zsh自动补全</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">alias [新命令]&#x3D;&#39;[现有命令] ...其他参数&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><code>[新命令]</code>(函数)继承<code>[现有命令]</code>的zsh自动补全</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 该alias会使得 [新命令] 继承[现有命令]的zsh自动补全</span>
<span class="token builtin class-name">alias</span> <span class="token punctuation">[</span>新命令<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'[现有命令]'</span>
<span class="token comment"># 该函数会覆盖'alias [新命令]'</span>
<span class="token keyword">function</span> <span class="token punctuation">[</span>新命令<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token punctuation">..</span>.
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="zsh语法和bash的区别"><a class="header-anchor" href="#zsh语法和bash的区别"></a>zsh语法和bash的区别</h1>
<h3 id="判断是在哪种shell下"><a class="header-anchor" href="#判断是在哪种shell下"></a>判断是在哪种shell下</h3>
<p>以下对 bash, zsh, sh均适用</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>flag 变量/flag命令</th>
<th><code>$SHELL</code></th>
<th><code>$ZSH_NAME </code> 或 <code>$ZSH_VERSION</code> 是否未定义</th>
<th><code>$BASH_VERSION</code> 是否未定义</th>
<th><code>ps -p $$ | tail -n1 | awk '&#123;printf $4&#125; | sed -E 's/^\-//‘'</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>非登录或非登录式 <br>交互式</td>
<td>不论是登录shell1, 还是运行<code>&lt;shell1&gt;</code>进入shell1<br>在shell1下, 直接输出 flag 变量或运行flag命令</td>
<td>shell1</td>
<td>当且仅当shell1=zsh时有定义</td>
<td>当且仅当shell1=bash时有定义</td>
<td>返回字符串 <code>“&lt;shell1&gt;”</code></td>
</tr>
<tr>
<td>登录式 <br>非交互式</td>
<td>在shell0 下 执行<br><code>ssh &lt;服务器&gt;  echo flag变量</code><br><code>ssh &lt;服务器&gt;  flag命令</code><br>服务器默认用shell1</td>
<td>shell1</td>
<td>当且仅当shell1=zsh时有定义</td>
<td>当且仅当shell1=bash时有定义</td>
<td>返回字符串 <code>“&lt;shell1&gt;”</code></td>
</tr>
<tr>
<td>非登录式 <br>非交互式</td>
<td>在shell0下, 执行命令<code>&lt;shell1&gt; -c '命令'</code><br>在shell0下, 执行<code>&lt;shell1&gt; 文件</code><br>注意 <code>./文件</code> 等价于 <code>sh 文件</code></td>
<td><strong>shell0</strong></td>
<td>当且仅当<strong>shell0</strong>=zsh时有定义</td>
<td>当且仅当<strong>shell0</strong>=bash时有定义</td>
<td>返回字符串 <code>“&lt;shell1&gt;”</code></td>
</tr>
</tbody>
</table>
<p>建议:</p>
<ul>
<li><strong><code>ps -p $$ | tail -n1 | awk '&#123;printf $4&#125;' | sed -E 's/^\-//'</code>   会返回字符串 <code>“&lt;shell1&gt;”</code>, 适用最广的方法, shell1可以为sh/bash/zsh等, 一般就用之.</strong></li>
<li><code>ps -p $$ | tail -n1 | awk '&#123;printf $4&#125;’ </code>    在交互式zsh下返回”-zsh”, 在非交互式zsh下返回”zsh”.</li>
</ul>
<p>注意:</p>
<ul>
<li>
<p>单独运行  <code>&lt;shell1&gt; -c 'ps -p $$’</code>, 则会返回如下形式, 其中不包含<code>&lt;shell1&gt;</code></p>
<pre class="line-numbers language-none"><code class="language-none"> PID TTY           TIME CMD
75670 ttys007    0:00.03 ps -p 75670<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>
<p>运行  <code>&lt;shell1&gt; -c '一组命令’</code>, 一组命令里包含<code>ps -p $$</code></p>
<p>一组命令:</p>
<ul>
<li>可以是用管道组合起来</li>
<li>也可以是用<code>;</code>组合起来</li>
<li>还可以是包含了重定向, 例如<code>ps -p $$ 2&gt;&amp;1</code></li>
</ul>
<p>则会返回如下形式, 其中包含<code>&lt;shell1&gt;</code></p>
<pre class="line-numbers language-none"><code class="language-none">#  PID TTY           TIME CMD
# 76074 ttys007    0:00.03 bash -c 一组命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>例如</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> -c <span class="token string">'ps -p $$ 2>&amp;1'</span>
<span class="token comment"># 返回</span>
<span class="token comment">#  PID TTY           TIME CMD</span>
<span class="token comment"># 76074 ttys007    0:00.03 bash -c ps -p $$ 2>&amp;1</span>
<span class="token function">bash</span> -c <span class="token string">'echo 1; ps -p $$'</span>
<span class="token comment">#  PID TTY           TIME CMD</span>
<span class="token comment"># 76147 ttys007    0:00.03 bash -c echo 1; ps -p $$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="感叹号"><a class="header-anchor" href="#感叹号"></a>感叹号</h3>
<p>zsh的感叹号不论是否在方括号内，都是表示历史记录功能</p>
<p>bash的感叹号在方括号内表示非，不在方括号内时表示历史记录</p>
<p>例如输出当前目录下所有隐藏文件与文件夹</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> .<span class="token punctuation">[</span><span class="token operator">!</span>.<span class="token punctuation">]</span>*
<span class="token comment"># bash下正常执行,输出当前目录下所有隐藏文件与文件夹</span>
<span class="token comment"># zsh下报错</span>
<span class="token comment">#     zsh: event not found: .]</span>
<span class="token comment"># 这是因为zsh把`!.]`理解成以`.]`开头的历史命令</span>
<span class="token builtin class-name">echo</span> .<span class="token punctuation">[</span><span class="token string">'!'</span>.<span class="token punctuation">]</span>*
<span class="token comment"># bash下正常执行,输出当前目录下所有隐藏文件与文件夹</span>
<span class="token comment"># bash下输出</span>
<span class="token comment">#      ..</span>
<span class="token comment"># 这是因为bash把`.['!'.]* `理解成第一个字符是"."，第二个字符是引号感叹号或句点，而后是任意字符(可空)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>zsh中：<code>.*</code>等价于<code>.['!'.]* </code>，都不包含<code>..</code>，只包含此目录下所有隐藏文件与文件夹</p>
<p>bash中：<code>.*</code>包含都不包含<code>..</code>和此目录下所有隐藏文件与文件夹；<code>.[!.]* </code>才不包含<code>..</code>，只包含此目录下所有隐藏文件与文件夹</p>
<h1 id="shell的状态类型"><a class="header-anchor" href="#shell的状态类型"></a>shell的状态类型</h1>
<h3 id="预备知识——shell的状态类型"><a class="header-anchor" href="#预备知识——shell的状态类型"></a>预备知识——shell的状态类型</h3>
<table>
<thead>
<tr>
<th></th>
<th>交互</th>
<th>非交互</th>
</tr>
</thead>
<tbody>
<tr>
<td>登录</td>
<td>ssh登录服务器; 打开iTerm2登录笔记本</td>
<td><code>ssh &lt;服务器&gt; &lt;命令&gt;</code></td>
</tr>
<tr>
<td>非登录</td>
<td><code>zsh或bash</code></td>
<td><code>zsh或bash -c '&lt;命令&gt;'</code>或<code>zsh或bash 文件</code></td>
</tr>
</tbody>
</table>
<h3 id="判断方法"><a class="header-anchor" href="#判断方法"></a>判断方法</h3>
<p>参考：<a href="https://zhuanlan.zhihu.com/p/47819029">千万别混淆 Bash/Zsh 的四种运行模式</a></p>
<table>
<thead>
<tr>
<th></th>
<th>bash</th>
<th>zsh</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>是否是登录且交互</strong></td>
<td><code>if [[ $0 = -* ]]</code> 或<code>if [[ $(shopt login_shell) = *on ]]</code></td>
<td><code>if [[ -o login ]] </code></td>
</tr>
<tr>
<td>是否交互</td>
<td><code>if [[ $- = *i* ]]</code></td>
<td><code>if [[ -o interactive ]]</code> 或 <code>if [[ $- = *i* ]]</code> 或 `if [ “${ZSH-no}” != no ]</td>
</tr>
</tbody>
</table>
<p>在任何bash环境下，以下两种的结果相同</p>
<ul>
<li>文件中写&lt;判断命令&gt;再<code>. 文件</code></li>
<li>直接执行&lt;判断命令&gt;</li>
</ul>
<p><strong>示例</strong></p>
<ul>
<li>bash</li>
</ul>
<table>
<thead>
<tr>
<th>场景 \  返回  \ &lt;命令&gt;</th>
<th><code>echo $-</code></th>
<th><code>echo $0</code></th>
<th><code>echo $&#123;BASH-no&#125;</code></th>
<th>是否是登录</th>
<th>是否交互</th>
</tr>
</thead>
<tbody>
<tr>
<td>bash 为默认shell，ssh登录后，执行命令</td>
<td>himBH</td>
<td>-bash</td>
<td>/bin/bash</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>ssh登录后，<code>bash</code> 后，执行命令</td>
<td>himBH</td>
<td>bash</td>
<td>/bin/bash</td>
<td>no</td>
<td>yes</td>
</tr>
<tr>
<td><code>ssh &lt;服务器&gt; &lt;命令&gt;</code>, bash 为服务器默认shell</td>
<td>hBc</td>
<td>bash</td>
<td>/bin/bash</td>
<td>yes</td>
<td>no</td>
</tr>
<tr>
<td><code>bash  -c '&lt;命令&gt;'</code></td>
<td>hBc</td>
<td>bash</td>
<td>/bin/bash</td>
<td>no</td>
<td>no</td>
</tr>
<tr>
<td>在当前位置执行<code>bash 文件</code>，文件中有&lt;命令&gt;</td>
<td>hB</td>
<td>&lt;文件相对当前位置的路径&gt;</td>
<td>/bin/bash</td>
<td>no</td>
<td>no</td>
</tr>
</tbody>
</table>
<ul>
<li>zsh</li>
</ul>
<table>
<thead>
<tr>
<th>场景 \  返回  \ &lt;命令&gt;</th>
<th><code>echo $-</code></th>
<th><code>echo $0</code></th>
<th><code>echo $&#123;ZSH-no&#125;</code> )</th>
<th>是否是登录</th>
<th>是否交互</th>
</tr>
</thead>
<tbody>
<tr>
<td>zsh为默认shell，ssh登录后，执行命令</td>
<td>3569JNRXZghiklms</td>
<td>-zsh</td>
<td>/Users/mac/.antigen/bundles/robbyrussell/oh-my-zsh</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>ssh登录后，<code>zsh</code> 后，执行命令</td>
<td>3569JNRXZghikms</td>
<td>zsh</td>
<td>/Users/mac/.antigen/bundles/robbyrussell/oh-my-zsh</td>
<td>no</td>
<td>yes</td>
</tr>
<tr>
<td><code>ssh &lt;服务器&gt; &lt;命令&gt;</code></td>
<td>569X</td>
<td>zsh</td>
<td>no</td>
<td>yes</td>
<td>no</td>
</tr>
<tr>
<td><code>zsh  -c '&lt;命令&gt;'</code></td>
<td>569X</td>
<td>zsh</td>
<td>no</td>
<td>no</td>
<td>no</td>
</tr>
<tr>
<td>在当前位置执行<code>zsh 文件</code>，文件中有&lt;命令&gt;</td>
<td>569X</td>
<td>&lt;文件相对当前位置的路径&gt;</td>
<td>no</td>
<td>no</td>
<td>no</td>
</tr>
</tbody>
</table>
<p>注:</p>
<ul>
<li><code>$&#123;variable-xxxx&#125;</code>: 若变量 <code>variable</code>无定义, 则返回“xxxx”, 有定义则返回<code>$&#123;variable&#125;</code></li>
</ul>
<h1 id="zsh和bash共存的用户目录组织逻辑"><a class="header-anchor" href="#zsh和bash共存的用户目录组织逻辑"></a>zsh和bash共存的用户目录组织逻辑</h1>
<ul>
<li>各种shell的dot 文件</li>
<li>CONF、shareENV、serverENV、localENV分开</li>
</ul>
<h3 id="文件夹结构"><a class="header-anchor" href="#文件夹结构"></a>文件夹结构</h3>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;home&#x2F;$USER&#x2F;
    一堆软链接点文件，指向CONF下的文件，详见下[#软连接]
    init_script&#x2F;
        系统环境安装脚本
    ENV&#x2F;
        CONF&#x2F;
            一堆软链接点文件，指向shareENV、serverENV、localENV下的文件，详见下[#软连接]
        shareENV&#x2F;     ------- 一个repo，笔记本、服务器共用，每次登录登出时同步
            local&#x2F;
                bin&#x2F;
                man&#x2F;
                ...
            script&#x2F;
            shell_config&#x2F;
                zsh、bash、所有shell通用的点文件
            app_config&#x2F;
                tmux、ipython、jupyter通用的点文件
        serverENV&#x2F;    ------- 一个repo，服务器共用，每次登录登出时同步
            (结构同shareENV&#x2F;)
            app_config&#x2F;
                .shadowsocks    : shadowsocks ips
            nvim&#x2F;             : neovim 的镜像及其解压文件夹
            ...
        localENV&#x2F;     ------- 一个文件夹，该服务器自己用的，不同步
            (结构同shareENV&#x2F;)
        其他共享ENV ------- 一个repo，在我的一些电脑之间共用，每次登录登出时同步
            (结构同shareENV&#x2F;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="我设计的点文件的加载逻辑"><a class="header-anchor" href="#我设计的点文件的加载逻辑"></a>我设计的点文件的加载逻辑</h3>
<p>执行顺序从上到下</p>
<table>
<thead>
<tr>
<th>执行场景</th>
<th>自定义共用文件</th>
<th>zsh</th>
<th>bash</th>
</tr>
</thead>
<tbody>
<tr>
<td>总执行</td>
<td>.env: 定义环境变量、定义登录登出的文件同步函数；非交互则加载.aliases</td>
<td>.zshenv: <strong>总是触发</strong>; 加载.env</td>
<td>.bash_env: <strong>登录但非交互 触发</strong>; 加载.env</td>
</tr>
<tr>
<td></td>
<td>.aliases: 包括别名和shell函数</td>
<td></td>
<td></td>
</tr>
<tr>
<td>登录</td>
<td>.login: git pull共享文件</td>
<td>.zprofile: <strong>登录触发</strong>;加载.login</td>
<td>.bash_profile: <strong>登录触发</strong>; 加载.bash_env, .login, .bashrc</td>
</tr>
<tr>
<td>交互</td>
<td>无</td>
<td>.zshrc: <strong>交互触发</strong>; 交互则加载.aliases</td>
<td>.bashrc: <strong>非登录但交互 触发</strong>; 若非登录则加载.bash_env, 交互则加载.aliases</td>
</tr>
<tr>
<td>登出</td>
<td>.logout: git push共享文件; 打扫卫生</td>
<td>.zlogout: <strong>登出触发</strong>;加载.logout</td>
<td>.bash_logout: <strong>登出触发</strong>;加载.logout</td>
</tr>
</tbody>
</table>
<p>触发：即系统自动加载此文件的触发条件</p>
<p>加载：即在此文件内，source了别的文件</p>
<p>登出：不论是敲命令(<code>exit</code> <code>logout</code> <code>reboot</code>)登出，还是ssh连接中断(如客户端直接关闭iTerm窗口、断网)，都会触发登出文件。</p>
<p><strong>特别设置</strong></p>
<p>bash的非交互需要额外设置</p>
<ul>
<li>
<p>登录式的非交互：若bash是默认shell，<code>ssh &lt;服务器&gt; &lt;命令&gt;</code>，不执行<code>~/.bash_env</code>，<strong>没有找到办法</strong>；只能</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token operator">&lt;</span>服务器<span class="token operator">></span> '. ~/.bash_env <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>命令<span class="token operator">></span>’<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>
<p>非登录式的非交互：<code>bash -c '&lt;命令&gt;'</code>或<code>bash 文件</code>，在.env中添加一行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">BASH_ENV</span><span class="token operator">=~</span>/.bash_env   <span class="token comment"># 可登录后，非交互bash加载之</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<p>zsh 在上述情况都会自动加载<code>~/.zshenv</code>，无需另外设置</p>
<h3 id="软链接"><a class="header-anchor" href="#软链接"></a>软链接</h3>
<h4 id="HOME"><a class="header-anchor" href="#HOME"></a><code>$HOME/</code></h4>
<p><code>$HOME=/home/$USER/ENV/CONF</code></p>
<p><code>$shareENV=/home/$USER/ENV/shareENV</code></p>
<p><code>$serverENV=/home/$USER/ENV/serverENV</code></p>
<table>
<thead>
<tr>
<th>源文件</th>
<th>目标文件</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$HOME/</code></td>
<td><code>$shareENV/app/</code></td>
</tr>
<tr>
<td>.gitignore_global</td>
<td>…/shareENV/app_config/.gitignore_global</td>
</tr>
<tr>
<td>.gitconfig</td>
<td>…/shareENV/app_config/.gitconfig</td>
</tr>
<tr>
<td>.ipython</td>
<td>…/shareENV/app_config/.ipython/</td>
</tr>
<tr>
<td>.jupyter</td>
<td>…/shareENV/app_config/.jupyter/</td>
</tr>
<tr>
<td>.tmux.conf</td>
<td>…/shareENV/app_config/.tmux.conf</td>
</tr>
<tr>
<td>.vimrc.bundles</td>
<td>…/shareENV/app_config/vim/.vimrc.bundles</td>
</tr>
<tr>
<td>.vim</td>
<td>…/shareENV/app_config/vim/.vim/</td>
</tr>
<tr>
<td>.vimrc</td>
<td>…/shareENV/app_config/vim/.vimrc</td>
</tr>
<tr>
<td><code>$HOME/</code></td>
<td><code>$serverENV/app/</code></td>
</tr>
<tr>
<td>.shadowsocks</td>
<td>…/serverENV/app_config/.shadowsocks/</td>
</tr>
<tr>
<td><code>$HOME/</code></td>
<td><code>$shareENV/shell_config/</code></td>
</tr>
<tr>
<td>.autojump</td>
<td>…/shareENV/shell_config/.autojump/</td>
</tr>
<tr>
<td><code>$HOME/</code></td>
<td><code>$$ENV/.shell_config/</code></td>
</tr>
<tr>
<td>.env</td>
<td>…/CONF/.shell_config/.env</td>
</tr>
</tbody>
</table>
<h4 id="home-USER"><a class="header-anchor" href="#home-USER"></a><code>/home/$USER/</code></h4>
<table>
<thead>
<tr>
<th>源文件</th>
<th>目标文件</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>/home/$USER/</code></td>
<td><code>$HOME</code></td>
</tr>
<tr>
<td>.bash_env</td>
<td>ENV/CONF/.bash_env</td>
</tr>
<tr>
<td>.bash_history</td>
<td>ENV/CONF/.bash_history</td>
</tr>
<tr>
<td>.cache</td>
<td>ENV/CONF/.cache/</td>
</tr>
<tr>
<td>.env</td>
<td>ENV/CONF/.shell_config/.env</td>
</tr>
<tr>
<td>.bash_profile</td>
<td>ENV/CONF/.bash_profile</td>
</tr>
<tr>
<td>.ssh</td>
<td>ENV/CONF/.ssh/</td>
</tr>
<tr>
<td>.zcompdump</td>
<td>ENV/CONF/.zcompdump</td>
</tr>
<tr>
<td>.zshenv</td>
<td>ENV/CONF/.zshenv</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>器</category>
        <category>shell</category>
      </categories>
  </entry>
  <entry>
    <title>zsh自动补全的复用</title>
    <url>/posts/f5080174/</url>
    <content><![CDATA[<h2 id="zsh的自动补全"><a class="header-anchor" href="#zsh的自动补全"></a>zsh的自动补全</h2>
<p><code>zsh-completions</code>是zsh官方支持的自动补全包</p>
<p>使用<code>antigen</code>管理zsh插件的话，<code>zsh-completions</code>的路径在<code>~/.antigen/bundles/zsh-users/zsh-completions/src</code>，其下有众多文件名如<code>_xxx</code>，分别定义了<code>xxx</code>命令的补全。</p>
<h3 id="机理"><a class="header-anchor" href="#机理"></a>机理</h3>
<p>zsh 有一数组 <code>$fpath</code>，内容如</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">declare</span> -p fpath<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<pre class="line-numbers language-none"><code class="language-none">typeset -a fpath&#x3D;( &#x2F;usr&#x2F;local&#x2F;share&#x2F;zsh&#x2F;site-functions &#x2F;Users&#x2F;mac&#x2F;.autojump&#x2F;functions &#x2F;usr&#x2F;share&#x2F;zsh&#x2F;site-functions &#x2F;usr&#x2F;share&#x2F;zsh&#x2F;5.3&#x2F;functions &#x2F;Users&#x2F;mac&#x2F;.antigen&#x2F;bundles&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;lib &#x2F;Users&#x2F;mac&#x2F;.antigen&#x2F;bundles&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;plugins&#x2F;autojump &#x2F;Users&#x2F;mac&#x2F;.antigen&#x2F;bundles&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;plugins&#x2F;pip &#x2F;Users&#x2F;mac&#x2F;.antigen&#x2F;bundles&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;plugins&#x2F;svn-fast-info &#x2F;Users&#x2F;mac&#x2F;.antigen&#x2F;bundles&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;plugins&#x2F;colorize &#x2F;Users&#x2F;mac&#x2F;.antigen&#x2F;bundles&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;plugins&#x2F;github &#x2F;Users&#x2F;mac&#x2F;.antigen&#x2F;bundles&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;plugins&#x2F;python &#x2F;Users&#x2F;mac&#x2F;.antigen&#x2F;bundles&#x2F;zsh-users&#x2F;zsh-autosuggestions &#x2F;Users&#x2F;mac&#x2F;.antigen&#x2F;bundles&#x2F;zsh-users&#x2F;zsh-completions &#x2F;Users&#x2F;mac&#x2F;.antigen&#x2F;bundles&#x2F;Vifon&#x2F;deer &#x2F;Users&#x2F;mac&#x2F;.antigen&#x2F;bundles&#x2F;willghatch&#x2F;zsh-cdr &#x2F;Users&#x2F;mac&#x2F;.antigen&#x2F;bundles&#x2F;zsh-users&#x2F;zsh-syntax-highlighting &#x2F;Users&#x2F;mac&#x2F;.antigen&#x2F;bundles&#x2F;zsh-users&#x2F;zsh-completions&#x2F;src )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p>表示zsh启动时会从这些路径下加载<code>_xxx</code>文件，当zsh加载fpath所有文件后，会生成相应的<code>_xxx</code>函数，例如</p>
<p><code>~/.antigen/bundles/zsh-users/zsh-completions/src/_tmuxp</code>文件定义了<code>_tmuxp</code>自动补全函数，(未定义<code>_tmux</code>函数)，而zsh加载后会自动生成<code>_tmux</code>函数</p>
<h3 id="复用zsh的自动补全函数"><a class="header-anchor" href="#复用zsh的自动补全函数"></a>复用zsh的自动补全函数</h3>
<p><a href="https://github.com/zsh-users/zsh-completions/blob/master/zsh-completions-howto.org">参见</a></p>
<h4 id="基本原理"><a class="header-anchor" href="#基本原理"></a>基本原理</h4>
<ul>
<li>
<p>直接复用：<code>bar</code> 函数 要 复用<code>foo</code>函数的自动补全</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 函数 bar的定义可写在其前</span>
compdef _foo bar
<span class="token comment"># 函数 bar的定义也可写在其后</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>复用带参的：<code>bar</code> 函数 要 复用 <code>foo &lt;一个或多个参数&gt;</code> 的自动补全</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建一个空函数foo_copy_comp，使其补全与foo同</span>
<span class="token function-name function">foo_copy_comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#125;</span>
compdef _foo foo_copy_comp
<span class="token comment"># zsh的自动补全支持alias，故而bar的自动补全与'foo &lt;一个或多个参数>'命令同</span>
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">bar</span><span class="token operator">=</span><span class="token string">'foo_copy_comp &lt;一个或多个参数>'</span>

<span class="token comment"># 函数 bar的定义要写在其后</span>
<span class="token function-name function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token comment"># ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当bar函数定义后，alias bar与bar函数共存：</p>
<ul>
<li><code>which bar</code> 返回的是&quot; alias bar=‘foo_copy_comp &lt;一个或多个参数&gt;’ &quot;</li>
<li><code>bar &lt;TAB键&gt;</code> 会显示<code>foo &lt;一个或多个参数&gt;</code>命令之后的自动补全</li>
<li>运行<code>bar &lt;其他参数&gt;</code>命令，会执行<code>bar</code> 函数，而非alias bar</li>
</ul>
</li>
</ul>
<h4 id="配置示例"><a class="header-anchor" href="#配置示例"></a>配置示例</h4>
<ul>
<li>
<p>关闭全局的<code>compinit</code>：在全局<code>zshrc</code>文件( mac: <code>/etc/zshrc</code>, linux:<code>/etc/zsh/zshrc</code> ) 中，搜<code>compinit</code>，若发现如下内容，则将<code>skip_global_compinit=1</code>解除注释；若没发现<code>compinit</code>，则不管。</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># If you don't want compinit called here, place the line</span>
<span class="token comment"># skip_global_compinit=1    # 这行要解注释</span>
<span class="token comment"># in your $ZDOTDIR/.zshenv or $ZDOTDIR/.zprofile</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> -z <span class="token string">"<span class="token variable">$skip_global_compinit</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  autoload -U compinit
  compinit
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样设置的原因是：在<code>~/.zshrc</code>中需要运行<code>autoload -U compinit &amp;&amp; compinit</code>(如下一段)，来使得<code>compdef</code>有定义。但是运行这个比较花时间，全局<code>zshrc</code>文件没必要也运行一遍。</p>
<p>注： 每次启动zsh（不论登录、非登录，交互、非交互），先会运行全局<code>zshrc</code>文件，再运行<code>~/.zshrc</code>。</p>
</li>
<li>
<p>配置自动补全：在<code>~/.zshrc</code>中写</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 初始化zsh的自动补全，从而conpdef函数有定义了</span>
autoload -U compinit <span class="token operator">&amp;&amp;</span> compinit

<span class="token comment"># ----------直接复用--------------</span>
<span class="token comment"># auto_rsync 函数 复用 rsync的补全函数</span>
compdef _rsync auto_rsync

<span class="token comment"># ---------复用带参的--------------</span>
<span class="token comment"># itm 函数 复用 'tmux -CC attach -t' 的补全函数</span>
<span class="token function-name function">tmux_itm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token builtin class-name">:</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>
compdef _tmux tmux_itm
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">itm</span><span class="token operator">=</span><span class="token string">'tmux_itm -CC attach -t'</span>

<span class="token comment">## 注意, 两个alias 不能共用同一个 tmux_itm, 不然这两个alias对应的函数会冲突</span>
<span class="token comment">## 例如下面这样是不行的</span>
<span class="token comment"># alias itm1='tmux_itm -CC attach -t'</span>
<span class="token comment"># alias itm2='tmux_itm -CC attach -t'</span>
<span class="token comment">## 后面定义 itm1函数 和 itm2函数,</span>
<span class="token comment"># 则 itm1函数 和  itm2函数 会冲突, 即两个函数名, 对应到同一个函数体</span>

<span class="token comment"># 允许在有`alias foo=...`时，再定义函数`foo() &#123;  .... &#125;`</span>
<span class="token builtin class-name">set</span> -o ALIAS_FUNC_DEF <span class="token operator">></span> /dev/null <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>定义补全函数：在<code>~/.zshrc</code> 配置自动补全的后面,  <code>source ~/.aliases</code> , 而  <code>source ~/.aliases</code> 中定义补全函数</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ----------直接复用--------------</span>
<span class="token comment"># 带断点续传的rsync</span>
<span class="token function-name function">auto_rsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">local</span> <span class="token assign-left variable">retry_time</span><span class="token operator">=</span><span class="token number">180</span>
    <span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span>
    <span class="token keyword">do</span>
        <span class="token function">rsync</span> -aHhvzP <span class="token variable">$*</span>
        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$?</span>"</span> <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token punctuation">]</span>
        <span class="token keyword">then</span>
            <span class="token builtin class-name">echo</span> <span class="token string">"rsync completed normally"</span>
            <span class="token builtin class-name">break</span>
        <span class="token keyword">else</span>
            <span class="token builtin class-name">echo</span> <span class="token string">"Rsync failure. Backing off and retrying in <span class="token variable">$retry_time</span> seconds..."</span>
            <span class="token function">sleep</span> <span class="token variable">$retry_time</span>
        <span class="token keyword">fi</span>
    <span class="token keyword">done</span>
<span class="token punctuation">&#125;</span>

<span class="token comment"># ---------复用带参的--------------</span>
<span class="token comment"># itm 函数覆盖 alias itm='tmux_itm -CC attach -t'</span>
<span class="token function-name function">itm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment"># 注意：若已经定义了alias itm，需要把前三个参数`-CC attach -t`过掉</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">alias</span> itm <span class="token operator"><span class="token file-descriptor important">2</span>></span> /dev/null<span class="token variable">)</span></span>"</span> <span class="token operator">!=</span> <span class="token string">''</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token builtin class-name">shift</span><span class="token punctuation">;</span> <span class="token keyword">done</span>
    <span class="token keyword">fi</span>

    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        tmux -CC attach <span class="token operator">||</span> tmux -CC new -s default
    <span class="token keyword">else</span>
        <span class="token builtin class-name">local</span> <span class="token assign-left variable">session</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$1</span>"</span>
        tmux -CC attach -t <span class="token string">"<span class="token variable">$&#123;session&#125;</span>"</span> <span class="token operator">||</span> tmux -CC new -s <span class="token string">"<span class="token variable">$&#123;session&#125;</span>"</span>
    <span class="token keyword">fi</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意：复用<code>foo &lt;n个参数&gt;</code>，要仿照上面的代码，把前n个参数过掉。</p>
<h2 id="用文件列表做自动补全"><a class="header-anchor" href="#用文件列表做自动补全"></a>用文件列表做自动补全</h2>
<p>用<code>$base_dir</code>下面的子文件夹 的 名称（而不是绝对路径）作为 自定义函数<code>f</code> 的自动补全。在zsh和bash下的补全函数写法，分别如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 自定义函数</span>
<span class="token function-name function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"subdir: <span class="token variable">$i</span>"</span>
    <span class="token keyword">done</span>
<span class="token punctuation">&#125;</span>

<span class="token comment"># 用$base_dir下面的子文件夹 的 名称（而不是绝对路径）作为 f 的自动补全</span>
<span class="token assign-left variable">current_shell</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ps</span> -p $$ -o <span class="token assign-left variable">comm</span><span class="token operator">=</span><span class="token variable">)</span></span>

<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$current_shell</span>"</span> <span class="token operator">==</span> <span class="token string">"-zsh"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> <span class="token builtin class-name">command</span> -v compdef <span class="token operator">&amp;></span>/dev/null <span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token comment">#  当前是交互式zsh 且存在compdef命令</span>
    <span class="token comment"># -zsh 表示交互式zsh</span>
    <span class="token function-name function">_f_zsh_completion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment"># 列出$base_dir目录下的所有子文件夹</span>
        <span class="token builtin class-name">local</span> <span class="token assign-left variable">dirs</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable"><span class="token variable">$(</span><span class="token function">find</span> $base_dir -mindepth <span class="token number">1</span> -maxdepth <span class="token number">1</span> -type d -exec <span class="token function">basename</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span class="token variable">)</span></span><span class="token punctuation">)</span>
        <span class="token comment"># 在zsh中，若dirs中包括特殊字符，如@，不会影响显示自动补全</span>
        _describe <span class="token string">'directory'</span> <span class="token function">dirs</span>
    <span class="token punctuation">&#125;</span>
    compdef _f_zsh_completion f
    
<span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$current_shell</span>"</span> <span class="token operator">==</span> <span class="token string">"bash"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> <span class="token builtin class-name">command</span> -v complete <span class="token operator">&amp;></span>/dev/null <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token comment">#  当前是bash（不论交互还是非交互式） 且存在complete命令</span>
    <span class="token function-name function">_f_bash_completion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token builtin class-name">local</span> cur opts <span class="token comment"># prev</span>
        <span class="token assign-left variable">cur</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;COMP_WORDS<span class="token punctuation">[</span>COMP_CWORD<span class="token punctuation">]</span>&#125;</span>"</span>
        <span class="token comment"># prev="$&#123;COMP_WORDS[COMP_CWORD - 1]&#125;"   # 当前参数前的一个参数</span>

        <span class="token assign-left variable">opts</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable"><span class="token variable">$(</span><span class="token function">find</span> $base_dir -mindepth <span class="token number">1</span> -maxdepth <span class="token number">1</span> -type d <span class="token operator">|</span> <span class="token function">xargs</span> -n1 <span class="token function">basename</span> <span class="token variable">)</span></span><span class="token punctuation">)</span>
        <span class="token comment"># 在bash中，若dirs中包括特殊字符，如@，则因特殊符号符号的干扰，无法显示自动补全</span>
        <span class="token assign-left variable">COMPREPLY</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable"><span class="token variable">$(</span>compgen -W <span class="token string">"<span class="token variable">$&#123;opts<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span>"</span>  -- <span class="token string">"<span class="token variable">$&#123;cur&#125;</span>"</span><span class="token variable">)</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment"># 将补全功能绑定到函数 f</span>
    complete -F _f_bash_completion f
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>器</category>
        <category>shell</category>
      </categories>
  </entry>
</search>
